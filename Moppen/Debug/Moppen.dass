
./Debug/Moppen.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 */
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f804 	bl	20000010 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <main>:
	move_object,
	set_object_speed,
	pong_set_position
	};

void main(int argc, char **argv){
20000010:	b590      	push	{r4, r7, lr}
20000012:	b08f      	sub	sp, #60	; 0x3c
20000014:	af00      	add	r7, sp, #0
20000016:	6078      	str	r0, [r7, #4]
20000018:	6039      	str	r1, [r7, #0]
	#ifdef USBDM
		*((unsigned long *)0x40023830) = 0x18;
		__asm volatile(" LDR R0,=0x08000209\n BLX R0 \n");
	#endif
	#ifdef ascii
		ascii_init_app();
2000001a:	f000 ff66 	bl	20000eea <ascii_init_app>
		ascii_init();
2000001e:	f000 ff09 	bl	20000e34 <ascii_init>
		ascii_gotoxy(1,1);
20000022:	2101      	movs	r1, #1
20000024:	2001      	movs	r0, #1
20000026:	f000 ff46 	bl	20000eb6 <ascii_gotoxy>
		char *s;
		char string1[] = "Player 1: ";
2000002a:	2018      	movs	r0, #24
2000002c:	183b      	adds	r3, r7, r0
2000002e:	4a4a      	ldr	r2, [pc, #296]	; (20000158 <main+0x148>)
20000030:	ca12      	ldmia	r2!, {r1, r4}
20000032:	c312      	stmia	r3!, {r1, r4}
20000034:	8811      	ldrh	r1, [r2, #0]
20000036:	8019      	strh	r1, [r3, #0]
20000038:	7892      	ldrb	r2, [r2, #2]
2000003a:	709a      	strb	r2, [r3, #2]
		s = string1;
2000003c:	183b      	adds	r3, r7, r0
2000003e:	637b      	str	r3, [r7, #52]	; 0x34
	while (*s)
20000040:	e006      	b.n	20000050 <main+0x40>
		ascii_write_char(*s++);
20000042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000044:	1c5a      	adds	r2, r3, #1
20000046:	637a      	str	r2, [r7, #52]	; 0x34
20000048:	781b      	ldrb	r3, [r3, #0]
2000004a:	0018      	movs	r0, r3
2000004c:	f000 ff15 	bl	20000e7a <ascii_write_char>
	while (*s)
20000050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000052:	781b      	ldrb	r3, [r3, #0]
20000054:	2b00      	cmp	r3, #0
20000056:	d1f4      	bne.n	20000042 <main+0x32>
	ascii_gotoxy(11,2);
20000058:	2102      	movs	r1, #2
2000005a:	200b      	movs	r0, #11
2000005c:	f000 ff2b 	bl	20000eb6 <ascii_gotoxy>
	char string2[] = "Player 2: ";
20000060:	200c      	movs	r0, #12
20000062:	183b      	adds	r3, r7, r0
20000064:	4a3d      	ldr	r2, [pc, #244]	; (2000015c <main+0x14c>)
20000066:	ca12      	ldmia	r2!, {r1, r4}
20000068:	c312      	stmia	r3!, {r1, r4}
2000006a:	8811      	ldrh	r1, [r2, #0]
2000006c:	8019      	strh	r1, [r3, #0]
2000006e:	7892      	ldrb	r2, [r2, #2]
20000070:	709a      	strb	r2, [r3, #2]
	s = string2;
20000072:	183b      	adds	r3, r7, r0
20000074:	637b      	str	r3, [r7, #52]	; 0x34
	while (*s)
20000076:	e006      	b.n	20000086 <main+0x76>
	ascii_write_char(*s++);
20000078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000007a:	1c5a      	adds	r2, r3, #1
2000007c:	637a      	str	r2, [r7, #52]	; 0x34
2000007e:	781b      	ldrb	r3, [r3, #0]
20000080:	0018      	movs	r0, r3
20000082:	f000 fefa 	bl	20000e7a <ascii_write_char>
	while (*s)
20000086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000088:	781b      	ldrb	r3, [r3, #0]
2000008a:	2b00      	cmp	r3, #0
2000008c:	d1f4      	bne.n	20000078 <main+0x68>
	#endif
	
	#ifdef lcd
		init_lcd();
2000008e:	f000 fa68 	bl	20000562 <init_lcd>
		graphic_initialize();
20000092:	f000 fa73 	bl	2000057c <graphic_initialize>
	#endif
	#ifdef keypad
		init_keypad();
20000096:	f000 ff3f 	bl	20000f18 <init_keypad>
	#endif
	#ifndef SIMULATOR
		graphic_clean_screen();
	#endif
	
	unsigned char playerScore[2] = {0,0};
2000009a:	2108      	movs	r1, #8
2000009c:	187b      	adds	r3, r7, r1
2000009e:	2200      	movs	r2, #0
200000a0:	701a      	strb	r2, [r3, #0]
200000a2:	187b      	adds	r3, r7, r1
200000a4:	2200      	movs	r2, #0
200000a6:	705a      	strb	r2, [r3, #1]
	unsigned char *pScore;
	
	pScore = playerScore;
200000a8:	187b      	adds	r3, r7, r1
200000aa:	633b      	str	r3, [r7, #48]	; 0x30
	pong_inc_playerScore(pScore,1);
200000ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200000ae:	2101      	movs	r1, #1
200000b0:	0018      	movs	r0, r3
200000b2:	f000 fda8 	bl	20000c06 <pong_inc_playerScore>
	pong_inc_playerScore(pScore,2);
200000b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200000b8:	2102      	movs	r1, #2
200000ba:	0018      	movs	r0, r3
200000bc:	f000 fda3 	bl	20000c06 <pong_inc_playerScore>
	pobject p = &ball;
200000c0:	4b27      	ldr	r3, [pc, #156]	; (20000160 <main+0x150>)
200000c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	pobject player1 = &p1paddle;
200000c4:	4b27      	ldr	r3, [pc, #156]	; (20000164 <main+0x154>)
200000c6:	62bb      	str	r3, [r7, #40]	; 0x28
	pobject player2 = &p2paddle;
200000c8:	4b27      	ldr	r3, [pc, #156]	; (20000168 <main+0x158>)
200000ca:	627b      	str	r3, [r7, #36]	; 0x24
	pong_set_position(player1,2,28);
200000cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
200000ce:	221c      	movs	r2, #28
200000d0:	2102      	movs	r1, #2
200000d2:	0018      	movs	r0, r3
200000d4:	f000 fcdb 	bl	20000a8e <pong_set_position>
	pong_set_position(player2,127,28);
200000d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200000da:	221c      	movs	r2, #28
200000dc:	217f      	movs	r1, #127	; 0x7f
200000de:	0018      	movs	r0, r3
200000e0:	f000 fcd5 	bl	20000a8e <pong_set_position>
	pong_set_position(p,64-(p->geo->sizex)/2,32-(p->geo->sizey)/2);
200000e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200000e6:	681b      	ldr	r3, [r3, #0]
200000e8:	685b      	ldr	r3, [r3, #4]
200000ea:	2b00      	cmp	r3, #0
200000ec:	da00      	bge.n	200000f0 <main+0xe0>
200000ee:	3301      	adds	r3, #1
200000f0:	105b      	asrs	r3, r3, #1
200000f2:	425b      	negs	r3, r3
200000f4:	3340      	adds	r3, #64	; 0x40
200000f6:	0019      	movs	r1, r3
200000f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200000fa:	681b      	ldr	r3, [r3, #0]
200000fc:	689b      	ldr	r3, [r3, #8]
200000fe:	2b00      	cmp	r3, #0
20000100:	da00      	bge.n	20000104 <main+0xf4>
20000102:	3301      	adds	r3, #1
20000104:	105b      	asrs	r3, r3, #1
20000106:	425b      	negs	r3, r3
20000108:	3320      	adds	r3, #32
2000010a:	001a      	movs	r2, r3
2000010c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000010e:	0018      	movs	r0, r3
20000110:	f000 fcbd 	bl	20000a8e <pong_set_position>

	set_object_speed(player2,0,2);
20000114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000116:	2202      	movs	r2, #2
20000118:	2100      	movs	r1, #0
2000011a:	0018      	movs	r0, r3
2000011c:	f000 fca7 	bl	20000a6e <set_object_speed>
	p->set_speed(p,4,1);
20000120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000122:	6a1b      	ldr	r3, [r3, #32]
20000124:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20000126:	2201      	movs	r2, #1
20000128:	2104      	movs	r1, #4
2000012a:	4798      	blx	r3
	while(1){
		move_object(p);
2000012c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000012e:	0018      	movs	r0, r3
20000130:	f000 fd1d 	bl	20000b6e <move_object>
		move_object(player1);
20000134:	6abb      	ldr	r3, [r7, #40]	; 0x28
20000136:	0018      	movs	r0, r3
20000138:	f000 fd19 	bl	20000b6e <move_object>
		move_object(player2); 
2000013c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000013e:	0018      	movs	r0, r3
20000140:	f000 fd15 	bl	20000b6e <move_object>
		pong_inc_playerScore(pScore,1);
20000144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20000146:	2101      	movs	r1, #1
20000148:	0018      	movs	r0, r3
2000014a:	f000 fd5c 	bl	20000c06 <pong_inc_playerScore>
		delay_milli(40);
2000014e:	2028      	movs	r0, #40	; 0x28
20000150:	f000 f83b 	bl	200001ca <delay_milli>
		move_object(p);
20000154:	e7ea      	b.n	2000012c <main+0x11c>
20000156:	46c0      	nop			; (mov r8, r8)
20000158:	20001f40 	andcs	r1, r0, r0, asr #30
2000015c:	20001f4c 	andcs	r1, r0, ip, asr #30
20000160:	20001e94 	mulcs	r0, r4, lr
20000164:	20001ef0 	strdcs	r1, [r0], -r0
20000168:	20001f18 	andcs	r1, r0, r8, lsl pc

2000016c <delay_40ns>:

#include "delay.h"
#include "portDeclare.h"

void delay_40ns(void){
2000016c:	b580      	push	{r7, lr}
2000016e:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000170:	4b0c      	ldr	r3, [pc, #48]	; (200001a4 <delay_40ns+0x38>)
20000172:	2200      	movs	r2, #0
20000174:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 6;
20000176:	4b0c      	ldr	r3, [pc, #48]	; (200001a8 <delay_40ns+0x3c>)
20000178:	2206      	movs	r2, #6
2000017a:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
2000017c:	4b0b      	ldr	r3, [pc, #44]	; (200001ac <delay_40ns+0x40>)
2000017e:	2200      	movs	r2, #0
20000180:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000182:	4b08      	ldr	r3, [pc, #32]	; (200001a4 <delay_40ns+0x38>)
20000184:	2205      	movs	r2, #5
20000186:	601a      	str	r2, [r3, #0]
	while ((*STK_CTRL & 0x10000) == 0){
20000188:	46c0      	nop			; (mov r8, r8)
2000018a:	4b06      	ldr	r3, [pc, #24]	; (200001a4 <delay_40ns+0x38>)
2000018c:	681a      	ldr	r2, [r3, #0]
2000018e:	2380      	movs	r3, #128	; 0x80
20000190:	025b      	lsls	r3, r3, #9
20000192:	4013      	ands	r3, r2
20000194:	d0f9      	beq.n	2000018a <delay_40ns+0x1e>
	}
	*STK_CTRL = 0;
20000196:	4b03      	ldr	r3, [pc, #12]	; (200001a4 <delay_40ns+0x38>)
20000198:	2200      	movs	r2, #0
2000019a:	601a      	str	r2, [r3, #0]
}
2000019c:	46c0      	nop			; (mov r8, r8)
2000019e:	46bd      	mov	sp, r7
200001a0:	bd80      	pop	{r7, pc}
200001a2:	46c0      	nop			; (mov r8, r8)
200001a4:	e000e010 	and	lr, r0, r0, lsl r0
200001a8:	e000e014 	and	lr, r0, r4, lsl r0
200001ac:	e000e018 	and	lr, r0, r8, lsl r0

200001b0 <delay_250ns>:

void delay_250ns(void){
200001b0:	b580      	push	{r7, lr}
200001b2:	af00      	add	r7, sp, #0
	*STK_CTRL = 5;
	while (!(*STK_CTRL & 0x10000) == 0){
	}
	*STK_CTRL = 0;
	#endif
}
200001b4:	46c0      	nop			; (mov r8, r8)
200001b6:	46bd      	mov	sp, r7
200001b8:	bd80      	pop	{r7, pc}

200001ba <delay_mikro>:

void delay_mikro(unsigned int us){
200001ba:	b580      	push	{r7, lr}
200001bc:	b082      	sub	sp, #8
200001be:	af00      	add	r7, sp, #0
200001c0:	6078      	str	r0, [r7, #4]
		us = us*4;
	for(int i = 0; i < us; i++){
		delay_250ns();
	}
	#endif
}
200001c2:	46c0      	nop			; (mov r8, r8)
200001c4:	46bd      	mov	sp, r7
200001c6:	b002      	add	sp, #8
200001c8:	bd80      	pop	{r7, pc}

200001ca <delay_milli>:

void delay_milli(unsigned int ms){
200001ca:	b580      	push	{r7, lr}
200001cc:	b082      	sub	sp, #8
200001ce:	af00      	add	r7, sp, #0
200001d0:	6078      	str	r0, [r7, #4]
	#ifndef SIMULATOR
	ms = ms*1000;
	delay_mikro(ms);
	#endif
200001d2:	46c0      	nop			; (mov r8, r8)
200001d4:	46bd      	mov	sp, r7
200001d6:	b002      	add	sp, #8
200001d8:	bd80      	pop	{r7, pc}
200001da:	46c0      	nop			; (mov r8, r8)

200001dc <select_controller>:
#include "portDeclare.h"

#define adress 0x40
#define page 0xB8

void select_controller(char c){
200001dc:	b580      	push	{r7, lr}
200001de:	b082      	sub	sp, #8
200001e0:	af00      	add	r7, sp, #0
200001e2:	0002      	movs	r2, r0
200001e4:	1dfb      	adds	r3, r7, #7
200001e6:	701a      	strb	r2, [r3, #0]
	switch(c){
200001e8:	1dfb      	adds	r3, r7, #7
200001ea:	781b      	ldrb	r3, [r3, #0]
200001ec:	2b08      	cmp	r3, #8
200001ee:	d011      	beq.n	20000214 <select_controller+0x38>
200001f0:	dc02      	bgt.n	200001f8 <select_controller+0x1c>
200001f2:	2b00      	cmp	r3, #0
200001f4:	d005      	beq.n	20000202 <select_controller+0x26>
		case 0: *portOdrLowE = *portOdrLowE &~ 0x18; break;
		case 0x8: *portOdrLowE = (*portOdrLowE &~ 0x10)|0x8; break;
		case 0x10: *portOdrLowE = (*portOdrLowE &~ 0x8)|0x10; break;
		case 0x18: *portOdrLowE = *portOdrLowE | 0x18; break;
	}
}
200001f6:	e032      	b.n	2000025e <select_controller+0x82>
	switch(c){
200001f8:	2b10      	cmp	r3, #16
200001fa:	d019      	beq.n	20000230 <select_controller+0x54>
200001fc:	2b18      	cmp	r3, #24
200001fe:	d025      	beq.n	2000024c <select_controller+0x70>
}
20000200:	e02d      	b.n	2000025e <select_controller+0x82>
		case 0: *portOdrLowE = *portOdrLowE &~ 0x18; break;
20000202:	4b19      	ldr	r3, [pc, #100]	; (20000268 <select_controller+0x8c>)
20000204:	781b      	ldrb	r3, [r3, #0]
20000206:	b2db      	uxtb	r3, r3
20000208:	4a17      	ldr	r2, [pc, #92]	; (20000268 <select_controller+0x8c>)
2000020a:	2118      	movs	r1, #24
2000020c:	438b      	bics	r3, r1
2000020e:	b2db      	uxtb	r3, r3
20000210:	7013      	strb	r3, [r2, #0]
20000212:	e024      	b.n	2000025e <select_controller+0x82>
		case 0x8: *portOdrLowE = (*portOdrLowE &~ 0x10)|0x8; break;
20000214:	4b14      	ldr	r3, [pc, #80]	; (20000268 <select_controller+0x8c>)
20000216:	781b      	ldrb	r3, [r3, #0]
20000218:	b2db      	uxtb	r3, r3
2000021a:	b25b      	sxtb	r3, r3
2000021c:	2218      	movs	r2, #24
2000021e:	4393      	bics	r3, r2
20000220:	b25b      	sxtb	r3, r3
20000222:	2208      	movs	r2, #8
20000224:	4313      	orrs	r3, r2
20000226:	b25a      	sxtb	r2, r3
20000228:	4b0f      	ldr	r3, [pc, #60]	; (20000268 <select_controller+0x8c>)
2000022a:	b2d2      	uxtb	r2, r2
2000022c:	701a      	strb	r2, [r3, #0]
2000022e:	e016      	b.n	2000025e <select_controller+0x82>
		case 0x10: *portOdrLowE = (*portOdrLowE &~ 0x8)|0x10; break;
20000230:	4b0d      	ldr	r3, [pc, #52]	; (20000268 <select_controller+0x8c>)
20000232:	781b      	ldrb	r3, [r3, #0]
20000234:	b2db      	uxtb	r3, r3
20000236:	b25b      	sxtb	r3, r3
20000238:	2218      	movs	r2, #24
2000023a:	4393      	bics	r3, r2
2000023c:	b25b      	sxtb	r3, r3
2000023e:	2210      	movs	r2, #16
20000240:	4313      	orrs	r3, r2
20000242:	b25a      	sxtb	r2, r3
20000244:	4b08      	ldr	r3, [pc, #32]	; (20000268 <select_controller+0x8c>)
20000246:	b2d2      	uxtb	r2, r2
20000248:	701a      	strb	r2, [r3, #0]
2000024a:	e008      	b.n	2000025e <select_controller+0x82>
		case 0x18: *portOdrLowE = *portOdrLowE | 0x18; break;
2000024c:	4b06      	ldr	r3, [pc, #24]	; (20000268 <select_controller+0x8c>)
2000024e:	781b      	ldrb	r3, [r3, #0]
20000250:	b2db      	uxtb	r3, r3
20000252:	4a05      	ldr	r2, [pc, #20]	; (20000268 <select_controller+0x8c>)
20000254:	2118      	movs	r1, #24
20000256:	430b      	orrs	r3, r1
20000258:	b2db      	uxtb	r3, r3
2000025a:	7013      	strb	r3, [r2, #0]
2000025c:	46c0      	nop			; (mov r8, r8)
}
2000025e:	46c0      	nop			; (mov r8, r8)
20000260:	46bd      	mov	sp, r7
20000262:	b002      	add	sp, #8
20000264:	bd80      	pop	{r7, pc}
20000266:	46c0      	nop			; (mov r8, r8)
20000268:	40021014 	andmi	r1, r2, r4, lsl r0

2000026c <graphic_wait_ready>:

void graphic_wait_ready(){
2000026c:	b580      	push	{r7, lr}
2000026e:	af00      	add	r7, sp, #0
	*portOdrLowE = (*portOdrLowE &~ B_E);
20000270:	4b23      	ldr	r3, [pc, #140]	; (20000300 <graphic_wait_ready+0x94>)
20000272:	781b      	ldrb	r3, [r3, #0]
20000274:	b2db      	uxtb	r3, r3
20000276:	4a22      	ldr	r2, [pc, #136]	; (20000300 <graphic_wait_ready+0x94>)
20000278:	2140      	movs	r1, #64	; 0x40
2000027a:	438b      	bics	r3, r1
2000027c:	b2db      	uxtb	r3, r3
2000027e:	7013      	strb	r3, [r2, #0]
	*portModerE = 0x5555;
20000280:	4b20      	ldr	r3, [pc, #128]	; (20000304 <graphic_wait_ready+0x98>)
20000282:	4a21      	ldr	r2, [pc, #132]	; (20000308 <graphic_wait_ready+0x9c>)
20000284:	601a      	str	r2, [r3, #0]
	*portOdrLowE = ((*portOdrLowE | B_RW) &~B_RS);
20000286:	4b1e      	ldr	r3, [pc, #120]	; (20000300 <graphic_wait_ready+0x94>)
20000288:	781b      	ldrb	r3, [r3, #0]
2000028a:	b2db      	uxtb	r3, r3
2000028c:	2202      	movs	r2, #2
2000028e:	4313      	orrs	r3, r2
20000290:	b2db      	uxtb	r3, r3
20000292:	4a1b      	ldr	r2, [pc, #108]	; (20000300 <graphic_wait_ready+0x94>)
20000294:	2101      	movs	r1, #1
20000296:	438b      	bics	r3, r1
20000298:	b2db      	uxtb	r3, r3
2000029a:	7013      	strb	r3, [r2, #0]
	delay_250ns();
2000029c:	f7ff ff88 	bl	200001b0 <delay_250ns>
	delay_250ns();
200002a0:	f7ff ff86 	bl	200001b0 <delay_250ns>
	while(*portOdrLowE & 0x80){
200002a4:	e017      	b.n	200002d6 <graphic_wait_ready+0x6a>
		*portOdrLowE = (*portOdrLowE | B_E);
200002a6:	4b16      	ldr	r3, [pc, #88]	; (20000300 <graphic_wait_ready+0x94>)
200002a8:	781b      	ldrb	r3, [r3, #0]
200002aa:	b2db      	uxtb	r3, r3
200002ac:	4a14      	ldr	r2, [pc, #80]	; (20000300 <graphic_wait_ready+0x94>)
200002ae:	2140      	movs	r1, #64	; 0x40
200002b0:	430b      	orrs	r3, r1
200002b2:	b2db      	uxtb	r3, r3
200002b4:	7013      	strb	r3, [r2, #0]
		delay_250ns();
200002b6:	f7ff ff7b 	bl	200001b0 <delay_250ns>
		delay_250ns();
200002ba:	f7ff ff79 	bl	200001b0 <delay_250ns>
		*portOdrLowE = (*portOdrLowE &~ B_E);
200002be:	4b10      	ldr	r3, [pc, #64]	; (20000300 <graphic_wait_ready+0x94>)
200002c0:	781b      	ldrb	r3, [r3, #0]
200002c2:	b2db      	uxtb	r3, r3
200002c4:	4a0e      	ldr	r2, [pc, #56]	; (20000300 <graphic_wait_ready+0x94>)
200002c6:	2140      	movs	r1, #64	; 0x40
200002c8:	438b      	bics	r3, r1
200002ca:	b2db      	uxtb	r3, r3
200002cc:	7013      	strb	r3, [r2, #0]
		delay_250ns();
200002ce:	f7ff ff6f 	bl	200001b0 <delay_250ns>
		delay_250ns();
200002d2:	f7ff ff6d 	bl	200001b0 <delay_250ns>
	while(*portOdrLowE & 0x80){
200002d6:	4b0a      	ldr	r3, [pc, #40]	; (20000300 <graphic_wait_ready+0x94>)
200002d8:	781b      	ldrb	r3, [r3, #0]
200002da:	b2db      	uxtb	r3, r3
200002dc:	b25b      	sxtb	r3, r3
200002de:	2b00      	cmp	r3, #0
200002e0:	dbe1      	blt.n	200002a6 <graphic_wait_ready+0x3a>
	}
	*portOdrLowE = (*portOdrLowE | B_E);
200002e2:	4b07      	ldr	r3, [pc, #28]	; (20000300 <graphic_wait_ready+0x94>)
200002e4:	781b      	ldrb	r3, [r3, #0]
200002e6:	b2db      	uxtb	r3, r3
200002e8:	4a05      	ldr	r2, [pc, #20]	; (20000300 <graphic_wait_ready+0x94>)
200002ea:	2140      	movs	r1, #64	; 0x40
200002ec:	430b      	orrs	r3, r1
200002ee:	b2db      	uxtb	r3, r3
200002f0:	7013      	strb	r3, [r2, #0]
	*portModerE = 0x55555555;
200002f2:	4b04      	ldr	r3, [pc, #16]	; (20000304 <graphic_wait_ready+0x98>)
200002f4:	4a05      	ldr	r2, [pc, #20]	; (2000030c <graphic_wait_ready+0xa0>)
200002f6:	601a      	str	r2, [r3, #0]
}
200002f8:	46c0      	nop			; (mov r8, r8)
200002fa:	46bd      	mov	sp, r7
200002fc:	bd80      	pop	{r7, pc}
200002fe:	46c0      	nop			; (mov r8, r8)
20000300:	40021014 	andmi	r1, r2, r4, lsl r0
20000304:	40021000 	andmi	r1, r2, r0
20000308:	00005555 	andeq	r5, r0, r5, asr r5
2000030c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000310 <graphic_read>:

char graphic_read(unsigned char c){
20000310:	b580      	push	{r7, lr}
20000312:	b084      	sub	sp, #16
20000314:	af00      	add	r7, sp, #0
20000316:	0002      	movs	r2, r0
20000318:	1dfb      	adds	r3, r7, #7
2000031a:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE &~B_E);
2000031c:	4b29      	ldr	r3, [pc, #164]	; (200003c4 <graphic_read+0xb4>)
2000031e:	781b      	ldrb	r3, [r3, #0]
20000320:	b2db      	uxtb	r3, r3
20000322:	4a28      	ldr	r2, [pc, #160]	; (200003c4 <graphic_read+0xb4>)
20000324:	2140      	movs	r1, #64	; 0x40
20000326:	438b      	bics	r3, r1
20000328:	b2db      	uxtb	r3, r3
2000032a:	7013      	strb	r3, [r2, #0]
	*portModerE = 0x00005555;
2000032c:	4b26      	ldr	r3, [pc, #152]	; (200003c8 <graphic_read+0xb8>)
2000032e:	4a27      	ldr	r2, [pc, #156]	; (200003cc <graphic_read+0xbc>)
20000330:	601a      	str	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE | B_RW | B_RS);
20000332:	4b24      	ldr	r3, [pc, #144]	; (200003c4 <graphic_read+0xb4>)
20000334:	781b      	ldrb	r3, [r3, #0]
20000336:	b2db      	uxtb	r3, r3
20000338:	4a22      	ldr	r2, [pc, #136]	; (200003c4 <graphic_read+0xb4>)
2000033a:	2103      	movs	r1, #3
2000033c:	430b      	orrs	r3, r1
2000033e:	b2db      	uxtb	r3, r3
20000340:	7013      	strb	r3, [r2, #0]
	select_controller(c);
20000342:	1dfb      	adds	r3, r7, #7
20000344:	781b      	ldrb	r3, [r3, #0]
20000346:	0018      	movs	r0, r3
20000348:	f7ff ff48 	bl	200001dc <select_controller>
	delay_250ns();
2000034c:	f7ff ff30 	bl	200001b0 <delay_250ns>
	delay_250ns();
20000350:	f7ff ff2e 	bl	200001b0 <delay_250ns>
	*portOdrLowE = (*portOdrLowE | B_E);
20000354:	4b1b      	ldr	r3, [pc, #108]	; (200003c4 <graphic_read+0xb4>)
20000356:	781b      	ldrb	r3, [r3, #0]
20000358:	b2db      	uxtb	r3, r3
2000035a:	4a1a      	ldr	r2, [pc, #104]	; (200003c4 <graphic_read+0xb4>)
2000035c:	2140      	movs	r1, #64	; 0x40
2000035e:	430b      	orrs	r3, r1
20000360:	b2db      	uxtb	r3, r3
20000362:	7013      	strb	r3, [r2, #0]
	delay_250ns();
20000364:	f7ff ff24 	bl	200001b0 <delay_250ns>
	delay_250ns();
20000368:	f7ff ff22 	bl	200001b0 <delay_250ns>
	unsigned char RV = *portIdrHighE;
2000036c:	4a18      	ldr	r2, [pc, #96]	; (200003d0 <graphic_read+0xc0>)
2000036e:	230f      	movs	r3, #15
20000370:	18fb      	adds	r3, r7, r3
20000372:	7812      	ldrb	r2, [r2, #0]
20000374:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE &~ B_E);
20000376:	4b13      	ldr	r3, [pc, #76]	; (200003c4 <graphic_read+0xb4>)
20000378:	781b      	ldrb	r3, [r3, #0]
2000037a:	b2db      	uxtb	r3, r3
2000037c:	4a11      	ldr	r2, [pc, #68]	; (200003c4 <graphic_read+0xb4>)
2000037e:	2140      	movs	r1, #64	; 0x40
20000380:	438b      	bics	r3, r1
20000382:	b2db      	uxtb	r3, r3
20000384:	7013      	strb	r3, [r2, #0]
	*portModerE = 0x55555555;
20000386:	4b10      	ldr	r3, [pc, #64]	; (200003c8 <graphic_read+0xb8>)
20000388:	4a12      	ldr	r2, [pc, #72]	; (200003d4 <graphic_read+0xc4>)
2000038a:	601a      	str	r2, [r3, #0]
	if(c & B_CS1){
2000038c:	1dfb      	adds	r3, r7, #7
2000038e:	781b      	ldrb	r3, [r3, #0]
20000390:	2208      	movs	r2, #8
20000392:	4013      	ands	r3, r2
20000394:	d004      	beq.n	200003a0 <graphic_read+0x90>
	select_controller(B_CS1);
20000396:	2008      	movs	r0, #8
20000398:	f7ff ff20 	bl	200001dc <select_controller>
	graphic_wait_ready();
2000039c:	f7ff ff66 	bl	2000026c <graphic_wait_ready>
	}
	if(c & B_CS2){
200003a0:	1dfb      	adds	r3, r7, #7
200003a2:	781b      	ldrb	r3, [r3, #0]
200003a4:	2210      	movs	r2, #16
200003a6:	4013      	ands	r3, r2
200003a8:	d004      	beq.n	200003b4 <graphic_read+0xa4>
	select_controller(B_CS2);
200003aa:	2010      	movs	r0, #16
200003ac:	f7ff ff16 	bl	200001dc <select_controller>
	graphic_wait_ready();
200003b0:	f7ff ff5c 	bl	2000026c <graphic_wait_ready>
	}

	return RV;
200003b4:	230f      	movs	r3, #15
200003b6:	18fb      	adds	r3, r7, r3
200003b8:	781b      	ldrb	r3, [r3, #0]
}
200003ba:	0018      	movs	r0, r3
200003bc:	46bd      	mov	sp, r7
200003be:	b004      	add	sp, #16
200003c0:	bd80      	pop	{r7, pc}
200003c2:	46c0      	nop			; (mov r8, r8)
200003c4:	40021014 	andmi	r1, r2, r4, lsl r0
200003c8:	40021000 	andmi	r1, r2, r0
200003cc:	00005555 	andeq	r5, r0, r5, asr r5
200003d0:	40021011 	andmi	r1, r2, r1, lsl r0
200003d4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200003d8 <graphic_write>:

void graphic_write(unsigned char val, unsigned char c){
200003d8:	b580      	push	{r7, lr}
200003da:	b082      	sub	sp, #8
200003dc:	af00      	add	r7, sp, #0
200003de:	0002      	movs	r2, r0
200003e0:	1dfb      	adds	r3, r7, #7
200003e2:	701a      	strb	r2, [r3, #0]
200003e4:	1dbb      	adds	r3, r7, #6
200003e6:	1c0a      	adds	r2, r1, #0
200003e8:	701a      	strb	r2, [r3, #0]
	*portOdrHighE = val;
200003ea:	4a23      	ldr	r2, [pc, #140]	; (20000478 <graphic_write+0xa0>)
200003ec:	1dfb      	adds	r3, r7, #7
200003ee:	781b      	ldrb	r3, [r3, #0]
200003f0:	7013      	strb	r3, [r2, #0]
	select_controller(c);
200003f2:	1dbb      	adds	r3, r7, #6
200003f4:	781b      	ldrb	r3, [r3, #0]
200003f6:	0018      	movs	r0, r3
200003f8:	f7ff fef0 	bl	200001dc <select_controller>
	delay_250ns();
200003fc:	f7ff fed8 	bl	200001b0 <delay_250ns>
	delay_250ns();
20000400:	f7ff fed6 	bl	200001b0 <delay_250ns>
	*portOdrLowE = (*portOdrLowE | B_E);
20000404:	4b1d      	ldr	r3, [pc, #116]	; (2000047c <graphic_write+0xa4>)
20000406:	781b      	ldrb	r3, [r3, #0]
20000408:	b2db      	uxtb	r3, r3
2000040a:	4a1c      	ldr	r2, [pc, #112]	; (2000047c <graphic_write+0xa4>)
2000040c:	2140      	movs	r1, #64	; 0x40
2000040e:	430b      	orrs	r3, r1
20000410:	b2db      	uxtb	r3, r3
20000412:	7013      	strb	r3, [r2, #0]
	delay_250ns();
20000414:	f7ff fecc 	bl	200001b0 <delay_250ns>
	delay_250ns();
20000418:	f7ff feca 	bl	200001b0 <delay_250ns>
	*portOdrLowE = (*portOdrLowE &~ B_E);
2000041c:	4b17      	ldr	r3, [pc, #92]	; (2000047c <graphic_write+0xa4>)
2000041e:	781b      	ldrb	r3, [r3, #0]
20000420:	b2db      	uxtb	r3, r3
20000422:	4a16      	ldr	r2, [pc, #88]	; (2000047c <graphic_write+0xa4>)
20000424:	2140      	movs	r1, #64	; 0x40
20000426:	438b      	bics	r3, r1
20000428:	b2db      	uxtb	r3, r3
2000042a:	7013      	strb	r3, [r2, #0]
	if(c & B_CS1){
2000042c:	1dbb      	adds	r3, r7, #6
2000042e:	781b      	ldrb	r3, [r3, #0]
20000430:	2208      	movs	r2, #8
20000432:	4013      	ands	r3, r2
20000434:	d004      	beq.n	20000440 <graphic_write+0x68>
		select_controller(B_CS1);
20000436:	2008      	movs	r0, #8
20000438:	f7ff fed0 	bl	200001dc <select_controller>
		graphic_wait_ready();
2000043c:	f7ff ff16 	bl	2000026c <graphic_wait_ready>
	}
	if(c & B_CS2){
20000440:	1dbb      	adds	r3, r7, #6
20000442:	781b      	ldrb	r3, [r3, #0]
20000444:	2210      	movs	r2, #16
20000446:	4013      	ands	r3, r2
20000448:	d004      	beq.n	20000454 <graphic_write+0x7c>
		select_controller(B_CS2);
2000044a:	2010      	movs	r0, #16
2000044c:	f7ff fec6 	bl	200001dc <select_controller>
		graphic_wait_ready();
20000450:	f7ff ff0c 	bl	2000026c <graphic_wait_ready>
	}
	*portOdrHighE = 0;
20000454:	4b08      	ldr	r3, [pc, #32]	; (20000478 <graphic_write+0xa0>)
20000456:	2200      	movs	r2, #0
20000458:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE | B_E);
2000045a:	4b08      	ldr	r3, [pc, #32]	; (2000047c <graphic_write+0xa4>)
2000045c:	781b      	ldrb	r3, [r3, #0]
2000045e:	b2db      	uxtb	r3, r3
20000460:	4a06      	ldr	r2, [pc, #24]	; (2000047c <graphic_write+0xa4>)
20000462:	2140      	movs	r1, #64	; 0x40
20000464:	430b      	orrs	r3, r1
20000466:	b2db      	uxtb	r3, r3
20000468:	7013      	strb	r3, [r2, #0]
	select_controller(0);
2000046a:	2000      	movs	r0, #0
2000046c:	f7ff feb6 	bl	200001dc <select_controller>
}
20000470:	46c0      	nop			; (mov r8, r8)
20000472:	46bd      	mov	sp, r7
20000474:	b002      	add	sp, #8
20000476:	bd80      	pop	{r7, pc}
20000478:	40021015 	andmi	r1, r2, r5, lsl r0
2000047c:	40021014 	andmi	r1, r2, r4, lsl r0

20000480 <graphic_write_command>:

void graphic_write_command(unsigned char cmd, unsigned char c){
20000480:	b580      	push	{r7, lr}
20000482:	b082      	sub	sp, #8
20000484:	af00      	add	r7, sp, #0
20000486:	0002      	movs	r2, r0
20000488:	1dfb      	adds	r3, r7, #7
2000048a:	701a      	strb	r2, [r3, #0]
2000048c:	1dbb      	adds	r3, r7, #6
2000048e:	1c0a      	adds	r2, r1, #0
20000490:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE &~ B_E);
20000492:	4b10      	ldr	r3, [pc, #64]	; (200004d4 <graphic_write_command+0x54>)
20000494:	781b      	ldrb	r3, [r3, #0]
20000496:	b2db      	uxtb	r3, r3
20000498:	4a0e      	ldr	r2, [pc, #56]	; (200004d4 <graphic_write_command+0x54>)
2000049a:	2140      	movs	r1, #64	; 0x40
2000049c:	438b      	bics	r3, r1
2000049e:	b2db      	uxtb	r3, r3
200004a0:	7013      	strb	r3, [r2, #0]
	select_controller(c);
200004a2:	1dbb      	adds	r3, r7, #6
200004a4:	781b      	ldrb	r3, [r3, #0]
200004a6:	0018      	movs	r0, r3
200004a8:	f7ff fe98 	bl	200001dc <select_controller>
	*portOdrLowE = (*portOdrLowE &~B_RS &~B_RW);
200004ac:	4b09      	ldr	r3, [pc, #36]	; (200004d4 <graphic_write_command+0x54>)
200004ae:	781b      	ldrb	r3, [r3, #0]
200004b0:	b2db      	uxtb	r3, r3
200004b2:	4a08      	ldr	r2, [pc, #32]	; (200004d4 <graphic_write_command+0x54>)
200004b4:	2103      	movs	r1, #3
200004b6:	438b      	bics	r3, r1
200004b8:	b2db      	uxtb	r3, r3
200004ba:	7013      	strb	r3, [r2, #0]
	graphic_write(cmd, c);
200004bc:	1dbb      	adds	r3, r7, #6
200004be:	781a      	ldrb	r2, [r3, #0]
200004c0:	1dfb      	adds	r3, r7, #7
200004c2:	781b      	ldrb	r3, [r3, #0]
200004c4:	0011      	movs	r1, r2
200004c6:	0018      	movs	r0, r3
200004c8:	f7ff ff86 	bl	200003d8 <graphic_write>
}
200004cc:	46c0      	nop			; (mov r8, r8)
200004ce:	46bd      	mov	sp, r7
200004d0:	b002      	add	sp, #8
200004d2:	bd80      	pop	{r7, pc}
200004d4:	40021014 	andmi	r1, r2, r4, lsl r0

200004d8 <graphic_write_data>:

void graphic_write_data(unsigned char data, unsigned char c){
200004d8:	b580      	push	{r7, lr}
200004da:	b082      	sub	sp, #8
200004dc:	af00      	add	r7, sp, #0
200004de:	0002      	movs	r2, r0
200004e0:	1dfb      	adds	r3, r7, #7
200004e2:	701a      	strb	r2, [r3, #0]
200004e4:	1dbb      	adds	r3, r7, #6
200004e6:	1c0a      	adds	r2, r1, #0
200004e8:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE &~ B_E);
200004ea:	4b12      	ldr	r3, [pc, #72]	; (20000534 <graphic_write_data+0x5c>)
200004ec:	781b      	ldrb	r3, [r3, #0]
200004ee:	b2db      	uxtb	r3, r3
200004f0:	4a10      	ldr	r2, [pc, #64]	; (20000534 <graphic_write_data+0x5c>)
200004f2:	2140      	movs	r1, #64	; 0x40
200004f4:	438b      	bics	r3, r1
200004f6:	b2db      	uxtb	r3, r3
200004f8:	7013      	strb	r3, [r2, #0]
	select_controller(c);
200004fa:	1dbb      	adds	r3, r7, #6
200004fc:	781b      	ldrb	r3, [r3, #0]
200004fe:	0018      	movs	r0, r3
20000500:	f7ff fe6c 	bl	200001dc <select_controller>
	*portOdrLowE = ((*portOdrLowE | B_RS) &~B_RW);
20000504:	4b0b      	ldr	r3, [pc, #44]	; (20000534 <graphic_write_data+0x5c>)
20000506:	781b      	ldrb	r3, [r3, #0]
20000508:	b2db      	uxtb	r3, r3
2000050a:	2201      	movs	r2, #1
2000050c:	4313      	orrs	r3, r2
2000050e:	b2db      	uxtb	r3, r3
20000510:	4a08      	ldr	r2, [pc, #32]	; (20000534 <graphic_write_data+0x5c>)
20000512:	2102      	movs	r1, #2
20000514:	438b      	bics	r3, r1
20000516:	b2db      	uxtb	r3, r3
20000518:	7013      	strb	r3, [r2, #0]
	graphic_write(data, c);
2000051a:	1dbb      	adds	r3, r7, #6
2000051c:	781a      	ldrb	r2, [r3, #0]
2000051e:	1dfb      	adds	r3, r7, #7
20000520:	781b      	ldrb	r3, [r3, #0]
20000522:	0011      	movs	r1, r2
20000524:	0018      	movs	r0, r3
20000526:	f7ff ff57 	bl	200003d8 <graphic_write>
}
2000052a:	46c0      	nop			; (mov r8, r8)
2000052c:	46bd      	mov	sp, r7
2000052e:	b002      	add	sp, #8
20000530:	bd80      	pop	{r7, pc}
20000532:	46c0      	nop			; (mov r8, r8)
20000534:	40021014 	andmi	r1, r2, r4, lsl r0

20000538 <graphic_read_data>:

unsigned char graphic_read_data(unsigned char c){
20000538:	b580      	push	{r7, lr}
2000053a:	b082      	sub	sp, #8
2000053c:	af00      	add	r7, sp, #0
2000053e:	0002      	movs	r2, r0
20000540:	1dfb      	adds	r3, r7, #7
20000542:	701a      	strb	r2, [r3, #0]
	graphic_read(c);
20000544:	1dfb      	adds	r3, r7, #7
20000546:	781b      	ldrb	r3, [r3, #0]
20000548:	0018      	movs	r0, r3
2000054a:	f7ff fee1 	bl	20000310 <graphic_read>
	return graphic_read(c);
2000054e:	1dfb      	adds	r3, r7, #7
20000550:	781b      	ldrb	r3, [r3, #0]
20000552:	0018      	movs	r0, r3
20000554:	f7ff fedc 	bl	20000310 <graphic_read>
20000558:	0003      	movs	r3, r0
}
2000055a:	0018      	movs	r0, r3
2000055c:	46bd      	mov	sp, r7
2000055e:	b002      	add	sp, #8
20000560:	bd80      	pop	{r7, pc}

20000562 <init_lcd>:

void init_lcd(void){
20000562:	b580      	push	{r7, lr}
20000564:	af00      	add	r7, sp, #0
	*portModerE = 0x55555555;
20000566:	4b03      	ldr	r3, [pc, #12]	; (20000574 <init_lcd+0x12>)
20000568:	4a03      	ldr	r2, [pc, #12]	; (20000578 <init_lcd+0x16>)
2000056a:	601a      	str	r2, [r3, #0]
}
2000056c:	46c0      	nop			; (mov r8, r8)
2000056e:	46bd      	mov	sp, r7
20000570:	bd80      	pop	{r7, pc}
20000572:	46c0      	nop			; (mov r8, r8)
20000574:	40021000 	andmi	r1, r2, r0
20000578:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000057c <graphic_initialize>:

void graphic_initialize(void){
2000057c:	b580      	push	{r7, lr}
2000057e:	af00      	add	r7, sp, #0
	*portOdrLowE = (*portOdrLowE | B_E);
20000580:	4b1e      	ldr	r3, [pc, #120]	; (200005fc <graphic_initialize+0x80>)
20000582:	781b      	ldrb	r3, [r3, #0]
20000584:	b2db      	uxtb	r3, r3
20000586:	4a1d      	ldr	r2, [pc, #116]	; (200005fc <graphic_initialize+0x80>)
20000588:	2140      	movs	r1, #64	; 0x40
2000058a:	430b      	orrs	r3, r1
2000058c:	b2db      	uxtb	r3, r3
2000058e:	7013      	strb	r3, [r2, #0]
	*portOdrLowE = (*portOdrLowE &~ B_SELECT );
20000590:	4b1a      	ldr	r3, [pc, #104]	; (200005fc <graphic_initialize+0x80>)
20000592:	781b      	ldrb	r3, [r3, #0]
20000594:	b2db      	uxtb	r3, r3
20000596:	4a19      	ldr	r2, [pc, #100]	; (200005fc <graphic_initialize+0x80>)
20000598:	2104      	movs	r1, #4
2000059a:	438b      	bics	r3, r1
2000059c:	b2db      	uxtb	r3, r3
2000059e:	7013      	strb	r3, [r2, #0]
	#ifdef SIMULATOR
		delay_mikro(10);
200005a0:	200a      	movs	r0, #10
200005a2:	f7ff fe0a 	bl	200001ba <delay_mikro>
	#endif
	*portOdrLowE = (*portOdrLowE &~(B_RST | B_CS1 | B_CS2 | B_E));
200005a6:	4b15      	ldr	r3, [pc, #84]	; (200005fc <graphic_initialize+0x80>)
200005a8:	781b      	ldrb	r3, [r3, #0]
200005aa:	b2db      	uxtb	r3, r3
200005ac:	4a13      	ldr	r2, [pc, #76]	; (200005fc <graphic_initialize+0x80>)
200005ae:	2178      	movs	r1, #120	; 0x78
200005b0:	438b      	bics	r3, r1
200005b2:	b2db      	uxtb	r3, r3
200005b4:	7013      	strb	r3, [r2, #0]
	#ifndef SIMULATOR
		delay_milli(30);
	#endif
	*portOdrLowE = (*portOdrLowE | B_RST);
200005b6:	4b11      	ldr	r3, [pc, #68]	; (200005fc <graphic_initialize+0x80>)
200005b8:	781b      	ldrb	r3, [r3, #0]
200005ba:	b2db      	uxtb	r3, r3
200005bc:	4a0f      	ldr	r2, [pc, #60]	; (200005fc <graphic_initialize+0x80>)
200005be:	2120      	movs	r1, #32
200005c0:	430b      	orrs	r3, r1
200005c2:	b2db      	uxtb	r3, r3
200005c4:	7013      	strb	r3, [r2, #0]
	graphic_write_command(0x3E, B_CS1|B_CS2);
200005c6:	2118      	movs	r1, #24
200005c8:	203e      	movs	r0, #62	; 0x3e
200005ca:	f7ff ff59 	bl	20000480 <graphic_write_command>
	graphic_write_command(0x3F, B_CS1|B_CS2);
200005ce:	2118      	movs	r1, #24
200005d0:	203f      	movs	r0, #63	; 0x3f
200005d2:	f7ff ff55 	bl	20000480 <graphic_write_command>
	graphic_write_command(0xC0, B_CS1|B_CS2);
200005d6:	2118      	movs	r1, #24
200005d8:	20c0      	movs	r0, #192	; 0xc0
200005da:	f7ff ff51 	bl	20000480 <graphic_write_command>
	graphic_write_command(0x40, B_CS1|B_CS2);
200005de:	2118      	movs	r1, #24
200005e0:	2040      	movs	r0, #64	; 0x40
200005e2:	f7ff ff4d 	bl	20000480 <graphic_write_command>
	graphic_write_command(0xB8, B_CS1|B_CS2);
200005e6:	2118      	movs	r1, #24
200005e8:	20b8      	movs	r0, #184	; 0xb8
200005ea:	f7ff ff49 	bl	20000480 <graphic_write_command>
	select_controller(0);
200005ee:	2000      	movs	r0, #0
200005f0:	f7ff fdf4 	bl	200001dc <select_controller>
}
200005f4:	46c0      	nop			; (mov r8, r8)
200005f6:	46bd      	mov	sp, r7
200005f8:	bd80      	pop	{r7, pc}
200005fa:	46c0      	nop			; (mov r8, r8)
200005fc:	40021014 	andmi	r1, r2, r4, lsl r0

20000600 <graphic_clean_screen>:

void graphic_clean_screen(void){
20000600:	b580      	push	{r7, lr}
20000602:	b082      	sub	sp, #8
20000604:	af00      	add	r7, sp, #0
	for(int i=0; i < 8; i++){
20000606:	2300      	movs	r3, #0
20000608:	607b      	str	r3, [r7, #4]
2000060a:	e01e      	b.n	2000064a <graphic_clean_screen+0x4a>
		graphic_write_command(0xB8|i, B_CS1|B_CS2);
2000060c:	687b      	ldr	r3, [r7, #4]
2000060e:	b25b      	sxtb	r3, r3
20000610:	2248      	movs	r2, #72	; 0x48
20000612:	4252      	negs	r2, r2
20000614:	4313      	orrs	r3, r2
20000616:	b25b      	sxtb	r3, r3
20000618:	b2db      	uxtb	r3, r3
2000061a:	2118      	movs	r1, #24
2000061c:	0018      	movs	r0, r3
2000061e:	f7ff ff2f 	bl	20000480 <graphic_write_command>
		graphic_write_command(0x40, B_CS1|B_CS2);
20000622:	2118      	movs	r1, #24
20000624:	2040      	movs	r0, #64	; 0x40
20000626:	f7ff ff2b 	bl	20000480 <graphic_write_command>
		for(int j=0; j<64; j++){
2000062a:	2300      	movs	r3, #0
2000062c:	603b      	str	r3, [r7, #0]
2000062e:	e006      	b.n	2000063e <graphic_clean_screen+0x3e>
			graphic_write_data(0,B_CS1|B_CS2);
20000630:	2118      	movs	r1, #24
20000632:	2000      	movs	r0, #0
20000634:	f7ff ff50 	bl	200004d8 <graphic_write_data>
		for(int j=0; j<64; j++){
20000638:	683b      	ldr	r3, [r7, #0]
2000063a:	3301      	adds	r3, #1
2000063c:	603b      	str	r3, [r7, #0]
2000063e:	683b      	ldr	r3, [r7, #0]
20000640:	2b3f      	cmp	r3, #63	; 0x3f
20000642:	ddf5      	ble.n	20000630 <graphic_clean_screen+0x30>
	for(int i=0; i < 8; i++){
20000644:	687b      	ldr	r3, [r7, #4]
20000646:	3301      	adds	r3, #1
20000648:	607b      	str	r3, [r7, #4]
2000064a:	687b      	ldr	r3, [r7, #4]
2000064c:	2b07      	cmp	r3, #7
2000064e:	dddd      	ble.n	2000060c <graphic_clean_screen+0xc>
		}
	}
}
20000650:	46c0      	nop			; (mov r8, r8)
20000652:	46bd      	mov	sp, r7
20000654:	b002      	add	sp, #8
20000656:	bd80      	pop	{r7, pc}

20000658 <graphic_pixel>:

void graphic_pixel(unsigned char x, unsigned char y, unsigned char set){
20000658:	b5b0      	push	{r4, r5, r7, lr}
2000065a:	b084      	sub	sp, #16
2000065c:	af00      	add	r7, sp, #0
2000065e:	0004      	movs	r4, r0
20000660:	0008      	movs	r0, r1
20000662:	0011      	movs	r1, r2
20000664:	1dfb      	adds	r3, r7, #7
20000666:	1c22      	adds	r2, r4, #0
20000668:	701a      	strb	r2, [r3, #0]
2000066a:	1dbb      	adds	r3, r7, #6
2000066c:	1c02      	adds	r2, r0, #0
2000066e:	701a      	strb	r2, [r3, #0]
20000670:	1d7b      	adds	r3, r7, #5
20000672:	1c0a      	adds	r2, r1, #0
20000674:	701a      	strb	r2, [r3, #0]
	x -= 1;
20000676:	1dfb      	adds	r3, r7, #7
20000678:	1dfa      	adds	r2, r7, #7
2000067a:	7812      	ldrb	r2, [r2, #0]
2000067c:	3a01      	subs	r2, #1
2000067e:	701a      	strb	r2, [r3, #0]
	y -= 1;
20000680:	1dbb      	adds	r3, r7, #6
20000682:	1dba      	adds	r2, r7, #6
20000684:	7812      	ldrb	r2, [r2, #0]
20000686:	3a01      	subs	r2, #1
20000688:	701a      	strb	r2, [r3, #0]
	char controller;
	if (x > 127 | y > 63)
2000068a:	1dfb      	adds	r3, r7, #7
2000068c:	781b      	ldrb	r3, [r3, #0]
2000068e:	b25b      	sxtb	r3, r3
20000690:	b2db      	uxtb	r3, r3
20000692:	09db      	lsrs	r3, r3, #7
20000694:	b2da      	uxtb	r2, r3
20000696:	1dbb      	adds	r3, r7, #6
20000698:	781b      	ldrb	r3, [r3, #0]
2000069a:	213f      	movs	r1, #63	; 0x3f
2000069c:	4299      	cmp	r1, r3
2000069e:	419b      	sbcs	r3, r3
200006a0:	425b      	negs	r3, r3
200006a2:	b2db      	uxtb	r3, r3
200006a4:	4313      	orrs	r3, r2
200006a6:	b2db      	uxtb	r3, r3
200006a8:	2b00      	cmp	r3, #0
200006aa:	d16f      	bne.n	2000078c <graphic_pixel+0x134>
		{return;}
	char index = (1<<(y%8));
200006ac:	1dbb      	adds	r3, r7, #6
200006ae:	781b      	ldrb	r3, [r3, #0]
200006b0:	2207      	movs	r2, #7
200006b2:	4013      	ands	r3, r2
200006b4:	2201      	movs	r2, #1
200006b6:	409a      	lsls	r2, r3
200006b8:	230d      	movs	r3, #13
200006ba:	18fb      	adds	r3, r7, r3
200006bc:	701a      	strb	r2, [r3, #0]
	if (x<64){
200006be:	1dfb      	adds	r3, r7, #7
200006c0:	781b      	ldrb	r3, [r3, #0]
200006c2:	2b3f      	cmp	r3, #63	; 0x3f
200006c4:	d804      	bhi.n	200006d0 <graphic_pixel+0x78>
		controller = B_CS1;
200006c6:	230f      	movs	r3, #15
200006c8:	18fb      	adds	r3, r7, r3
200006ca:	2208      	movs	r2, #8
200006cc:	701a      	strb	r2, [r3, #0]
200006ce:	e008      	b.n	200006e2 <graphic_pixel+0x8a>
	}
	else{
		controller = B_CS2;
200006d0:	230f      	movs	r3, #15
200006d2:	18fb      	adds	r3, r7, r3
200006d4:	2210      	movs	r2, #16
200006d6:	701a      	strb	r2, [r3, #0]
		x -= 64;
200006d8:	1dfb      	adds	r3, r7, #7
200006da:	1dfa      	adds	r2, r7, #7
200006dc:	7812      	ldrb	r2, [r2, #0]
200006de:	3a40      	subs	r2, #64	; 0x40
200006e0:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_command(0x40 | x, controller);
200006e2:	1dfb      	adds	r3, r7, #7
200006e4:	781b      	ldrb	r3, [r3, #0]
200006e6:	2240      	movs	r2, #64	; 0x40
200006e8:	4313      	orrs	r3, r2
200006ea:	b2da      	uxtb	r2, r3
200006ec:	250f      	movs	r5, #15
200006ee:	197b      	adds	r3, r7, r5
200006f0:	781b      	ldrb	r3, [r3, #0]
200006f2:	0019      	movs	r1, r3
200006f4:	0010      	movs	r0, r2
200006f6:	f7ff fec3 	bl	20000480 <graphic_write_command>
	graphic_write_command(0xB8 | (y/8), controller);
200006fa:	1dbb      	adds	r3, r7, #6
200006fc:	781b      	ldrb	r3, [r3, #0]
200006fe:	08db      	lsrs	r3, r3, #3
20000700:	b2db      	uxtb	r3, r3
20000702:	2248      	movs	r2, #72	; 0x48
20000704:	4252      	negs	r2, r2
20000706:	4313      	orrs	r3, r2
20000708:	b2da      	uxtb	r2, r3
2000070a:	197b      	adds	r3, r7, r5
2000070c:	781b      	ldrb	r3, [r3, #0]
2000070e:	0019      	movs	r1, r3
20000710:	0010      	movs	r0, r2
20000712:	f7ff feb5 	bl	20000480 <graphic_write_command>
	unsigned char temp = graphic_read_data(controller);
20000716:	230e      	movs	r3, #14
20000718:	18fc      	adds	r4, r7, r3
2000071a:	197b      	adds	r3, r7, r5
2000071c:	781b      	ldrb	r3, [r3, #0]
2000071e:	0018      	movs	r0, r3
20000720:	f7ff ff0a 	bl	20000538 <graphic_read_data>
20000724:	0003      	movs	r3, r0
20000726:	7023      	strb	r3, [r4, #0]
	graphic_write_command(0x40 | x, controller);
20000728:	1dfb      	adds	r3, r7, #7
2000072a:	781b      	ldrb	r3, [r3, #0]
2000072c:	2240      	movs	r2, #64	; 0x40
2000072e:	4313      	orrs	r3, r2
20000730:	b2da      	uxtb	r2, r3
20000732:	197b      	adds	r3, r7, r5
20000734:	781b      	ldrb	r3, [r3, #0]
20000736:	0019      	movs	r1, r3
20000738:	0010      	movs	r0, r2
2000073a:	f7ff fea1 	bl	20000480 <graphic_write_command>
	if(set){
2000073e:	1d7b      	adds	r3, r7, #5
20000740:	781b      	ldrb	r3, [r3, #0]
20000742:	2b00      	cmp	r3, #0
20000744:	d009      	beq.n	2000075a <graphic_pixel+0x102>
		temp = temp | index;
20000746:	220e      	movs	r2, #14
20000748:	18bb      	adds	r3, r7, r2
2000074a:	18b9      	adds	r1, r7, r2
2000074c:	220d      	movs	r2, #13
2000074e:	18ba      	adds	r2, r7, r2
20000750:	7809      	ldrb	r1, [r1, #0]
20000752:	7812      	ldrb	r2, [r2, #0]
20000754:	430a      	orrs	r2, r1
20000756:	701a      	strb	r2, [r3, #0]
20000758:	e00d      	b.n	20000776 <graphic_pixel+0x11e>
	}
	else{
		temp = temp &~index;
2000075a:	230d      	movs	r3, #13
2000075c:	18fb      	adds	r3, r7, r3
2000075e:	781b      	ldrb	r3, [r3, #0]
20000760:	b25b      	sxtb	r3, r3
20000762:	43db      	mvns	r3, r3
20000764:	b25b      	sxtb	r3, r3
20000766:	210e      	movs	r1, #14
20000768:	187a      	adds	r2, r7, r1
2000076a:	7812      	ldrb	r2, [r2, #0]
2000076c:	b252      	sxtb	r2, r2
2000076e:	4013      	ands	r3, r2
20000770:	b25a      	sxtb	r2, r3
20000772:	187b      	adds	r3, r7, r1
20000774:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_data(temp, controller);
20000776:	230f      	movs	r3, #15
20000778:	18fb      	adds	r3, r7, r3
2000077a:	781a      	ldrb	r2, [r3, #0]
2000077c:	230e      	movs	r3, #14
2000077e:	18fb      	adds	r3, r7, r3
20000780:	781b      	ldrb	r3, [r3, #0]
20000782:	0011      	movs	r1, r2
20000784:	0018      	movs	r0, r3
20000786:	f7ff fea7 	bl	200004d8 <graphic_write_data>
2000078a:	e000      	b.n	2000078e <graphic_pixel+0x136>
		{return;}
2000078c:	46c0      	nop			; (mov r8, r8)
}
2000078e:	46bd      	mov	sp, r7
20000790:	b004      	add	sp, #16
20000792:	bdb0      	pop	{r4, r5, r7, pc}

20000794 <lcdBufferDraw>:

void lcdBufferDraw(plcdBuffer toDraw){
20000794:	b5f0      	push	{r4, r5, r6, r7, lr}
20000796:	b085      	sub	sp, #20
20000798:	af00      	add	r7, sp, #0
2000079a:	6078      	str	r0, [r7, #4]
	//char (*display)[8] = (char(*)[8])toDraw->display;
	
	unsigned char x,i,j;
	unsigned char controller, data;
	for(i=0; i<128; i++){
2000079c:	230e      	movs	r3, #14
2000079e:	18fb      	adds	r3, r7, r3
200007a0:	2200      	movs	r2, #0
200007a2:	701a      	strb	r2, [r3, #0]
200007a4:	e097      	b.n	200008d6 <lcdBufferDraw+0x142>
		for(j=0; j<8; j++){
200007a6:	230d      	movs	r3, #13
200007a8:	18fb      	adds	r3, r7, r3
200007aa:	2200      	movs	r2, #0
200007ac:	701a      	strb	r2, [r3, #0]
200007ae:	e086      	b.n	200008be <lcdBufferDraw+0x12a>
			char updated = (toDraw->changeLog[i] &~ (1<<j));
200007b0:	230e      	movs	r3, #14
200007b2:	18fb      	adds	r3, r7, r3
200007b4:	781a      	ldrb	r2, [r3, #0]
200007b6:	6879      	ldr	r1, [r7, #4]
200007b8:	2380      	movs	r3, #128	; 0x80
200007ba:	00db      	lsls	r3, r3, #3
200007bc:	188a      	adds	r2, r1, r2
200007be:	18d3      	adds	r3, r2, r3
200007c0:	781b      	ldrb	r3, [r3, #0]
200007c2:	b25b      	sxtb	r3, r3
200007c4:	220d      	movs	r2, #13
200007c6:	18ba      	adds	r2, r7, r2
200007c8:	7812      	ldrb	r2, [r2, #0]
200007ca:	2101      	movs	r1, #1
200007cc:	4091      	lsls	r1, r2
200007ce:	000a      	movs	r2, r1
200007d0:	b252      	sxtb	r2, r2
200007d2:	43d2      	mvns	r2, r2
200007d4:	b252      	sxtb	r2, r2
200007d6:	4013      	ands	r3, r2
200007d8:	b25a      	sxtb	r2, r3
200007da:	210b      	movs	r1, #11
200007dc:	187b      	adds	r3, r7, r1
200007de:	701a      	strb	r2, [r3, #0]
			if(updated){
200007e0:	187b      	adds	r3, r7, r1
200007e2:	781b      	ldrb	r3, [r3, #0]
200007e4:	2b00      	cmp	r3, #0
200007e6:	d064      	beq.n	200008b2 <lcdBufferDraw+0x11e>
				if(i<64){
200007e8:	230e      	movs	r3, #14
200007ea:	18fb      	adds	r3, r7, r3
200007ec:	781b      	ldrb	r3, [r3, #0]
200007ee:	2b3f      	cmp	r3, #63	; 0x3f
200007f0:	d80a      	bhi.n	20000808 <lcdBufferDraw+0x74>
					controller = B_CS1;
200007f2:	230c      	movs	r3, #12
200007f4:	18fb      	adds	r3, r7, r3
200007f6:	2208      	movs	r2, #8
200007f8:	701a      	strb	r2, [r3, #0]
					x=i;
200007fa:	230f      	movs	r3, #15
200007fc:	18fb      	adds	r3, r7, r3
200007fe:	220e      	movs	r2, #14
20000800:	18ba      	adds	r2, r7, r2
20000802:	7812      	ldrb	r2, [r2, #0]
20000804:	701a      	strb	r2, [r3, #0]
20000806:	e00a      	b.n	2000081e <lcdBufferDraw+0x8a>
				}
				else{
					controller = B_CS2;
20000808:	230c      	movs	r3, #12
2000080a:	18fb      	adds	r3, r7, r3
2000080c:	2210      	movs	r2, #16
2000080e:	701a      	strb	r2, [r3, #0]
					x = i-64;
20000810:	230f      	movs	r3, #15
20000812:	18fb      	adds	r3, r7, r3
20000814:	220e      	movs	r2, #14
20000816:	18ba      	adds	r2, r7, r2
20000818:	7812      	ldrb	r2, [r2, #0]
2000081a:	3a40      	subs	r2, #64	; 0x40
2000081c:	701a      	strb	r2, [r3, #0]
				}
				data = toDraw->display[i][j];
2000081e:	240e      	movs	r4, #14
20000820:	193b      	adds	r3, r7, r4
20000822:	7819      	ldrb	r1, [r3, #0]
20000824:	250d      	movs	r5, #13
20000826:	197b      	adds	r3, r7, r5
20000828:	781a      	ldrb	r2, [r3, #0]
2000082a:	230a      	movs	r3, #10
2000082c:	18fb      	adds	r3, r7, r3
2000082e:	6878      	ldr	r0, [r7, #4]
20000830:	00c9      	lsls	r1, r1, #3
20000832:	1841      	adds	r1, r0, r1
20000834:	5c8a      	ldrb	r2, [r1, r2]
20000836:	701a      	strb	r2, [r3, #0]
				graphic_write_command(adress | x, controller);
20000838:	220f      	movs	r2, #15
2000083a:	18bb      	adds	r3, r7, r2
2000083c:	781b      	ldrb	r3, [r3, #0]
2000083e:	2240      	movs	r2, #64	; 0x40
20000840:	4313      	orrs	r3, r2
20000842:	b2da      	uxtb	r2, r3
20000844:	260c      	movs	r6, #12
20000846:	19bb      	adds	r3, r7, r6
20000848:	781b      	ldrb	r3, [r3, #0]
2000084a:	0019      	movs	r1, r3
2000084c:	0010      	movs	r0, r2
2000084e:	f7ff fe17 	bl	20000480 <graphic_write_command>
				graphic_write_command(page | j, controller);
20000852:	197b      	adds	r3, r7, r5
20000854:	781b      	ldrb	r3, [r3, #0]
20000856:	2248      	movs	r2, #72	; 0x48
20000858:	4252      	negs	r2, r2
2000085a:	4313      	orrs	r3, r2
2000085c:	b2da      	uxtb	r2, r3
2000085e:	19bb      	adds	r3, r7, r6
20000860:	781b      	ldrb	r3, [r3, #0]
20000862:	0019      	movs	r1, r3
20000864:	0010      	movs	r0, r2
20000866:	f7ff fe0b 	bl	20000480 <graphic_write_command>
				graphic_write_data(data, controller);
2000086a:	19bb      	adds	r3, r7, r6
2000086c:	781a      	ldrb	r2, [r3, #0]
2000086e:	230a      	movs	r3, #10
20000870:	18fb      	adds	r3, r7, r3
20000872:	781b      	ldrb	r3, [r3, #0]
20000874:	0011      	movs	r1, r2
20000876:	0018      	movs	r0, r3
20000878:	f7ff fe2e 	bl	200004d8 <graphic_write_data>
				toDraw->changeLog[i] = (toDraw->changeLog[i] | (1<<j));
2000087c:	193b      	adds	r3, r7, r4
2000087e:	781a      	ldrb	r2, [r3, #0]
20000880:	6879      	ldr	r1, [r7, #4]
20000882:	2380      	movs	r3, #128	; 0x80
20000884:	00db      	lsls	r3, r3, #3
20000886:	188a      	adds	r2, r1, r2
20000888:	18d3      	adds	r3, r2, r3
2000088a:	781b      	ldrb	r3, [r3, #0]
2000088c:	b25a      	sxtb	r2, r3
2000088e:	197b      	adds	r3, r7, r5
20000890:	781b      	ldrb	r3, [r3, #0]
20000892:	2101      	movs	r1, #1
20000894:	4099      	lsls	r1, r3
20000896:	000b      	movs	r3, r1
20000898:	b25b      	sxtb	r3, r3
2000089a:	4313      	orrs	r3, r2
2000089c:	b259      	sxtb	r1, r3
2000089e:	193b      	adds	r3, r7, r4
200008a0:	781a      	ldrb	r2, [r3, #0]
200008a2:	b2c8      	uxtb	r0, r1
200008a4:	6879      	ldr	r1, [r7, #4]
200008a6:	2380      	movs	r3, #128	; 0x80
200008a8:	00db      	lsls	r3, r3, #3
200008aa:	188a      	adds	r2, r1, r2
200008ac:	18d3      	adds	r3, r2, r3
200008ae:	1c02      	adds	r2, r0, #0
200008b0:	701a      	strb	r2, [r3, #0]
		for(j=0; j<8; j++){
200008b2:	210d      	movs	r1, #13
200008b4:	187b      	adds	r3, r7, r1
200008b6:	781a      	ldrb	r2, [r3, #0]
200008b8:	187b      	adds	r3, r7, r1
200008ba:	3201      	adds	r2, #1
200008bc:	701a      	strb	r2, [r3, #0]
200008be:	230d      	movs	r3, #13
200008c0:	18fb      	adds	r3, r7, r3
200008c2:	781b      	ldrb	r3, [r3, #0]
200008c4:	2b07      	cmp	r3, #7
200008c6:	d800      	bhi.n	200008ca <lcdBufferDraw+0x136>
200008c8:	e772      	b.n	200007b0 <lcdBufferDraw+0x1c>
	for(i=0; i<128; i++){
200008ca:	210e      	movs	r1, #14
200008cc:	187b      	adds	r3, r7, r1
200008ce:	781a      	ldrb	r2, [r3, #0]
200008d0:	187b      	adds	r3, r7, r1
200008d2:	3201      	adds	r2, #1
200008d4:	701a      	strb	r2, [r3, #0]
200008d6:	230e      	movs	r3, #14
200008d8:	18fb      	adds	r3, r7, r3
200008da:	781b      	ldrb	r3, [r3, #0]
200008dc:	b25b      	sxtb	r3, r3
200008de:	2b00      	cmp	r3, #0
200008e0:	db00      	blt.n	200008e4 <lcdBufferDraw+0x150>
200008e2:	e760      	b.n	200007a6 <lcdBufferDraw+0x12>
			}
		}
	}
	
}
200008e4:	46c0      	nop			; (mov r8, r8)
200008e6:	46bd      	mov	sp, r7
200008e8:	b005      	add	sp, #20
200008ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

200008ec <lcdBufferWritePixel>:

void lcdBufferWritePixel(plcdBuffer lcdBuff, unsigned char x, unsigned char y, unsigned char set){
200008ec:	b590      	push	{r4, r7, lr}
200008ee:	b085      	sub	sp, #20
200008f0:	af00      	add	r7, sp, #0
200008f2:	6078      	str	r0, [r7, #4]
200008f4:	000c      	movs	r4, r1
200008f6:	0010      	movs	r0, r2
200008f8:	0019      	movs	r1, r3
200008fa:	1cfb      	adds	r3, r7, #3
200008fc:	1c22      	adds	r2, r4, #0
200008fe:	701a      	strb	r2, [r3, #0]
20000900:	1cbb      	adds	r3, r7, #2
20000902:	1c02      	adds	r2, r0, #0
20000904:	701a      	strb	r2, [r3, #0]
20000906:	1c7b      	adds	r3, r7, #1
20000908:	1c0a      	adds	r2, r1, #0
2000090a:	701a      	strb	r2, [r3, #0]
	char controller;
	if (x > 127 | y > 63)
2000090c:	1cfb      	adds	r3, r7, #3
2000090e:	781b      	ldrb	r3, [r3, #0]
20000910:	b25b      	sxtb	r3, r3
20000912:	b2db      	uxtb	r3, r3
20000914:	09db      	lsrs	r3, r3, #7
20000916:	b2da      	uxtb	r2, r3
20000918:	1cbb      	adds	r3, r7, #2
2000091a:	781b      	ldrb	r3, [r3, #0]
2000091c:	213f      	movs	r1, #63	; 0x3f
2000091e:	4299      	cmp	r1, r3
20000920:	419b      	sbcs	r3, r3
20000922:	425b      	negs	r3, r3
20000924:	b2db      	uxtb	r3, r3
20000926:	4313      	orrs	r3, r2
20000928:	b2db      	uxtb	r3, r3
2000092a:	2b00      	cmp	r3, #0
2000092c:	d16c      	bne.n	20000a08 <lcdBufferWritePixel+0x11c>
		{return;}
	if (x<64){
2000092e:	1cfb      	adds	r3, r7, #3
20000930:	781b      	ldrb	r3, [r3, #0]
20000932:	2b3f      	cmp	r3, #63	; 0x3f
20000934:	d804      	bhi.n	20000940 <lcdBufferWritePixel+0x54>
		controller = B_CS1;
20000936:	230f      	movs	r3, #15
20000938:	18fb      	adds	r3, r7, r3
2000093a:	2208      	movs	r2, #8
2000093c:	701a      	strb	r2, [r3, #0]
2000093e:	e003      	b.n	20000948 <lcdBufferWritePixel+0x5c>
	}
	else{
		controller = B_CS2;
20000940:	230f      	movs	r3, #15
20000942:	18fb      	adds	r3, r7, r3
20000944:	2210      	movs	r2, #16
20000946:	701a      	strb	r2, [r3, #0]
	}
	char index = (1<<(y%8));
20000948:	1cbb      	adds	r3, r7, #2
2000094a:	781b      	ldrb	r3, [r3, #0]
2000094c:	2207      	movs	r2, #7
2000094e:	4013      	ands	r3, r2
20000950:	2201      	movs	r2, #1
20000952:	409a      	lsls	r2, r3
20000954:	230e      	movs	r3, #14
20000956:	18fb      	adds	r3, r7, r3
20000958:	701a      	strb	r2, [r3, #0]
	if(set){
2000095a:	1c7b      	adds	r3, r7, #1
2000095c:	781b      	ldrb	r3, [r3, #0]
2000095e:	2b00      	cmp	r3, #0
20000960:	d016      	beq.n	20000990 <lcdBufferWritePixel+0xa4>
		lcdBuff->display[x][y/8] |= index;
20000962:	1cfb      	adds	r3, r7, #3
20000964:	781b      	ldrb	r3, [r3, #0]
20000966:	1cba      	adds	r2, r7, #2
20000968:	7812      	ldrb	r2, [r2, #0]
2000096a:	08d2      	lsrs	r2, r2, #3
2000096c:	b2d0      	uxtb	r0, r2
2000096e:	0001      	movs	r1, r0
20000970:	687a      	ldr	r2, [r7, #4]
20000972:	00db      	lsls	r3, r3, #3
20000974:	18d3      	adds	r3, r2, r3
20000976:	5c59      	ldrb	r1, [r3, r1]
20000978:	1cfb      	adds	r3, r7, #3
2000097a:	781b      	ldrb	r3, [r3, #0]
2000097c:	220e      	movs	r2, #14
2000097e:	18ba      	adds	r2, r7, r2
20000980:	7812      	ldrb	r2, [r2, #0]
20000982:	430a      	orrs	r2, r1
20000984:	b2d1      	uxtb	r1, r2
20000986:	687a      	ldr	r2, [r7, #4]
20000988:	00db      	lsls	r3, r3, #3
2000098a:	18d3      	adds	r3, r2, r3
2000098c:	1c0a      	adds	r2, r1, #0
2000098e:	541a      	strb	r2, [r3, r0]
	}
	if(!set){
20000990:	1c7b      	adds	r3, r7, #1
20000992:	781b      	ldrb	r3, [r3, #0]
20000994:	2b00      	cmp	r3, #0
20000996:	d11b      	bne.n	200009d0 <lcdBufferWritePixel+0xe4>
		lcdBuff->display[x][y/8] &= ~index;
20000998:	1cfb      	adds	r3, r7, #3
2000099a:	781b      	ldrb	r3, [r3, #0]
2000099c:	1cba      	adds	r2, r7, #2
2000099e:	7812      	ldrb	r2, [r2, #0]
200009a0:	08d2      	lsrs	r2, r2, #3
200009a2:	b2d1      	uxtb	r1, r2
200009a4:	0008      	movs	r0, r1
200009a6:	687a      	ldr	r2, [r7, #4]
200009a8:	00db      	lsls	r3, r3, #3
200009aa:	18d3      	adds	r3, r2, r3
200009ac:	5c1b      	ldrb	r3, [r3, r0]
200009ae:	b25b      	sxtb	r3, r3
200009b0:	220e      	movs	r2, #14
200009b2:	18ba      	adds	r2, r7, r2
200009b4:	7812      	ldrb	r2, [r2, #0]
200009b6:	b252      	sxtb	r2, r2
200009b8:	43d2      	mvns	r2, r2
200009ba:	b252      	sxtb	r2, r2
200009bc:	4013      	ands	r3, r2
200009be:	b25a      	sxtb	r2, r3
200009c0:	1cfb      	adds	r3, r7, #3
200009c2:	781b      	ldrb	r3, [r3, #0]
200009c4:	b2d0      	uxtb	r0, r2
200009c6:	687a      	ldr	r2, [r7, #4]
200009c8:	00db      	lsls	r3, r3, #3
200009ca:	18d3      	adds	r3, r2, r3
200009cc:	1c02      	adds	r2, r0, #0
200009ce:	545a      	strb	r2, [r3, r1]
	}
	lcdBuff->changeLog[x] |= (1<<y);
200009d0:	1cfb      	adds	r3, r7, #3
200009d2:	781a      	ldrb	r2, [r3, #0]
200009d4:	6879      	ldr	r1, [r7, #4]
200009d6:	2380      	movs	r3, #128	; 0x80
200009d8:	00db      	lsls	r3, r3, #3
200009da:	188a      	adds	r2, r1, r2
200009dc:	18d3      	adds	r3, r2, r3
200009de:	781b      	ldrb	r3, [r3, #0]
200009e0:	b25a      	sxtb	r2, r3
200009e2:	1cbb      	adds	r3, r7, #2
200009e4:	781b      	ldrb	r3, [r3, #0]
200009e6:	2101      	movs	r1, #1
200009e8:	4099      	lsls	r1, r3
200009ea:	000b      	movs	r3, r1
200009ec:	b25b      	sxtb	r3, r3
200009ee:	4313      	orrs	r3, r2
200009f0:	b259      	sxtb	r1, r3
200009f2:	1cfb      	adds	r3, r7, #3
200009f4:	781a      	ldrb	r2, [r3, #0]
200009f6:	b2c8      	uxtb	r0, r1
200009f8:	6879      	ldr	r1, [r7, #4]
200009fa:	2380      	movs	r3, #128	; 0x80
200009fc:	00db      	lsls	r3, r3, #3
200009fe:	188a      	adds	r2, r1, r2
20000a00:	18d3      	adds	r3, r2, r3
20000a02:	1c02      	adds	r2, r0, #0
20000a04:	701a      	strb	r2, [r3, #0]
20000a06:	e000      	b.n	20000a0a <lcdBufferWritePixel+0x11e>
		{return;}
20000a08:	46c0      	nop			; (mov r8, r8)
}
20000a0a:	46bd      	mov	sp, r7
20000a0c:	b005      	add	sp, #20
20000a0e:	bd90      	pop	{r4, r7, pc}

20000a10 <buffer_clear>:
	buffer_display,
	buffer_changeLog,
	lcdBufferDraw
};*/

void buffer_clear(plcdBuffer plcdBuff){
20000a10:	b580      	push	{r7, lr}
20000a12:	b084      	sub	sp, #16
20000a14:	af00      	add	r7, sp, #0
20000a16:	6078      	str	r0, [r7, #4]
	for(int i=0; i<128; i++){
20000a18:	2300      	movs	r3, #0
20000a1a:	60fb      	str	r3, [r7, #12]
20000a1c:	e01b      	b.n	20000a56 <buffer_clear+0x46>
		plcdBuff->changeLog[i] = 0;
20000a1e:	6879      	ldr	r1, [r7, #4]
20000a20:	2380      	movs	r3, #128	; 0x80
20000a22:	00db      	lsls	r3, r3, #3
20000a24:	68fa      	ldr	r2, [r7, #12]
20000a26:	188a      	adds	r2, r1, r2
20000a28:	18d3      	adds	r3, r2, r3
20000a2a:	2200      	movs	r2, #0
20000a2c:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<8; j++){
20000a2e:	2300      	movs	r3, #0
20000a30:	60bb      	str	r3, [r7, #8]
20000a32:	e00a      	b.n	20000a4a <buffer_clear+0x3a>
			plcdBuff->display[i][j] = 0;
20000a34:	687a      	ldr	r2, [r7, #4]
20000a36:	68fb      	ldr	r3, [r7, #12]
20000a38:	00db      	lsls	r3, r3, #3
20000a3a:	18d2      	adds	r2, r2, r3
20000a3c:	68bb      	ldr	r3, [r7, #8]
20000a3e:	18d3      	adds	r3, r2, r3
20000a40:	2200      	movs	r2, #0
20000a42:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<8; j++){
20000a44:	68bb      	ldr	r3, [r7, #8]
20000a46:	3301      	adds	r3, #1
20000a48:	60bb      	str	r3, [r7, #8]
20000a4a:	68bb      	ldr	r3, [r7, #8]
20000a4c:	2b07      	cmp	r3, #7
20000a4e:	ddf1      	ble.n	20000a34 <buffer_clear+0x24>
	for(int i=0; i<128; i++){
20000a50:	68fb      	ldr	r3, [r7, #12]
20000a52:	3301      	adds	r3, #1
20000a54:	60fb      	str	r3, [r7, #12]
20000a56:	68fb      	ldr	r3, [r7, #12]
20000a58:	2b7f      	cmp	r3, #127	; 0x7f
20000a5a:	dde0      	ble.n	20000a1e <buffer_clear+0xe>
		}
	}
}
20000a5c:	46c0      	nop			; (mov r8, r8)
20000a5e:	46bd      	mov	sp, r7
20000a60:	b004      	add	sp, #16
20000a62:	bd80      	pop	{r7, pc}

20000a64 <pong_init>:
#include "ponglogic.h"
#include "portDeclare.h"



void pong_init(){
20000a64:	b580      	push	{r7, lr}
20000a66:	af00      	add	r7, sp, #0
	
}
20000a68:	46c0      	nop			; (mov r8, r8)
20000a6a:	46bd      	mov	sp, r7
20000a6c:	bd80      	pop	{r7, pc}

20000a6e <set_object_speed>:

void set_object_speed(pobject o, int speedx, int speedy){
20000a6e:	b580      	push	{r7, lr}
20000a70:	b084      	sub	sp, #16
20000a72:	af00      	add	r7, sp, #0
20000a74:	60f8      	str	r0, [r7, #12]
20000a76:	60b9      	str	r1, [r7, #8]
20000a78:	607a      	str	r2, [r7, #4]
	o->dirx = speedx;
20000a7a:	68fb      	ldr	r3, [r7, #12]
20000a7c:	68ba      	ldr	r2, [r7, #8]
20000a7e:	605a      	str	r2, [r3, #4]
	o->diry = speedy;
20000a80:	68fb      	ldr	r3, [r7, #12]
20000a82:	687a      	ldr	r2, [r7, #4]
20000a84:	609a      	str	r2, [r3, #8]
}
20000a86:	46c0      	nop			; (mov r8, r8)
20000a88:	46bd      	mov	sp, r7
20000a8a:	b004      	add	sp, #16
20000a8c:	bd80      	pop	{r7, pc}

20000a8e <pong_set_position>:

void pong_set_position(pobject o, int posx, int posy){
20000a8e:	b580      	push	{r7, lr}
20000a90:	b084      	sub	sp, #16
20000a92:	af00      	add	r7, sp, #0
20000a94:	60f8      	str	r0, [r7, #12]
20000a96:	60b9      	str	r1, [r7, #8]
20000a98:	607a      	str	r2, [r7, #4]
	o->posx = posx;
20000a9a:	68fb      	ldr	r3, [r7, #12]
20000a9c:	68ba      	ldr	r2, [r7, #8]
20000a9e:	60da      	str	r2, [r3, #12]
	o->posy = posy;
20000aa0:	68fb      	ldr	r3, [r7, #12]
20000aa2:	687a      	ldr	r2, [r7, #4]
20000aa4:	611a      	str	r2, [r3, #16]
}
20000aa6:	46c0      	nop			; (mov r8, r8)
20000aa8:	46bd      	mov	sp, r7
20000aaa:	b004      	add	sp, #16
20000aac:	bd80      	pop	{r7, pc}

20000aae <draw_object>:

void draw_object(object* o){
20000aae:	b580      	push	{r7, lr}
20000ab0:	b086      	sub	sp, #24
20000ab2:	af00      	add	r7, sp, #0
20000ab4:	6078      	str	r0, [r7, #4]
	for (int i=0; i < o->geo->numpoints; i++){
20000ab6:	2300      	movs	r3, #0
20000ab8:	617b      	str	r3, [r7, #20]
20000aba:	e020      	b.n	20000afe <draw_object+0x50>
		int drawx = o->posx + o->geo->px[i].x;
20000abc:	687b      	ldr	r3, [r7, #4]
20000abe:	68da      	ldr	r2, [r3, #12]
20000ac0:	687b      	ldr	r3, [r7, #4]
20000ac2:	6819      	ldr	r1, [r3, #0]
20000ac4:	697b      	ldr	r3, [r7, #20]
20000ac6:	3304      	adds	r3, #4
20000ac8:	005b      	lsls	r3, r3, #1
20000aca:	18cb      	adds	r3, r1, r3
20000acc:	3304      	adds	r3, #4
20000ace:	781b      	ldrb	r3, [r3, #0]
20000ad0:	18d3      	adds	r3, r2, r3
20000ad2:	613b      	str	r3, [r7, #16]
		int drawy = o->posy + o->geo->px[i].y;
20000ad4:	687b      	ldr	r3, [r7, #4]
20000ad6:	691a      	ldr	r2, [r3, #16]
20000ad8:	687b      	ldr	r3, [r7, #4]
20000ada:	6819      	ldr	r1, [r3, #0]
20000adc:	697b      	ldr	r3, [r7, #20]
20000ade:	3304      	adds	r3, #4
20000ae0:	005b      	lsls	r3, r3, #1
20000ae2:	18cb      	adds	r3, r1, r3
20000ae4:	3305      	adds	r3, #5
20000ae6:	781b      	ldrb	r3, [r3, #0]
20000ae8:	18d3      	adds	r3, r2, r3
20000aea:	60fb      	str	r3, [r7, #12]
		graphic_pixel(drawx, drawy,1);
20000aec:	68f9      	ldr	r1, [r7, #12]
20000aee:	693b      	ldr	r3, [r7, #16]
20000af0:	2201      	movs	r2, #1
20000af2:	0018      	movs	r0, r3
20000af4:	f7ff fdb0 	bl	20000658 <graphic_pixel>
	for (int i=0; i < o->geo->numpoints; i++){
20000af8:	697b      	ldr	r3, [r7, #20]
20000afa:	3301      	adds	r3, #1
20000afc:	617b      	str	r3, [r7, #20]
20000afe:	687b      	ldr	r3, [r7, #4]
20000b00:	681b      	ldr	r3, [r3, #0]
20000b02:	681b      	ldr	r3, [r3, #0]
20000b04:	697a      	ldr	r2, [r7, #20]
20000b06:	429a      	cmp	r2, r3
20000b08:	dbd8      	blt.n	20000abc <draw_object+0xe>
	}
}
20000b0a:	46c0      	nop			; (mov r8, r8)
20000b0c:	46bd      	mov	sp, r7
20000b0e:	b006      	add	sp, #24
20000b10:	bd80      	pop	{r7, pc}

20000b12 <clear_object>:

void clear_object(object* o){
20000b12:	b580      	push	{r7, lr}
20000b14:	b084      	sub	sp, #16
20000b16:	af00      	add	r7, sp, #0
20000b18:	6078      	str	r0, [r7, #4]
	for (int i=0; i < o->geo->numpoints; i++){
20000b1a:	2300      	movs	r3, #0
20000b1c:	60fb      	str	r3, [r7, #12]
20000b1e:	e01c      	b.n	20000b5a <clear_object+0x48>
		graphic_pixel(o->posx + o->geo->px[i].x, o->posy + o->geo->px[i].y,0);
20000b20:	687b      	ldr	r3, [r7, #4]
20000b22:	68da      	ldr	r2, [r3, #12]
20000b24:	687b      	ldr	r3, [r7, #4]
20000b26:	6819      	ldr	r1, [r3, #0]
20000b28:	68fb      	ldr	r3, [r7, #12]
20000b2a:	3304      	adds	r3, #4
20000b2c:	005b      	lsls	r3, r3, #1
20000b2e:	18cb      	adds	r3, r1, r3
20000b30:	3304      	adds	r3, #4
20000b32:	781b      	ldrb	r3, [r3, #0]
20000b34:	18d0      	adds	r0, r2, r3
20000b36:	687b      	ldr	r3, [r7, #4]
20000b38:	691a      	ldr	r2, [r3, #16]
20000b3a:	687b      	ldr	r3, [r7, #4]
20000b3c:	6819      	ldr	r1, [r3, #0]
20000b3e:	68fb      	ldr	r3, [r7, #12]
20000b40:	3304      	adds	r3, #4
20000b42:	005b      	lsls	r3, r3, #1
20000b44:	18cb      	adds	r3, r1, r3
20000b46:	3305      	adds	r3, #5
20000b48:	781b      	ldrb	r3, [r3, #0]
20000b4a:	18d3      	adds	r3, r2, r3
20000b4c:	2200      	movs	r2, #0
20000b4e:	0019      	movs	r1, r3
20000b50:	f7ff fd82 	bl	20000658 <graphic_pixel>
	for (int i=0; i < o->geo->numpoints; i++){
20000b54:	68fb      	ldr	r3, [r7, #12]
20000b56:	3301      	adds	r3, #1
20000b58:	60fb      	str	r3, [r7, #12]
20000b5a:	687b      	ldr	r3, [r7, #4]
20000b5c:	681b      	ldr	r3, [r3, #0]
20000b5e:	681b      	ldr	r3, [r3, #0]
20000b60:	68fa      	ldr	r2, [r7, #12]
20000b62:	429a      	cmp	r2, r3
20000b64:	dbdc      	blt.n	20000b20 <clear_object+0xe>
	}
}
20000b66:	46c0      	nop			; (mov r8, r8)
20000b68:	46bd      	mov	sp, r7
20000b6a:	b004      	add	sp, #16
20000b6c:	bd80      	pop	{r7, pc}

20000b6e <move_object>:

void move_object(object* o){
20000b6e:	b580      	push	{r7, lr}
20000b70:	b082      	sub	sp, #8
20000b72:	af00      	add	r7, sp, #0
20000b74:	6078      	str	r0, [r7, #4]
	clear_object(o);
20000b76:	687b      	ldr	r3, [r7, #4]
20000b78:	0018      	movs	r0, r3
20000b7a:	f7ff ffca 	bl	20000b12 <clear_object>
	o->posx = o->posx + o->dirx;
20000b7e:	687b      	ldr	r3, [r7, #4]
20000b80:	68da      	ldr	r2, [r3, #12]
20000b82:	687b      	ldr	r3, [r7, #4]
20000b84:	685b      	ldr	r3, [r3, #4]
20000b86:	18d2      	adds	r2, r2, r3
20000b88:	687b      	ldr	r3, [r7, #4]
20000b8a:	60da      	str	r2, [r3, #12]
	o->posy = o->posy + o->diry;
20000b8c:	687b      	ldr	r3, [r7, #4]
20000b8e:	691a      	ldr	r2, [r3, #16]
20000b90:	687b      	ldr	r3, [r7, #4]
20000b92:	689b      	ldr	r3, [r3, #8]
20000b94:	18d2      	adds	r2, r2, r3
20000b96:	687b      	ldr	r3, [r7, #4]
20000b98:	611a      	str	r2, [r3, #16]
	if(o->posx <= 0 | o->posx >= 124){
20000b9a:	687b      	ldr	r3, [r7, #4]
20000b9c:	68db      	ldr	r3, [r3, #12]
20000b9e:	1e5a      	subs	r2, r3, #1
20000ba0:	4313      	orrs	r3, r2
20000ba2:	0fdb      	lsrs	r3, r3, #31
20000ba4:	b2da      	uxtb	r2, r3
20000ba6:	687b      	ldr	r3, [r7, #4]
20000ba8:	68db      	ldr	r3, [r3, #12]
20000baa:	2101      	movs	r1, #1
20000bac:	2b7b      	cmp	r3, #123	; 0x7b
20000bae:	dc01      	bgt.n	20000bb4 <move_object+0x46>
20000bb0:	2300      	movs	r3, #0
20000bb2:	1c19      	adds	r1, r3, #0
20000bb4:	b2cb      	uxtb	r3, r1
20000bb6:	4313      	orrs	r3, r2
20000bb8:	b2db      	uxtb	r3, r3
20000bba:	2b00      	cmp	r3, #0
20000bbc:	d004      	beq.n	20000bc8 <move_object+0x5a>
			o->dirx = -o->dirx;
20000bbe:	687b      	ldr	r3, [r7, #4]
20000bc0:	685b      	ldr	r3, [r3, #4]
20000bc2:	425a      	negs	r2, r3
20000bc4:	687b      	ldr	r3, [r7, #4]
20000bc6:	605a      	str	r2, [r3, #4]
	}
	if(o->posy <= 0 | o->posy >= 60){
20000bc8:	687b      	ldr	r3, [r7, #4]
20000bca:	691b      	ldr	r3, [r3, #16]
20000bcc:	1e5a      	subs	r2, r3, #1
20000bce:	4313      	orrs	r3, r2
20000bd0:	0fdb      	lsrs	r3, r3, #31
20000bd2:	b2da      	uxtb	r2, r3
20000bd4:	687b      	ldr	r3, [r7, #4]
20000bd6:	691b      	ldr	r3, [r3, #16]
20000bd8:	2101      	movs	r1, #1
20000bda:	2b3b      	cmp	r3, #59	; 0x3b
20000bdc:	dc01      	bgt.n	20000be2 <move_object+0x74>
20000bde:	2300      	movs	r3, #0
20000be0:	1c19      	adds	r1, r3, #0
20000be2:	b2cb      	uxtb	r3, r1
20000be4:	4313      	orrs	r3, r2
20000be6:	b2db      	uxtb	r3, r3
20000be8:	2b00      	cmp	r3, #0
20000bea:	d004      	beq.n	20000bf6 <move_object+0x88>
		o->diry = -o->diry;
20000bec:	687b      	ldr	r3, [r7, #4]
20000bee:	689b      	ldr	r3, [r3, #8]
20000bf0:	425a      	negs	r2, r3
20000bf2:	687b      	ldr	r3, [r7, #4]
20000bf4:	609a      	str	r2, [r3, #8]
	}
	draw_object(o);
20000bf6:	687b      	ldr	r3, [r7, #4]
20000bf8:	0018      	movs	r0, r3
20000bfa:	f7ff ff58 	bl	20000aae <draw_object>
}
20000bfe:	46c0      	nop			; (mov r8, r8)
20000c00:	46bd      	mov	sp, r7
20000c02:	b002      	add	sp, #8
20000c04:	bd80      	pop	{r7, pc}

20000c06 <pong_inc_playerScore>:

void pong_inc_playerScore(char* playerScore, char player){
20000c06:	b580      	push	{r7, lr}
20000c08:	b084      	sub	sp, #16
20000c0a:	af00      	add	r7, sp, #0
20000c0c:	6078      	str	r0, [r7, #4]
20000c0e:	000a      	movs	r2, r1
20000c10:	1cfb      	adds	r3, r7, #3
20000c12:	701a      	strb	r2, [r3, #0]
	ascii_init();
20000c14:	f000 f90e 	bl	20000e34 <ascii_init>
	playerScore[player-1]++;
20000c18:	1cfb      	adds	r3, r7, #3
20000c1a:	781b      	ldrb	r3, [r3, #0]
20000c1c:	3b01      	subs	r3, #1
20000c1e:	687a      	ldr	r2, [r7, #4]
20000c20:	18d3      	adds	r3, r2, r3
20000c22:	781a      	ldrb	r2, [r3, #0]
20000c24:	3201      	adds	r2, #1
20000c26:	b2d2      	uxtb	r2, r2
20000c28:	701a      	strb	r2, [r3, #0]
	ascii_gotoxy(10*player,1*player);
20000c2a:	1cfb      	adds	r3, r7, #3
20000c2c:	781a      	ldrb	r2, [r3, #0]
20000c2e:	0013      	movs	r3, r2
20000c30:	009b      	lsls	r3, r3, #2
20000c32:	189b      	adds	r3, r3, r2
20000c34:	005b      	lsls	r3, r3, #1
20000c36:	001a      	movs	r2, r3
20000c38:	1cfb      	adds	r3, r7, #3
20000c3a:	781b      	ldrb	r3, [r3, #0]
20000c3c:	0019      	movs	r1, r3
20000c3e:	0010      	movs	r0, r2
20000c40:	f000 f939 	bl	20000eb6 <ascii_gotoxy>
	char newScore = playerScore[player-1]+47;
20000c44:	1cfb      	adds	r3, r7, #3
20000c46:	781b      	ldrb	r3, [r3, #0]
20000c48:	3b01      	subs	r3, #1
20000c4a:	687a      	ldr	r2, [r7, #4]
20000c4c:	18d3      	adds	r3, r2, r3
20000c4e:	781a      	ldrb	r2, [r3, #0]
20000c50:	210f      	movs	r1, #15
20000c52:	187b      	adds	r3, r7, r1
20000c54:	322f      	adds	r2, #47	; 0x2f
20000c56:	701a      	strb	r2, [r3, #0]
	ascii_write_char(newScore);
20000c58:	187b      	adds	r3, r7, r1
20000c5a:	781b      	ldrb	r3, [r3, #0]
20000c5c:	0018      	movs	r0, r3
20000c5e:	f000 f90c 	bl	20000e7a <ascii_write_char>
	graphic_initialize();
20000c62:	f7ff fc8b 	bl	2000057c <graphic_initialize>
}
20000c66:	46c0      	nop			; (mov r8, r8)
20000c68:	46bd      	mov	sp, r7
20000c6a:	b004      	add	sp, #16
20000c6c:	bd80      	pop	{r7, pc}
	...

20000c70 <ascii_ctrl_bit_set>:

#include "delay.h"
#include "ascii_drivers.h"
#include "portDeclare.h"

void ascii_ctrl_bit_set(unsigned short x){
20000c70:	b580      	push	{r7, lr}
20000c72:	b084      	sub	sp, #16
20000c74:	af00      	add	r7, sp, #0
20000c76:	0002      	movs	r2, r0
20000c78:	1dbb      	adds	r3, r7, #6
20000c7a:	801a      	strh	r2, [r3, #0]
	
	unsigned char c;
	c = *portOdrLowE;
20000c7c:	4a0c      	ldr	r2, [pc, #48]	; (20000cb0 <ascii_ctrl_bit_set+0x40>)
20000c7e:	210f      	movs	r1, #15
20000c80:	187b      	adds	r3, r7, r1
20000c82:	7812      	ldrb	r2, [r2, #0]
20000c84:	701a      	strb	r2, [r3, #0]
	c |= ( B_SELECT | x );
20000c86:	1dbb      	adds	r3, r7, #6
20000c88:	881b      	ldrh	r3, [r3, #0]
20000c8a:	b2da      	uxtb	r2, r3
20000c8c:	187b      	adds	r3, r7, r1
20000c8e:	781b      	ldrb	r3, [r3, #0]
20000c90:	4313      	orrs	r3, r2
20000c92:	b2da      	uxtb	r2, r3
20000c94:	0008      	movs	r0, r1
20000c96:	187b      	adds	r3, r7, r1
20000c98:	2104      	movs	r1, #4
20000c9a:	430a      	orrs	r2, r1
20000c9c:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = c; 
20000c9e:	4a04      	ldr	r2, [pc, #16]	; (20000cb0 <ascii_ctrl_bit_set+0x40>)
20000ca0:	0001      	movs	r1, r0
20000ca2:	187b      	adds	r3, r7, r1
20000ca4:	781b      	ldrb	r3, [r3, #0]
20000ca6:	7013      	strb	r3, [r2, #0]
}
20000ca8:	46c0      	nop			; (mov r8, r8)
20000caa:	46bd      	mov	sp, r7
20000cac:	b004      	add	sp, #16
20000cae:	bd80      	pop	{r7, pc}
20000cb0:	40021014 	andmi	r1, r2, r4, lsl r0

20000cb4 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned short x){
20000cb4:	b580      	push	{r7, lr}
20000cb6:	b084      	sub	sp, #16
20000cb8:	af00      	add	r7, sp, #0
20000cba:	0002      	movs	r2, r0
20000cbc:	1dbb      	adds	r3, r7, #6
20000cbe:	801a      	strh	r2, [r3, #0]
	unsigned char c;
	c = *portOdrLowE;
20000cc0:	4a0d      	ldr	r2, [pc, #52]	; (20000cf8 <ascii_ctrl_bit_clear+0x44>)
20000cc2:	210f      	movs	r1, #15
20000cc4:	187b      	adds	r3, r7, r1
20000cc6:	7812      	ldrb	r2, [r2, #0]
20000cc8:	701a      	strb	r2, [r3, #0]
	c = B_SELECT | ( c & ~x );
20000cca:	1dbb      	adds	r3, r7, #6
20000ccc:	881b      	ldrh	r3, [r3, #0]
20000cce:	b25b      	sxtb	r3, r3
20000cd0:	43db      	mvns	r3, r3
20000cd2:	b25b      	sxtb	r3, r3
20000cd4:	187a      	adds	r2, r7, r1
20000cd6:	7812      	ldrb	r2, [r2, #0]
20000cd8:	b252      	sxtb	r2, r2
20000cda:	4013      	ands	r3, r2
20000cdc:	b25b      	sxtb	r3, r3
20000cde:	2204      	movs	r2, #4
20000ce0:	4313      	orrs	r3, r2
20000ce2:	b25a      	sxtb	r2, r3
20000ce4:	187b      	adds	r3, r7, r1
20000ce6:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = c;
20000ce8:	4a03      	ldr	r2, [pc, #12]	; (20000cf8 <ascii_ctrl_bit_clear+0x44>)
20000cea:	187b      	adds	r3, r7, r1
20000cec:	781b      	ldrb	r3, [r3, #0]
20000cee:	7013      	strb	r3, [r2, #0]
}
20000cf0:	46c0      	nop			; (mov r8, r8)
20000cf2:	46bd      	mov	sp, r7
20000cf4:	b004      	add	sp, #16
20000cf6:	bd80      	pop	{r7, pc}
20000cf8:	40021014 	andmi	r1, r2, r4, lsl r0

20000cfc <ascii_write_controller>:

void ascii_write_controller(unsigned char c){
20000cfc:	b580      	push	{r7, lr}
20000cfe:	b082      	sub	sp, #8
20000d00:	af00      	add	r7, sp, #0
20000d02:	0002      	movs	r2, r0
20000d04:	1dfb      	adds	r3, r7, #7
20000d06:	701a      	strb	r2, [r3, #0]
	delay_40ns();
20000d08:	f7ff fa30 	bl	2000016c <delay_40ns>
	ascii_ctrl_bit_set(B_E);
20000d0c:	2040      	movs	r0, #64	; 0x40
20000d0e:	f7ff ffaf 	bl	20000c70 <ascii_ctrl_bit_set>
	*portOdrHighE = c;
20000d12:	4a05      	ldr	r2, [pc, #20]	; (20000d28 <ascii_write_controller+0x2c>)
20000d14:	1dfb      	adds	r3, r7, #7
20000d16:	781b      	ldrb	r3, [r3, #0]
20000d18:	7013      	strb	r3, [r2, #0]
	delay_250ns;
	ascii_ctrl_bit_clear(B_E);
20000d1a:	2040      	movs	r0, #64	; 0x40
20000d1c:	f7ff ffca 	bl	20000cb4 <ascii_ctrl_bit_clear>
}
20000d20:	46c0      	nop			; (mov r8, r8)
20000d22:	46bd      	mov	sp, r7
20000d24:	b002      	add	sp, #8
20000d26:	bd80      	pop	{r7, pc}
20000d28:	40021015 	andmi	r1, r2, r5, lsl r0

20000d2c <ascii_read_controller>:
unsigned char ascii_read_controller(void){
20000d2c:	b580      	push	{r7, lr}
20000d2e:	b082      	sub	sp, #8
20000d30:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_set(B_E);
20000d32:	2040      	movs	r0, #64	; 0x40
20000d34:	f7ff ff9c 	bl	20000c70 <ascii_ctrl_bit_set>
	delay_250ns;
	delay_250ns;
	unsigned char rv = *portIdrHighE;
20000d38:	4a06      	ldr	r2, [pc, #24]	; (20000d54 <ascii_read_controller+0x28>)
20000d3a:	1dfb      	adds	r3, r7, #7
20000d3c:	7812      	ldrb	r2, [r2, #0]
20000d3e:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20000d40:	2040      	movs	r0, #64	; 0x40
20000d42:	f7ff ffb7 	bl	20000cb4 <ascii_ctrl_bit_clear>
	return rv;
20000d46:	1dfb      	adds	r3, r7, #7
20000d48:	781b      	ldrb	r3, [r3, #0]
}
20000d4a:	0018      	movs	r0, r3
20000d4c:	46bd      	mov	sp, r7
20000d4e:	b002      	add	sp, #8
20000d50:	bd80      	pop	{r7, pc}
20000d52:	46c0      	nop			; (mov r8, r8)
20000d54:	40021011 	andmi	r1, r2, r1, lsl r0

20000d58 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20000d58:	b580      	push	{r7, lr}
20000d5a:	b082      	sub	sp, #8
20000d5c:	af00      	add	r7, sp, #0
20000d5e:	0002      	movs	r2, r0
20000d60:	1dfb      	adds	r3, r7, #7
20000d62:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000d64:	2001      	movs	r0, #1
20000d66:	f7ff ffa5 	bl	20000cb4 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000d6a:	2002      	movs	r0, #2
20000d6c:	f7ff ffa2 	bl	20000cb4 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20000d70:	1dfb      	adds	r3, r7, #7
20000d72:	781b      	ldrb	r3, [r3, #0]
20000d74:	0018      	movs	r0, r3
20000d76:	f7ff ffc1 	bl	20000cfc <ascii_write_controller>
}
20000d7a:	46c0      	nop			; (mov r8, r8)
20000d7c:	46bd      	mov	sp, r7
20000d7e:	b002      	add	sp, #8
20000d80:	bd80      	pop	{r7, pc}

20000d82 <ascii_write_data>:

void ascii_write_data(unsigned char data){
20000d82:	b580      	push	{r7, lr}
20000d84:	b082      	sub	sp, #8
20000d86:	af00      	add	r7, sp, #0
20000d88:	0002      	movs	r2, r0
20000d8a:	1dfb      	adds	r3, r7, #7
20000d8c:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000d8e:	2001      	movs	r0, #1
20000d90:	f7ff ff6e 	bl	20000c70 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20000d94:	2002      	movs	r0, #2
20000d96:	f7ff ff8d 	bl	20000cb4 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20000d9a:	1dfb      	adds	r3, r7, #7
20000d9c:	781b      	ldrb	r3, [r3, #0]
20000d9e:	0018      	movs	r0, r3
20000da0:	f7ff ffac 	bl	20000cfc <ascii_write_controller>
}
20000da4:	46c0      	nop			; (mov r8, r8)
20000da6:	46bd      	mov	sp, r7
20000da8:	b002      	add	sp, #8
20000daa:	bd80      	pop	{r7, pc}

20000dac <ascii_read_status>:

unsigned char ascii_read_status(void){
20000dac:	b580      	push	{r7, lr}
20000dae:	b082      	sub	sp, #8
20000db0:	af00      	add	r7, sp, #0
	*portModerE = (*portModerE & 0x0000FFFF);
20000db2:	4b0c      	ldr	r3, [pc, #48]	; (20000de4 <ascii_read_status+0x38>)
20000db4:	681a      	ldr	r2, [r3, #0]
20000db6:	4b0b      	ldr	r3, [pc, #44]	; (20000de4 <ascii_read_status+0x38>)
20000db8:	0412      	lsls	r2, r2, #16
20000dba:	0c12      	lsrs	r2, r2, #16
20000dbc:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000dbe:	2001      	movs	r0, #1
20000dc0:	f7ff ff78 	bl	20000cb4 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
20000dc4:	2002      	movs	r0, #2
20000dc6:	f7ff ff53 	bl	20000c70 <ascii_ctrl_bit_set>
	unsigned char rv; 
	#ifndef SIMULATOR
		rv = ascii_read_controller();
	#endif
	*portModerE = (*portModerE | 0x55550000);
20000dca:	4b06      	ldr	r3, [pc, #24]	; (20000de4 <ascii_read_status+0x38>)
20000dcc:	681a      	ldr	r2, [r3, #0]
20000dce:	4b05      	ldr	r3, [pc, #20]	; (20000de4 <ascii_read_status+0x38>)
20000dd0:	4905      	ldr	r1, [pc, #20]	; (20000de8 <ascii_read_status+0x3c>)
20000dd2:	430a      	orrs	r2, r1
20000dd4:	601a      	str	r2, [r3, #0]
	return rv;
20000dd6:	1dfb      	adds	r3, r7, #7
20000dd8:	781b      	ldrb	r3, [r3, #0]
}
20000dda:	0018      	movs	r0, r3
20000ddc:	46bd      	mov	sp, r7
20000dde:	b002      	add	sp, #8
20000de0:	bd80      	pop	{r7, pc}
20000de2:	46c0      	nop			; (mov r8, r8)
20000de4:	40021000 	andmi	r1, r2, r0
20000de8:	55550000 	ldrbpl	r0, [r5, #-0]

20000dec <ascii_read_data>:

unsigned char ascii_read_data(void){
20000dec:	b590      	push	{r4, r7, lr}
20000dee:	b083      	sub	sp, #12
20000df0:	af00      	add	r7, sp, #0
	*portModerE = (*portModerE & 0x0000FFFF);
20000df2:	4b0e      	ldr	r3, [pc, #56]	; (20000e2c <ascii_read_data+0x40>)
20000df4:	681a      	ldr	r2, [r3, #0]
20000df6:	4b0d      	ldr	r3, [pc, #52]	; (20000e2c <ascii_read_data+0x40>)
20000df8:	0412      	lsls	r2, r2, #16
20000dfa:	0c12      	lsrs	r2, r2, #16
20000dfc:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000dfe:	2001      	movs	r0, #1
20000e00:	f7ff ff36 	bl	20000c70 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20000e04:	2002      	movs	r0, #2
20000e06:	f7ff ff33 	bl	20000c70 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20000e0a:	1dfc      	adds	r4, r7, #7
20000e0c:	f7ff ff8e 	bl	20000d2c <ascii_read_controller>
20000e10:	0003      	movs	r3, r0
20000e12:	7023      	strb	r3, [r4, #0]
	*portModerE = (*portModerE | 0x55550000);
20000e14:	4b05      	ldr	r3, [pc, #20]	; (20000e2c <ascii_read_data+0x40>)
20000e16:	681a      	ldr	r2, [r3, #0]
20000e18:	4b04      	ldr	r3, [pc, #16]	; (20000e2c <ascii_read_data+0x40>)
20000e1a:	4905      	ldr	r1, [pc, #20]	; (20000e30 <ascii_read_data+0x44>)
20000e1c:	430a      	orrs	r2, r1
20000e1e:	601a      	str	r2, [r3, #0]
	return rv;
20000e20:	1dfb      	adds	r3, r7, #7
20000e22:	781b      	ldrb	r3, [r3, #0]
}
20000e24:	0018      	movs	r0, r3
20000e26:	46bd      	mov	sp, r7
20000e28:	b003      	add	sp, #12
20000e2a:	bd90      	pop	{r4, r7, pc}
20000e2c:	40021000 	andmi	r1, r2, r0
20000e30:	55550000 	ldrbpl	r0, [r5, #-0]

20000e34 <ascii_init>:

void ascii_init(void){
20000e34:	b580      	push	{r7, lr}
20000e36:	af00      	add	r7, sp, #0
	while((ascii_read_status() & 0x80) == 0x80){}
20000e38:	46c0      	nop			; (mov r8, r8)
20000e3a:	f7ff ffb7 	bl	20000dac <ascii_read_status>
20000e3e:	0003      	movs	r3, r0
20000e40:	001a      	movs	r2, r3
20000e42:	2380      	movs	r3, #128	; 0x80
20000e44:	4013      	ands	r3, r2
20000e46:	2b80      	cmp	r3, #128	; 0x80
20000e48:	d0f7      	beq.n	20000e3a <ascii_init+0x6>
	//ascii_read_status();
	delay_mikro(8);
20000e4a:	2008      	movs	r0, #8
20000e4c:	f7ff f9b5 	bl	200001ba <delay_mikro>
	ascii_write_cmd(0x38);
20000e50:	2038      	movs	r0, #56	; 0x38
20000e52:	f7ff ff81 	bl	20000d58 <ascii_write_cmd>
	delay_mikro(40);
20000e56:	2028      	movs	r0, #40	; 0x28
20000e58:	f7ff f9af 	bl	200001ba <delay_mikro>
	ascii_write_cmd(0xE);
20000e5c:	200e      	movs	r0, #14
20000e5e:	f7ff ff7b 	bl	20000d58 <ascii_write_cmd>
	delay_mikro(40);
20000e62:	2028      	movs	r0, #40	; 0x28
20000e64:	f7ff f9a9 	bl	200001ba <delay_mikro>
	ascii_write_cmd(0x4);
20000e68:	2004      	movs	r0, #4
20000e6a:	f7ff ff75 	bl	20000d58 <ascii_write_cmd>
	delay_mikro(40);
20000e6e:	2028      	movs	r0, #40	; 0x28
20000e70:	f7ff f9a3 	bl	200001ba <delay_mikro>
}
20000e74:	46c0      	nop			; (mov r8, r8)
20000e76:	46bd      	mov	sp, r7
20000e78:	bd80      	pop	{r7, pc}

20000e7a <ascii_write_char>:

void ascii_write_char(char c){
20000e7a:	b580      	push	{r7, lr}
20000e7c:	b082      	sub	sp, #8
20000e7e:	af00      	add	r7, sp, #0
20000e80:	0002      	movs	r2, r0
20000e82:	1dfb      	adds	r3, r7, #7
20000e84:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80){}
20000e86:	46c0      	nop			; (mov r8, r8)
20000e88:	f7ff ff90 	bl	20000dac <ascii_read_status>
20000e8c:	0003      	movs	r3, r0
20000e8e:	001a      	movs	r2, r3
20000e90:	2380      	movs	r3, #128	; 0x80
20000e92:	4013      	ands	r3, r2
20000e94:	2b80      	cmp	r3, #128	; 0x80
20000e96:	d0f7      	beq.n	20000e88 <ascii_write_char+0xe>
	delay_mikro(8);
20000e98:	2008      	movs	r0, #8
20000e9a:	f7ff f98e 	bl	200001ba <delay_mikro>
	ascii_write_data(c);
20000e9e:	1dfb      	adds	r3, r7, #7
20000ea0:	781b      	ldrb	r3, [r3, #0]
20000ea2:	0018      	movs	r0, r3
20000ea4:	f7ff ff6d 	bl	20000d82 <ascii_write_data>
	delay_mikro(43);
20000ea8:	202b      	movs	r0, #43	; 0x2b
20000eaa:	f7ff f986 	bl	200001ba <delay_mikro>
}
20000eae:	46c0      	nop			; (mov r8, r8)
20000eb0:	46bd      	mov	sp, r7
20000eb2:	b002      	add	sp, #8
20000eb4:	bd80      	pop	{r7, pc}

20000eb6 <ascii_gotoxy>:

void ascii_gotoxy(int x, int y){
20000eb6:	b580      	push	{r7, lr}
20000eb8:	b084      	sub	sp, #16
20000eba:	af00      	add	r7, sp, #0
20000ebc:	6078      	str	r0, [r7, #4]
20000ebe:	6039      	str	r1, [r7, #0]
	int adress = (x - 1 + (y-1)*64);
20000ec0:	687b      	ldr	r3, [r7, #4]
20000ec2:	1e5a      	subs	r2, r3, #1
20000ec4:	683b      	ldr	r3, [r7, #0]
20000ec6:	3b01      	subs	r3, #1
20000ec8:	019b      	lsls	r3, r3, #6
20000eca:	18d3      	adds	r3, r2, r3
20000ecc:	60fb      	str	r3, [r7, #12]
	ascii_write_cmd(0x80 | adress);
20000ece:	68fb      	ldr	r3, [r7, #12]
20000ed0:	b25b      	sxtb	r3, r3
20000ed2:	2280      	movs	r2, #128	; 0x80
20000ed4:	4252      	negs	r2, r2
20000ed6:	4313      	orrs	r3, r2
20000ed8:	b25b      	sxtb	r3, r3
20000eda:	b2db      	uxtb	r3, r3
20000edc:	0018      	movs	r0, r3
20000ede:	f7ff ff3b 	bl	20000d58 <ascii_write_cmd>
}
20000ee2:	46c0      	nop			; (mov r8, r8)
20000ee4:	46bd      	mov	sp, r7
20000ee6:	b004      	add	sp, #16
20000ee8:	bd80      	pop	{r7, pc}

20000eea <ascii_init_app>:

void ascii_init_app(void){
20000eea:	b580      	push	{r7, lr}
20000eec:	af00      	add	r7, sp, #0
	*portModerE = 0x55555555;
20000eee:	4b06      	ldr	r3, [pc, #24]	; (20000f08 <ascii_init_app+0x1e>)
20000ef0:	4a06      	ldr	r2, [pc, #24]	; (20000f0c <ascii_init_app+0x22>)
20000ef2:	601a      	str	r2, [r3, #0]
	*portOtyperE = 0x0000;
20000ef4:	4b06      	ldr	r3, [pc, #24]	; (20000f10 <ascii_init_app+0x26>)
20000ef6:	2200      	movs	r2, #0
20000ef8:	801a      	strh	r2, [r3, #0]
	*portOspeedrE = 0x0000;
20000efa:	4b06      	ldr	r3, [pc, #24]	; (20000f14 <ascii_init_app+0x2a>)
20000efc:	2200      	movs	r2, #0
20000efe:	601a      	str	r2, [r3, #0]

20000f00:	46c0      	nop			; (mov r8, r8)
20000f02:	46bd      	mov	sp, r7
20000f04:	bd80      	pop	{r7, pc}
20000f06:	46c0      	nop			; (mov r8, r8)
20000f08:	40021000 	andmi	r1, r2, r0
20000f0c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000f10:	40021004 	andmi	r1, r2, r4
20000f14:	40021008 	andmi	r1, r2, r8

20000f18 <init_keypad>:

#include "delay.h"
#include "keypad_drivers.h"
#include "portDeclare.h"

void init_keypad(void){
20000f18:	b580      	push	{r7, lr}
20000f1a:	af00      	add	r7, sp, #0
	#ifdef bargraph
		*((unsigned long *)(0x40021000)) = 0x5555;
	#endif
	*portModerD = 0x55005555;
20000f1c:	4b07      	ldr	r3, [pc, #28]	; (20000f3c <init_keypad+0x24>)
20000f1e:	4a08      	ldr	r2, [pc, #32]	; (20000f40 <init_keypad+0x28>)
20000f20:	601a      	str	r2, [r3, #0]
	*portOtyperD = 0x0000;
20000f22:	4b08      	ldr	r3, [pc, #32]	; (20000f44 <init_keypad+0x2c>)
20000f24:	2200      	movs	r2, #0
20000f26:	801a      	strh	r2, [r3, #0]
	*portOspeedrD = 0x0000;
20000f28:	4b07      	ldr	r3, [pc, #28]	; (20000f48 <init_keypad+0x30>)
20000f2a:	2200      	movs	r2, #0
20000f2c:	601a      	str	r2, [r3, #0]
	*portPupdrD = 0x00AA0000;
20000f2e:	4b07      	ldr	r3, [pc, #28]	; (20000f4c <init_keypad+0x34>)
20000f30:	22aa      	movs	r2, #170	; 0xaa
20000f32:	0412      	lsls	r2, r2, #16
20000f34:	601a      	str	r2, [r3, #0]
	

}
20000f36:	46c0      	nop			; (mov r8, r8)
20000f38:	46bd      	mov	sp, r7
20000f3a:	bd80      	pop	{r7, pc}
20000f3c:	40020c00 	andmi	r0, r2, r0, lsl #24
20000f40:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000f44:	40020c04 	andmi	r0, r2, r4, lsl #24
20000f48:	40020c08 	andmi	r0, r2, r8, lsl #24
20000f4c:	40020c0c 	andmi	r0, r2, ip, lsl #24

20000f50 <keyb>:

unsigned char keyb(void){
20000f50:	b590      	push	{r4, r7, lr}
20000f52:	b087      	sub	sp, #28
20000f54:	af00      	add	r7, sp, #0
	
	unsigned char count = 0;
20000f56:	2317      	movs	r3, #23
20000f58:	18fb      	adds	r3, r7, r3
20000f5a:	2200      	movs	r2, #0
20000f5c:	701a      	strb	r2, [r3, #0]
	unsigned char numpad[] = {0x1,0x2,0x3,0xA,0x4,0x5,0x6,0xB,0x7,0x8,0x9,0xC,0xE,0x0,0xF,0xD};
20000f5e:	1d3b      	adds	r3, r7, #4
20000f60:	4a27      	ldr	r2, [pc, #156]	; (20001000 <keyb+0xb0>)
20000f62:	ca13      	ldmia	r2!, {r0, r1, r4}
20000f64:	c313      	stmia	r3!, {r0, r1, r4}
20000f66:	6812      	ldr	r2, [r2, #0]
20000f68:	601a      	str	r2, [r3, #0]
	
	for (char i=0; i < 4; i++){
20000f6a:	2316      	movs	r3, #22
20000f6c:	18fb      	adds	r3, r7, r3
20000f6e:	2200      	movs	r2, #0
20000f70:	701a      	strb	r2, [r3, #0]
20000f72:	e03b      	b.n	20000fec <keyb+0x9c>
		char activeRow = 0x10 << i;
20000f74:	2316      	movs	r3, #22
20000f76:	18fb      	adds	r3, r7, r3
20000f78:	781b      	ldrb	r3, [r3, #0]
20000f7a:	2210      	movs	r2, #16
20000f7c:	409a      	lsls	r2, r3
20000f7e:	2114      	movs	r1, #20
20000f80:	187b      	adds	r3, r7, r1
20000f82:	701a      	strb	r2, [r3, #0]
		*portOdrHighD = activeRow;
20000f84:	4a1f      	ldr	r2, [pc, #124]	; (20001004 <keyb+0xb4>)
20000f86:	187b      	adds	r3, r7, r1
20000f88:	781b      	ldrb	r3, [r3, #0]
20000f8a:	7013      	strb	r3, [r2, #0]
		char keys = *portIdrHighD & 0x0f;
20000f8c:	4b1e      	ldr	r3, [pc, #120]	; (20001008 <keyb+0xb8>)
20000f8e:	781b      	ldrb	r3, [r3, #0]
20000f90:	b2da      	uxtb	r2, r3
20000f92:	2015      	movs	r0, #21
20000f94:	183b      	adds	r3, r7, r0
20000f96:	210f      	movs	r1, #15
20000f98:	400a      	ands	r2, r1
20000f9a:	701a      	strb	r2, [r3, #0]
		
		if (keys != 0){
20000f9c:	183b      	adds	r3, r7, r0
20000f9e:	781b      	ldrb	r3, [r3, #0]
20000fa0:	2b00      	cmp	r3, #0
20000fa2:	d01d      	beq.n	20000fe0 <keyb+0x90>
		
			while((keys & 0x1) == 0){
20000fa4:	e00b      	b.n	20000fbe <keyb+0x6e>
				keys = keys >> 1;
20000fa6:	2215      	movs	r2, #21
20000fa8:	18bb      	adds	r3, r7, r2
20000faa:	18ba      	adds	r2, r7, r2
20000fac:	7812      	ldrb	r2, [r2, #0]
20000fae:	0852      	lsrs	r2, r2, #1
20000fb0:	701a      	strb	r2, [r3, #0]
				count++;
20000fb2:	2117      	movs	r1, #23
20000fb4:	187b      	adds	r3, r7, r1
20000fb6:	781a      	ldrb	r2, [r3, #0]
20000fb8:	187b      	adds	r3, r7, r1
20000fba:	3201      	adds	r2, #1
20000fbc:	701a      	strb	r2, [r3, #0]
			while((keys & 0x1) == 0){
20000fbe:	2315      	movs	r3, #21
20000fc0:	18fb      	adds	r3, r7, r3
20000fc2:	781b      	ldrb	r3, [r3, #0]
20000fc4:	2201      	movs	r2, #1
20000fc6:	4013      	ands	r3, r2
20000fc8:	d0ed      	beq.n	20000fa6 <keyb+0x56>
			}
			return numpad[i*4+count];
20000fca:	2316      	movs	r3, #22
20000fcc:	18fb      	adds	r3, r7, r3
20000fce:	781b      	ldrb	r3, [r3, #0]
20000fd0:	009a      	lsls	r2, r3, #2
20000fd2:	2317      	movs	r3, #23
20000fd4:	18fb      	adds	r3, r7, r3
20000fd6:	781b      	ldrb	r3, [r3, #0]
20000fd8:	18d3      	adds	r3, r2, r3
20000fda:	1d3a      	adds	r2, r7, #4
20000fdc:	5cd3      	ldrb	r3, [r2, r3]
20000fde:	e00b      	b.n	20000ff8 <keyb+0xa8>
	for (char i=0; i < 4; i++){
20000fe0:	2116      	movs	r1, #22
20000fe2:	187b      	adds	r3, r7, r1
20000fe4:	781a      	ldrb	r2, [r3, #0]
20000fe6:	187b      	adds	r3, r7, r1
20000fe8:	3201      	adds	r2, #1
20000fea:	701a      	strb	r2, [r3, #0]
20000fec:	2316      	movs	r3, #22
20000fee:	18fb      	adds	r3, r7, r3
20000ff0:	781b      	ldrb	r3, [r3, #0]
20000ff2:	2b03      	cmp	r3, #3
20000ff4:	d9be      	bls.n	20000f74 <keyb+0x24>
		}
			
	}
	return 0xff;
20000ff6:	23ff      	movs	r3, #255	; 0xff
}
20000ff8:	0018      	movs	r0, r3
20000ffa:	46bd      	mov	sp, r7
20000ffc:	b007      	add	sp, #28
20000ffe:	bd90      	pop	{r4, r7, pc}
20001000:	20001f58 	andcs	r1, r0, r8, asr pc
20001004:	40020c15 	andmi	r0, r2, r5, lsl ip
20001008:	40020c11 	andmi	r0, r2, r1, lsl ip

2000100c <out7seg>:

void out7seg(unsigned char num){
2000100c:	b5b0      	push	{r4, r5, r7, lr}
2000100e:	b086      	sub	sp, #24
20001010:	af00      	add	r7, sp, #0
20001012:	0002      	movs	r2, r0
20001014:	1dfb      	adds	r3, r7, #7
20001016:	701a      	strb	r2, [r3, #0]
	unsigned char segCodes[] = {0x3f,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71};
20001018:	2008      	movs	r0, #8
2000101a:	183b      	adds	r3, r7, r0
2000101c:	4a06      	ldr	r2, [pc, #24]	; (20001038 <out7seg+0x2c>)
2000101e:	ca32      	ldmia	r2!, {r1, r4, r5}
20001020:	c332      	stmia	r3!, {r1, r4, r5}
20001022:	6812      	ldr	r2, [r2, #0]
20001024:	601a      	str	r2, [r3, #0]
	if (num & 0xf0 == 0){
		*portOdrLowE = 0;
		return;
	}
	*portOdrLowD = segCodes[num];
20001026:	1dfb      	adds	r3, r7, #7
20001028:	781b      	ldrb	r3, [r3, #0]
2000102a:	4904      	ldr	r1, [pc, #16]	; (2000103c <out7seg+0x30>)
2000102c:	183a      	adds	r2, r7, r0
2000102e:	5cd3      	ldrb	r3, [r2, r3]
20001030:	700b      	strb	r3, [r1, #0]
}
20001032:	46bd      	mov	sp, r7
20001034:	b006      	add	sp, #24
20001036:	bdb0      	pop	{r4, r5, r7, pc}
20001038:	20001f68 	andcs	r1, r0, r8, ror #30
2000103c:	40020c14 	andmi	r0, r2, r4, lsl ip

20001040 <keyRead>:

unsigned short keyRead(void){
20001040:	b580      	push	{r7, lr}
20001042:	b082      	sub	sp, #8
20001044:	af00      	add	r7, sp, #0
	
	unsigned char count = 0;
20001046:	1d3b      	adds	r3, r7, #4
20001048:	2200      	movs	r2, #0
2000104a:	701a      	strb	r2, [r3, #0]
	unsigned short read = 0;
2000104c:	1dbb      	adds	r3, r7, #6
2000104e:	2200      	movs	r2, #0
20001050:	801a      	strh	r2, [r3, #0]
	for (char i=0; i < 4; i++){
20001052:	1d7b      	adds	r3, r7, #5
20001054:	2200      	movs	r2, #0
20001056:	701a      	strb	r2, [r3, #0]
20001058:	e027      	b.n	200010aa <keyRead+0x6a>
		char activeRow = 0x10 << i;
2000105a:	1d7b      	adds	r3, r7, #5
2000105c:	781b      	ldrb	r3, [r3, #0]
2000105e:	2210      	movs	r2, #16
20001060:	409a      	lsls	r2, r3
20001062:	1cfb      	adds	r3, r7, #3
20001064:	701a      	strb	r2, [r3, #0]
		*portOdrHighD = activeRow;
20001066:	4a16      	ldr	r2, [pc, #88]	; (200010c0 <keyRead+0x80>)
20001068:	1cfb      	adds	r3, r7, #3
2000106a:	781b      	ldrb	r3, [r3, #0]
2000106c:	7013      	strb	r3, [r2, #0]
		unsigned volatile char keys = *portIdrHighD & 0x0f;
2000106e:	4b15      	ldr	r3, [pc, #84]	; (200010c4 <keyRead+0x84>)
20001070:	781b      	ldrb	r3, [r3, #0]
20001072:	b2db      	uxtb	r3, r3
20001074:	220f      	movs	r2, #15
20001076:	4013      	ands	r3, r2
20001078:	b2da      	uxtb	r2, r3
2000107a:	1cbb      	adds	r3, r7, #2
2000107c:	701a      	strb	r2, [r3, #0]
		read |= (keys<<(i*4));
2000107e:	1cbb      	adds	r3, r7, #2
20001080:	781b      	ldrb	r3, [r3, #0]
20001082:	b2db      	uxtb	r3, r3
20001084:	001a      	movs	r2, r3
20001086:	1d7b      	adds	r3, r7, #5
20001088:	781b      	ldrb	r3, [r3, #0]
2000108a:	009b      	lsls	r3, r3, #2
2000108c:	409a      	lsls	r2, r3
2000108e:	0013      	movs	r3, r2
20001090:	b21a      	sxth	r2, r3
20001092:	1dbb      	adds	r3, r7, #6
20001094:	2100      	movs	r1, #0
20001096:	5e5b      	ldrsh	r3, [r3, r1]
20001098:	4313      	orrs	r3, r2
2000109a:	b21a      	sxth	r2, r3
2000109c:	1dbb      	adds	r3, r7, #6
2000109e:	801a      	strh	r2, [r3, #0]
	for (char i=0; i < 4; i++){
200010a0:	1d7b      	adds	r3, r7, #5
200010a2:	781a      	ldrb	r2, [r3, #0]
200010a4:	1d7b      	adds	r3, r7, #5
200010a6:	3201      	adds	r2, #1
200010a8:	701a      	strb	r2, [r3, #0]
200010aa:	1d7b      	adds	r3, r7, #5
200010ac:	781b      	ldrb	r3, [r3, #0]
200010ae:	2b03      	cmp	r3, #3
200010b0:	d9d3      	bls.n	2000105a <keyRead+0x1a>
			}
			return numpad[i*4+count];
		}*/
			
	}
	return read;
200010b2:	1dbb      	adds	r3, r7, #6
200010b4:	881b      	ldrh	r3, [r3, #0]
200010b6:	0018      	movs	r0, r3
200010b8:	46bd      	mov	sp, r7
200010ba:	b002      	add	sp, #8
200010bc:	bd80      	pop	{r7, pc}
200010be:	46c0      	nop			; (mov r8, r8)
200010c0:	40020c15 	andmi	r0, r2, r5, lsl ip
200010c4:	40020c11 	andmi	r0, r2, r1, lsl ip

200010c8 <buffer>:
	...

20001554 <buffer>:
	...

200019e0 <buffer_changeLog>:
	...

20001a60 <buffer_display>:
	...

20001e60 <ball_geometry>:
20001e60:	0000000c 	andeq	r0, r0, ip
20001e64:	00000004 	andeq	r0, r0, r4
20001e68:	00000004 	andeq	r0, r0, r4
20001e6c:	02000100 	andeq	r0, r0, #0, 2
20001e70:	01010001 	tsteq	r1, r1
20001e74:	03010201 	movweq	r0, #4609	; 0x1201
20001e78:	01020002 	tsteq	r2, r2
20001e7c:	03020202 	movweq	r0, #8706	; 0x2202
20001e80:	01030103 	tsteq	r3, r3, lsl #2
	...

20001e94 <ball>:
20001e94:	20001e60 	andcs	r1, r0, r0, ror #28
	...
20001ea0:	00000001 	andeq	r0, r0, r1
20001ea4:	00000001 	andeq	r0, r0, r1
20001ea8:	20000aaf 	andcs	r0, r0, pc, lsr #21
20001eac:	20000b13 	andcs	r0, r0, r3, lsl fp
20001eb0:	20000b6f 	andcs	r0, r0, pc, ror #22
20001eb4:	20000a6f 	andcs	r0, r0, pc, ror #20
20001eb8:	20000a8f 	andcs	r0, r0, pc, lsl #21

20001ebc <paddle_geometry>:
20001ebc:	00000008 	andeq	r0, r0, r8
20001ec0:	00000001 	andeq	r0, r0, r1
20001ec4:	00000008 	andeq	r0, r0, r8
20001ec8:	01000000 	mrseq	r0, (UNDEF: 0)
20001ecc:	03000200 	movweq	r0, #512	; 0x200
20001ed0:	05000400 	streq	r0, [r0, #-1024]	; 0xfffffc00
20001ed4:	07000600 	streq	r0, [r0, -r0, lsl #12]
	...

20001ef0 <p1paddle>:
20001ef0:	20001ebc 			; <UNDEFINED> instruction: 0x20001ebc
	...
20001efc:	00000002 	andeq	r0, r0, r2
20001f00:	0000001c 	andeq	r0, r0, ip, lsl r0
20001f04:	20000aaf 	andcs	r0, r0, pc, lsr #21
20001f08:	20000b13 	andcs	r0, r0, r3, lsl fp
20001f0c:	20000b6f 	andcs	r0, r0, pc, ror #22
20001f10:	20000a6f 	andcs	r0, r0, pc, ror #20
20001f14:	20000a8f 	andcs	r0, r0, pc, lsl #21

20001f18 <p2paddle>:
20001f18:	20001ebc 			; <UNDEFINED> instruction: 0x20001ebc
	...
20001f24:	0000007f 	andeq	r0, r0, pc, ror r0
20001f28:	0000001c 	andeq	r0, r0, ip, lsl r0
20001f2c:	20000aaf 	andcs	r0, r0, pc, lsr #21
20001f30:	20000b13 	andcs	r0, r0, r3, lsl fp
20001f34:	20000b6f 	andcs	r0, r0, pc, ror #22
20001f38:	20000a6f 	andcs	r0, r0, pc, ror #20
20001f3c:	20000a8f 	andcs	r0, r0, pc, lsl #21
20001f40:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
20001f44:	31207265 			; <UNDEFINED> instruction: 0x31207265
20001f48:	0000203a 	andeq	r2, r0, sl, lsr r0
20001f4c:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
20001f50:	32207265 	eorcc	r7, r0, #1342177286	; 0x50000006
20001f54:	0000203a 	andeq	r2, r0, sl, lsr r0
20001f58:	0a030201 	beq	200c2764 <p2paddle+0xc084c>
20001f5c:	0b060504 	bleq	20183374 <p2paddle+0x18145c>
20001f60:	0c090807 	stceq	8, cr0, [r9], {7}
20001f64:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20001f34 <p2paddle+0x1c>
20001f68:	4f5b063f 	svcmi	0x005b063f
20001f6c:	077d6d66 	ldrbeq	r6, [sp, -r6, ror #26]!
20001f70:	7c776f7f 	ldclvc	15, cr6, [r7], #-508	; 0xfffffe04
20001f74:	71795e39 	cmnvc	r9, r9, lsr lr

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000003ac 	andeq	r0, r0, ip, lsr #7
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000032 	andeq	r0, r0, r2, lsr r0
      10:	0001700c 	andeq	r7, r1, ip
      14:	0000d800 	andeq	sp, r0, r0, lsl #16
	...
      24:	01610200 	cmneq	r1, r0, lsl #4
      28:	048c0000 	streq	r0, [ip], #0
      2c:	00730b02 	rsbseq	r0, r3, r2, lsl #22
      30:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
      34:	02000002 	andeq	r0, r0, #2
      38:	0000730c 	andeq	r7, r0, ip, lsl #6
      3c:	4e040000 	cdpmi	0, 0, cr0, cr4, cr0, {0}
      40:	02000002 	andeq	r0, r0, #2
      44:	0000970d 	andeq	r9, r0, sp, lsl #14
      48:	04040000 	streq	r0, [r4], #-0
      4c:	0000016b 	andeq	r0, r0, fp, ror #2
      50:	00b80e02 	adcseq	r0, r8, r2, lsl #28
      54:	04800000 	streq	r0, [r0], #0
      58:	00032304 	andeq	r2, r3, r4, lsl #6
      5c:	df0f0200 	svcle	0x000f0200
      60:	84000000 	strhi	r0, [r0], #-0
      64:	02410404 	subeq	r0, r1, #4, 8	; 0x4000000
      68:	10020000 	andne	r0, r2, r0
      6c:	000000b8 	strheq	r0, [r0], -r8
      70:	05000488 	streq	r0, [r0, #-1160]	; 0xfffffb78
      74:	00000090 	muleq	r0, r0, r0
      78:	00000089 	andeq	r0, r0, r9, lsl #1
      7c:	00008906 	andeq	r8, r0, r6, lsl #18
      80:	89067f00 	stmdbhi	r6, {r8, r9, sl, fp, ip, sp, lr}
      84:	07000000 	streq	r0, [r0, -r0]
      88:	07040700 	streq	r0, [r4, -r0, lsl #14]
      8c:	000004f7 	strdeq	r0, [r0], -r7
      90:	d3080107 	movwle	r0, #33031	; 0x8107
      94:	05000000 	streq	r0, [r0, #-0]
      98:	00000090 	muleq	r0, r0, r0
      9c:	000000a7 	andeq	r0, r0, r7, lsr #1
      a0:	00008906 	andeq	r8, r0, r6, lsl #18
      a4:	08007f00 	stmdaeq	r0, {r8, r9, sl, fp, ip, sp, lr}
      a8:	000000b2 	strheq	r0, [r0], -r2
      ac:	0000b209 	andeq	fp, r0, r9, lsl #4
      b0:	040a0000 	streq	r0, [sl], #-0
      b4:	00000025 	andeq	r0, r0, r5, lsr #32
      b8:	00a7040a 	adceq	r0, r7, sl, lsl #8
      bc:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
      c0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
      c4:	000000b2 	strheq	r0, [r0], -r2
      c8:	0000d809 	andeq	sp, r0, r9, lsl #16
      cc:	00d80900 	sbcseq	r0, r8, r0, lsl #18
      d0:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
      d4:	00000000 	andeq	r0, r0, r0
      d8:	ca080107 	bgt	2004fc <startup-0x1fdffb04>
      dc:	0a000000 	beq	e4 <startup-0x1fffff1c>
      e0:	0000be04 	andeq	fp, r0, r4, lsl #28
      e4:	032f0b00 			; <UNDEFINED> instruction: 0x032f0b00
      e8:	12020000 	andne	r0, r2, #0
      ec:	00000025 	andeq	r0, r0, r5, lsr #32
      f0:	0001640c 	andeq	r6, r1, ip, lsl #8
      f4:	e51e0200 	ldr	r0, [lr, #-512]	; 0xfffffe00
      f8:	05000000 	streq	r0, [r0, #-0]
      fc:	0010c803 	andseq	ip, r0, r3, lsl #16
     100:	03020d20 	movweq	r0, #11552	; 0x2d20
     104:	00011e05 	andeq	r1, r1, r5, lsl #28
     108:	00780e00 	rsbseq	r0, r8, r0, lsl #28
     10c:	00d80603 	sbcseq	r0, r8, r3, lsl #12
     110:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     114:	07030079 	smlsdxeq	r3, r9, r0, r0
     118:	000000d8 	ldrdeq	r0, [r0], -r8
     11c:	180b0001 	stmdane	fp, {r0}
     120:	03000000 	movweq	r0, #0
     124:	00010108 	andeq	r0, r1, r8, lsl #2
     128:	03340d00 	teqeq	r4, #0, 26
     12c:	00016119 	andeq	r6, r1, r9, lsl r1
     130:	01c20300 	biceq	r0, r2, r0, lsl #6
     134:	1a030000 	bne	c013c <startup-0x1ff3fec4>
     138:	00000161 	andeq	r0, r0, r1, ror #2
     13c:	01500300 	cmpeq	r0, r0, lsl #6
     140:	1b030000 	blne	c0148 <startup-0x1ff3feb8>
     144:	00000161 	andeq	r0, r0, r1, ror #2
     148:	01560304 	cmpeq	r6, r4, lsl #6
     14c:	1c030000 	stcne	0, cr0, [r3], {-0}
     150:	00000161 	andeq	r0, r0, r1, ror #2
     154:	78700e08 	ldmdavc	r0!, {r3, r9, sl, fp}^
     158:	681d0300 	ldmdavs	sp, {r8, r9}
     15c:	0c000001 	stceq	0, cr0, [r0], {1}
     160:	05040f00 	streq	r0, [r4, #-3840]	; 0xfffff100
     164:	00746e69 	rsbseq	r6, r4, r9, ror #28
     168:	00011e05 	andeq	r1, r1, r5, lsl #28
     16c:	00017800 	andeq	r7, r1, r0, lsl #16
     170:	00890600 	addeq	r0, r9, r0, lsl #12
     174:	00130000 	andseq	r0, r3, r0
     178:	0001300b 	andeq	r3, r1, fp
     17c:	291e0300 	ldmdbcs	lr, {r8, r9}
     180:	0b000001 	bleq	18c <startup-0x1ffffe74>
     184:	000001cc 	andeq	r0, r0, ip, asr #3
     188:	018e1e03 	orreq	r1, lr, r3, lsl #28
     18c:	040a0000 	streq	r0, [sl], #-0
     190:	00000129 	andeq	r0, r0, r9, lsr #2
     194:	0001bd10 	andeq	fp, r1, r0, lsl sp
     198:	22032800 	andcs	r2, r3, #0, 16
     19c:	00000219 	andeq	r0, r0, r9, lsl r2
     1a0:	6f65670e 	svcvs	0x0065670e
     1a4:	83230300 			; <UNDEFINED> instruction: 0x83230300
     1a8:	00000001 	andeq	r0, r0, r1
     1ac:	00002303 	andeq	r2, r0, r3, lsl #6
     1b0:	61240300 			; <UNDEFINED> instruction: 0x61240300
     1b4:	04000001 	streq	r0, [r0], #-1
     1b8:	00002803 	andeq	r2, r0, r3, lsl #16
     1bc:	61240300 			; <UNDEFINED> instruction: 0x61240300
     1c0:	08000001 	stmdaeq	r0, {r0}
     1c4:	00010903 	andeq	r0, r1, r3, lsl #18
     1c8:	61250300 			; <UNDEFINED> instruction: 0x61250300
     1cc:	0c000001 	stceq	0, cr0, [r0], {1}
     1d0:	00010e03 	andeq	r0, r1, r3, lsl #28
     1d4:	61250300 			; <UNDEFINED> instruction: 0x61250300
     1d8:	10000001 	andne	r0, r0, r1
     1dc:	00016b03 	andeq	r6, r1, r3, lsl #22
     1e0:	2a260300 	bcs	980de8 <startup-0x1f67f218>
     1e4:	14000002 	strne	r0, [r0], #-2
     1e8:	00024103 	andeq	r4, r2, r3, lsl #2
     1ec:	2a270300 	bcs	9c0df4 <startup-0x1f63f20c>
     1f0:	18000002 	stmdane	r0, {r1}
     1f4:	0001a103 	andeq	sl, r1, r3, lsl #2
     1f8:	2a280300 	bcs	a00e00 <startup-0x1f5ff200>
     1fc:	1c000002 	stcne	0, cr0, [r0], {2}
     200:	0000ff03 	andeq	pc, r0, r3, lsl #30
     204:	45290300 	strmi	r0, [r9, #-768]!	; 0xfffffd00
     208:	20000002 	andcs	r0, r0, r2
     20c:	0003df03 	andeq	sp, r3, r3, lsl #30
     210:	5b2a0300 	blpl	a80e18 <startup-0x1f57f1e8>
     214:	24000002 	strcs	r0, [r0], #-2
     218:	02240800 	eoreq	r0, r4, #0, 16
     21c:	24090000 	strcs	r0, [r9], #-0
     220:	00000002 	andeq	r0, r0, r2
     224:	0194040a 	orrseq	r0, r4, sl, lsl #8
     228:	040a0000 	streq	r0, [sl], #-0
     22c:	00000219 	andeq	r0, r0, r9, lsl r2
     230:	00024508 	andeq	r4, r2, r8, lsl #10
     234:	02240900 	eoreq	r0, r4, #0, 18
     238:	61090000 	mrsvs	r0, (UNDEF: 9)
     23c:	09000001 	stmdbeq	r0, {r0}
     240:	00000161 	andeq	r0, r0, r1, ror #2
     244:	30040a00 	andcc	r0, r4, r0, lsl #20
     248:	08000002 	stmdaeq	r0, {r1}
     24c:	0000025b 	andeq	r0, r0, fp, asr r2
     250:	00022409 	andeq	r2, r2, r9, lsl #8
     254:	011e0900 	tsteq	lr, r0, lsl #18
     258:	0a000000 	beq	260 <startup-0x1ffffda0>
     25c:	00024b04 	andeq	r4, r2, r4, lsl #22
     260:	048a0b00 	streq	r0, [sl], #2816	; 0xb00
     264:	2b030000 	blcs	c026c <startup-0x1ff3fd94>
     268:	00000194 	muleq	r0, r4, r1
     26c:	0000080b 	andeq	r0, r0, fp, lsl #16
     270:	242b0300 	strtcs	r0, [fp], #-768	; 0xfffffd00
     274:	11000002 	tstne	r0, r2
     278:	00000113 	andeq	r0, r0, r3, lsl r1
     27c:	01781d01 	cmneq	r8, r1, lsl #26
     280:	03050000 	movweq	r0, #20480	; 0x5000
     284:	20001e60 	andcs	r1, r0, r0, ror #28
     288:	00002d0c 	andeq	r2, r0, ip, lsl #26
     28c:	61240100 			; <UNDEFINED> instruction: 0x61240100
     290:	05000002 	streq	r0, [r0, #-2]
     294:	001e9403 	andseq	r9, lr, r3, lsl #8
     298:	01291120 			; <UNDEFINED> instruction: 0x01291120
     29c:	2f010000 	svccs	0x00010000
     2a0:	00000178 	andeq	r0, r0, r8, ror r1
     2a4:	1ebc0305 	cdpne	3, 11, cr0, cr12, cr5, {0}
     2a8:	3e0c2000 	cdpcc	0, 0, cr2, cr12, cr0, {0}
     2ac:	01000001 	tsteq	r0, r1
     2b0:	00026133 	andeq	r6, r2, r3, lsr r1
     2b4:	f0030500 			; <UNDEFINED> instruction: 0xf0030500
     2b8:	0c20001e 	stceq	0, cr0, [r0], #-120	; 0xffffff88
     2bc:	00000147 	andeq	r0, r0, r7, asr #2
     2c0:	02613d01 	rsbeq	r3, r1, #1, 26	; 0x40
     2c4:	03050000 	movweq	r0, #20480	; 0x5000
     2c8:	20001f18 	andcs	r1, r0, r8, lsl pc
     2cc:	00013912 	andeq	r3, r1, r2, lsl r9
     2d0:	10480100 	subne	r0, r8, r0, lsl #2
     2d4:	5c200000 	stcpl	0, cr0, [r0], #-0
     2d8:	01000001 	tsteq	r0, r1
     2dc:	00036c9c 	muleq	r3, ip, ip
     2e0:	015c1300 	cmpeq	ip, r0, lsl #6
     2e4:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
     2e8:	00000161 	andeq	r0, r0, r1, ror #2
     2ec:	7fbc9103 	svcvc	0x00bc9103
     2f0:	00001e13 	andeq	r1, r0, r3, lsl lr
     2f4:	6c480100 	stfvse	f0, [r8], {-0}
     2f8:	03000003 	movweq	r0, #3
     2fc:	147fb891 	ldrbtne	fp, [pc], #-2193	; 304 <startup-0x1ffffcfc>
     300:	51010073 	tstpl	r1, r3, ror r0
     304:	00000372 	andeq	r0, r0, r2, ror r3
     308:	0c6c9102 	stfeqp	f1, [ip], #-8
     30c:	000001ad 	andeq	r0, r0, sp, lsr #3
     310:	03785201 	cmneq	r8, #268435456	; 0x10000000
     314:	91020000 	mrsls	r0, (UNDEF: 2)
     318:	01b50c50 			; <UNDEFINED> instruction: 0x01b50c50
     31c:	57010000 	strpl	r0, [r1, -r0]
     320:	00000378 	andeq	r0, r0, r8, ror r3
     324:	0c449102 	stfeqp	f1, [r4], {2}
     328:	000003ce 	andeq	r0, r0, lr, asr #7
     32c:	03886801 	orreq	r6, r8, #65536	; 0x10000
     330:	91020000 	mrsls	r0, (UNDEF: 2)
     334:	01a60c40 			; <UNDEFINED> instruction: 0x01a60c40
     338:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
     33c:	00000398 	muleq	r0, r8, r3
     340:	14689102 	strbtne	r9, [r8], #-258	; 0xfffffefe
     344:	6e010070 	mcrvs	0, 0, r0, cr1, cr0, {3}
     348:	0000026c 	andeq	r0, r0, ip, ror #4
     34c:	0c649102 	stfeqp	f1, [r4], #-8
     350:	00000010 	andeq	r0, r0, r0, lsl r0
     354:	026c6f01 	rsbeq	r6, ip, #1, 30
     358:	91020000 	mrsls	r0, (UNDEF: 2)
     35c:	01210c60 			; <UNDEFINED> instruction: 0x01210c60
     360:	70010000 	andvc	r0, r1, r0
     364:	0000026c 	andeq	r0, r0, ip, ror #4
     368:	005c9102 	subseq	r9, ip, r2, lsl #2
     36c:	0372040a 	cmneq	r2, #167772160	; 0xa000000
     370:	040a0000 	streq	r0, [sl], #-0
     374:	00000090 	muleq	r0, r0, r0
     378:	00009005 	andeq	r9, r0, r5
     37c:	00038800 	andeq	r8, r3, r0, lsl #16
     380:	00890600 	addeq	r0, r9, r0, lsl #12
     384:	000a0000 	andeq	r0, sl, r0
     388:	0000d805 	andeq	sp, r0, r5, lsl #16
     38c:	00039800 	andeq	r9, r3, r0, lsl #16
     390:	00890600 	addeq	r0, r9, r0, lsl #12
     394:	00010000 	andeq	r0, r1, r0
     398:	00d8040a 	sbcseq	r0, r8, sl, lsl #8
     39c:	00150000 	andseq	r0, r5, r0
     3a0:	01000000 	mrseq	r0, (UNDEF: 0)
     3a4:	00000007 	andeq	r0, r0, r7
     3a8:	00000c20 	andeq	r0, r0, r0, lsr #24
     3ac:	009c0100 	addseq	r0, ip, r0, lsl #2
     3b0:	00000098 	muleq	r0, r8, r0
     3b4:	012a0004 			; <UNDEFINED> instruction: 0x012a0004
     3b8:	01040000 	mrseq	r0, (UNDEF: 4)
     3bc:	00000032 	andeq	r0, r0, r2, lsr r0
     3c0:	0001d60c 	andeq	sp, r1, ip, lsl #12
     3c4:	0000d800 	andeq	sp, r0, r0, lsl #16
     3c8:	00016c00 	andeq	r6, r1, r0, lsl #24
     3cc:	00006e20 	andeq	r6, r0, r0, lsr #28
     3d0:	0000cc00 	andeq	ip, r0, r0, lsl #24
     3d4:	08010200 	stmdaeq	r1, {r9}
     3d8:	000000ca 	andeq	r0, r0, sl, asr #1
     3dc:	00021c03 	andeq	r1, r2, r3, lsl #24
     3e0:	ca240100 	bgt	9007e8 <startup-0x1f6ff818>
     3e4:	10200001 	eorne	r0, r0, r1
     3e8:	01000000 	mrseq	r0, (UNDEF: 0)
     3ec:	00004f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
     3f0:	736d0400 	cmnvc	sp, #0, 8
     3f4:	4f240100 	svcmi	0x00240100
     3f8:	02000000 	andeq	r0, r0, #0
     3fc:	02007491 	andeq	r7, r0, #-1862270976	; 0x91000000
     400:	04f70704 	ldrbteq	r0, [r7], #1796	; 0x704
     404:	05030000 	streq	r0, [r3, #-0]
     408:	01000002 	tsteq	r0, r2
     40c:	0001ba1b 	andeq	fp, r1, fp, lsl sl
     410:	00001020 	andeq	r1, r0, r0, lsr #32
     414:	799c0100 	ldmibvc	ip, {r8}
     418:	04000000 	streq	r0, [r0], #-0
     41c:	01007375 	tsteq	r0, r5, ror r3
     420:	00004f1b 	andeq	r4, r0, fp, lsl pc
     424:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     428:	02280500 	eoreq	r0, r8, #0, 10
     42c:	0f010000 	svceq	0x00010000
     430:	200001b0 			; <UNDEFINED> instruction: 0x200001b0
     434:	0000000a 	andeq	r0, r0, sl
     438:	11059c01 	tstne	r5, r1, lsl #24
     43c:	01000002 	tsteq	r0, r2
     440:	00016c05 	andeq	r6, r1, r5, lsl #24
     444:	00004420 	andeq	r4, r0, r0, lsr #8
     448:	009c0100 	addseq	r0, ip, r0, lsl #2
     44c:	0000047e 	andeq	r0, r0, lr, ror r4
     450:	018a0004 	orreq	r0, sl, r4
     454:	01040000 	mrseq	r0, (UNDEF: 4)
     458:	00000032 	andeq	r0, r0, r2, lsr r0
     45c:	0002c90c 	andeq	ip, r2, ip, lsl #18
     460:	0000d800 	andeq	sp, r0, r0, lsl #16
     464:	0001dc00 	andeq	sp, r1, r0, lsl #24
     468:	00088820 	andeq	r8, r8, r0, lsr #16
     46c:	00013e00 	andeq	r3, r1, r0, lsl #28
     470:	01610200 	cmneq	r1, r0, lsl #4
     474:	048c0000 	streq	r0, [ip], #0
     478:	00730b02 	rsbseq	r0, r3, r2, lsl #22
     47c:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
     480:	02000002 	andeq	r0, r0, #2
     484:	0000730c 	andeq	r7, r0, ip, lsl #6
     488:	4e040000 	cdpmi	0, 0, cr0, cr4, cr0, {0}
     48c:	02000002 	andeq	r0, r0, #2
     490:	0000970d 	andeq	r9, r0, sp, lsl #14
     494:	04040000 	streq	r0, [r4], #-0
     498:	0000016b 	andeq	r0, r0, fp, ror #2
     49c:	00b80e02 	adcseq	r0, r8, r2, lsl #28
     4a0:	04800000 	streq	r0, [r0], #0
     4a4:	00032304 	andeq	r2, r3, r4, lsl #6
     4a8:	df0f0200 	svcle	0x000f0200
     4ac:	84000000 	strhi	r0, [r0], #-0
     4b0:	02410404 	subeq	r0, r1, #4, 8	; 0x4000000
     4b4:	10020000 	andne	r0, r2, r0
     4b8:	000000b8 	strheq	r0, [r0], -r8
     4bc:	05000488 	streq	r0, [r0, #-1160]	; 0xfffffb78
     4c0:	00000090 	muleq	r0, r0, r0
     4c4:	00000089 	andeq	r0, r0, r9, lsl #1
     4c8:	00008906 	andeq	r8, r0, r6, lsl #18
     4cc:	89067f00 	stmdbhi	r6, {r8, r9, sl, fp, ip, sp, lr}
     4d0:	07000000 	streq	r0, [r0, -r0]
     4d4:	07040700 	streq	r0, [r4, -r0, lsl #14]
     4d8:	000004f7 	strdeq	r0, [r0], -r7
     4dc:	d3080107 	movwle	r0, #33031	; 0x8107
     4e0:	05000000 	streq	r0, [r0, #-0]
     4e4:	00000090 	muleq	r0, r0, r0
     4e8:	000000a7 	andeq	r0, r0, r7, lsr #1
     4ec:	00008906 	andeq	r8, r0, r6, lsl #18
     4f0:	08007f00 	stmdaeq	r0, {r8, r9, sl, fp, ip, sp, lr}
     4f4:	000000b2 	strheq	r0, [r0], -r2
     4f8:	0000b209 	andeq	fp, r0, r9, lsl #4
     4fc:	040a0000 	streq	r0, [sl], #-0
     500:	00000025 	andeq	r0, r0, r5, lsr #32
     504:	00a7040a 	adceq	r0, r7, sl, lsl #8
     508:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
     50c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     510:	000000b2 	strheq	r0, [r0], -r2
     514:	0000d809 	andeq	sp, r0, r9, lsl #16
     518:	00d80900 	sbcseq	r0, r8, r0, lsl #18
     51c:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
     520:	00000000 	andeq	r0, r0, r0
     524:	ca080107 	bgt	200948 <startup-0x1fdff6b8>
     528:	0a000000 	beq	530 <startup-0x1ffffad0>
     52c:	0000be04 	andeq	fp, r0, r4, lsl #28
     530:	032f0b00 			; <UNDEFINED> instruction: 0x032f0b00
     534:	12020000 	andne	r0, r2, #0
     538:	00000025 	andeq	r0, r0, r5, lsr #32
     53c:	00032e0b 	andeq	r2, r3, fp, lsl #28
     540:	b2120200 	andslt	r0, r2, #0, 4
     544:	0c000000 	stceq	0, cr0, [r0], {-0}
     548:	00000164 	andeq	r0, r0, r4, ror #2
     54c:	00e51e02 	rsceq	r1, r5, r2, lsl #28
     550:	03050000 	movweq	r0, #20480	; 0x5000
     554:	20001554 	andcs	r1, r0, r4, asr r5
     558:	d801070d 	stmdale	r1, {r0, r2, r3, r8, r9, sl}
     55c:	03000000 	movweq	r0, #0
     560:	0001441d 	andeq	r4, r1, sp, lsl r4
     564:	03290e00 			; <UNDEFINED> instruction: 0x03290e00
     568:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
     56c:	0000029f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
     570:	033f0e02 	teqeq	pc, #2, 28
     574:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
     578:	00000339 	andeq	r0, r0, r9, lsr r3
     57c:	02340e08 	eorseq	r0, r4, #8, 28	; 0x80
     580:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
     584:	000002fe 	strdeq	r0, [r0], -lr
     588:	5f420f20 	svcpl	0x00420f20
     58c:	00400045 	subeq	r0, r0, r5, asr #32
     590:	00027210 	andeq	r7, r2, r0, lsl r2
     594:	73d20100 	bicsvc	r0, r2, #0, 2
     598:	05000000 	streq	r0, [r0, #-0]
     59c:	001a6003 	andseq	r6, sl, r3
     5a0:	02471020 	subeq	r1, r7, #32
     5a4:	d3010000 	movwle	r0, #4096	; 0x1000
     5a8:	00000097 	muleq	r0, r7, r0
     5ac:	19e00305 	stmibne	r0!, {r0, r2, r8, r9}^
     5b0:	3a112000 	bcc	4485b8 <startup-0x1fbb7a48>
     5b4:	01000002 	tsteq	r0, r2
     5b8:	000a10db 	ldrdeq	r1, [sl], -fp
     5bc:	00005420 	andeq	r5, r0, r0, lsr #8
     5c0:	b69c0100 	ldrlt	r0, [ip], r0, lsl #2
     5c4:	12000001 	andne	r0, r0, #1
     5c8:	00000281 	andeq	r0, r0, r1, lsl #5
     5cc:	00f0db01 	rscseq	sp, r0, r1, lsl #22
     5d0:	91020000 	mrsls	r0, (UNDEF: 2)
     5d4:	0a18136c 	beq	60538c <startup-0x1f9fac74>
     5d8:	00442000 	subeq	r2, r4, r0
     5dc:	69140000 	ldmdbvs	r4, {}	; <UNPREDICTABLE>
     5e0:	b6dc0100 	ldrblt	r0, [ip], r0, lsl #2
     5e4:	02000001 	andeq	r0, r0, #1
     5e8:	2e137491 	cfcmpscs	r7, mvf3, mvf1
     5ec:	2220000a 	eorcs	r0, r0, #10
     5f0:	14000000 	strne	r0, [r0], #-0
     5f4:	de01006a 	cdple	0, 0, cr0, cr1, cr10, {3}
     5f8:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
     5fc:	00709102 	rsbseq	r9, r0, r2, lsl #2
     600:	04150000 	ldreq	r0, [r5], #-0
     604:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     608:	03611100 	cmneq	r1, #0, 2
     60c:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
     610:	200008ec 	andcs	r0, r0, ip, ror #17
     614:	00000124 	andeq	r0, r0, r4, lsr #2
     618:	02239c01 	eoreq	r9, r3, #256	; 0x100
     61c:	82120000 	andshi	r0, r2, #0
     620:	01000002 	tsteq	r0, r2
     624:	0000f0be 	strheq	pc, [r0], -lr	; <UNPREDICTABLE>
     628:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     62c:	01007816 	tsteq	r0, r6, lsl r8
     630:	0000d8be 			; <UNDEFINED> instruction: 0x0000d8be
     634:	63910200 	orrsvs	r0, r1, #0, 4
     638:	01007916 	tsteq	r0, r6, lsl r9
     63c:	0000d8be 			; <UNDEFINED> instruction: 0x0000d8be
     640:	62910200 	addsvs	r0, r1, #0, 4
     644:	74657316 	strbtvc	r7, [r5], #-790	; 0xfffffcea
     648:	d8be0100 	ldmle	lr!, {r8}
     64c:	02000000 	andeq	r0, r0, #0
     650:	320c6191 	andcc	r6, ip, #1073741860	; 0x40000024
     654:	01000005 	tsteq	r0, r5
     658:	000090bf 	strheq	r9, [r0], -pc	; <UNPREDICTABLE>
     65c:	6f910200 	svcvs	0x00910200
     660:	0003480c 	andeq	r4, r3, ip, lsl #16
     664:	90c80100 	sbcls	r0, r8, r0, lsl #2
     668:	02000000 	andeq	r0, r0, #0
     66c:	17006e91 			; <UNDEFINED> instruction: 0x17006e91
     670:	0000030d 	andeq	r0, r0, sp, lsl #6
     674:	0794a201 	ldreq	sl, [r4, r1, lsl #4]
     678:	01582000 	cmpeq	r8, r0
     67c:	9c010000 	stcls	0, cr0, [r1], {-0}
     680:	0000029f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
     684:	0003ab12 	andeq	sl, r3, r2, lsl fp
     688:	f0a20100 			; <UNDEFINED> instruction: 0xf0a20100
     68c:	02000000 	andeq	r0, r0, #0
     690:	78145c91 	ldmdavc	r4, {r0, r4, r7, sl, fp, ip, lr}
     694:	d8a50100 	stmiale	r5!, {r8}
     698:	02000000 	andeq	r0, r0, #0
     69c:	69146791 	ldmdbvs	r4, {r0, r4, r7, r8, r9, sl, sp, lr}
     6a0:	d8a50100 	stmiale	r5!, {r8}
     6a4:	02000000 	andeq	r0, r0, #0
     6a8:	6a146691 	bvs	51a0f4 <startup-0x1fae5f0c>
     6ac:	d8a50100 	stmiale	r5!, {r8}
     6b0:	02000000 	andeq	r0, r0, #0
     6b4:	320c6591 	andcc	r6, ip, #608174080	; 0x24400000
     6b8:	01000005 	tsteq	r0, r5
     6bc:	0000d8a6 	andeq	sp, r0, r6, lsr #17
     6c0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     6c4:	00026d0c 	andeq	r6, r2, ip, lsl #26
     6c8:	d8a60100 	stmiale	r6!, {r8}
     6cc:	02000000 	andeq	r0, r0, #0
     6d0:	b0136291 	mulslt	r3, r1, r2
     6d4:	02200007 	eoreq	r0, r0, #7
     6d8:	0c000001 	stceq	0, cr0, [r0], {1}
     6dc:	00000258 	andeq	r0, r0, r8, asr r2
     6e0:	0090a901 	addseq	sl, r0, r1, lsl #18
     6e4:	91020000 	mrsls	r0, (UNDEF: 2)
     6e8:	17000063 	strne	r0, [r0, -r3, rrx]
     6ec:	0000031b 	andeq	r0, r0, fp, lsl r3
     6f0:	06588701 	ldrbeq	r8, [r8], -r1, lsl #14
     6f4:	013c2000 	teqeq	ip, r0
     6f8:	9c010000 	stcls	0, cr0, [r1], {-0}
     6fc:	00000305 	andeq	r0, r0, r5, lsl #6
     700:	01007816 	tsteq	r0, r6, lsl r8
     704:	0000d887 	andeq	sp, r0, r7, lsl #17
     708:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
     70c:	01007916 	tsteq	r0, r6, lsl r9
     710:	0000d887 	andeq	sp, r0, r7, lsl #17
     714:	66910200 	ldrvs	r0, [r1], r0, lsl #4
     718:	74657316 	strbtvc	r7, [r5], #-790	; 0xfffffcea
     71c:	d8870100 	stmle	r7, {r8}
     720:	02000000 	andeq	r0, r0, #0
     724:	320c6591 	andcc	r6, ip, #608174080	; 0x24400000
     728:	01000005 	tsteq	r0, r5
     72c:	0000908a 	andeq	r9, r0, sl, lsl #1
     730:	6f910200 	svcvs	0x00910200
     734:	0003480c 	andeq	r4, r3, ip, lsl #16
     738:	908d0100 	addls	r0, sp, r0, lsl #2
     73c:	02000000 	andeq	r0, r0, #0
     740:	b20c6d91 	andlt	r6, ip, #9280	; 0x2440
     744:	01000002 	tsteq	r0, r2
     748:	0000d897 	muleq	r0, r7, r8
     74c:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
     750:	028a1700 	addeq	r1, sl, #0, 14
     754:	7d010000 	stcvc	0, cr0, [r1, #-0]
     758:	20000600 	andcs	r0, r0, r0, lsl #12
     75c:	00000058 	andeq	r0, r0, r8, asr r0
     760:	03479c01 	movteq	r9, #31745	; 0x7c01
     764:	06130000 	ldreq	r0, [r3], -r0
     768:	4a200006 	bmi	800788 <startup-0x1f7ff878>
     76c:	14000000 	strne	r0, [r0], #-0
     770:	7e010069 	cdpvc	0, 0, cr0, cr1, cr9, {3}
     774:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
     778:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
     77c:	2000062a 	andcs	r0, r0, sl, lsr #12
     780:	0000001a 	andeq	r0, r0, sl, lsl r0
     784:	01006a14 	tsteq	r0, r4, lsl sl
     788:	0001b681 	andeq	fp, r1, r1, lsl #13
     78c:	70910200 	addsvc	r0, r1, r0, lsl #4
     790:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     794:	000003b2 			; <UNDEFINED> instruction: 0x000003b2
     798:	057c6a01 	ldrbeq	r6, [ip, #-2561]!	; 0xfffff5ff
     79c:	00842000 	addeq	r2, r4, r0
     7a0:	9c010000 	stcls	0, cr0, [r1], {-0}
     7a4:	00030419 	andeq	r0, r3, r9, lsl r4
     7a8:	62660100 	rsbvs	r0, r6, #0, 2
     7ac:	1a200005 	bne	8007c8 <startup-0x1f7ff838>
     7b0:	01000000 	mrseq	r0, (UNDEF: 0)
     7b4:	02601a9c 	rsbeq	r1, r0, #156, 20	; 0x9c000
     7b8:	61010000 	mrsvs	r0, (UNDEF: 1)
     7bc:	000000d8 	ldrdeq	r0, [r0], -r8
     7c0:	20000538 	andcs	r0, r0, r8, lsr r5
     7c4:	0000002a 	andeq	r0, r0, sl, lsr #32
     7c8:	038f9c01 	orreq	r9, pc, #256	; 0x100
     7cc:	63160000 	tstvs	r6, #0
     7d0:	d8610100 	stmdale	r1!, {r8}^
     7d4:	02000000 	andeq	r0, r0, #0
     7d8:	17007791 			; <UNDEFINED> instruction: 0x17007791
     7dc:	0000034e 	andeq	r0, r0, lr, asr #6
     7e0:	04d85a01 	ldrbeq	r5, [r8], #2561	; 0xa01
     7e4:	00602000 	rsbeq	r2, r0, r0
     7e8:	9c010000 	stcls	0, cr0, [r1], {-0}
     7ec:	000003bf 			; <UNDEFINED> instruction: 0x000003bf
     7f0:	00026d12 	andeq	r6, r2, r2, lsl sp
     7f4:	d85a0100 	ldmdale	sl, {r8}^
     7f8:	02000000 	andeq	r0, r0, #0
     7fc:	63167791 	tstvs	r6, #38010880	; 0x2440000
     800:	d85a0100 	ldmdale	sl, {r8}^
     804:	02000000 	andeq	r0, r0, #0
     808:	17007691 			; <UNDEFINED> instruction: 0x17007691
     80c:	00000395 	muleq	r0, r5, r3
     810:	04805301 	streq	r5, [r0], #769	; 0x301
     814:	00582000 	subseq	r2, r8, r0
     818:	9c010000 	stcls	0, cr0, [r1], {-0}
     81c:	000003ef 	andeq	r0, r0, pc, ror #7
     820:	646d6316 	strbtvs	r6, [sp], #-790	; 0xfffffcea
     824:	d8530100 	ldmdale	r3, {r8}^
     828:	02000000 	andeq	r0, r0, #0
     82c:	63167791 	tstvs	r6, #38010880	; 0x2440000
     830:	d8530100 	ldmdale	r3, {r8}^
     834:	02000000 	andeq	r0, r0, #0
     838:	17007691 			; <UNDEFINED> instruction: 0x17007691
     83c:	000002a4 	andeq	r0, r0, r4, lsr #5
     840:	03d83d01 	bicseq	r3, r8, #1, 26	; 0x40
     844:	00a82000 	adceq	r2, r8, r0
     848:	9c010000 	stcls	0, cr0, [r1], {-0}
     84c:	0000041f 	andeq	r0, r0, pc, lsl r4
     850:	6c617616 	stclvs	6, cr7, [r1], #-88	; 0xffffffa8
     854:	d83d0100 	ldmdale	sp!, {r8}
     858:	02000000 	andeq	r0, r0, #0
     85c:	63167791 	tstvs	r6, #38010880	; 0x2440000
     860:	d83d0100 	ldmdale	sp!, {r8}
     864:	02000000 	andeq	r0, r0, #0
     868:	1a007691 	bne	1e2b4 <startup-0x1ffe1d4c>
     86c:	00000375 	andeq	r0, r0, r5, ror r3
     870:	00902401 	addseq	r2, r0, r1, lsl #8
     874:	03100000 	tsteq	r0, #0
     878:	00c82000 	sbceq	r2, r8, r0
     87c:	9c010000 	stcls	0, cr0, [r1], {-0}
     880:	00000452 	andeq	r0, r0, r2, asr r4
     884:	01006316 	tsteq	r0, r6, lsl r3
     888:	0000d824 	andeq	sp, r0, r4, lsr #16
     88c:	6f910200 	svcvs	0x00910200
     890:	00565214 	subseq	r5, r6, r4, lsl r2
     894:	00d82e01 	sbcseq	r2, r8, r1, lsl #28
     898:	91020000 	mrsls	r0, (UNDEF: 2)
     89c:	821b0077 	andshi	r0, fp, #119	; 0x77
     8a0:	01000003 	tsteq	r0, r3
     8a4:	00026c12 	andeq	r6, r2, r2, lsl ip
     8a8:	0000a420 	andeq	sl, r0, r0, lsr #8
     8ac:	1c9c0100 	ldfnes	f0, [ip], {0}
     8b0:	000002b7 			; <UNDEFINED> instruction: 0x000002b7
     8b4:	01dc0901 	bicseq	r0, ip, r1, lsl #18
     8b8:	00902000 	addseq	r2, r0, r0
     8bc:	9c010000 	stcls	0, cr0, [r1], {-0}
     8c0:	01006316 	tsteq	r0, r6, lsl r3
     8c4:	00009009 	andeq	r9, r0, r9
     8c8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     8cc:	03970000 	orrseq	r0, r7, #0
     8d0:	00040000 	andeq	r0, r4, r0
     8d4:	00000340 	andeq	r0, r0, r0, asr #6
     8d8:	00320104 	eorseq	r0, r2, r4, lsl #2
     8dc:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
     8e0:	d8000004 	stmdale	r0, {r2}
     8e4:	64000000 	strvs	r0, [r0], #-0
     8e8:	0a20000a 	beq	800918 <startup-0x1f7ff6e8>
     8ec:	ca000002 	bgt	8fc <startup-0x1ffff704>
     8f0:	02000002 	andeq	r0, r0, #2
     8f4:	42050202 	andmi	r0, r5, #536870912	; 0x20000000
     8f8:	03000000 	movweq	r0, #0
     8fc:	06020078 			; <UNDEFINED> instruction: 0x06020078
     900:	00000042 	andeq	r0, r0, r2, asr #32
     904:	00790300 	rsbseq	r0, r9, r0, lsl #6
     908:	00420702 	subeq	r0, r2, r2, lsl #14
     90c:	00010000 	andeq	r0, r1, r0
     910:	ca080104 	bgt	200d28 <startup-0x1fdff2d8>
     914:	05000000 	streq	r0, [r0, #-0]
     918:	00000018 	andeq	r0, r0, r8, lsl r0
     91c:	00250802 	eoreq	r0, r5, r2, lsl #16
     920:	34020000 	strcc	r0, [r2], #-0
     924:	008c1902 	addeq	r1, ip, r2, lsl #18
     928:	c2060000 	andgt	r0, r6, #0
     92c:	02000001 	andeq	r0, r0, #1
     930:	00008c1a 	andeq	r8, r0, sl, lsl ip
     934:	50060000 	andpl	r0, r6, r0
     938:	02000001 	andeq	r0, r0, #1
     93c:	00008c1b 	andeq	r8, r0, fp, lsl ip
     940:	56060400 	strpl	r0, [r6], -r0, lsl #8
     944:	02000001 	andeq	r0, r0, #1
     948:	00008c1c 	andeq	r8, r0, ip, lsl ip
     94c:	70030800 	andvc	r0, r3, r0, lsl #16
     950:	1d020078 	stcne	0, cr0, [r2, #-480]	; 0xfffffe20
     954:	00000093 	muleq	r0, r3, r0
     958:	0407000c 	streq	r0, [r7], #-12
     95c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     960:	00490800 	subeq	r0, r9, r0, lsl #16
     964:	00a30000 	adceq	r0, r3, r0
     968:	a3090000 	movwge	r0, #36864	; 0x9000
     96c:	13000000 	movwne	r0, #0
     970:	07040400 	streq	r0, [r4, -r0, lsl #8]
     974:	000004f7 	strdeq	r0, [r0], -r7
     978:	0001cc05 	andeq	ip, r1, r5, lsl #24
     97c:	b51e0200 	ldrlt	r0, [lr, #-512]	; 0xfffffe00
     980:	0a000000 	beq	988 <startup-0x1ffff678>
     984:	00005404 	andeq	r5, r0, r4, lsl #8
     988:	01bd0b00 			; <UNDEFINED> instruction: 0x01bd0b00
     98c:	02280000 	eoreq	r0, r8, #0
     990:	00014022 	andeq	r4, r1, r2, lsr #32
     994:	65670300 	strbvs	r0, [r7, #-768]!	; 0xfffffd00
     998:	2302006f 	movwcs	r0, #8303	; 0x206f
     99c:	000000aa 	andeq	r0, r0, sl, lsr #1
     9a0:	00230600 	eoreq	r0, r3, r0, lsl #12
     9a4:	24020000 	strcs	r0, [r2], #-0
     9a8:	0000008c 	andeq	r0, r0, ip, lsl #1
     9ac:	00280604 	eoreq	r0, r8, r4, lsl #12
     9b0:	24020000 	strcs	r0, [r2], #-0
     9b4:	0000008c 	andeq	r0, r0, ip, lsl #1
     9b8:	01090608 	tsteq	r9, r8, lsl #12
     9bc:	25020000 	strcs	r0, [r2, #-0]
     9c0:	0000008c 	andeq	r0, r0, ip, lsl #1
     9c4:	010e060c 	tsteq	lr, ip, lsl #12
     9c8:	25020000 	strcs	r0, [r2, #-0]
     9cc:	0000008c 	andeq	r0, r0, ip, lsl #1
     9d0:	016b0610 	cmneq	fp, r0, lsl r6
     9d4:	26020000 	strcs	r0, [r2], -r0
     9d8:	00000151 	andeq	r0, r0, r1, asr r1
     9dc:	02410614 	subeq	r0, r1, #20, 12	; 0x1400000
     9e0:	27020000 	strcs	r0, [r2, -r0]
     9e4:	00000151 	andeq	r0, r0, r1, asr r1
     9e8:	01a10618 			; <UNDEFINED> instruction: 0x01a10618
     9ec:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
     9f0:	00000151 	andeq	r0, r0, r1, asr r1
     9f4:	00ff061c 	rscseq	r0, pc, ip, lsl r6	; <UNPREDICTABLE>
     9f8:	29020000 	stmdbcs	r2, {}	; <UNPREDICTABLE>
     9fc:	0000016c 	andeq	r0, r0, ip, ror #2
     a00:	03df0620 	bicseq	r0, pc, #32, 12	; 0x2000000
     a04:	2a020000 	bcs	80a0c <startup-0x1ff7f5f4>
     a08:	00000182 	andeq	r0, r0, r2, lsl #3
     a0c:	4b0c0024 	blmi	300aa4 <startup-0x1fcff55c>
     a10:	0d000001 	stceq	0, cr0, [r0, #-4]
     a14:	0000014b 	andeq	r0, r0, fp, asr #2
     a18:	bb040a00 	bllt	103220 <startup-0x1fefcde0>
     a1c:	0a000000 	beq	a24 <startup-0x1ffff5dc>
     a20:	00014004 	andeq	r4, r1, r4
     a24:	016c0c00 	cmneq	ip, r0, lsl #24
     a28:	4b0d0000 	blmi	340a30 <startup-0x1fcbf5d0>
     a2c:	0d000001 	stceq	0, cr0, [r0, #-4]
     a30:	0000008c 	andeq	r0, r0, ip, lsl #1
     a34:	00008c0d 	andeq	r8, r0, sp, lsl #24
     a38:	040a0000 	streq	r0, [sl], #-0
     a3c:	00000157 	andeq	r0, r0, r7, asr r1
     a40:	0001820c 	andeq	r8, r1, ip, lsl #4
     a44:	014b0d00 	cmpeq	fp, r0, lsl #26
     a48:	490d0000 	stmdbmi	sp, {}	; <UNPREDICTABLE>
     a4c:	00000000 	andeq	r0, r0, r0
     a50:	0172040a 	cmneq	r2, sl, lsl #8
     a54:	8a050000 	bhi	140a5c <startup-0x1febf5a4>
     a58:	02000004 	andeq	r0, r0, #4
     a5c:	0000bb2b 	andeq	fp, r0, fp, lsr #22
     a60:	00080500 	andeq	r0, r8, r0, lsl #10
     a64:	2b020000 	blcs	80a6c <startup-0x1ff7f594>
     a68:	0000014b 	andeq	r0, r0, fp, asr #2
     a6c:	0003c50e 	andeq	ip, r3, lr, lsl #10
     a70:	06310100 	ldrteq	r0, [r1], -r0, lsl #2
     a74:	6820000c 	stmdavs	r0!, {r2, r3}
     a78:	01000000 	mrseq	r0, (UNDEF: 0)
     a7c:	00021e9c 	muleq	r2, ip, lr
     a80:	03ce0f00 	biceq	r0, lr, #0, 30
     a84:	31010000 	mrscc	r0, (UNDEF: 1)
     a88:	0000021e 	andeq	r0, r0, lr, lsl r2
     a8c:	0f6c9102 	svceq	0x006c9102
     a90:	00000448 	andeq	r0, r0, r8, asr #8
     a94:	02243101 	eoreq	r3, r4, #1073741824	; 0x40000000
     a98:	91020000 	mrsls	r0, (UNDEF: 2)
     a9c:	03ec106b 	mvneq	r1, #107	; 0x6b
     aa0:	32010000 	andcc	r0, r1, #0
     aa4:	0000008c 	andeq	r0, r0, ip, lsl #1
     aa8:	000001e0 	andeq	r0, r0, r0, ror #3
     aac:	f7100011 			; <UNDEFINED> instruction: 0xf7100011
     ab0:	01000003 	tsteq	r0, r3
     ab4:	00008c34 	andeq	r8, r0, r4, lsr ip
     ab8:	0001f100 	andeq	pc, r1, r0, lsl #2
     abc:	12001100 	andne	r1, r0, #0, 2
     ac0:	00000491 	muleq	r0, r1, r4
     ac4:	02243501 	eoreq	r3, r4, #4194304	; 0x400000
     ac8:	91020000 	mrsls	r0, (UNDEF: 2)
     acc:	04a11077 	strteq	r1, [r1], #119	; 0x77
     ad0:	36010000 	strcc	r0, [r1], -r0
     ad4:	0000008c 	andeq	r0, r0, ip, lsl #1
     ad8:	00000210 	andeq	r0, r0, r0, lsl r2
     adc:	b2130011 	andslt	r0, r3, #17
     ae0:	01000003 	tsteq	r0, r3
     ae4:	00008c37 	andeq	r8, r0, r7, lsr ip
     ae8:	00001100 	andeq	r1, r0, r0, lsl #2
     aec:	0224040a 	eoreq	r0, r4, #167772160	; 0xa000000
     af0:	01040000 	mrseq	r0, (UNDEF: 4)
     af4:	0000d308 	andeq	sp, r0, r8, lsl #6
     af8:	04850e00 	streq	r0, [r5], #3584	; 0xe00
     afc:	24010000 	strcs	r0, [r1], #-0
     b00:	20000b6e 	andcs	r0, r0, lr, ror #22
     b04:	00000098 	muleq	r0, r8, r0
     b08:	024d9c01 	subeq	r9, sp, #256	; 0x100
     b0c:	6f140000 	svcvs	0x00140000
     b10:	4d240100 	stfmis	f0, [r4, #-0]
     b14:	02000002 	andeq	r0, r0, #2
     b18:	0a007491 	beq	1dd64 <startup-0x1ffe229c>
     b1c:	00018804 	andeq	r8, r1, r4, lsl #16
     b20:	046c0e00 	strbteq	r0, [ip], #-3584	; 0xfffff200
     b24:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
     b28:	20000b12 	andcs	r0, r0, r2, lsl fp
     b2c:	0000005c 	andeq	r0, r0, ip, asr r0
     b30:	02a29c01 	adceq	r9, r2, #256	; 0x100
     b34:	6f140000 	svcvs	0x00140000
     b38:	4d1e0100 	ldfmis	f0, [lr, #-0]
     b3c:	02000002 	andeq	r0, r0, #2
     b40:	1a156c91 	bne	55bd8c <startup-0x1faa4274>
     b44:	4c20000b 	stcmi	0, cr0, [r0], #-44	; 0xffffffd4
     b48:	16000000 	strne	r0, [r0], -r0
     b4c:	1f010069 	svcne	0x00010069
     b50:	0000008c 	andeq	r0, r0, ip, lsl #1
     b54:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
     b58:	20000b20 	andcs	r0, r0, r0, lsr #22
     b5c:	00000034 	andeq	r0, r0, r4, lsr r0
     b60:	00031b13 	andeq	r1, r3, r3, lsl fp
     b64:	8c1a0100 	ldfhis	f0, [sl], {-0}
     b68:	11000000 	mrsne	r0, (UNDEF: 0)
     b6c:	00000000 	andeq	r0, r0, r0
     b70:	0004790e 	andeq	r7, r4, lr, lsl #18
     b74:	ae160100 	mufges	f0, f6, f0
     b78:	6420000a 	strtvs	r0, [r0], #-10
     b7c:	01000000 	mrseq	r0, (UNDEF: 0)
     b80:	00030d9c 	muleq	r3, ip, sp
     b84:	006f1400 	rsbeq	r1, pc, r0, lsl #8
     b88:	024d1601 	subeq	r1, sp, #1048576	; 0x100000
     b8c:	91020000 	mrsls	r0, (UNDEF: 2)
     b90:	0ab61564 	beq	fed86128 <p2paddle+0xded84210>
     b94:	00542000 	subseq	r2, r4, r0
     b98:	69160000 	ldmdbvs	r6, {}	; <UNPREDICTABLE>
     b9c:	8c170100 	ldfhis	f0, [r7], {-0}
     ba0:	02000000 	andeq	r0, r0, #0
     ba4:	bc157491 	cfldrslt	mvf7, [r5], {145}	; 0x91
     ba8:	3c20000a 	stccc	0, cr0, [r0], #-40	; 0xffffffd8
     bac:	12000000 	andne	r0, r0, #0
     bb0:	00000460 	andeq	r0, r0, r0, ror #8
     bb4:	008c1801 	addeq	r1, ip, r1, lsl #16
     bb8:	91020000 	mrsls	r0, (UNDEF: 2)
     bbc:	04661270 	strbteq	r1, [r6], #-624	; 0xfffffd90
     bc0:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
     bc4:	0000008c 	andeq	r0, r0, ip, lsl #1
     bc8:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
     bcc:	0000031b 	andeq	r0, r0, fp, lsl r3
     bd0:	008c1a01 	addeq	r1, ip, r1, lsl #20
     bd4:	00110000 	andseq	r0, r1, r0
     bd8:	17000000 	strne	r0, [r0, -r0]
     bdc:	000003da 	ldrdeq	r0, [r0], -sl
     be0:	0a8e1101 	beq	fe384fec <p2paddle+0xde3830d4>
     be4:	00202000 	eoreq	r2, r0, r0
     be8:	9c010000 	stcls	0, cr0, [r1], {-0}
     bec:	0000034b 	andeq	r0, r0, fp, asr #6
     bf0:	01006f14 	tsteq	r0, r4, lsl pc
     bf4:	00019311 	andeq	r9, r1, r1, lsl r3
     bf8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     bfc:	0001090f 	andeq	r0, r1, pc, lsl #18
     c00:	8c110100 	ldfhis	f0, [r1], {-0}
     c04:	02000000 	andeq	r0, r0, #0
     c08:	0e0f7091 	mcreq	0, 0, r7, cr15, cr1, {4}
     c0c:	01000001 	tsteq	r0, r1
     c10:	00008c11 	andeq	r8, r0, r1, lsl ip
     c14:	6c910200 	lfmvs	f0, 4, [r1], {0}
     c18:	044f1700 	strbeq	r1, [pc], #-1792	; c20 <startup-0x1ffff3e0>
     c1c:	0c010000 	stceq	0, cr0, [r1], {-0}
     c20:	20000a6e 	andcs	r0, r0, lr, ror #20
     c24:	00000020 	andeq	r0, r0, r0, lsr #32
     c28:	03899c01 	orreq	r9, r9, #256	; 0x100
     c2c:	6f140000 	svcvs	0x00140000
     c30:	930c0100 	movwls	r0, #49408	; 0xc100
     c34:	02000001 	andeq	r0, r0, #1
     c38:	410f7491 			; <UNDEFINED> instruction: 0x410f7491
     c3c:	01000004 	tsteq	r0, r4
     c40:	00008c0c 	andeq	r8, r0, ip, lsl #24
     c44:	70910200 	addsvc	r0, r1, r0, lsl #4
     c48:	00049a0f 	andeq	r9, r4, pc, lsl #20
     c4c:	8c0c0100 	stfhis	f0, [ip], {-0}
     c50:	02000000 	andeq	r0, r0, #0
     c54:	18006c91 	stmdane	r0, {r0, r4, r7, sl, fp, sp, lr}
     c58:	00000404 	andeq	r0, r0, r4, lsl #8
     c5c:	0a640801 	beq	1902c68 <startup-0x1e6fd398>
     c60:	000a2000 	andeq	r2, sl, r0
     c64:	9c010000 	stcls	0, cr0, [r1], {-0}
     c68:	00022d00 	andeq	r2, r2, r0, lsl #26
     c6c:	94000400 	strls	r0, [r0], #-1024	; 0xfffffc00
     c70:	04000004 	streq	r0, [r0], #-4
     c74:	00003201 	andeq	r3, r0, r1, lsl #4
     c78:	053d0c00 	ldreq	r0, [sp, #-3072]!	; 0xfffff400
     c7c:	00d80000 	sbcseq	r0, r8, r0
     c80:	0c700000 	ldcleq	0, cr0, [r0], #-0
     c84:	02a82000 	adceq	r2, r8, #0
     c88:	03890000 	orreq	r0, r9, #0
     c8c:	07020000 	streq	r0, [r2, -r0]
     c90:	00005d01 	andeq	r5, r0, r1, lsl #26
     c94:	5d1d0200 	lfmpl	f0, 4, [sp, #-0]
     c98:	03000000 	movweq	r0, #0
     c9c:	00000329 	andeq	r0, r0, r9, lsr #6
     ca0:	029f0301 	addseq	r0, pc, #67108864	; 0x4000000
     ca4:	03020000 	movweq	r0, #8192	; 0x2000
     ca8:	0000033f 	andeq	r0, r0, pc, lsr r3
     cac:	03390304 	teqeq	r9, #4, 6	; 0x10000000
     cb0:	03080000 	movweq	r0, #32768	; 0x8000
     cb4:	00000234 	andeq	r0, r0, r4, lsr r2
     cb8:	02fe0310 	rscseq	r0, lr, #16, 6	; 0x40000000
     cbc:	04200000 	strteq	r0, [r0], #-0
     cc0:	00455f42 	subeq	r5, r5, r2, asr #30
     cc4:	01050040 	tsteq	r5, r0, asr #32
     cc8:	0000ca08 	andeq	ip, r0, r8, lsl #20
     ccc:	05940600 	ldreq	r0, [r4, #1536]	; 0x600
     cd0:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
     cd4:	20000eea 	andcs	r0, r0, sl, ror #29
     cd8:	0000002e 	andeq	r0, r0, lr, lsr #32
     cdc:	f7079c01 			; <UNDEFINED> instruction: 0xf7079c01
     ce0:	01000003 	tsteq	r0, r3
     ce4:	000eb659 	andeq	fp, lr, r9, asr r6
     ce8:	00003420 	andeq	r3, r0, r0, lsr #8
     cec:	b19c0100 	orrslt	r0, ip, r0, lsl #2
     cf0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     cf4:	59010078 	stmdbpl	r1, {r3, r4, r5, r6}
     cf8:	000000b1 	strheq	r0, [r0], -r1
     cfc:	086c9102 	stmdaeq	ip!, {r1, r8, ip, pc}^
     d00:	59010079 	stmdbpl	r1, {r0, r3, r4, r5, r6}
     d04:	000000b1 	strheq	r0, [r0], -r1
     d08:	09689102 	stmdbeq	r8!, {r1, r8, ip, pc}^
     d0c:	000005a3 	andeq	r0, r0, r3, lsr #11
     d10:	00b15a01 	adcseq	r5, r1, r1, lsl #20
     d14:	91020000 	mrsls	r0, (UNDEF: 2)
     d18:	040a0074 	streq	r0, [sl], #-116	; 0xffffff8c
     d1c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     d20:	04a10700 	strteq	r0, [r1], #1792	; 0x700
     d24:	52010000 	andpl	r0, r1, #0
     d28:	20000e7a 	andcs	r0, r0, sl, ror lr
     d2c:	0000003c 	andeq	r0, r0, ip, lsr r0
     d30:	00da9c01 	sbcseq	r9, sl, r1, lsl #24
     d34:	63080000 	movwvs	r0, #32768	; 0x8000
     d38:	da520100 	ble	1481140 <startup-0x1eb7eec0>
     d3c:	02000000 	andeq	r0, r0, #0
     d40:	05007791 	streq	r7, [r0, #-1937]	; 0xfffff86f
     d44:	00d30801 	sbcseq	r0, r3, r1, lsl #16
     d48:	ec0b0000 	stc	0, cr0, [fp], {-0}
     d4c:	01000003 	tsteq	r0, r3
     d50:	000e3446 	andeq	r3, lr, r6, asr #8
     d54:	00004620 	andeq	r4, r0, r0, lsr #12
     d58:	0c9c0100 	ldfeqs	f0, [ip], {0}
     d5c:	00000574 	andeq	r0, r0, r4, ror r5
     d60:	005d3d01 	subseq	r3, sp, r1, lsl #26
     d64:	0dec0000 	stcleq	0, cr0, [ip]
     d68:	00482000 	subeq	r2, r8, r0
     d6c:	9c010000 	stcls	0, cr0, [r1], {-0}
     d70:	00000119 	andeq	r0, r0, r9, lsl r1
     d74:	0076720d 	rsbseq	r7, r6, sp, lsl #4
     d78:	005d4101 	subseq	r4, sp, r1, lsl #2
     d7c:	91020000 	mrsls	r0, (UNDEF: 2)
     d80:	150c006f 	strne	r0, [ip, #-111]	; 0xffffff91
     d84:	01000005 	tsteq	r0, r5
     d88:	00005d31 	andeq	r5, r0, r1, lsr sp
     d8c:	000dac00 	andeq	sl, sp, r0, lsl #24
     d90:	00004020 	andeq	r4, r0, r0, lsr #32
     d94:	409c0100 	addsmi	r0, ip, r0, lsl #2
     d98:	0d000001 	stceq	0, cr0, [r0, #-4]
     d9c:	01007672 	tsteq	r0, r2, ror r6
     da0:	00005d35 	andeq	r5, r0, r5, lsr sp
     da4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     da8:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
     dac:	2b010000 	blcs	40db4 <startup-0x1ffbf24c>
     db0:	20000d82 	andcs	r0, r0, r2, lsl #27
     db4:	0000002a 	andeq	r0, r0, sl, lsr #32
     db8:	01649c01 	cmneq	r4, r1, lsl #24
     dbc:	6d0e0000 	stcvs	0, cr0, [lr, #-0]
     dc0:	01000002 	tsteq	r0, r2
     dc4:	00005d2b 	andeq	r5, r0, fp, lsr #26
     dc8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     dcc:	05840700 	streq	r0, [r4, #1792]	; 0x700
     dd0:	25010000 	strcs	r0, [r1, #-0]
     dd4:	20000d58 	andcs	r0, r0, r8, asr sp
     dd8:	0000002a 	andeq	r0, r0, sl, lsr #32
     ddc:	01889c01 	orreq	r9, r8, r1, lsl #24
     de0:	a30e0000 	movwge	r0, #57344	; 0xe000
     de4:	01000003 	tsteq	r0, r3
     de8:	00005d25 	andeq	r5, r0, r5, lsr #26
     dec:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     df0:	05270c00 	streq	r0, [r7, #-3072]!	; 0xfffff400
     df4:	1c010000 	stcne	0, cr0, [r1], {-0}
     df8:	0000005d 	andeq	r0, r0, sp, asr r0
     dfc:	20000d2c 	andcs	r0, r0, ip, lsr #26
     e00:	0000002c 	andeq	r0, r0, ip, lsr #32
     e04:	01af9c01 			; <UNDEFINED> instruction: 0x01af9c01
     e08:	720d0000 	andvc	r0, sp, #0
     e0c:	20010076 	andcs	r0, r1, r6, ror r0
     e10:	0000005d 	andeq	r0, r0, sp, asr r0
     e14:	00779102 	rsbseq	r9, r7, r2, lsl #2
     e18:	0004c707 	andeq	ip, r4, r7, lsl #14
     e1c:	fc150100 	ldc2	1, cr0, [r5], {-0}
     e20:	3020000c 	eorcc	r0, r0, ip
     e24:	01000000 	mrseq	r0, (UNDEF: 0)
     e28:	0001d19c 	muleq	r1, ip, r1
     e2c:	00630800 	rsbeq	r0, r3, r0, lsl #16
     e30:	005d1501 	subseq	r1, sp, r1, lsl #10
     e34:	91020000 	mrsls	r0, (UNDEF: 2)
     e38:	b20f0077 	andlt	r0, pc, #119	; 0x77
     e3c:	01000004 	tsteq	r0, r4
     e40:	000cb40e 	andeq	fp, ip, lr, lsl #8
     e44:	00004820 	andeq	r4, r0, r0, lsr #16
     e48:	ff9c0100 			; <UNDEFINED> instruction: 0xff9c0100
     e4c:	08000001 	stmdaeq	r0, {r0}
     e50:	0e010078 	mcreq	0, 0, r0, cr1, cr8, {3}
     e54:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     e58:	0d6e9102 	stfeqp	f1, [lr, #-8]!
     e5c:	0f010063 	svceq	0x00010063
     e60:	0000005d 	andeq	r0, r0, sp, asr r0
     e64:	00779102 	rsbseq	r9, r7, r2, lsl #2
     e68:	f1070205 			; <UNDEFINED> instruction: 0xf1070205
     e6c:	10000004 	andne	r0, r0, r4
     e70:	000004de 	ldrdeq	r0, [r0], -lr
     e74:	0c700601 	ldcleq	6, cr0, [r0], #-4
     e78:	00442000 	subeq	r2, r4, r0
     e7c:	9c010000 	stcls	0, cr0, [r1], {-0}
     e80:	01007808 	tsteq	r0, r8, lsl #16
     e84:	0001ff06 	andeq	pc, r1, r6, lsl #30
     e88:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
     e8c:	0100630d 	tsteq	r0, sp, lsl #6
     e90:	00005d08 	andeq	r5, r0, r8, lsl #26
     e94:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     e98:	017a0000 	cmneq	sl, r0
     e9c:	00040000 	andeq	r0, r4, r0
     ea0:	000005b5 			; <UNDEFINED> instruction: 0x000005b5
     ea4:	00320104 	eorseq	r0, r2, r4, lsl #2
     ea8:	af0c0000 	svcge	0x000c0000
     eac:	d8000005 	stmdale	r0, {r0, r2}
     eb0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     eb4:	b020000f 	eorlt	r0, r0, pc
     eb8:	53000001 	movwpl	r0, #1
     ebc:	02000004 	andeq	r0, r0, #4
     ec0:	00ca0801 	sbceq	r0, sl, r1, lsl #16
     ec4:	25030000 	strcs	r0, [r3, #-0]
     ec8:	04000000 	streq	r0, [r0], #-0
     ecc:	00000619 	andeq	r0, r0, r9, lsl r6
     ed0:	00a33201 	adceq	r3, r3, r1, lsl #4
     ed4:	10400000 	subne	r0, r0, r0
     ed8:	00882000 	addeq	r2, r8, r0
     edc:	9c010000 	stcls	0, cr0, [r1], {-0}
     ee0:	000000a3 	andeq	r0, r0, r3, lsr #1
     ee4:	00060b05 	andeq	r0, r6, r5, lsl #22
     ee8:	25340100 	ldrcs	r0, [r4, #-256]!	; 0xffffff00
     eec:	02000000 	andeq	r0, r0, #0
     ef0:	7d057491 	cfstrsvc	mvf7, [r5, #-580]	; 0xfffffdbc
     ef4:	01000003 	tsteq	r0, r3
     ef8:	0000a335 	andeq	sl, r0, r5, lsr r3
     efc:	76910200 	ldrvc	r0, [r1], r0, lsl #4
     f00:	00105206 	andseq	r5, r0, r6, lsl #4
     f04:	00006020 	andeq	r6, r0, r0, lsr #32
     f08:	00690700 	rsbeq	r0, r9, r0, lsl #14
     f0c:	00aa3601 	adceq	r3, sl, r1, lsl #12
     f10:	91020000 	mrsls	r0, (UNDEF: 2)
     f14:	105a0675 	subsne	r0, sl, r5, ror r6
     f18:	00462000 	subeq	r2, r6, r0
     f1c:	e7050000 	str	r0, [r5, -r0]
     f20:	01000005 	tsteq	r0, r5
     f24:	0000aa37 	andeq	sl, r0, r7, lsr sl
     f28:	73910200 	orrsvc	r0, r1, #0, 4
     f2c:	0005fa05 	andeq	pc, r5, r5, lsl #20
     f30:	2c390100 	ldfcss	f0, [r9], #-0
     f34:	02000000 	andeq	r0, r0, #0
     f38:	00007291 	muleq	r0, r1, r2
     f3c:	07020200 	streq	r0, [r2, -r0, lsl #4]
     f40:	000004f1 	strdeq	r0, [r0], -r1
     f44:	d3080102 	movwle	r0, #33026	; 0x8102
     f48:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     f4c:	00000611 	andeq	r0, r0, r1, lsl r6
     f50:	100c2901 	andne	r2, ip, r1, lsl #18
     f54:	00342000 	eorseq	r2, r4, r0
     f58:	9c010000 	stcls	0, cr0, [r1], {-0}
     f5c:	000000e3 	andeq	r0, r0, r3, ror #1
     f60:	6d756e09 	ldclvs	14, cr6, [r5, #-36]!	; 0xffffffdc
     f64:	25290100 	strcs	r0, [r9, #-256]!	; 0xffffff00
     f68:	02000000 	andeq	r0, r0, #0
     f6c:	f1055f91 			; <UNDEFINED> instruction: 0xf1055f91
     f70:	01000005 	tsteq	r0, r5
     f74:	0000e32a 	andeq	lr, r0, sl, lsr #6
     f78:	60910200 	addsvs	r0, r1, r0, lsl #4
     f7c:	00250a00 	eoreq	r0, r5, r0, lsl #20
     f80:	00f30000 	rscseq	r0, r3, r0
     f84:	f30b0000 	vhadd.u8	d0, d11, d0
     f88:	0f000000 	svceq	0x00000000
     f8c:	07040200 	streq	r0, [r4, -r0, lsl #4]
     f90:	000004f7 	strdeq	r0, [r0], -r7
     f94:	0005aa04 	andeq	sl, r5, r4, lsl #20
     f98:	25120100 	ldrcs	r0, [r2, #-256]	; 0xffffff00
     f9c:	50000000 	andpl	r0, r0, r0
     fa0:	bc20000f 	stclt	0, cr0, [r0], #-60	; 0xffffffc4
     fa4:	01000000 	mrseq	r0, (UNDEF: 0)
     fa8:	00016c9c 	muleq	r1, ip, ip
     fac:	060b0500 	streq	r0, [fp], -r0, lsl #10
     fb0:	14010000 	strne	r0, [r1], #-0
     fb4:	00000025 	andeq	r0, r0, r5, lsr #32
     fb8:	056f9102 	strbeq	r9, [pc, #-258]!	; ebe <startup-0x1ffff142>
     fbc:	00000621 	andeq	r0, r0, r1, lsr #12
     fc0:	00e31501 	rsceq	r1, r3, r1, lsl #10
     fc4:	91020000 	mrsls	r0, (UNDEF: 2)
     fc8:	0f6a065c 	svceq	0x006a065c
     fcc:	008c2000 	addeq	r2, ip, r0
     fd0:	69070000 	stmdbvs	r7, {}	; <UNPREDICTABLE>
     fd4:	aa170100 	bge	5c13dc <startup-0x1fa3ec24>
     fd8:	02000000 	andeq	r0, r0, #0
     fdc:	74066e91 	strvc	r6, [r6], #-3729	; 0xfffff16f
     fe0:	6c20000f 	stcvs	0, cr0, [r0], #-60	; 0xffffffc4
     fe4:	05000000 	streq	r0, [r0, #-0]
     fe8:	000005e7 	andeq	r0, r0, r7, ror #11
     fec:	00aa1801 	adceq	r1, sl, r1, lsl #16
     ff0:	91020000 	mrsls	r0, (UNDEF: 2)
     ff4:	05fa056c 	ldrbeq	r0, [sl, #1388]!	; 0x56c
     ff8:	1a010000 	bne	41000 <startup-0x1ffbf000>
     ffc:	000000aa 	andeq	r0, r0, sl, lsr #1
    1000:	006d9102 	rsbeq	r9, sp, r2, lsl #2
    1004:	ff0c0000 			; <UNDEFINED> instruction: 0xff0c0000
    1008:	01000005 	tsteq	r0, r5
    100c:	000f1806 	andeq	r1, pc, r6, lsl #16
    1010:	00003820 	andeq	r3, r0, r0, lsr #16
    1014:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
  18:	0b3a050b 	bleq	e8144c <startup-0x1f17ebb4>
  1c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  20:	0d030000 	stceq	0, cr0, [r3, #-0]
  24:	3a0e0300 	bcc	380c2c <startup-0x1fc7f3d4>
  28:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  2c:	000b3813 	andeq	r3, fp, r3, lsl r8
  30:	000d0400 	andeq	r0, sp, r0, lsl #8
  34:	0b3a0e03 	bleq	e83848 <startup-0x1f17c7b8>
  38:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  3c:	00000538 	andeq	r0, r0, r8, lsr r5
  40:	49010105 	stmdbmi	r1, {r0, r2, r8}
  44:	00130113 	andseq	r0, r3, r3, lsl r1
  48:	00210600 	eoreq	r0, r1, r0, lsl #12
  4c:	0b2f1349 	bleq	bc4d78 <startup-0x1f43b288>
  50:	24070000 	strcs	r0, [r7], #-0
  54:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  58:	000e030b 	andeq	r0, lr, fp, lsl #6
  5c:	01150800 	tsteq	r5, r0, lsl #16
  60:	13011927 	movwne	r1, #6439	; 0x1927
  64:	05090000 	streq	r0, [r9, #-0]
  68:	00134900 	andseq	r4, r3, r0, lsl #18
  6c:	000f0a00 	andeq	r0, pc, r0, lsl #20
  70:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  74:	160b0000 	strne	r0, [fp], -r0
  78:	3a0e0300 	bcc	380c80 <startup-0x1fc7f380>
  7c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  80:	0c000013 	stceq	0, cr0, [r0], {19}
  84:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  88:	0b3b0b3a 	bleq	ec2d78 <startup-0x1f13d288>
  8c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  90:	130d0000 	movwne	r0, #53248	; 0xd000
  94:	3a0b0b01 	bcc	2c2ca0 <startup-0x1fd3d360>
  98:	010b3b0b 	tsteq	fp, fp, lsl #22
  9c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  a0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  a4:	0b3b0b3a 	bleq	ec2d94 <startup-0x1f13d26c>
  a8:	0b381349 	bleq	e04dd4 <startup-0x1f1fb22c>
  ac:	240f0000 	strcs	r0, [pc], #-0	; b4 <startup-0x1fffff4c>
  b0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  b4:	0008030b 	andeq	r0, r8, fp, lsl #6
  b8:	01131000 	tsteq	r3, r0
  bc:	0b0b0e03 	bleq	2c38d0 <startup-0x1fd3c730>
  c0:	0b3b0b3a 	bleq	ec2db0 <startup-0x1f13d250>
  c4:	00001301 	andeq	r1, r0, r1, lsl #6
  c8:	03003411 	movweq	r3, #1041	; 0x411
  cc:	3b0b3a0e 	blcc	2ce90c <startup-0x1fd316f4>
  d0:	3f13490b 	svccc	0x0013490b
  d4:	00180219 	andseq	r0, r8, r9, lsl r2
  d8:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
  dc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  e0:	0b3b0b3a 	bleq	ec2dd0 <startup-0x1f13d230>
  e4:	01111927 	tsteq	r1, r7, lsr #18
  e8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  ec:	01194296 			; <UNDEFINED> instruction: 0x01194296
  f0:	13000013 	movwne	r0, #19
  f4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
  f8:	0b3b0b3a 	bleq	ec2de8 <startup-0x1f13d218>
  fc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 100:	34140000 	ldrcc	r0, [r4], #-0
 104:	3a080300 	bcc	200d0c <startup-0x1fdff2f4>
 108:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 10c:	00180213 	andseq	r0, r8, r3, lsl r2
 110:	002e1500 	eoreq	r1, lr, r0, lsl #10
 114:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 118:	0b3b0b3a 	bleq	ec2e08 <startup-0x1f13d1f8>
 11c:	01111927 	tsteq	r1, r7, lsr #18
 120:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 124:	00194297 	mulseq	r9, r7, r2
 128:	11010000 	mrsne	r0, (UNDEF: 1)
 12c:	130e2501 	movwne	r2, #58625	; 0xe501
 130:	1b0e030b 	blne	380d64 <startup-0x1fc7f29c>
 134:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 138:	00171006 	andseq	r1, r7, r6
 13c:	00240200 	eoreq	r0, r4, r0, lsl #4
 140:	0b3e0b0b 	bleq	f82d74 <startup-0x1f07d28c>
 144:	00000e03 	andeq	r0, r0, r3, lsl #28
 148:	3f012e03 	svccc	0x00012e03
 14c:	3a0e0319 	bcc	380db8 <startup-0x1fc7f248>
 150:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 154:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 158:	97184006 	ldrls	r4, [r8, -r6]
 15c:	13011942 	movwne	r1, #6466	; 0x1942
 160:	05040000 	streq	r0, [r4, #-0]
 164:	3a080300 	bcc	200d6c <startup-0x1fdff294>
 168:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 16c:	00180213 	andseq	r0, r8, r3, lsl r2
 170:	002e0500 	eoreq	r0, lr, r0, lsl #10
 174:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 178:	0b3b0b3a 	bleq	ec2e68 <startup-0x1f13d198>
 17c:	01111927 	tsteq	r1, r7, lsr #18
 180:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 184:	00194297 	mulseq	r9, r7, r2
 188:	11010000 	mrsne	r0, (UNDEF: 1)
 18c:	130e2501 	movwne	r2, #58625	; 0xe501
 190:	1b0e030b 	blne	380dc4 <startup-0x1fc7f23c>
 194:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 198:	00171006 	andseq	r1, r7, r6
 19c:	01130200 	tsteq	r3, r0, lsl #4
 1a0:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
 1a4:	0b3b0b3a 	bleq	ec2e94 <startup-0x1f13d16c>
 1a8:	00001301 	andeq	r1, r0, r1, lsl #6
 1ac:	03000d03 	movweq	r0, #3331	; 0xd03
 1b0:	3b0b3a0e 	blcc	2ce9f0 <startup-0x1fd31610>
 1b4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 1b8:	0400000b 	streq	r0, [r0], #-11
 1bc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 1c0:	0b3b0b3a 	bleq	ec2eb0 <startup-0x1f13d150>
 1c4:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 1c8:	01050000 	mrseq	r0, (UNDEF: 5)
 1cc:	01134901 	tsteq	r3, r1, lsl #18
 1d0:	06000013 			; <UNDEFINED> instruction: 0x06000013
 1d4:	13490021 	movtne	r0, #36897	; 0x9021
 1d8:	00000b2f 	andeq	r0, r0, pc, lsr #22
 1dc:	0b002407 	bleq	9200 <startup-0x1fff6e00>
 1e0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 1e4:	0800000e 	stmdaeq	r0, {r1, r2, r3}
 1e8:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 1ec:	00001301 	andeq	r1, r0, r1, lsl #6
 1f0:	49000509 	stmdbmi	r0, {r0, r3, r8, sl}
 1f4:	0a000013 	beq	248 <startup-0x1ffffdb8>
 1f8:	0b0b000f 	bleq	2c023c <startup-0x1fd3fdc4>
 1fc:	00001349 	andeq	r1, r0, r9, asr #6
 200:	0300160b 	movweq	r1, #1547	; 0x60b
 204:	3b0b3a0e 	blcc	2cea44 <startup-0x1fd315bc>
 208:	0013490b 	andseq	r4, r3, fp, lsl #18
 20c:	00340c00 	eorseq	r0, r4, r0, lsl #24
 210:	0b3a0e03 	bleq	e83a24 <startup-0x1f17c5dc>
 214:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 218:	00001802 	andeq	r1, r0, r2, lsl #16
 21c:	3e01040d 	cdpcc	4, 0, cr0, cr1, cr13, {0}
 220:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 224:	3b0b3a13 	blcc	2cea78 <startup-0x1fd31588>
 228:	0013010b 	andseq	r0, r3, fp, lsl #2
 22c:	00280e00 	eoreq	r0, r8, r0, lsl #28
 230:	0b1c0e03 	bleq	703a44 <startup-0x1f8fc5bc>
 234:	280f0000 	stmdacs	pc, {}	; <UNPREDICTABLE>
 238:	1c080300 	stcne	3, cr0, [r8], {-0}
 23c:	1000000b 	andne	r0, r0, fp
 240:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 244:	0b3b0b3a 	bleq	ec2f34 <startup-0x1f13d0cc>
 248:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 24c:	00001802 	andeq	r1, r0, r2, lsl #16
 250:	3f012e11 	svccc	0x00012e11
 254:	3a0e0319 	bcc	380ec0 <startup-0x1fc7f140>
 258:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 25c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 260:	97184006 	ldrls	r4, [r8, -r6]
 264:	13011942 	movwne	r1, #6466	; 0x1942
 268:	05120000 	ldreq	r0, [r2, #-0]
 26c:	3a0e0300 	bcc	380e74 <startup-0x1fc7f18c>
 270:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 274:	00180213 	andseq	r0, r8, r3, lsl r2
 278:	010b1300 	mrseq	r1, (UNDEF: 59)
 27c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 280:	34140000 	ldrcc	r0, [r4], #-0
 284:	3a080300 	bcc	200e8c <startup-0x1fdff174>
 288:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 28c:	00180213 	andseq	r0, r8, r3, lsl r2
 290:	00241500 	eoreq	r1, r4, r0, lsl #10
 294:	0b3e0b0b 	bleq	f82ec8 <startup-0x1f07d138>
 298:	00000803 	andeq	r0, r0, r3, lsl #16
 29c:	03000516 	movweq	r0, #1302	; 0x516
 2a0:	3b0b3a08 	blcc	2ceac8 <startup-0x1fd31538>
 2a4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 2a8:	17000018 	smladne	r0, r8, r0, r0
 2ac:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2b0:	0b3a0e03 	bleq	e83ac4 <startup-0x1f17c53c>
 2b4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2b8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2bc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 2c0:	00130119 	andseq	r0, r3, r9, lsl r1
 2c4:	002e1800 	eoreq	r1, lr, r0, lsl #16
 2c8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2cc:	0b3b0b3a 	bleq	ec2fbc <startup-0x1f13d044>
 2d0:	01111927 	tsteq	r1, r7, lsr #18
 2d4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2d8:	00194296 	mulseq	r9, r6, r2
 2dc:	002e1900 	eoreq	r1, lr, r0, lsl #18
 2e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2e4:	0b3b0b3a 	bleq	ec2fd4 <startup-0x1f13d02c>
 2e8:	01111927 	tsteq	r1, r7, lsr #18
 2ec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2f0:	00194297 	mulseq	r9, r7, r2
 2f4:	012e1a00 			; <UNDEFINED> instruction: 0x012e1a00
 2f8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2fc:	0b3b0b3a 	bleq	ec2fec <startup-0x1f13d014>
 300:	13491927 	movtne	r1, #39207	; 0x9927
 304:	06120111 			; <UNDEFINED> instruction: 0x06120111
 308:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 30c:	00130119 	andseq	r0, r3, r9, lsl r1
 310:	002e1b00 	eoreq	r1, lr, r0, lsl #22
 314:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 318:	0b3b0b3a 	bleq	ec3008 <startup-0x1f13cff8>
 31c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 320:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 324:	1c000019 	stcne	0, cr0, [r0], {25}
 328:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 32c:	0b3a0e03 	bleq	e83b40 <startup-0x1f17c4c0>
 330:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 334:	06120111 			; <UNDEFINED> instruction: 0x06120111
 338:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 33c:	00000019 	andeq	r0, r0, r9, lsl r0
 340:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 344:	030b130e 	movweq	r1, #45838	; 0xb30e
 348:	110e1b0e 	tstne	lr, lr, lsl #22
 34c:	10061201 	andne	r1, r6, r1, lsl #4
 350:	02000017 	andeq	r0, r0, #23
 354:	0b0b0113 	bleq	2c07a8 <startup-0x1fd3f858>
 358:	0b3b0b3a 	bleq	ec3048 <startup-0x1f13cfb8>
 35c:	00001301 	andeq	r1, r0, r1, lsl #6
 360:	03000d03 	movweq	r0, #3331	; 0xd03
 364:	3b0b3a08 	blcc	2ceb8c <startup-0x1fd31474>
 368:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 36c:	0400000b 	streq	r0, [r0], #-11
 370:	0b0b0024 	bleq	2c0408 <startup-0x1fd3fbf8>
 374:	0e030b3e 	vmoveq.16	d3[0], r0
 378:	16050000 	strne	r0, [r5], -r0
 37c:	3a0e0300 	bcc	380f84 <startup-0x1fc7f07c>
 380:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 384:	06000013 			; <UNDEFINED> instruction: 0x06000013
 388:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 38c:	0b3b0b3a 	bleq	ec307c <startup-0x1f13cf84>
 390:	0b381349 	bleq	e050bc <startup-0x1f1faf44>
 394:	24070000 	strcs	r0, [r7], #-0
 398:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 39c:	0008030b 	andeq	r0, r8, fp, lsl #6
 3a0:	01010800 	tsteq	r1, r0, lsl #16
 3a4:	13011349 	movwne	r1, #4937	; 0x1349
 3a8:	21090000 	mrscs	r0, (UNDEF: 9)
 3ac:	2f134900 	svccs	0x00134900
 3b0:	0a00000b 	beq	3e4 <startup-0x1ffffc1c>
 3b4:	0b0b000f 	bleq	2c03f8 <startup-0x1fd3fc08>
 3b8:	00001349 	andeq	r1, r0, r9, asr #6
 3bc:	0301130b 	movweq	r1, #4875	; 0x130b
 3c0:	3a0b0b0e 	bcc	2c3000 <startup-0x1fd3d000>
 3c4:	010b3b0b 	tsteq	fp, fp, lsl #22
 3c8:	0c000013 	stceq	0, cr0, [r0], {19}
 3cc:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 3d0:	00001301 	andeq	r1, r0, r1, lsl #6
 3d4:	4900050d 	stmdbmi	r0, {r0, r2, r3, r8, sl}
 3d8:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 3dc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 3e0:	0b3a0e03 	bleq	e83bf4 <startup-0x1f17c40c>
 3e4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 3e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3ec:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 3f0:	00130119 	andseq	r0, r3, r9, lsl r1
 3f4:	00050f00 	andeq	r0, r5, r0, lsl #30
 3f8:	0b3a0e03 	bleq	e83c0c <startup-0x1f17c3f4>
 3fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 400:	00001802 	andeq	r1, r0, r2, lsl #16
 404:	3f012e10 	svccc	0x00012e10
 408:	3a0e0319 	bcc	381074 <startup-0x1fc7ef8c>
 40c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 410:	01193c13 	tsteq	r9, r3, lsl ip
 414:	11000013 	tstne	r0, r3, lsl r0
 418:	00000018 	andeq	r0, r0, r8, lsl r0
 41c:	03003412 	movweq	r3, #1042	; 0x412
 420:	3b0b3a0e 	blcc	2cec60 <startup-0x1fd313a0>
 424:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 428:	13000018 	movwne	r0, #24
 42c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 430:	0b3a0e03 	bleq	e83c44 <startup-0x1f17c3bc>
 434:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 438:	0000193c 	andeq	r1, r0, ip, lsr r9
 43c:	03000514 	movweq	r0, #1300	; 0x514
 440:	3b0b3a08 	blcc	2cec68 <startup-0x1fd31398>
 444:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 448:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 44c:	0111010b 	tsteq	r1, fp, lsl #2
 450:	00000612 	andeq	r0, r0, r2, lsl r6
 454:	03003416 	movweq	r3, #1046	; 0x416
 458:	3b0b3a08 	blcc	2cec80 <startup-0x1fd31380>
 45c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 460:	17000018 	smladne	r0, r8, r0, r0
 464:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 468:	0b3a0e03 	bleq	e83c7c <startup-0x1f17c384>
 46c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 470:	06120111 			; <UNDEFINED> instruction: 0x06120111
 474:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 478:	00130119 	andseq	r0, r3, r9, lsl r1
 47c:	002e1800 	eoreq	r1, lr, r0, lsl #16
 480:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 484:	0b3b0b3a 	bleq	ec3174 <startup-0x1f13ce8c>
 488:	06120111 			; <UNDEFINED> instruction: 0x06120111
 48c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 490:	00000019 	andeq	r0, r0, r9, lsl r0
 494:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 498:	030b130e 	movweq	r1, #45838	; 0xb30e
 49c:	110e1b0e 	tstne	lr, lr, lsl #22
 4a0:	10061201 	andne	r1, r6, r1, lsl #4
 4a4:	02000017 	andeq	r0, r0, #23
 4a8:	0b3e0104 	bleq	f808c0 <startup-0x1f07f740>
 4ac:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 4b0:	0b3b0b3a 	bleq	ec31a0 <startup-0x1f13ce60>
 4b4:	00001301 	andeq	r1, r0, r1, lsl #6
 4b8:	03002803 	movweq	r2, #2051	; 0x803
 4bc:	000b1c0e 	andeq	r1, fp, lr, lsl #24
 4c0:	00280400 	eoreq	r0, r8, r0, lsl #8
 4c4:	0b1c0803 	bleq	7024d8 <startup-0x1f8fdb28>
 4c8:	24050000 	strcs	r0, [r5], #-0
 4cc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 4d0:	000e030b 	andeq	r0, lr, fp, lsl #6
 4d4:	002e0600 	eoreq	r0, lr, r0, lsl #12
 4d8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4dc:	0b3b0b3a 	bleq	ec31cc <startup-0x1f13ce34>
 4e0:	01111927 	tsteq	r1, r7, lsr #18
 4e4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4e8:	00194297 	mulseq	r9, r7, r2
 4ec:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
 4f0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4f4:	0b3b0b3a 	bleq	ec31e4 <startup-0x1f13ce1c>
 4f8:	01111927 	tsteq	r1, r7, lsr #18
 4fc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 500:	01194296 			; <UNDEFINED> instruction: 0x01194296
 504:	08000013 	stmdaeq	r0, {r0, r1, r4}
 508:	08030005 	stmdaeq	r3, {r0, r2}
 50c:	0b3b0b3a 	bleq	ec31fc <startup-0x1f13ce04>
 510:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 514:	34090000 	strcc	r0, [r9], #-0
 518:	3a0e0300 	bcc	381120 <startup-0x1fc7eee0>
 51c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 520:	00180213 	andseq	r0, r8, r3, lsl r2
 524:	00240a00 	eoreq	r0, r4, r0, lsl #20
 528:	0b3e0b0b 	bleq	f8315c <startup-0x1f07cea4>
 52c:	00000803 	andeq	r0, r0, r3, lsl #16
 530:	3f002e0b 	svccc	0x00002e0b
 534:	3a0e0319 	bcc	3811a0 <startup-0x1fc7ee60>
 538:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 53c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 540:	96184006 	ldrls	r4, [r8], -r6
 544:	00001942 	andeq	r1, r0, r2, asr #18
 548:	3f012e0c 	svccc	0x00012e0c
 54c:	3a0e0319 	bcc	3811b8 <startup-0x1fc7ee48>
 550:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 554:	11134919 	tstne	r3, r9, lsl r9
 558:	40061201 	andmi	r1, r6, r1, lsl #4
 55c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 560:	00001301 	andeq	r1, r0, r1, lsl #6
 564:	0300340d 	movweq	r3, #1037	; 0x40d
 568:	3b0b3a08 	blcc	2ced90 <startup-0x1fd31270>
 56c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 570:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
 574:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 578:	0b3b0b3a 	bleq	ec3268 <startup-0x1f13cd98>
 57c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 580:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 584:	03193f01 	tsteq	r9, #1, 30
 588:	3b0b3a0e 	blcc	2cedc8 <startup-0x1fd31238>
 58c:	1119270b 	tstne	r9, fp, lsl #14
 590:	40061201 	andmi	r1, r6, r1, lsl #4
 594:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 598:	00001301 	andeq	r1, r0, r1, lsl #6
 59c:	3f012e10 	svccc	0x00012e10
 5a0:	3a0e0319 	bcc	38120c <startup-0x1fc7edf4>
 5a4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 5a8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 5ac:	97184006 	ldrls	r4, [r8, -r6]
 5b0:	00001942 	andeq	r1, r0, r2, asr #18
 5b4:	01110100 	tsteq	r1, r0, lsl #2
 5b8:	0b130e25 	bleq	4c3e54 <startup-0x1fb3c1ac>
 5bc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 5c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5c4:	00001710 	andeq	r1, r0, r0, lsl r7
 5c8:	0b002402 	bleq	95d8 <startup-0x1fff6a28>
 5cc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 5d0:	0300000e 	movweq	r0, #14
 5d4:	13490035 	movtne	r0, #36917	; 0x9035
 5d8:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
 5dc:	03193f01 	tsteq	r9, #1, 30
 5e0:	3b0b3a0e 	blcc	2cee20 <startup-0x1fd311e0>
 5e4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 5e8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 5ec:	97184006 	ldrls	r4, [r8, -r6]
 5f0:	13011942 	movwne	r1, #6466	; 0x1942
 5f4:	34050000 	strcc	r0, [r5], #-0
 5f8:	3a0e0300 	bcc	381200 <startup-0x1fc7ee00>
 5fc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 600:	00180213 	andseq	r0, r8, r3, lsl r2
 604:	010b0600 	tsteq	fp, r0, lsl #12
 608:	06120111 			; <UNDEFINED> instruction: 0x06120111
 60c:	34070000 	strcc	r0, [r7], #-0
 610:	3a080300 	bcc	201218 <startup-0x1fdfede8>
 614:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 618:	00180213 	andseq	r0, r8, r3, lsl r2
 61c:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
 620:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 624:	0b3b0b3a 	bleq	ec3314 <startup-0x1f13ccec>
 628:	01111927 	tsteq	r1, r7, lsr #18
 62c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 630:	01194297 			; <UNDEFINED> instruction: 0x01194297
 634:	09000013 	stmdbeq	r0, {r0, r1, r4}
 638:	08030005 	stmdaeq	r3, {r0, r2}
 63c:	0b3b0b3a 	bleq	ec332c <startup-0x1f13ccd4>
 640:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 644:	010a0000 	mrseq	r0, (UNDEF: 10)
 648:	01134901 	tsteq	r3, r1, lsl #18
 64c:	0b000013 	bleq	6a0 <startup-0x1ffff960>
 650:	13490021 	movtne	r0, #36897	; 0x9021
 654:	00000b2f 	andeq	r0, r0, pc, lsr #22
 658:	3f002e0c 	svccc	0x00002e0c
 65c:	3a0e0319 	bcc	3812c8 <startup-0x1fc7ed38>
 660:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 664:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 668:	97184006 	ldrls	r4, [r8, -r6]
 66c:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000015c 	andeq	r0, r0, ip, asr r1
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	03b00002 	movseq	r0, #2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	2000016c 	andcs	r0, r0, ip, ror #2
  3c:	0000006e 	andeq	r0, r0, lr, rrx
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	044c0002 	strbeq	r0, [ip], #-2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200001dc 	ldrdcs	r0, [r0], -ip
  5c:	00000888 	andeq	r0, r0, r8, lsl #17
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	08ce0002 	stmiaeq	lr, {r1}^
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000a64 	andcs	r0, r0, r4, ror #20
  7c:	0000020a 	andeq	r0, r0, sl, lsl #4
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	0c690002 	stcleq	0, cr0, [r9], #-8
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000c70 	andcs	r0, r0, r0, ror ip
  9c:	000002a8 	andeq	r0, r0, r8, lsr #5
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	0e9a0002 	cdpeq	0, 9, cr0, cr10, cr2, {0}
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000f18 	andcs	r0, r0, r8, lsl pc
  bc:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	2000016c 	andcs	r0, r0, ip, ror #2
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000c8 	andeq	r0, r0, r8, asr #1
   4:	00670002 	rsbeq	r0, r7, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	756d6173 	strbvc	r6, [sp, #-371]!	; 0xfffffe8d
  28:	6f442f65 	svcvs	0x00442f65
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	4c706f4d 	ldclmi	15, cr6, [r0], #-308	; 0xfffffecc
  38:	4d2f6261 	sfmmi	f6, 4, [pc, #-388]!	; fffffebc <p2paddle+0xdfffdfa4>
  3c:	6570706f 	ldrbvs	r7, [r0, #-111]!	; 0xffffff91
  40:	7300006e 	movwvc	r0, #110	; 0x6e
  44:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  48:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  4c:	00000100 	andeq	r0, r0, r0, lsl #2
  50:	5f64636c 	svcpl	0x0064636c
  54:	76697264 	strbtvc	r7, [r9], -r4, ror #4
  58:	2e737265 	cdpcs	2, 7, cr7, cr3, cr5, {3}
  5c:	00010068 	andeq	r0, r1, r8, rrx
  60:	6e6f7000 	cdpvs	0, 6, cr7, cr15, cr0, {0}
  64:	676f6c67 	strbvs	r6, [pc, -r7, ror #24]!
  68:	682e6369 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sp, lr}
  6c:	00000100 	andeq	r0, r0, r0, lsl #2
  70:	02050000 	andeq	r0, r5, #0
  74:	20000000 	andcs	r0, r0, r0
  78:	025e1319 	subseq	r1, lr, #1677721600	; 0x64000000
  7c:	01010003 	tsteq	r1, r3
  80:	10020500 	andne	r0, r2, r0, lsl #10
  84:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  88:	5e0100c7 	cdppl	0, 0, cr0, cr1, cr7, {6}
  8c:	914c2f2f 	cmpls	ip, pc, lsr #30
  90:	4c73212f 	ldfmie	f2, [r3], #-188	; 0xffffff44
  94:	212f914b 			; <UNDEFINED> instruction: 0x212f914b
  98:	312f4f73 			; <UNDEFINED> instruction: 0x312f4f73
  9c:	592f7734 	stmdbpl	pc!, {r2, r4, r5, r8, r9, sl, ip, sp, lr}	; <UNPREDICTABLE>
  a0:	2f2f2f59 	svccs	0x002f2f59
  a4:	76086767 	strvc	r6, [r8], -r7, ror #14
  a8:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
  ac:	02006801 	andeq	r6, r0, #65536	; 0x10000
  b0:	004b0104 	subeq	r0, fp, r4, lsl #2
  b4:	4b010402 	blmi	410c4 <startup-0x1ffbef3c>
  b8:	01040200 	mrseq	r0, R12_usr
  bc:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
  c0:	02005901 	andeq	r5, r0, #16384	; 0x4000
  c4:	02380104 	eorseq	r0, r8, #4, 2
  c8:	0101000c 	tsteq	r1, ip
  cc:	0000006e 	andeq	r0, r0, lr, rrx
  d0:	00450002 	subeq	r0, r5, r2
  d4:	01020000 	mrseq	r0, (UNDEF: 2)
  d8:	000d0efb 	strdeq	r0, [sp], -fp
  dc:	01010101 	tsteq	r1, r1, lsl #2
  e0:	01000000 	mrseq	r0, (UNDEF: 0)
  e4:	43010000 	movwmi	r0, #4096	; 0x1000
  e8:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  ec:	2f737265 	svccs	0x00737265
  f0:	756d6173 	strbvc	r6, [sp, #-371]!	; 0xfffffe8d
  f4:	6f442f65 	svcvs	0x00442f65
  f8:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  fc:	2f73746e 	svccs	0x0073746e
 100:	4c706f4d 	ldclmi	15, cr6, [r0], #-308	; 0xfffffecc
 104:	4d2f6261 	sfmmi	f6, 4, [pc, #-388]!	; ffffff88 <p2paddle+0xdfffe070>
 108:	6570706f 	ldrbvs	r7, [r0, #-111]!	; 0xffffff91
 10c:	6400006e 	strvs	r0, [r0], #-110	; 0xffffff92
 110:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 114:	0100632e 	tsteq	r0, lr, lsr #6
 118:	00000000 	andeq	r0, r0, r0
 11c:	016c0205 	cmneq	ip, r5, lsl #4
 120:	2f162000 	svccs	0x00162000
 124:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 128:	01040200 	mrseq	r0, R12_usr
 12c:	68062006 	stmdavs	r6, {r1, r2, sp}
 130:	0a03a03d 	beq	e822c <startup-0x1ff17dd4>
 134:	4c513e2e 	mrrcmi	14, 2, r3, r1, cr14
 138:	0004024f 	andeq	r0, r4, pc, asr #4
 13c:	01880101 	orreq	r0, r8, r1, lsl #2
 140:	00020000 	andeq	r0, r2, r0
 144:	0000006d 	andeq	r0, r0, sp, rrx
 148:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 14c:	0101000d 	tsteq	r1, sp
 150:	00000101 	andeq	r0, r0, r1, lsl #2
 154:	00000100 	andeq	r0, r0, r0, lsl #2
 158:	2f3a4301 	svccs	0x003a4301
 15c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 160:	61732f73 	cmnvs	r3, r3, ror pc
 164:	2f65756d 	svccs	0x0065756d
 168:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 16c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 170:	6f4d2f73 	svcvs	0x004d2f73
 174:	62614c70 	rsbvs	r4, r1, #112, 24	; 0x7000
 178:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 17c:	006e6570 	rsbeq	r6, lr, r0, ror r5
 180:	64636c00 	strbtvs	r6, [r3], #-3072	; 0xfffff400
 184:	6972645f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, sp, lr}^
 188:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 18c:	0100632e 	tsteq	r0, lr, lsr #6
 190:	636c0000 	cmnvs	ip, #0
 194:	72645f64 	rsbvc	r5, r4, #100, 30	; 0x190
 198:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 19c:	00682e73 	rsbeq	r2, r8, r3, ror lr
 1a0:	70000001 	andvc	r0, r0, r1
 1a4:	4474726f 	ldrbtmi	r7, [r4], #-623	; 0xfffffd91
 1a8:	616c6365 	cmnvs	ip, r5, ror #6
 1ac:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
 1b0:	00000100 	andeq	r0, r0, r0, lsl #2
 1b4:	02050000 	andeq	r0, r5, #0
 1b8:	200001dc 	ldrdcs	r0, [r0], -ip
 1bc:	037a671a 	cmneq	sl, #6815744	; 0x680000
 1c0:	1b50207a 	blne	14083b0 <startup-0x1ebf7c50>
 1c4:	92d7d791 	sbcsls	sp, r7, #38010880	; 0x2440000
 1c8:	3d832f76 	stccc	15, cr2, [r3, #472]	; 0x1d8
 1cc:	212f2fad 			; <UNDEFINED> instruction: 0x212f2fad
 1d0:	832f2f83 			; <UNDEFINED> instruction: 0x832f2f83
 1d4:	2e7a032f 	cdpcs	3, 7, cr0, cr10, cr15, {1}
 1d8:	bc3d836e 	ldclt	3, cr8, [sp], #-440	; 0xfffffe48
 1dc:	833d8367 	teqhi	sp, #-1677721599	; 0x9c000001
 1e0:	832f2f59 			; <UNDEFINED> instruction: 0x832f2f59
 1e4:	83592f2f 	cmphi	r9, #47, 30	; 0xbc
 1e8:	303d593d 	eorscc	r5, sp, sp, lsr r9
 1ec:	3d313d59 	ldccc	13, cr3, [r1, #-356]!	; 0xfffffe9c
 1f0:	594b91e6 	stmdbpl	fp, {r1, r2, r5, r6, r7, r8, ip, pc}^
 1f4:	2f832f2f 	svccs	0x00832f2f
 1f8:	3d59832f 	ldclcc	3, cr8, [r9, #-188]	; 0xffffff44
 1fc:	303d5930 	eorscc	r5, sp, r0, lsr r9
 200:	843d833d 	ldrthi	r8, [sp], #-829	; 0xfffffcc3
 204:	83598391 	cmphi	r9, #1140850690	; 0x44000002
 208:	83916883 	orrshi	r6, r1, #8585216	; 0x830000
 20c:	7683ad59 	pkhtbvc	sl, r3, r9, asr #26
 210:	4c675967 			; <UNDEFINED> instruction: 0x4c675967
 214:	2f843d2f 	svccs	0x00843d2f
 218:	863e8483 	ldrthi	r8, [lr], -r3, lsl #9
 21c:	4b4b4b83 	blmi	12d3030 <startup-0x1ed2cfd0>
 220:	683d4b4b 	ldmdavs	sp!, {r0, r1, r3, r6, r8, r9, fp, lr}
 224:	4bad3d3d 	blmi	feb4f720 <p2paddle+0xdeb4d808>
 228:	03040200 	movweq	r0, #16896	; 0x4200
 22c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 230:	02004903 	andeq	r4, r0, #49152	; 0xc000
 234:	3c060104 	stfccs	f0, [r6], {4}
 238:	02040200 	andeq	r0, r4, #0, 4
 23c:	02003906 	andeq	r3, r0, #98304	; 0x18000
 240:	3c060104 	stfccs	f0, [r6], {4}
 244:	e54c4306 	strb	r4, [ip, #-774]	; 0xfffffcfa
 248:	14085a59 	strne	r5, [r8], #-2649	; 0xfffff5a7
 24c:	4b5b4b91 	blmi	16d3098 <startup-0x1e92cf68>
 250:	91d7bb5a 	bicsls	fp, r7, sl, asr fp
 254:	d8a14bad 	stmiale	r1!, {r0, r2, r3, r5, r7, r8, r9, fp, lr}
 258:	03ac6d03 			; <UNDEFINED> instruction: 0x03ac6d03
 25c:	4f3e2014 	svcmi	0x003e2014
 260:	75085959 	strvc	r5, [r8, #-2393]	; 0xfffff6a7
 264:	774b594b 	strbvc	r5, [fp, -fp, asr #18]
 268:	c9c9764b 	stmibgt	r9, {r0, r1, r3, r6, r9, sl, ip, sp, lr}^
 26c:	020091bb 	andeq	r9, r0, #-1073741778	; 0xc000002e
 270:	71030204 	tstvc	r3, r4, lsl #4
 274:	02009e08 	andeq	r9, r0, #8, 28	; 0x80
 278:	66060104 	strvs	r0, [r6], -r4, lsl #2
 27c:	02040200 	andeq	r0, r4, #0, 4
 280:	02006506 	andeq	r6, r0, #25165824	; 0x1800000
 284:	66060104 	strvs	r0, [r6], -r4, lsl #2
 288:	74150306 	ldrvc	r0, [r5], #-774	; 0xfffffcfa
 28c:	1408f44c 	strne	pc, [r8], #-1100	; 0xfffffbb4
 290:	914c5b4b 	cmpls	ip, fp, asr #22
 294:	4b68084b 	blmi	1a023c8 <startup-0x1e5fdc38>
 298:	7203ae08 	andvc	sl, r3, #8, 28	; 0x80
 29c:	0f03ac08 	svceq	0x0003ac08
 2a0:	3c0b0320 	stccc	3, cr0, [fp], {32}
 2a4:	00833d4b 	addeq	r3, r3, fp, asr #26
 2a8:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 2ac:	03040200 	movweq	r0, #16896	; 0x4200
 2b0:	04020081 	streq	r0, [r2], #-129	; 0xffffff7f
 2b4:	003c0601 	eorseq	r0, ip, r1, lsl #12
 2b8:	06020402 	streq	r0, [r2], -r2, lsl #8
 2bc:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
 2c0:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 2c4:	00040242 	andeq	r0, r4, r2, asr #4
 2c8:	00bb0101 	adcseq	r0, fp, r1, lsl #2
 2cc:	00020000 	andeq	r0, r2, r0
 2d0:	00000058 	andeq	r0, r0, r8, asr r0
 2d4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 2d8:	0101000d 	tsteq	r1, sp
 2dc:	00000101 	andeq	r0, r0, r1, lsl #2
 2e0:	00000100 	andeq	r0, r0, r0, lsl #2
 2e4:	2f3a4301 	svccs	0x003a4301
 2e8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 2ec:	61732f73 	cmnvs	r3, r3, ror pc
 2f0:	2f65756d 	svccs	0x0065756d
 2f4:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 2f8:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 2fc:	6f4d2f73 	svcvs	0x004d2f73
 300:	62614c70 	rsbvs	r4, r1, #112, 24	; 0x7000
 304:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 308:	006e6570 	rsbeq	r6, lr, r0, ror r5
 30c:	6e6f7000 	cdpvs	0, 6, cr7, cr15, cr0, {0}
 310:	676f6c67 	strbvs	r6, [pc, -r7, ror #24]!
 314:	632e6369 			; <UNDEFINED> instruction: 0x632e6369
 318:	00000100 	andeq	r0, r0, r0, lsl #2
 31c:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 320:	69676f6c 	stmdbvs	r7!, {r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 324:	00682e63 	rsbeq	r2, r8, r3, ror #28
 328:	00000001 	andeq	r0, r0, r1
 32c:	64020500 	strvs	r0, [r2], #-1280	; 0xfffffb00
 330:	1920000a 	stmdbne	r0!, {r1, r3}
 334:	3d673e30 	stclcc	14, cr3, [r7, #-192]!	; 0xffffff40
 338:	3d674c3d 	stclcc	12, cr4, [r7, #-244]!	; 0xffffff0c
 33c:	004b4c3d 	subeq	r4, fp, sp, lsr ip
 340:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 344:	03040200 	movweq	r0, #16896	; 0x4200
 348:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
 34c:	0200bb03 	andeq	fp, r0, #3072	; 0xc00
 350:	00630304 	rsbeq	r0, r3, r4, lsl #6
 354:	06010402 	streq	r0, [r1], -r2, lsl #8
 358:	4c6b063c 	stclmi	6, cr0, [fp], #-240	; 0xffffff10
 35c:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 360:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 364:	8f080304 	svchi	0x00080304
 368:	01040200 	mrseq	r0, R12_usr
 36c:	69063c06 	stmdbvs	r6, {r1, r2, sl, fp, ip, sp}
 370:	754b4b4c 	strbvc	r4, [fp, #-2892]	; 0xfffff4b4
 374:	5a210875 	bpl	842550 <startup-0x1f7bdab0>
 378:	4b5a2108 	blmi	16887a0 <startup-0x1e977860>
 37c:	912f754c 			; <UNDEFINED> instruction: 0x912f754c
 380:	2f599fc9 	svccs	0x00599fc9
 384:	01000402 	tsteq	r0, r2, lsl #8
 388:	0000c601 	andeq	ip, r0, r1, lsl #12
 38c:	5e000200 	cdppl	2, 0, cr0, cr0, cr0, {0}
 390:	02000000 	andeq	r0, r0, #0
 394:	0d0efb01 	vstreq	d15, [lr, #-4]
 398:	01010100 	mrseq	r0, (UNDEF: 17)
 39c:	00000001 	andeq	r0, r0, r1
 3a0:	01000001 	tsteq	r0, r1
 3a4:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff969 <p2paddle+0xdfffda51>
 3a8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 3ac:	6d61732f 	stclvs	3, cr7, [r1, #-188]!	; 0xffffff44
 3b0:	442f6575 	strtmi	r6, [pc], #-1397	; 3b8 <startup-0x1ffffc48>
 3b4:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 3b8:	73746e65 	cmnvc	r4, #1616	; 0x650
 3bc:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 3c0:	2f62614c 	svccs	0x0062614c
 3c4:	70706f4d 	rsbsvc	r6, r0, sp, asr #30
 3c8:	00006e65 	andeq	r6, r0, r5, ror #28
 3cc:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 3d0:	72645f69 	rsbvc	r5, r4, #420	; 0x1a4
 3d4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 3d8:	00632e73 	rsbeq	r2, r3, r3, ror lr
 3dc:	70000001 	andvc	r0, r0, r1
 3e0:	4474726f 	ldrbtmi	r7, [r4], #-623	; 0xfffffd91
 3e4:	616c6365 	cmnvs	ip, r5, ror #6
 3e8:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
 3ec:	00000100 	andeq	r0, r0, r0, lsl #2
 3f0:	02050000 	andeq	r0, r5, #0
 3f4:	20000c70 	andcs	r0, r0, r0, ror ip
 3f8:	bb596917 	bllt	165a85c <startup-0x1e9a57a4>
 3fc:	59686859 	stmdbpl	r8!, {r0, r3, r4, r6, fp, sp, lr}^
 400:	67684be5 	strbvs	r4, [r8, -r5, ror #23]!
 404:	3d4c3d2f 	stclcc	13, cr3, [ip, #-188]	; 0xffffff44
 408:	4b3f3d67 	blmi	fcf9ac <startup-0x1f030654>
 40c:	67762f3d 			; <UNDEFINED> instruction: 0x67762f3d
 410:	4c593d3d 	mrrcmi	13, 3, r3, r9, cr13
 414:	593d3d67 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}
 418:	3d673d4c 	stclcc	13, cr3, [r7, #-304]!	; 0xfffffed0
 41c:	922f6741 	eorls	r6, pc, #17039360	; 0x1040000
 420:	3d3d673d 	ldccc	7, cr6, [sp, #-244]!	; 0xffffff0c
 424:	842f6759 	strthi	r6, [pc], #-1881	; 42c <startup-0x1ffffbd4>
 428:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 42c:	06200601 	strteq	r0, [r0], -r1, lsl #12
 430:	3d3d3d84 	ldccc	13, cr3, [sp, #-528]!	; 0xfffffdf0
 434:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 438:	0200673e 	andeq	r6, r0, #16252928	; 0xf80000
 43c:	20060104 	andcs	r0, r6, r4, lsl #2
 440:	593d8306 	ldmdbpl	sp!, {r1, r2, r8, r9, pc}
 444:	75594c3d 	ldrbvc	r4, [r9, #-3133]	; 0xfffff3c3
 448:	3d2f4c9f 	stccc	12, cr4, [pc, #-636]!	; 1d4 <startup-0x1ffffe2c>
 44c:	0c023e3d 	stceq	14, cr3, [r2], {61}	; 0x3d
 450:	b5010100 	strlt	r0, [r1, #-256]	; 0xffffff00
 454:	02000000 	andeq	r0, r0, #0
 458:	00004e00 	andeq	r4, r0, r0, lsl #28
 45c:	fb010200 	blx	40c66 <startup-0x1ffbf39a>
 460:	01000d0e 	tsteq	r0, lr, lsl #26
 464:	00010101 	andeq	r0, r1, r1, lsl #2
 468:	00010000 	andeq	r0, r1, r0
 46c:	3a430100 	bcc	10c0874 <startup-0x1ef3f78c>
 470:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 474:	732f7372 			; <UNDEFINED> instruction: 0x732f7372
 478:	65756d61 	ldrbvs	r6, [r5, #-3425]!	; 0xfffff29f
 47c:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 480:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 484:	4d2f7374 	stcmi	3, cr7, [pc, #-464]!	; 2bc <startup-0x1ffffd44>
 488:	614c706f 	cmpvs	ip, pc, rrx
 48c:	6f4d2f62 	svcvs	0x004d2f62
 490:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
 494:	656b0000 	strbvs	r0, [fp, #-0]!
 498:	64617079 	strbtvs	r7, [r1], #-121	; 0xffffff87
 49c:	6972645f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, sp, lr}^
 4a0:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 4a4:	0100632e 	tsteq	r0, lr, lsr #6
 4a8:	00000000 	andeq	r0, r0, r0
 4ac:	0f180205 	svceq	0x00180205
 4b0:	32172000 	andscc	r2, r7, #0
 4b4:	4d3d3d3d 	ldcmi	13, cr3, [sp, #-244]!	; 0xffffff0c
 4b8:	684b3eca 	stmdavs	fp, {r1, r3, r6, r7, r9, sl, fp, ip, sp}^
 4bc:	844b8359 	strbhi	r8, [fp], #-857	; 0xfffffca7
 4c0:	6467214c 	strbtvs	r2, [r7], #-332	; 0xfffffeb4
 4c4:	0402006a 	streq	r0, [r2], #-106	; 0xffffff96
 4c8:	ac750302 	ldclge	3, cr0, [r5], #-8
 4cc:	01040200 	mrseq	r0, R12_usr
 4d0:	03066606 	movweq	r6, #26118	; 0x6606
 4d4:	0200580f 	andeq	r5, r0, #983040	; 0xf0000
 4d8:	a0210104 	eorge	r0, r1, r4, lsl #2
 4dc:	76677967 	strbtvc	r7, [r7], -r7, ror #18
 4e0:	003d3d3e 	eorseq	r3, sp, lr, lsr sp
 4e4:	4b030402 	blmi	c14f4 <startup-0x1ff3eb0c>
 4e8:	03040200 	movweq	r0, #16896	; 0x4200
 4ec:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 4f0:	02004b03 	andeq	r4, r0, #3072	; 0xc00
 4f4:	00830304 	addeq	r0, r3, r4, lsl #6
 4f8:	fc030402 	stc2	4, cr0, [r3], {2}
 4fc:	01040200 	mrseq	r0, R12_usr
 500:	03065806 	movweq	r5, #26630	; 0x6806
 504:	022f4a10 	eoreq	r4, pc, #16, 20	; 0x10000
 508:	01010009 	tsteq	r1, r9

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
   4:	00707574 	rsbseq	r7, r0, r4, ror r5
   8:	6a626f70 	bvs	189bdd0 <startup-0x1e764230>
   c:	00746365 	rsbseq	r6, r4, r5, ror #6
  10:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  14:	00317265 	eorseq	r7, r1, r5, ror #4
  18:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
  1c:	72610074 	rsbvc	r0, r1, #116	; 0x74
  20:	64007667 	strvs	r7, [r0], #-1639	; 0xfffff999
  24:	00787269 	rsbseq	r7, r8, r9, ror #4
  28:	79726964 	ldmdbvc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
  2c:	6c616200 	sfmvs	f6, 2, [r1], #-0
  30:	4e47006c 	cdpmi	0, 4, cr0, cr7, cr12, {3}
  34:	39432055 	stmdbcc	r3, {r0, r2, r4, r6, sp}^
  38:	2e372039 	mrccs	0, 1, r2, cr7, cr9, {1}
  3c:	20312e32 	eorscs	r2, r1, r2, lsr lr
  40:	37313032 			; <UNDEFINED> instruction: 0x37313032
  44:	34303930 	ldrtcc	r3, [r0], #-2352	; 0xfffff6d0
  48:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  4c:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  50:	5b202965 	blpl	80a5ec <startup-0x1f7f5a14>
  54:	2f4d5241 	svccs	0x004d5241
  58:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  5c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  60:	622d372d 	eorvs	r3, sp, #11796480	; 0xb40000
  64:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  68:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  6c:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  70:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  74:	30323535 	eorscc	r3, r2, r5, lsr r5
  78:	2d205d34 	stccs	13, cr5, [r0, #-208]!	; 0xffffff30
  7c:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
  80:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
  84:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
  88:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
  8c:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
  90:	6d2d206d 	stcvs	0, cr2, [sp, #-436]!	; 0xfffffe4c
  94:	616f6c66 	cmnvs	pc, r6, ror #24
  98:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
  9c:	6f733d69 	svcvs	0x00733d69
  a0:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
  a4:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
  a8:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
  ac:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
  b0:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
  b4:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
  b8:	672d206d 	strvs	r2, [sp, -sp, rrx]!
  bc:	304f2d20 	subcc	r2, pc, r0, lsr #26
  c0:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
  c4:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
  c8:	6e750039 	mrcvs	0, 3, r0, cr5, cr9, {1}
  cc:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
  d0:	63206465 			; <UNDEFINED> instruction: 0x63206465
  d4:	00726168 	rsbseq	r6, r2, r8, ror #2
  d8:	555c3a43 	ldrbpl	r3, [ip, #-2627]	; 0xfffff5bd
  dc:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
  e0:	6d61735c 	stclvs	3, cr7, [r1, #-368]!	; 0xfffffe90
  e4:	445c6575 	ldrbmi	r6, [ip], #-1397	; 0xfffffa8b
  e8:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
  ec:	73746e65 	cmnvc	r4, #1616	; 0x650
  f0:	706f4d5c 	rsbvc	r4, pc, ip, asr sp	; <UNPREDICTABLE>
  f4:	5c62614c 	stfple	f6, [r2], #-304	; 0xfffffed0
  f8:	70706f4d 	rsbsvc	r6, r0, sp, asr #30
  fc:	73006e65 	movwvc	r6, #3685	; 0xe65
 100:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
 104:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 108:	736f7000 	cmnvc	pc, #0
 10c:	6f700078 	svcvs	0x00700078
 110:	62007973 	andvs	r7, r0, #1884160	; 0x1cc000
 114:	5f6c6c61 	svcpl	0x006c6c61
 118:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; ffffff84 <p2paddle+0xdfffe06c>
 11c:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 120:	616c7000 	cmnvs	ip, r0
 124:	32726579 	rsbscc	r6, r2, #507510784	; 0x1e400000
 128:	64617000 	strbtvs	r7, [r1], #-0
 12c:	5f656c64 	svcpl	0x00656c64
 130:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; ffffff9c <p2paddle+0xdfffe084>
 134:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 138:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 13c:	3170006e 	cmncc	r0, lr, rrx
 140:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
 144:	7000656c 	andvc	r6, r0, ip, ror #10
 148:	64617032 	strbtvs	r7, [r1], #-50	; 0xffffffce
 14c:	00656c64 	rsbeq	r6, r5, r4, ror #24
 150:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 154:	69730078 	ldmdbvs	r3!, {r3, r4, r5, r6}^
 158:	0079657a 	rsbseq	r6, r9, sl, ror r5
 15c:	63677261 	cmnvs	r7, #268435462	; 0x10000006
 160:	706d7400 	rsbvc	r7, sp, r0, lsl #8
 164:	66667562 	strbtvs	r7, [r6], -r2, ror #10
 168:	64007265 	strvs	r7, [r0], #-613	; 0xfffffd9b
 16c:	00776172 	rsbseq	r6, r7, r2, ror r1
 170:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff735 <p2paddle+0xdfffd81d>
 174:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 178:	6d61732f 	stclvs	3, cr7, [r1, #-188]!	; 0xffffff44
 17c:	442f6575 	strtmi	r6, [pc], #-1397	; 184 <startup-0x1ffffe7c>
 180:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 184:	73746e65 	cmnvc	r4, #1616	; 0x650
 188:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 18c:	2f62614c 	svccs	0x0062614c
 190:	70706f4d 	rsbsvc	r6, r0, sp, asr #30
 194:	732f6e65 			; <UNDEFINED> instruction: 0x732f6e65
 198:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 19c:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 1a0:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 1a4:	53700065 	cmnpl	r0, #101	; 0x65
 1a8:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
 1ac:	72747300 	rsbsvc	r7, r4, #0, 6
 1b0:	31676e69 	cmncc	r7, r9, ror #28
 1b4:	72747300 	rsbsvc	r7, r4, #0, 6
 1b8:	32676e69 	rsbcc	r6, r7, #1680	; 0x690
 1bc:	624f7400 	subvs	r7, pc, #0, 8
 1c0:	756e006a 	strbvc	r0, [lr, #-106]!	; 0xffffff96
 1c4:	696f706d 	stmdbvs	pc!, {r0, r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 1c8:	0073746e 	rsbseq	r7, r3, lr, ror #8
 1cc:	6f656770 	svcvs	0x00656770
 1d0:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 1d4:	3a430079 	bcc	10c03c0 <startup-0x1ef3fc40>
 1d8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 1dc:	732f7372 			; <UNDEFINED> instruction: 0x732f7372
 1e0:	65756d61 	ldrbvs	r6, [r5, #-3425]!	; 0xfffff29f
 1e4:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 1e8:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 1ec:	4d2f7374 	stcmi	3, cr7, [pc, #-464]!	; 24 <startup-0x1fffffdc>
 1f0:	614c706f 	cmpvs	ip, pc, rrx
 1f4:	6f4d2f62 	svcvs	0x004d2f62
 1f8:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
 1fc:	6c65642f 	cfstrdvs	mvd6, [r5], #-188	; 0xffffff44
 200:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 204:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 208:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 14e <startup-0x1ffffeb2>	; <UNPREDICTABLE>
 20c:	6f726b69 	svcvs	0x00726b69
 210:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 214:	345f7961 	ldrbcc	r7, [pc], #-2401	; 21c <startup-0x1ffffde4>
 218:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 21c:	616c6564 	cmnvs	ip, r4, ror #10
 220:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 224:	00696c6c 	rsbeq	r6, r9, ip, ror #24
 228:	616c6564 	cmnvs	ip, r4, ror #10
 22c:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
 230:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 234:	53435f42 	movtpl	r5, #16194	; 0x3f42
 238:	75620032 	strbvc	r0, [r2, #-50]!	; 0xffffffce
 23c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 240:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 244:	62007261 	andvs	r7, r0, #268435462	; 0x10000006
 248:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 24c:	68635f72 	stmdavs	r3!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 250:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xfffff19f
 254:	00676f4c 	rsbeq	r6, r7, ip, asr #30
 258:	61647075 	smcvs	18181	; 0x4705
 25c:	00646574 	rsbeq	r6, r4, r4, ror r5
 260:	70617267 	rsbvc	r7, r1, r7, ror #4
 264:	5f636968 	svcpl	0x00636968
 268:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 26c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 270:	75620061 	strbvc	r0, [r2, #-97]!	; 0xffffff9f
 274:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 278:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
 27c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 280:	636c7000 	cmnvs	ip, #0
 284:	66754264 	ldrbtvs	r4, [r5], -r4, ror #4
 288:	72670066 	rsbvc	r0, r7, #102	; 0x66
 28c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 290:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 294:	5f6e6165 	svcpl	0x006e6165
 298:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 29c:	42006e65 	andmi	r6, r0, #1616	; 0x650
 2a0:	0057525f 	subseq	r5, r7, pc, asr r2
 2a4:	70617267 	rsbvc	r7, r1, r7, ror #4
 2a8:	5f636968 	svcpl	0x00636968
 2ac:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 2b0:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0xffffff9b
 2b4:	7300706d 	movwvc	r7, #109	; 0x6d
 2b8:	63656c65 	cmnvs	r5, #25856	; 0x6500
 2bc:	6f635f74 	svcvs	0x00635f74
 2c0:	6f72746e 	svcvs	0x0072746e
 2c4:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 2c8:	2f3a4300 	svccs	0x003a4300
 2cc:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 2d0:	61732f73 	cmnvs	r3, r3, ror pc
 2d4:	2f65756d 	svccs	0x0065756d
 2d8:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 2dc:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 2e0:	6f4d2f73 	svcvs	0x004d2f73
 2e4:	62614c70 	rsbvs	r4, r1, #112, 24	; 0x7000
 2e8:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 2ec:	2f6e6570 	svccs	0x006e6570
 2f0:	5f64636c 	svcpl	0x0064636c
 2f4:	76697264 	strbtvc	r7, [r9], -r4, ror #4
 2f8:	2e737265 	cdpcs	2, 7, cr7, cr3, cr5, {3}
 2fc:	5f420063 	svcpl	0x00420063
 300:	00545352 	subseq	r5, r4, r2, asr r3
 304:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 308:	64636c5f 	strbtvs	r6, [r3], #-3167	; 0xfffff3a1
 30c:	64636c00 	strbtvs	r6, [r3], #-3072	; 0xfffff400
 310:	66667542 	strbtvs	r7, [r6], -r2, asr #10
 314:	72447265 	subvc	r7, r4, #1342177286	; 0x50000006
 318:	67007761 	strvs	r7, [r0, -r1, ror #14]
 31c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 320:	705f6369 	subsvc	r6, pc, r9, ror #6
 324:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 328:	525f4200 	subspl	r4, pc, #0, 4
 32c:	6c700053 	ldclvs	0, cr0, [r0], #-332	; 0xfffffeb4
 330:	75426463 	strbvc	r6, [r2, #-1123]	; 0xfffffb9d
 334:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 338:	435f4200 	cmpmi	pc, #0, 4
 33c:	42003153 	andmi	r3, r0, #-1073741804	; 0xc0000014
 340:	4c45535f 	mcrrmi	3, 5, r5, r5, cr15
 344:	00544345 	subseq	r4, r4, r5, asr #6
 348:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 34c:	72670078 	rsbvc	r0, r7, #120	; 0x78
 350:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 354:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 358:	5f657469 	svcpl	0x00657469
 35c:	61746164 	cmnvs	r4, r4, ror #2
 360:	64636c00 	strbtvs	r6, [r3], #-3072	; 0xfffff400
 364:	66667542 	strbtvs	r7, [r6], -r2, asr #10
 368:	72577265 	subsvc	r7, r7, #1342177286	; 0x50000006
 36c:	50657469 	rsbpl	r7, r5, r9, ror #8
 370:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 374:	61726700 	cmnvs	r2, r0, lsl #14
 378:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 37c:	6165725f 	cmnvs	r5, pc, asr r2
 380:	72670064 	rsbvc	r0, r7, #100	; 0x64
 384:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 388:	61775f63 	cmnvs	r7, r3, ror #30
 38c:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
 390:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 394:	61726700 	cmnvs	r2, r0, lsl #14
 398:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 39c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 3a0:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 3a4:	616d6d6f 	cmnvs	sp, pc, ror #26
 3a8:	7400646e 	strvc	r6, [r0], #-1134	; 0xfffffb92
 3ac:	6172446f 	cmnvs	r2, pc, ror #8
 3b0:	72670077 	rsbvc	r0, r7, #119	; 0x77
 3b4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 3b8:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 3bc:	61697469 	cmnvs	r9, r9, ror #8
 3c0:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
 3c4:	6e6f7000 	cdpvs	0, 6, cr7, cr15, cr0, {0}
 3c8:	6e695f67 	cdpvs	15, 6, cr5, cr9, cr7, {3}
 3cc:	6c705f63 	ldclvs	15, cr5, [r0], #-396	; 0xfffffe74
 3d0:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
 3d4:	726f6353 	rsbvc	r6, pc, #1275068417	; 0x4c000001
 3d8:	6f700065 	svcvs	0x00700065
 3dc:	735f676e 	cmpvc	pc, #28835840	; 0x1b80000
 3e0:	705f7465 	subsvc	r7, pc, r5, ror #8
 3e4:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
 3e8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 3ec:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 3f0:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
 3f4:	61007469 	tstvs	r0, r9, ror #8
 3f8:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 3fc:	746f675f 	strbtvc	r6, [pc], #-1887	; 404 <startup-0x1ffffbfc>
 400:	0079786f 	rsbseq	r7, r9, pc, ror #16
 404:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 408:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 40c:	3a430074 	bcc	10c05e4 <startup-0x1ef3fa1c>
 410:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 414:	732f7372 			; <UNDEFINED> instruction: 0x732f7372
 418:	65756d61 	ldrbvs	r6, [r5, #-3425]!	; 0xfffff29f
 41c:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 420:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 424:	4d2f7374 	stcmi	3, cr7, [pc, #-464]!	; 25c <startup-0x1ffffda4>
 428:	614c706f 	cmpvs	ip, pc, rrx
 42c:	6f4d2f62 	svcvs	0x004d2f62
 430:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
 434:	6e6f702f 	cdpvs	0, 6, cr7, cr15, cr15, {1}
 438:	676f6c67 	strbvs	r6, [pc, -r7, ror #24]!
 43c:	632e6369 			; <UNDEFINED> instruction: 0x632e6369
 440:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 444:	00786465 	rsbseq	r6, r8, r5, ror #8
 448:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 44c:	73007265 	movwvc	r7, #613	; 0x265
 450:	6f5f7465 	svcvs	0x005f7465
 454:	63656a62 	cmnvs	r5, #401408	; 0x62000
 458:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 45c:	00646565 	rsbeq	r6, r4, r5, ror #10
 460:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 464:	72640078 	rsbvc	r0, r4, #120	; 0x78
 468:	00797761 	rsbseq	r7, r9, r1, ror #14
 46c:	61656c63 	cmnvs	r5, r3, ror #24
 470:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 474:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 478:	61726400 	cmnvs	r2, r0, lsl #8
 47c:	626f5f77 	rsbvs	r5, pc, #476	; 0x1dc
 480:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 484:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 488:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
 48c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 490:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
 494:	726f6353 	rsbvc	r6, pc, #1275068417	; 0x4c000001
 498:	70730065 	rsbsvc	r0, r3, r5, rrx
 49c:	79646565 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 4a0:	63736100 	cmnvs	r3, #0, 2
 4a4:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 4a8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 4ac:	6168635f 	cmnvs	r8, pc, asr r3
 4b0:	73610072 	cmnvc	r1, #114	; 0x72
 4b4:	5f696963 	svcpl	0x00696963
 4b8:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 4bc:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 4c0:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 4c4:	61007261 	tstvs	r0, r1, ror #4
 4c8:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 4cc:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 4d0:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 4d4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 4d8:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 4dc:	73610072 	cmnvc	r1, #114	; 0x72
 4e0:	5f696963 	svcpl	0x00696963
 4e4:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 4e8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 4ec:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 4f0:	6f687300 	svcvs	0x00687300
 4f4:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
 4f8:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 4fc:	2064656e 	rsbcs	r6, r4, lr, ror #10
 500:	00746e69 	rsbseq	r6, r4, r9, ror #28
 504:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 508:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 50c:	5f657469 	svcpl	0x00657469
 510:	61746164 	cmnvs	r4, r4, ror #2
 514:	63736100 	cmnvs	r3, #0, 2
 518:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 51c:	5f646165 	svcpl	0x00646165
 520:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 524:	61007375 	tstvs	r0, r5, ror r3
 528:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 52c:	6165725f 	cmnvs	r5, pc, asr r2
 530:	6f635f64 	svcvs	0x00635f64
 534:	6f72746e 	svcvs	0x0072746e
 538:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 53c:	2f3a4300 	svccs	0x003a4300
 540:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 544:	61732f73 	cmnvs	r3, r3, ror pc
 548:	2f65756d 	svccs	0x0065756d
 54c:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 550:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 554:	6f4d2f73 	svcvs	0x004d2f73
 558:	62614c70 	rsbvs	r4, r1, #112, 24	; 0x7000
 55c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 560:	2f6e6570 	svccs	0x006e6570
 564:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 568:	72645f69 	rsbvc	r5, r4, #420	; 0x1a4
 56c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 570:	00632e73 	rsbeq	r2, r3, r3, ror lr
 574:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 578:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 57c:	645f6461 	ldrbvs	r6, [pc], #-1121	; 584 <startup-0x1ffffa7c>
 580:	00617461 	rsbeq	r7, r1, r1, ror #8
 584:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 588:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 58c:	5f657469 	svcpl	0x00657469
 590:	00646d63 	rsbeq	r6, r4, r3, ror #26
 594:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 598:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
 59c:	615f7469 	cmpvs	pc, r9, ror #8
 5a0:	61007070 	tstvs	r0, r0, ror r0
 5a4:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 5a8:	656b0073 	strbvs	r0, [fp, #-115]!	; 0xffffff8d
 5ac:	43006279 	movwmi	r6, #633	; 0x279
 5b0:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 5b4:	2f737265 	svccs	0x00737265
 5b8:	756d6173 	strbvc	r6, [sp, #-371]!	; 0xfffffe8d
 5bc:	6f442f65 	svcvs	0x00442f65
 5c0:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 5c4:	2f73746e 	svccs	0x0073746e
 5c8:	4c706f4d 	ldclmi	15, cr6, [r0], #-308	; 0xfffffecc
 5cc:	4d2f6261 	sfmmi	f6, 4, [pc, #-388]!	; 450 <startup-0x1ffffbb0>
 5d0:	6570706f 	ldrbvs	r7, [r0, #-111]!	; 0xffffff91
 5d4:	656b2f6e 	strbvs	r2, [fp, #-3950]!	; 0xfffff092
 5d8:	64617079 	strbtvs	r7, [r1], #-121	; 0xffffff87
 5dc:	6972645f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, sp, lr}^
 5e0:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 5e4:	6100632e 	tstvs	r0, lr, lsr #6
 5e8:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 5ec:	776f5265 	strbvc	r5, [pc, -r5, ror #4]!
 5f0:	67657300 	strbvs	r7, [r5, -r0, lsl #6]!
 5f4:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 5f8:	656b0073 	strbvs	r0, [fp, #-115]!	; 0xffffff8d
 5fc:	69007379 	stmdbvs	r0, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
 600:	5f74696e 	svcpl	0x0074696e
 604:	7079656b 	rsbsvc	r6, r9, fp, ror #10
 608:	63006461 	movwvs	r6, #1121	; 0x461
 60c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 610:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
 614:	67657337 			; <UNDEFINED> instruction: 0x67657337
 618:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 61c:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
 620:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 624:	00646170 	rsbeq	r6, r4, r0, ror r1

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <p2paddle+0xdfffd3f6>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000020 	andeq	r0, r0, r0, lsr #32
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	0000015c 	andeq	r0, r0, ip, asr r1
  30:	400c0e41 	andmi	r0, ip, r1, asr #28
  34:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  38:	018e4002 	orreq	r4, lr, r2
  3c:	41480e41 	cmpmi	r8, r1, asr #28
  40:	0000070d 	andeq	r0, r0, sp, lsl #14
  44:	0000000c 	andeq	r0, r0, ip
  48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  4c:	7c020001 	stcvc	0, cr0, [r2], {1}
  50:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  54:	00000018 	andeq	r0, r0, r8, lsl r0
  58:	00000044 	andeq	r0, r0, r4, asr #32
  5c:	2000016c 	andcs	r0, r0, ip, ror #2
  60:	00000044 	andeq	r0, r0, r4, asr #32
  64:	40080e41 	andmi	r0, r8, r1, asr #28
  68:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  6c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  70:	00000018 	andeq	r0, r0, r8, lsl r0
  74:	00000044 	andeq	r0, r0, r4, asr #32
  78:	200001b0 			; <UNDEFINED> instruction: 0x200001b0
  7c:	0000000a 	andeq	r0, r0, sl
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  8c:	0000001c 	andeq	r0, r0, ip, lsl r0
  90:	00000044 	andeq	r0, r0, r4, asr #32
  94:	200001ba 			; <UNDEFINED> instruction: 0x200001ba
  98:	00000010 	andeq	r0, r0, r0, lsl r0
  9c:	40080e41 	andmi	r0, r8, r1, asr #28
  a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a4:	100e4101 	andne	r4, lr, r1, lsl #2
  a8:	00070d41 	andeq	r0, r7, r1, asr #26
  ac:	0000001c 	andeq	r0, r0, ip, lsl r0
  b0:	00000044 	andeq	r0, r0, r4, asr #32
  b4:	200001ca 	andcs	r0, r0, sl, asr #3
  b8:	00000010 	andeq	r0, r0, r0, lsl r0
  bc:	40080e41 	andmi	r0, r8, r1, asr #28
  c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c4:	100e4101 	andne	r4, lr, r1, lsl #2
  c8:	00070d41 	andeq	r0, r7, r1, asr #26
  cc:	0000000c 	andeq	r0, r0, ip
  d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  d4:	7c020001 	stcvc	0, cr0, [r2], {1}
  d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  dc:	0000001c 	andeq	r0, r0, ip, lsl r0
  e0:	000000cc 	andeq	r0, r0, ip, asr #1
  e4:	200001dc 	ldrdcs	r0, [r0], -ip
  e8:	00000090 	muleq	r0, r0, r0
  ec:	40080e41 	andmi	r0, r8, r1, asr #28
  f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f4:	100e4101 	andne	r4, lr, r1, lsl #2
  f8:	00070d41 	andeq	r0, r7, r1, asr #26
  fc:	00000018 	andeq	r0, r0, r8, lsl r0
 100:	000000cc 	andeq	r0, r0, ip, asr #1
 104:	2000026c 	andcs	r0, r0, ip, ror #4
 108:	000000a4 	andeq	r0, r0, r4, lsr #1
 10c:	40080e41 	andmi	r0, r8, r1, asr #28
 110:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 114:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	000000cc 	andeq	r0, r0, ip, asr #1
 120:	20000310 	andcs	r0, r0, r0, lsl r3
 124:	000000c8 	andeq	r0, r0, r8, asr #1
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	180e4101 	stmdane	lr, {r0, r8, lr}
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	000000cc 	andeq	r0, r0, ip, asr #1
 140:	200003d8 	ldrdcs	r0, [r0], -r8
 144:	000000a8 	andeq	r0, r0, r8, lsr #1
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	100e4101 	andne	r4, lr, r1, lsl #2
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	000000cc 	andeq	r0, r0, ip, asr #1
 160:	20000480 	andcs	r0, r0, r0, lsl #9
 164:	00000058 	andeq	r0, r0, r8, asr r0
 168:	40080e41 	andmi	r0, r8, r1, asr #28
 16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 170:	100e4101 	andne	r4, lr, r1, lsl #2
 174:	00070d41 	andeq	r0, r7, r1, asr #26
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	000000cc 	andeq	r0, r0, ip, asr #1
 180:	200004d8 	ldrdcs	r0, [r0], -r8
 184:	00000060 	andeq	r0, r0, r0, rrx
 188:	40080e41 	andmi	r0, r8, r1, asr #28
 18c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 190:	100e4101 	andne	r4, lr, r1, lsl #2
 194:	00070d41 	andeq	r0, r7, r1, asr #26
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	000000cc 	andeq	r0, r0, ip, asr #1
 1a0:	20000538 	andcs	r0, r0, r8, lsr r5
 1a4:	0000002a 	andeq	r0, r0, sl, lsr #32
 1a8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b0:	100e4101 	andne	r4, lr, r1, lsl #2
 1b4:	00070d41 	andeq	r0, r7, r1, asr #26
 1b8:	00000018 	andeq	r0, r0, r8, lsl r0
 1bc:	000000cc 	andeq	r0, r0, ip, asr #1
 1c0:	20000562 	andcs	r0, r0, r2, ror #10
 1c4:	0000001a 	andeq	r0, r0, sl, lsl r0
 1c8:	40080e41 	andmi	r0, r8, r1, asr #28
 1cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1d4:	00000018 	andeq	r0, r0, r8, lsl r0
 1d8:	000000cc 	andeq	r0, r0, ip, asr #1
 1dc:	2000057c 	andcs	r0, r0, ip, ror r5
 1e0:	00000084 	andeq	r0, r0, r4, lsl #1
 1e4:	40080e41 	andmi	r0, r8, r1, asr #28
 1e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ec:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	000000cc 	andeq	r0, r0, ip, asr #1
 1f8:	20000600 	andcs	r0, r0, r0, lsl #12
 1fc:	00000058 	andeq	r0, r0, r8, asr r0
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	100e4101 	andne	r4, lr, r1, lsl #2
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	00000024 	andeq	r0, r0, r4, lsr #32
 214:	000000cc 	andeq	r0, r0, ip, asr #1
 218:	20000658 	andcs	r0, r0, r8, asr r6
 21c:	0000013c 	andeq	r0, r0, ip, lsr r1
 220:	40100e41 	andsmi	r0, r0, r1, asr #28
 224:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 228:	02874003 	addeq	r4, r7, #3
 22c:	41018e40 	tstmi	r1, r0, asr #28
 230:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 234:	00000007 	andeq	r0, r0, r7
 238:	00000024 	andeq	r0, r0, r4, lsr #32
 23c:	000000cc 	andeq	r0, r0, ip, asr #1
 240:	20000794 	mulcs	r0, r4, r7
 244:	00000158 	andeq	r0, r0, r8, asr r1
 248:	40140e41 	andsmi	r0, r4, r1, asr #28
 24c:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
 250:	03864004 	orreq	r4, r6, #4
 254:	40028740 	andmi	r8, r2, r0, asr #14
 258:	0e41018e 	dvfeqd	f0, f1, #0.5
 25c:	070d4128 	streq	r4, [sp, -r8, lsr #2]
 260:	00000020 	andeq	r0, r0, r0, lsr #32
 264:	000000cc 	andeq	r0, r0, ip, asr #1
 268:	200008ec 	andcs	r0, r0, ip, ror #17
 26c:	00000124 	andeq	r0, r0, r4, lsr #2
 270:	400c0e41 	andmi	r0, ip, r1, asr #28
 274:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 278:	018e4002 	orreq	r4, lr, r2
 27c:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 280:	0000070d 	andeq	r0, r0, sp, lsl #14
 284:	0000001c 	andeq	r0, r0, ip, lsl r0
 288:	000000cc 	andeq	r0, r0, ip, asr #1
 28c:	20000a10 	andcs	r0, r0, r0, lsl sl
 290:	00000054 	andeq	r0, r0, r4, asr r0
 294:	40080e41 	andmi	r0, r8, r1, asr #28
 298:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 29c:	180e4101 	stmdane	lr, {r0, r8, lr}
 2a0:	00070d41 	andeq	r0, r7, r1, asr #26
 2a4:	0000000c 	andeq	r0, r0, ip
 2a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2ac:	7c020001 	stcvc	0, cr0, [r2], {1}
 2b0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2b4:	00000018 	andeq	r0, r0, r8, lsl r0
 2b8:	000002a4 	andeq	r0, r0, r4, lsr #5
 2bc:	20000a64 	andcs	r0, r0, r4, ror #20
 2c0:	0000000a 	andeq	r0, r0, sl
 2c4:	40080e41 	andmi	r0, r8, r1, asr #28
 2c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2cc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d4:	000002a4 	andeq	r0, r0, r4, lsr #5
 2d8:	20000a6e 	andcs	r0, r0, lr, ror #20
 2dc:	00000020 	andeq	r0, r0, r0, lsr #32
 2e0:	40080e41 	andmi	r0, r8, r1, asr #28
 2e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e8:	180e4101 	stmdane	lr, {r0, r8, lr}
 2ec:	00070d41 	andeq	r0, r7, r1, asr #26
 2f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f4:	000002a4 	andeq	r0, r0, r4, lsr #5
 2f8:	20000a8e 	andcs	r0, r0, lr, lsl #21
 2fc:	00000020 	andeq	r0, r0, r0, lsr #32
 300:	40080e41 	andmi	r0, r8, r1, asr #28
 304:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 308:	180e4101 	stmdane	lr, {r0, r8, lr}
 30c:	00070d41 	andeq	r0, r7, r1, asr #26
 310:	0000001c 	andeq	r0, r0, ip, lsl r0
 314:	000002a4 	andeq	r0, r0, r4, lsr #5
 318:	20000aae 	andcs	r0, r0, lr, lsr #21
 31c:	00000064 	andeq	r0, r0, r4, rrx
 320:	40080e41 	andmi	r0, r8, r1, asr #28
 324:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 328:	200e4101 	andcs	r4, lr, r1, lsl #2
 32c:	00070d41 	andeq	r0, r7, r1, asr #26
 330:	0000001c 	andeq	r0, r0, ip, lsl r0
 334:	000002a4 	andeq	r0, r0, r4, lsr #5
 338:	20000b12 	andcs	r0, r0, r2, lsl fp
 33c:	0000005c 	andeq	r0, r0, ip, asr r0
 340:	40080e41 	andmi	r0, r8, r1, asr #28
 344:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 348:	180e4101 	stmdane	lr, {r0, r8, lr}
 34c:	00070d41 	andeq	r0, r7, r1, asr #26
 350:	0000001c 	andeq	r0, r0, ip, lsl r0
 354:	000002a4 	andeq	r0, r0, r4, lsr #5
 358:	20000b6e 	andcs	r0, r0, lr, ror #22
 35c:	00000098 	muleq	r0, r8, r0
 360:	40080e41 	andmi	r0, r8, r1, asr #28
 364:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 368:	100e4101 	andne	r4, lr, r1, lsl #2
 36c:	00070d41 	andeq	r0, r7, r1, asr #26
 370:	0000001c 	andeq	r0, r0, ip, lsl r0
 374:	000002a4 	andeq	r0, r0, r4, lsr #5
 378:	20000c06 	andcs	r0, r0, r6, lsl #24
 37c:	00000068 	andeq	r0, r0, r8, rrx
 380:	40080e41 	andmi	r0, r8, r1, asr #28
 384:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 388:	180e4101 	stmdane	lr, {r0, r8, lr}
 38c:	00070d41 	andeq	r0, r7, r1, asr #26
 390:	0000000c 	andeq	r0, r0, ip
 394:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 398:	7c020001 	stcvc	0, cr0, [r2], {1}
 39c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a4:	00000390 	muleq	r0, r0, r3
 3a8:	20000c70 	andcs	r0, r0, r0, ror ip
 3ac:	00000044 	andeq	r0, r0, r4, asr #32
 3b0:	40080e41 	andmi	r0, r8, r1, asr #28
 3b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3b8:	180e4101 	stmdane	lr, {r0, r8, lr}
 3bc:	00070d41 	andeq	r0, r7, r1, asr #26
 3c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c4:	00000390 	muleq	r0, r0, r3
 3c8:	20000cb4 			; <UNDEFINED> instruction: 0x20000cb4
 3cc:	00000048 	andeq	r0, r0, r8, asr #32
 3d0:	40080e41 	andmi	r0, r8, r1, asr #28
 3d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3d8:	180e4101 	stmdane	lr, {r0, r8, lr}
 3dc:	00070d41 	andeq	r0, r7, r1, asr #26
 3e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e4:	00000390 	muleq	r0, r0, r3
 3e8:	20000cfc 	strdcs	r0, [r0], -ip
 3ec:	00000030 	andeq	r0, r0, r0, lsr r0
 3f0:	40080e41 	andmi	r0, r8, r1, asr #28
 3f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3f8:	100e4101 	andne	r4, lr, r1, lsl #2
 3fc:	00070d41 	andeq	r0, r7, r1, asr #26
 400:	0000001c 	andeq	r0, r0, ip, lsl r0
 404:	00000390 	muleq	r0, r0, r3
 408:	20000d2c 	andcs	r0, r0, ip, lsr #26
 40c:	0000002c 	andeq	r0, r0, ip, lsr #32
 410:	40080e41 	andmi	r0, r8, r1, asr #28
 414:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 418:	100e4101 	andne	r4, lr, r1, lsl #2
 41c:	00070d41 	andeq	r0, r7, r1, asr #26
 420:	0000001c 	andeq	r0, r0, ip, lsl r0
 424:	00000390 	muleq	r0, r0, r3
 428:	20000d58 	andcs	r0, r0, r8, asr sp
 42c:	0000002a 	andeq	r0, r0, sl, lsr #32
 430:	40080e41 	andmi	r0, r8, r1, asr #28
 434:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 438:	100e4101 	andne	r4, lr, r1, lsl #2
 43c:	00070d41 	andeq	r0, r7, r1, asr #26
 440:	0000001c 	andeq	r0, r0, ip, lsl r0
 444:	00000390 	muleq	r0, r0, r3
 448:	20000d82 	andcs	r0, r0, r2, lsl #27
 44c:	0000002a 	andeq	r0, r0, sl, lsr #32
 450:	40080e41 	andmi	r0, r8, r1, asr #28
 454:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 458:	100e4101 	andne	r4, lr, r1, lsl #2
 45c:	00070d41 	andeq	r0, r7, r1, asr #26
 460:	0000001c 	andeq	r0, r0, ip, lsl r0
 464:	00000390 	muleq	r0, r0, r3
 468:	20000dac 	andcs	r0, r0, ip, lsr #27
 46c:	00000040 	andeq	r0, r0, r0, asr #32
 470:	40080e41 	andmi	r0, r8, r1, asr #28
 474:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 478:	100e4101 	andne	r4, lr, r1, lsl #2
 47c:	00070d41 	andeq	r0, r7, r1, asr #26
 480:	00000020 	andeq	r0, r0, r0, lsr #32
 484:	00000390 	muleq	r0, r0, r3
 488:	20000dec 	andcs	r0, r0, ip, ror #27
 48c:	00000048 	andeq	r0, r0, r8, asr #32
 490:	400c0e41 	andmi	r0, ip, r1, asr #28
 494:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 498:	018e4002 	orreq	r4, lr, r2
 49c:	41180e41 	tstmi	r8, r1, asr #28
 4a0:	0000070d 	andeq	r0, r0, sp, lsl #14
 4a4:	00000018 	andeq	r0, r0, r8, lsl r0
 4a8:	00000390 	muleq	r0, r0, r3
 4ac:	20000e34 	andcs	r0, r0, r4, lsr lr
 4b0:	00000046 	andeq	r0, r0, r6, asr #32
 4b4:	40080e41 	andmi	r0, r8, r1, asr #28
 4b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4bc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 4c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4c4:	00000390 	muleq	r0, r0, r3
 4c8:	20000e7a 	andcs	r0, r0, sl, ror lr
 4cc:	0000003c 	andeq	r0, r0, ip, lsr r0
 4d0:	40080e41 	andmi	r0, r8, r1, asr #28
 4d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4d8:	100e4101 	andne	r4, lr, r1, lsl #2
 4dc:	00070d41 	andeq	r0, r7, r1, asr #26
 4e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4e4:	00000390 	muleq	r0, r0, r3
 4e8:	20000eb6 			; <UNDEFINED> instruction: 0x20000eb6
 4ec:	00000034 	andeq	r0, r0, r4, lsr r0
 4f0:	40080e41 	andmi	r0, r8, r1, asr #28
 4f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4f8:	180e4101 	stmdane	lr, {r0, r8, lr}
 4fc:	00070d41 	andeq	r0, r7, r1, asr #26
 500:	00000018 	andeq	r0, r0, r8, lsl r0
 504:	00000390 	muleq	r0, r0, r3
 508:	20000eea 	andcs	r0, r0, sl, ror #29
 50c:	0000002e 	andeq	r0, r0, lr, lsr #32
 510:	40080e41 	andmi	r0, r8, r1, asr #28
 514:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 518:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 51c:	0000000c 	andeq	r0, r0, ip
 520:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 524:	7c020001 	stcvc	0, cr0, [r2], {1}
 528:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 52c:	00000018 	andeq	r0, r0, r8, lsl r0
 530:	0000051c 	andeq	r0, r0, ip, lsl r5
 534:	20000f18 	andcs	r0, r0, r8, lsl pc
 538:	00000038 	andeq	r0, r0, r8, lsr r0
 53c:	40080e41 	andmi	r0, r8, r1, asr #28
 540:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 544:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 548:	00000020 	andeq	r0, r0, r0, lsr #32
 54c:	0000051c 	andeq	r0, r0, ip, lsl r5
 550:	20000f50 	andcs	r0, r0, r0, asr pc
 554:	000000bc 	strheq	r0, [r0], -ip
 558:	400c0e41 	andmi	r0, ip, r1, asr #28
 55c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 560:	018e4002 	orreq	r4, lr, r2
 564:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 568:	0000070d 	andeq	r0, r0, sp, lsl #14
 56c:	00000024 	andeq	r0, r0, r4, lsr #32
 570:	0000051c 	andeq	r0, r0, ip, lsl r5
 574:	2000100c 	andcs	r1, r0, ip
 578:	00000034 	andeq	r0, r0, r4, lsr r0
 57c:	40100e41 	andsmi	r0, r0, r1, asr #28
 580:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 584:	02874003 	addeq	r4, r7, #3
 588:	41018e40 	tstmi	r1, r0, asr #28
 58c:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 590:	00000007 	andeq	r0, r0, r7
 594:	0000001c 	andeq	r0, r0, ip, lsl r0
 598:	0000051c 	andeq	r0, r0, ip, lsl r5
 59c:	20001040 	andcs	r1, r0, r0, asr #32
 5a0:	00000088 	andeq	r0, r0, r8, lsl #1
 5a4:	40080e41 	andmi	r0, r8, r1, asr #28
 5a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5ac:	100e4101 	andne	r4, lr, r1, lsl #2
 5b0:	00070d41 	andeq	r0, r7, r1, asr #26
