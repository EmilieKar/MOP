
./Debug/Moppen.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 */
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f804 	bl	20000010 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <main>:
	move_object,
	set_object_speed,
	pong_set_position
	};

void main(int argc, char **argv){
20000010:	b590      	push	{r4, r7, lr}
20000012:	b08d      	sub	sp, #52	; 0x34
20000014:	af00      	add	r7, sp, #0
20000016:	6078      	str	r0, [r7, #4]
20000018:	6039      	str	r1, [r7, #0]
	#ifdef USBDM
		*((unsigned long *)0x40023830) = 0x18;
		__asm volatile(" LDR R0,=0x08000209\n BLX R0 \n");
	#endif
	#ifdef ascii
		ascii_init_app();
2000001a:	f000 ff04 	bl	20000e26 <ascii_init_app>
		ascii_init();
2000001e:	f000 fea7 	bl	20000d70 <ascii_init>
		ascii_gotoxy(1,1);
20000022:	2101      	movs	r1, #1
20000024:	2001      	movs	r0, #1
20000026:	f000 fee4 	bl	20000df2 <ascii_gotoxy>
		char *s;
		char string1[] = "Player 1: ";
2000002a:	201c      	movs	r0, #28
2000002c:	183b      	adds	r3, r7, r0
2000002e:	4a36      	ldr	r2, [pc, #216]	; (20000108 <main+0xf8>)
20000030:	ca12      	ldmia	r2!, {r1, r4}
20000032:	c312      	stmia	r3!, {r1, r4}
20000034:	8811      	ldrh	r1, [r2, #0]
20000036:	8019      	strh	r1, [r3, #0]
20000038:	7892      	ldrb	r2, [r2, #2]
2000003a:	709a      	strb	r2, [r3, #2]
		s = string1;
2000003c:	183b      	adds	r3, r7, r0
2000003e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (*s)
20000040:	e006      	b.n	20000050 <main+0x40>
		ascii_write_char(*s++);
20000042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000044:	1c5a      	adds	r2, r3, #1
20000046:	62fa      	str	r2, [r7, #44]	; 0x2c
20000048:	781b      	ldrb	r3, [r3, #0]
2000004a:	0018      	movs	r0, r3
2000004c:	f000 feb3 	bl	20000db6 <ascii_write_char>
	while (*s)
20000050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000052:	781b      	ldrb	r3, [r3, #0]
20000054:	2b00      	cmp	r3, #0
20000056:	d1f4      	bne.n	20000042 <main+0x32>
	ascii_gotoxy(11,2);
20000058:	2102      	movs	r1, #2
2000005a:	200b      	movs	r0, #11
2000005c:	f000 fec9 	bl	20000df2 <ascii_gotoxy>
	char string2[] = "Player 2: ";
20000060:	2010      	movs	r0, #16
20000062:	183b      	adds	r3, r7, r0
20000064:	4a29      	ldr	r2, [pc, #164]	; (2000010c <main+0xfc>)
20000066:	ca12      	ldmia	r2!, {r1, r4}
20000068:	c312      	stmia	r3!, {r1, r4}
2000006a:	8811      	ldrh	r1, [r2, #0]
2000006c:	8019      	strh	r1, [r3, #0]
2000006e:	7892      	ldrb	r2, [r2, #2]
20000070:	709a      	strb	r2, [r3, #2]
	s = string2;
20000072:	183b      	adds	r3, r7, r0
20000074:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (*s)
20000076:	e006      	b.n	20000086 <main+0x76>
		ascii_write_char(*s++);
20000078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000007a:	1c5a      	adds	r2, r3, #1
2000007c:	62fa      	str	r2, [r7, #44]	; 0x2c
2000007e:	781b      	ldrb	r3, [r3, #0]
20000080:	0018      	movs	r0, r3
20000082:	f000 fe98 	bl	20000db6 <ascii_write_char>
	while (*s)
20000086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000088:	781b      	ldrb	r3, [r3, #0]
2000008a:	2b00      	cmp	r3, #0
2000008c:	d1f4      	bne.n	20000078 <main+0x68>
	ascii_gotoxy(10,1);
2000008e:	2101      	movs	r1, #1
20000090:	200a      	movs	r0, #10
20000092:	f000 feae 	bl	20000df2 <ascii_gotoxy>
	ascii_write_char('1');
20000096:	2031      	movs	r0, #49	; 0x31
20000098:	f000 fe8d 	bl	20000db6 <ascii_write_char>
	ascii_gotoxy(20,2);
2000009c:	2102      	movs	r1, #2
2000009e:	2014      	movs	r0, #20
200000a0:	f000 fea7 	bl	20000df2 <ascii_gotoxy>
	ascii_write_char('2');
200000a4:	2032      	movs	r0, #50	; 0x32
200000a6:	f000 fe86 	bl	20000db6 <ascii_write_char>
	#endif
	
	#ifdef lcd
		init_lcd();
200000aa:	f000 fa2e 	bl	2000050a <init_lcd>
		graphic_initialize();
200000ae:	f000 fa39 	bl	20000524 <graphic_initialize>
	#endif
	#ifdef keypad
		init_keypad();
200000b2:	f000 fecf 	bl	20000e54 <init_keypad>
	#ifndef SIMULATOR
		graphic_clean_screen();
	#endif
	
	//graphic_pixel(66,33,1);
	pobject p = &ball;
200000b6:	4b16      	ldr	r3, [pc, #88]	; (20000110 <main+0x100>)
200000b8:	62bb      	str	r3, [r7, #40]	; 0x28
	pong_set_position(p,64-(p->geo->sizex)/2,32-(p->geo->sizey)/2);
200000ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
200000bc:	681b      	ldr	r3, [r3, #0]
200000be:	685b      	ldr	r3, [r3, #4]
200000c0:	2b00      	cmp	r3, #0
200000c2:	da00      	bge.n	200000c6 <main+0xb6>
200000c4:	3301      	adds	r3, #1
200000c6:	105b      	asrs	r3, r3, #1
200000c8:	425b      	negs	r3, r3
200000ca:	3340      	adds	r3, #64	; 0x40
200000cc:	0019      	movs	r1, r3
200000ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
200000d0:	681b      	ldr	r3, [r3, #0]
200000d2:	689b      	ldr	r3, [r3, #8]
200000d4:	2b00      	cmp	r3, #0
200000d6:	da00      	bge.n	200000da <main+0xca>
200000d8:	3301      	adds	r3, #1
200000da:	105b      	asrs	r3, r3, #1
200000dc:	425b      	negs	r3, r3
200000de:	3320      	adds	r3, #32
200000e0:	001a      	movs	r2, r3
200000e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
200000e4:	0018      	movs	r0, r3
200000e6:	f000 fca1 	bl	20000a2c <pong_set_position>
//	draw_object(p);
	
	p->set_speed(p,4,1);
200000ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
200000ec:	6a1b      	ldr	r3, [r3, #32]
200000ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200000f0:	2201      	movs	r2, #1
200000f2:	2104      	movs	r1, #4
200000f4:	4798      	blx	r3
	while(1){
		move_object(p);
200000f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
200000f8:	0018      	movs	r0, r3
200000fa:	f000 fd07 	bl	20000b0c <move_object>
		delay_milli(40);
200000fe:	2028      	movs	r0, #40	; 0x28
20000100:	f000 f837 	bl	20000172 <delay_milli>
		move_object(p);
20000104:	e7f7      	b.n	200000f6 <main+0xe6>
20000106:	46c0      	nop			; (mov r8, r8)
20000108:	20001df8 	strdcs	r1, [r0], -r8
2000010c:	20001e04 	andcs	r1, r0, r4, lsl #28
20000110:	20001dd0 	ldrdcs	r1, [r0], -r0

20000114 <delay_40ns>:

#include "delay.h"
#include "portDeclare.h"

void delay_40ns(void){
20000114:	b580      	push	{r7, lr}
20000116:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000118:	4b0c      	ldr	r3, [pc, #48]	; (2000014c <delay_40ns+0x38>)
2000011a:	2200      	movs	r2, #0
2000011c:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 6;
2000011e:	4b0c      	ldr	r3, [pc, #48]	; (20000150 <delay_40ns+0x3c>)
20000120:	2206      	movs	r2, #6
20000122:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000124:	4b0b      	ldr	r3, [pc, #44]	; (20000154 <delay_40ns+0x40>)
20000126:	2200      	movs	r2, #0
20000128:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
2000012a:	4b08      	ldr	r3, [pc, #32]	; (2000014c <delay_40ns+0x38>)
2000012c:	2205      	movs	r2, #5
2000012e:	601a      	str	r2, [r3, #0]
	while ((*STK_CTRL & 0x10000) == 0){
20000130:	46c0      	nop			; (mov r8, r8)
20000132:	4b06      	ldr	r3, [pc, #24]	; (2000014c <delay_40ns+0x38>)
20000134:	681a      	ldr	r2, [r3, #0]
20000136:	2380      	movs	r3, #128	; 0x80
20000138:	025b      	lsls	r3, r3, #9
2000013a:	4013      	ands	r3, r2
2000013c:	d0f9      	beq.n	20000132 <delay_40ns+0x1e>
	}
	*STK_CTRL = 0;
2000013e:	4b03      	ldr	r3, [pc, #12]	; (2000014c <delay_40ns+0x38>)
20000140:	2200      	movs	r2, #0
20000142:	601a      	str	r2, [r3, #0]
}
20000144:	46c0      	nop			; (mov r8, r8)
20000146:	46bd      	mov	sp, r7
20000148:	bd80      	pop	{r7, pc}
2000014a:	46c0      	nop			; (mov r8, r8)
2000014c:	e000e010 	and	lr, r0, r0, lsl r0
20000150:	e000e014 	and	lr, r0, r4, lsl r0
20000154:	e000e018 	and	lr, r0, r8, lsl r0

20000158 <delay_250ns>:

void delay_250ns(void){
20000158:	b580      	push	{r7, lr}
2000015a:	af00      	add	r7, sp, #0
	*STK_CTRL = 5;
	while (!(*STK_CTRL & 0x10000) == 0){
	}
	*STK_CTRL = 0;
	#endif
}
2000015c:	46c0      	nop			; (mov r8, r8)
2000015e:	46bd      	mov	sp, r7
20000160:	bd80      	pop	{r7, pc}

20000162 <delay_mikro>:

void delay_mikro(unsigned int us){
20000162:	b580      	push	{r7, lr}
20000164:	b082      	sub	sp, #8
20000166:	af00      	add	r7, sp, #0
20000168:	6078      	str	r0, [r7, #4]
		us = us*4;
	for(int i = 0; i < us; i++){
		delay_250ns();
	}
	#endif
}
2000016a:	46c0      	nop			; (mov r8, r8)
2000016c:	46bd      	mov	sp, r7
2000016e:	b002      	add	sp, #8
20000170:	bd80      	pop	{r7, pc}

20000172 <delay_milli>:

void delay_milli(unsigned int ms){
20000172:	b580      	push	{r7, lr}
20000174:	b082      	sub	sp, #8
20000176:	af00      	add	r7, sp, #0
20000178:	6078      	str	r0, [r7, #4]
	#ifndef SIMULATOR
	ms = ms*1000;
	delay_mikro(ms);
	#endif
2000017a:	46c0      	nop			; (mov r8, r8)
2000017c:	46bd      	mov	sp, r7
2000017e:	b002      	add	sp, #8
20000180:	bd80      	pop	{r7, pc}
20000182:	46c0      	nop			; (mov r8, r8)

20000184 <select_controller>:
#include "portDeclare.h"

#define adress 0x40
#define page 0xB8

void select_controller(char c){
20000184:	b580      	push	{r7, lr}
20000186:	b082      	sub	sp, #8
20000188:	af00      	add	r7, sp, #0
2000018a:	0002      	movs	r2, r0
2000018c:	1dfb      	adds	r3, r7, #7
2000018e:	701a      	strb	r2, [r3, #0]
	switch(c){
20000190:	1dfb      	adds	r3, r7, #7
20000192:	781b      	ldrb	r3, [r3, #0]
20000194:	2b08      	cmp	r3, #8
20000196:	d011      	beq.n	200001bc <select_controller+0x38>
20000198:	dc02      	bgt.n	200001a0 <select_controller+0x1c>
2000019a:	2b00      	cmp	r3, #0
2000019c:	d005      	beq.n	200001aa <select_controller+0x26>
		case 0: *portOdrLowE = *portOdrLowE &~ 0x18; break;
		case 0x8: *portOdrLowE = (*portOdrLowE &~ 0x10)|0x8; break;
		case 0x10: *portOdrLowE = (*portOdrLowE &~ 0x8)|0x10; break;
		case 0x18: *portOdrLowE = *portOdrLowE | 0x18; break;
	}
}
2000019e:	e032      	b.n	20000206 <select_controller+0x82>
	switch(c){
200001a0:	2b10      	cmp	r3, #16
200001a2:	d019      	beq.n	200001d8 <select_controller+0x54>
200001a4:	2b18      	cmp	r3, #24
200001a6:	d025      	beq.n	200001f4 <select_controller+0x70>
}
200001a8:	e02d      	b.n	20000206 <select_controller+0x82>
		case 0: *portOdrLowE = *portOdrLowE &~ 0x18; break;
200001aa:	4b19      	ldr	r3, [pc, #100]	; (20000210 <select_controller+0x8c>)
200001ac:	781b      	ldrb	r3, [r3, #0]
200001ae:	b2db      	uxtb	r3, r3
200001b0:	4a17      	ldr	r2, [pc, #92]	; (20000210 <select_controller+0x8c>)
200001b2:	2118      	movs	r1, #24
200001b4:	438b      	bics	r3, r1
200001b6:	b2db      	uxtb	r3, r3
200001b8:	7013      	strb	r3, [r2, #0]
200001ba:	e024      	b.n	20000206 <select_controller+0x82>
		case 0x8: *portOdrLowE = (*portOdrLowE &~ 0x10)|0x8; break;
200001bc:	4b14      	ldr	r3, [pc, #80]	; (20000210 <select_controller+0x8c>)
200001be:	781b      	ldrb	r3, [r3, #0]
200001c0:	b2db      	uxtb	r3, r3
200001c2:	b25b      	sxtb	r3, r3
200001c4:	2218      	movs	r2, #24
200001c6:	4393      	bics	r3, r2
200001c8:	b25b      	sxtb	r3, r3
200001ca:	2208      	movs	r2, #8
200001cc:	4313      	orrs	r3, r2
200001ce:	b25a      	sxtb	r2, r3
200001d0:	4b0f      	ldr	r3, [pc, #60]	; (20000210 <select_controller+0x8c>)
200001d2:	b2d2      	uxtb	r2, r2
200001d4:	701a      	strb	r2, [r3, #0]
200001d6:	e016      	b.n	20000206 <select_controller+0x82>
		case 0x10: *portOdrLowE = (*portOdrLowE &~ 0x8)|0x10; break;
200001d8:	4b0d      	ldr	r3, [pc, #52]	; (20000210 <select_controller+0x8c>)
200001da:	781b      	ldrb	r3, [r3, #0]
200001dc:	b2db      	uxtb	r3, r3
200001de:	b25b      	sxtb	r3, r3
200001e0:	2218      	movs	r2, #24
200001e2:	4393      	bics	r3, r2
200001e4:	b25b      	sxtb	r3, r3
200001e6:	2210      	movs	r2, #16
200001e8:	4313      	orrs	r3, r2
200001ea:	b25a      	sxtb	r2, r3
200001ec:	4b08      	ldr	r3, [pc, #32]	; (20000210 <select_controller+0x8c>)
200001ee:	b2d2      	uxtb	r2, r2
200001f0:	701a      	strb	r2, [r3, #0]
200001f2:	e008      	b.n	20000206 <select_controller+0x82>
		case 0x18: *portOdrLowE = *portOdrLowE | 0x18; break;
200001f4:	4b06      	ldr	r3, [pc, #24]	; (20000210 <select_controller+0x8c>)
200001f6:	781b      	ldrb	r3, [r3, #0]
200001f8:	b2db      	uxtb	r3, r3
200001fa:	4a05      	ldr	r2, [pc, #20]	; (20000210 <select_controller+0x8c>)
200001fc:	2118      	movs	r1, #24
200001fe:	430b      	orrs	r3, r1
20000200:	b2db      	uxtb	r3, r3
20000202:	7013      	strb	r3, [r2, #0]
20000204:	46c0      	nop			; (mov r8, r8)
}
20000206:	46c0      	nop			; (mov r8, r8)
20000208:	46bd      	mov	sp, r7
2000020a:	b002      	add	sp, #8
2000020c:	bd80      	pop	{r7, pc}
2000020e:	46c0      	nop			; (mov r8, r8)
20000210:	40021014 	andmi	r1, r2, r4, lsl r0

20000214 <graphic_wait_ready>:

void graphic_wait_ready(){
20000214:	b580      	push	{r7, lr}
20000216:	af00      	add	r7, sp, #0
	*portOdrLowE = (*portOdrLowE &~ B_E);
20000218:	4b23      	ldr	r3, [pc, #140]	; (200002a8 <graphic_wait_ready+0x94>)
2000021a:	781b      	ldrb	r3, [r3, #0]
2000021c:	b2db      	uxtb	r3, r3
2000021e:	4a22      	ldr	r2, [pc, #136]	; (200002a8 <graphic_wait_ready+0x94>)
20000220:	2140      	movs	r1, #64	; 0x40
20000222:	438b      	bics	r3, r1
20000224:	b2db      	uxtb	r3, r3
20000226:	7013      	strb	r3, [r2, #0]
	*portModerE = 0x5555;
20000228:	4b20      	ldr	r3, [pc, #128]	; (200002ac <graphic_wait_ready+0x98>)
2000022a:	4a21      	ldr	r2, [pc, #132]	; (200002b0 <graphic_wait_ready+0x9c>)
2000022c:	601a      	str	r2, [r3, #0]
	*portOdrLowE = ((*portOdrLowE | B_RW) &~B_RS);
2000022e:	4b1e      	ldr	r3, [pc, #120]	; (200002a8 <graphic_wait_ready+0x94>)
20000230:	781b      	ldrb	r3, [r3, #0]
20000232:	b2db      	uxtb	r3, r3
20000234:	2202      	movs	r2, #2
20000236:	4313      	orrs	r3, r2
20000238:	b2db      	uxtb	r3, r3
2000023a:	4a1b      	ldr	r2, [pc, #108]	; (200002a8 <graphic_wait_ready+0x94>)
2000023c:	2101      	movs	r1, #1
2000023e:	438b      	bics	r3, r1
20000240:	b2db      	uxtb	r3, r3
20000242:	7013      	strb	r3, [r2, #0]
	delay_250ns();
20000244:	f7ff ff88 	bl	20000158 <delay_250ns>
	delay_250ns();
20000248:	f7ff ff86 	bl	20000158 <delay_250ns>
	while(*portOdrLowE & 0x80){
2000024c:	e017      	b.n	2000027e <graphic_wait_ready+0x6a>
		*portOdrLowE = (*portOdrLowE | B_E);
2000024e:	4b16      	ldr	r3, [pc, #88]	; (200002a8 <graphic_wait_ready+0x94>)
20000250:	781b      	ldrb	r3, [r3, #0]
20000252:	b2db      	uxtb	r3, r3
20000254:	4a14      	ldr	r2, [pc, #80]	; (200002a8 <graphic_wait_ready+0x94>)
20000256:	2140      	movs	r1, #64	; 0x40
20000258:	430b      	orrs	r3, r1
2000025a:	b2db      	uxtb	r3, r3
2000025c:	7013      	strb	r3, [r2, #0]
		delay_250ns();
2000025e:	f7ff ff7b 	bl	20000158 <delay_250ns>
		delay_250ns();
20000262:	f7ff ff79 	bl	20000158 <delay_250ns>
		*portOdrLowE = (*portOdrLowE &~ B_E);
20000266:	4b10      	ldr	r3, [pc, #64]	; (200002a8 <graphic_wait_ready+0x94>)
20000268:	781b      	ldrb	r3, [r3, #0]
2000026a:	b2db      	uxtb	r3, r3
2000026c:	4a0e      	ldr	r2, [pc, #56]	; (200002a8 <graphic_wait_ready+0x94>)
2000026e:	2140      	movs	r1, #64	; 0x40
20000270:	438b      	bics	r3, r1
20000272:	b2db      	uxtb	r3, r3
20000274:	7013      	strb	r3, [r2, #0]
		delay_250ns();
20000276:	f7ff ff6f 	bl	20000158 <delay_250ns>
		delay_250ns();
2000027a:	f7ff ff6d 	bl	20000158 <delay_250ns>
	while(*portOdrLowE & 0x80){
2000027e:	4b0a      	ldr	r3, [pc, #40]	; (200002a8 <graphic_wait_ready+0x94>)
20000280:	781b      	ldrb	r3, [r3, #0]
20000282:	b2db      	uxtb	r3, r3
20000284:	b25b      	sxtb	r3, r3
20000286:	2b00      	cmp	r3, #0
20000288:	dbe1      	blt.n	2000024e <graphic_wait_ready+0x3a>
	}
	*portOdrLowE = (*portOdrLowE | B_E);
2000028a:	4b07      	ldr	r3, [pc, #28]	; (200002a8 <graphic_wait_ready+0x94>)
2000028c:	781b      	ldrb	r3, [r3, #0]
2000028e:	b2db      	uxtb	r3, r3
20000290:	4a05      	ldr	r2, [pc, #20]	; (200002a8 <graphic_wait_ready+0x94>)
20000292:	2140      	movs	r1, #64	; 0x40
20000294:	430b      	orrs	r3, r1
20000296:	b2db      	uxtb	r3, r3
20000298:	7013      	strb	r3, [r2, #0]
	*portModerE = 0x55555555;
2000029a:	4b04      	ldr	r3, [pc, #16]	; (200002ac <graphic_wait_ready+0x98>)
2000029c:	4a05      	ldr	r2, [pc, #20]	; (200002b4 <graphic_wait_ready+0xa0>)
2000029e:	601a      	str	r2, [r3, #0]
}
200002a0:	46c0      	nop			; (mov r8, r8)
200002a2:	46bd      	mov	sp, r7
200002a4:	bd80      	pop	{r7, pc}
200002a6:	46c0      	nop			; (mov r8, r8)
200002a8:	40021014 	andmi	r1, r2, r4, lsl r0
200002ac:	40021000 	andmi	r1, r2, r0
200002b0:	00005555 	andeq	r5, r0, r5, asr r5
200002b4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002b8 <graphic_read>:

char graphic_read(unsigned char c){
200002b8:	b580      	push	{r7, lr}
200002ba:	b084      	sub	sp, #16
200002bc:	af00      	add	r7, sp, #0
200002be:	0002      	movs	r2, r0
200002c0:	1dfb      	adds	r3, r7, #7
200002c2:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE &~B_E);
200002c4:	4b29      	ldr	r3, [pc, #164]	; (2000036c <graphic_read+0xb4>)
200002c6:	781b      	ldrb	r3, [r3, #0]
200002c8:	b2db      	uxtb	r3, r3
200002ca:	4a28      	ldr	r2, [pc, #160]	; (2000036c <graphic_read+0xb4>)
200002cc:	2140      	movs	r1, #64	; 0x40
200002ce:	438b      	bics	r3, r1
200002d0:	b2db      	uxtb	r3, r3
200002d2:	7013      	strb	r3, [r2, #0]
	*portModerE = 0x00005555;
200002d4:	4b26      	ldr	r3, [pc, #152]	; (20000370 <graphic_read+0xb8>)
200002d6:	4a27      	ldr	r2, [pc, #156]	; (20000374 <graphic_read+0xbc>)
200002d8:	601a      	str	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE | B_RW | B_RS);
200002da:	4b24      	ldr	r3, [pc, #144]	; (2000036c <graphic_read+0xb4>)
200002dc:	781b      	ldrb	r3, [r3, #0]
200002de:	b2db      	uxtb	r3, r3
200002e0:	4a22      	ldr	r2, [pc, #136]	; (2000036c <graphic_read+0xb4>)
200002e2:	2103      	movs	r1, #3
200002e4:	430b      	orrs	r3, r1
200002e6:	b2db      	uxtb	r3, r3
200002e8:	7013      	strb	r3, [r2, #0]
	select_controller(c);
200002ea:	1dfb      	adds	r3, r7, #7
200002ec:	781b      	ldrb	r3, [r3, #0]
200002ee:	0018      	movs	r0, r3
200002f0:	f7ff ff48 	bl	20000184 <select_controller>
	delay_250ns();
200002f4:	f7ff ff30 	bl	20000158 <delay_250ns>
	delay_250ns();
200002f8:	f7ff ff2e 	bl	20000158 <delay_250ns>
	*portOdrLowE = (*portOdrLowE | B_E);
200002fc:	4b1b      	ldr	r3, [pc, #108]	; (2000036c <graphic_read+0xb4>)
200002fe:	781b      	ldrb	r3, [r3, #0]
20000300:	b2db      	uxtb	r3, r3
20000302:	4a1a      	ldr	r2, [pc, #104]	; (2000036c <graphic_read+0xb4>)
20000304:	2140      	movs	r1, #64	; 0x40
20000306:	430b      	orrs	r3, r1
20000308:	b2db      	uxtb	r3, r3
2000030a:	7013      	strb	r3, [r2, #0]
	delay_250ns();
2000030c:	f7ff ff24 	bl	20000158 <delay_250ns>
	delay_250ns();
20000310:	f7ff ff22 	bl	20000158 <delay_250ns>
	unsigned char RV = *portIdrHighE;
20000314:	4a18      	ldr	r2, [pc, #96]	; (20000378 <graphic_read+0xc0>)
20000316:	230f      	movs	r3, #15
20000318:	18fb      	adds	r3, r7, r3
2000031a:	7812      	ldrb	r2, [r2, #0]
2000031c:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE &~ B_E);
2000031e:	4b13      	ldr	r3, [pc, #76]	; (2000036c <graphic_read+0xb4>)
20000320:	781b      	ldrb	r3, [r3, #0]
20000322:	b2db      	uxtb	r3, r3
20000324:	4a11      	ldr	r2, [pc, #68]	; (2000036c <graphic_read+0xb4>)
20000326:	2140      	movs	r1, #64	; 0x40
20000328:	438b      	bics	r3, r1
2000032a:	b2db      	uxtb	r3, r3
2000032c:	7013      	strb	r3, [r2, #0]
	*portModerE = 0x55555555;
2000032e:	4b10      	ldr	r3, [pc, #64]	; (20000370 <graphic_read+0xb8>)
20000330:	4a12      	ldr	r2, [pc, #72]	; (2000037c <graphic_read+0xc4>)
20000332:	601a      	str	r2, [r3, #0]
	if(c & B_CS1){
20000334:	1dfb      	adds	r3, r7, #7
20000336:	781b      	ldrb	r3, [r3, #0]
20000338:	2208      	movs	r2, #8
2000033a:	4013      	ands	r3, r2
2000033c:	d004      	beq.n	20000348 <graphic_read+0x90>
	select_controller(B_CS1);
2000033e:	2008      	movs	r0, #8
20000340:	f7ff ff20 	bl	20000184 <select_controller>
	graphic_wait_ready();
20000344:	f7ff ff66 	bl	20000214 <graphic_wait_ready>
	}
	if(c & B_CS2){
20000348:	1dfb      	adds	r3, r7, #7
2000034a:	781b      	ldrb	r3, [r3, #0]
2000034c:	2210      	movs	r2, #16
2000034e:	4013      	ands	r3, r2
20000350:	d004      	beq.n	2000035c <graphic_read+0xa4>
	select_controller(B_CS2);
20000352:	2010      	movs	r0, #16
20000354:	f7ff ff16 	bl	20000184 <select_controller>
	graphic_wait_ready();
20000358:	f7ff ff5c 	bl	20000214 <graphic_wait_ready>
	}

	return RV;
2000035c:	230f      	movs	r3, #15
2000035e:	18fb      	adds	r3, r7, r3
20000360:	781b      	ldrb	r3, [r3, #0]
}
20000362:	0018      	movs	r0, r3
20000364:	46bd      	mov	sp, r7
20000366:	b004      	add	sp, #16
20000368:	bd80      	pop	{r7, pc}
2000036a:	46c0      	nop			; (mov r8, r8)
2000036c:	40021014 	andmi	r1, r2, r4, lsl r0
20000370:	40021000 	andmi	r1, r2, r0
20000374:	00005555 	andeq	r5, r0, r5, asr r5
20000378:	40021011 	andmi	r1, r2, r1, lsl r0
2000037c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000380 <graphic_write>:

void graphic_write(unsigned char val, unsigned char c){
20000380:	b580      	push	{r7, lr}
20000382:	b082      	sub	sp, #8
20000384:	af00      	add	r7, sp, #0
20000386:	0002      	movs	r2, r0
20000388:	1dfb      	adds	r3, r7, #7
2000038a:	701a      	strb	r2, [r3, #0]
2000038c:	1dbb      	adds	r3, r7, #6
2000038e:	1c0a      	adds	r2, r1, #0
20000390:	701a      	strb	r2, [r3, #0]
	*portOdrHighE = val;
20000392:	4a23      	ldr	r2, [pc, #140]	; (20000420 <graphic_write+0xa0>)
20000394:	1dfb      	adds	r3, r7, #7
20000396:	781b      	ldrb	r3, [r3, #0]
20000398:	7013      	strb	r3, [r2, #0]
	select_controller(c);
2000039a:	1dbb      	adds	r3, r7, #6
2000039c:	781b      	ldrb	r3, [r3, #0]
2000039e:	0018      	movs	r0, r3
200003a0:	f7ff fef0 	bl	20000184 <select_controller>
	delay_250ns();
200003a4:	f7ff fed8 	bl	20000158 <delay_250ns>
	delay_250ns();
200003a8:	f7ff fed6 	bl	20000158 <delay_250ns>
	*portOdrLowE = (*portOdrLowE | B_E);
200003ac:	4b1d      	ldr	r3, [pc, #116]	; (20000424 <graphic_write+0xa4>)
200003ae:	781b      	ldrb	r3, [r3, #0]
200003b0:	b2db      	uxtb	r3, r3
200003b2:	4a1c      	ldr	r2, [pc, #112]	; (20000424 <graphic_write+0xa4>)
200003b4:	2140      	movs	r1, #64	; 0x40
200003b6:	430b      	orrs	r3, r1
200003b8:	b2db      	uxtb	r3, r3
200003ba:	7013      	strb	r3, [r2, #0]
	delay_250ns();
200003bc:	f7ff fecc 	bl	20000158 <delay_250ns>
	delay_250ns();
200003c0:	f7ff feca 	bl	20000158 <delay_250ns>
	*portOdrLowE = (*portOdrLowE &~ B_E);
200003c4:	4b17      	ldr	r3, [pc, #92]	; (20000424 <graphic_write+0xa4>)
200003c6:	781b      	ldrb	r3, [r3, #0]
200003c8:	b2db      	uxtb	r3, r3
200003ca:	4a16      	ldr	r2, [pc, #88]	; (20000424 <graphic_write+0xa4>)
200003cc:	2140      	movs	r1, #64	; 0x40
200003ce:	438b      	bics	r3, r1
200003d0:	b2db      	uxtb	r3, r3
200003d2:	7013      	strb	r3, [r2, #0]
	if(c & B_CS1){
200003d4:	1dbb      	adds	r3, r7, #6
200003d6:	781b      	ldrb	r3, [r3, #0]
200003d8:	2208      	movs	r2, #8
200003da:	4013      	ands	r3, r2
200003dc:	d004      	beq.n	200003e8 <graphic_write+0x68>
		select_controller(B_CS1);
200003de:	2008      	movs	r0, #8
200003e0:	f7ff fed0 	bl	20000184 <select_controller>
		graphic_wait_ready();
200003e4:	f7ff ff16 	bl	20000214 <graphic_wait_ready>
	}
	if(c & B_CS2){
200003e8:	1dbb      	adds	r3, r7, #6
200003ea:	781b      	ldrb	r3, [r3, #0]
200003ec:	2210      	movs	r2, #16
200003ee:	4013      	ands	r3, r2
200003f0:	d004      	beq.n	200003fc <graphic_write+0x7c>
		select_controller(B_CS2);
200003f2:	2010      	movs	r0, #16
200003f4:	f7ff fec6 	bl	20000184 <select_controller>
		graphic_wait_ready();
200003f8:	f7ff ff0c 	bl	20000214 <graphic_wait_ready>
	}
	*portOdrHighE = 0;
200003fc:	4b08      	ldr	r3, [pc, #32]	; (20000420 <graphic_write+0xa0>)
200003fe:	2200      	movs	r2, #0
20000400:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE | B_E);
20000402:	4b08      	ldr	r3, [pc, #32]	; (20000424 <graphic_write+0xa4>)
20000404:	781b      	ldrb	r3, [r3, #0]
20000406:	b2db      	uxtb	r3, r3
20000408:	4a06      	ldr	r2, [pc, #24]	; (20000424 <graphic_write+0xa4>)
2000040a:	2140      	movs	r1, #64	; 0x40
2000040c:	430b      	orrs	r3, r1
2000040e:	b2db      	uxtb	r3, r3
20000410:	7013      	strb	r3, [r2, #0]
	select_controller(0);
20000412:	2000      	movs	r0, #0
20000414:	f7ff feb6 	bl	20000184 <select_controller>
}
20000418:	46c0      	nop			; (mov r8, r8)
2000041a:	46bd      	mov	sp, r7
2000041c:	b002      	add	sp, #8
2000041e:	bd80      	pop	{r7, pc}
20000420:	40021015 	andmi	r1, r2, r5, lsl r0
20000424:	40021014 	andmi	r1, r2, r4, lsl r0

20000428 <graphic_write_command>:

void graphic_write_command(unsigned char cmd, unsigned char c){
20000428:	b580      	push	{r7, lr}
2000042a:	b082      	sub	sp, #8
2000042c:	af00      	add	r7, sp, #0
2000042e:	0002      	movs	r2, r0
20000430:	1dfb      	adds	r3, r7, #7
20000432:	701a      	strb	r2, [r3, #0]
20000434:	1dbb      	adds	r3, r7, #6
20000436:	1c0a      	adds	r2, r1, #0
20000438:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE &~ B_E);
2000043a:	4b10      	ldr	r3, [pc, #64]	; (2000047c <graphic_write_command+0x54>)
2000043c:	781b      	ldrb	r3, [r3, #0]
2000043e:	b2db      	uxtb	r3, r3
20000440:	4a0e      	ldr	r2, [pc, #56]	; (2000047c <graphic_write_command+0x54>)
20000442:	2140      	movs	r1, #64	; 0x40
20000444:	438b      	bics	r3, r1
20000446:	b2db      	uxtb	r3, r3
20000448:	7013      	strb	r3, [r2, #0]
	select_controller(c);
2000044a:	1dbb      	adds	r3, r7, #6
2000044c:	781b      	ldrb	r3, [r3, #0]
2000044e:	0018      	movs	r0, r3
20000450:	f7ff fe98 	bl	20000184 <select_controller>
	*portOdrLowE = (*portOdrLowE &~B_RS &~B_RW);
20000454:	4b09      	ldr	r3, [pc, #36]	; (2000047c <graphic_write_command+0x54>)
20000456:	781b      	ldrb	r3, [r3, #0]
20000458:	b2db      	uxtb	r3, r3
2000045a:	4a08      	ldr	r2, [pc, #32]	; (2000047c <graphic_write_command+0x54>)
2000045c:	2103      	movs	r1, #3
2000045e:	438b      	bics	r3, r1
20000460:	b2db      	uxtb	r3, r3
20000462:	7013      	strb	r3, [r2, #0]
	graphic_write(cmd, c);
20000464:	1dbb      	adds	r3, r7, #6
20000466:	781a      	ldrb	r2, [r3, #0]
20000468:	1dfb      	adds	r3, r7, #7
2000046a:	781b      	ldrb	r3, [r3, #0]
2000046c:	0011      	movs	r1, r2
2000046e:	0018      	movs	r0, r3
20000470:	f7ff ff86 	bl	20000380 <graphic_write>
}
20000474:	46c0      	nop			; (mov r8, r8)
20000476:	46bd      	mov	sp, r7
20000478:	b002      	add	sp, #8
2000047a:	bd80      	pop	{r7, pc}
2000047c:	40021014 	andmi	r1, r2, r4, lsl r0

20000480 <graphic_write_data>:

void graphic_write_data(unsigned char data, unsigned char c){
20000480:	b580      	push	{r7, lr}
20000482:	b082      	sub	sp, #8
20000484:	af00      	add	r7, sp, #0
20000486:	0002      	movs	r2, r0
20000488:	1dfb      	adds	r3, r7, #7
2000048a:	701a      	strb	r2, [r3, #0]
2000048c:	1dbb      	adds	r3, r7, #6
2000048e:	1c0a      	adds	r2, r1, #0
20000490:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE &~ B_E);
20000492:	4b12      	ldr	r3, [pc, #72]	; (200004dc <graphic_write_data+0x5c>)
20000494:	781b      	ldrb	r3, [r3, #0]
20000496:	b2db      	uxtb	r3, r3
20000498:	4a10      	ldr	r2, [pc, #64]	; (200004dc <graphic_write_data+0x5c>)
2000049a:	2140      	movs	r1, #64	; 0x40
2000049c:	438b      	bics	r3, r1
2000049e:	b2db      	uxtb	r3, r3
200004a0:	7013      	strb	r3, [r2, #0]
	select_controller(c);
200004a2:	1dbb      	adds	r3, r7, #6
200004a4:	781b      	ldrb	r3, [r3, #0]
200004a6:	0018      	movs	r0, r3
200004a8:	f7ff fe6c 	bl	20000184 <select_controller>
	*portOdrLowE = ((*portOdrLowE | B_RS) &~B_RW);
200004ac:	4b0b      	ldr	r3, [pc, #44]	; (200004dc <graphic_write_data+0x5c>)
200004ae:	781b      	ldrb	r3, [r3, #0]
200004b0:	b2db      	uxtb	r3, r3
200004b2:	2201      	movs	r2, #1
200004b4:	4313      	orrs	r3, r2
200004b6:	b2db      	uxtb	r3, r3
200004b8:	4a08      	ldr	r2, [pc, #32]	; (200004dc <graphic_write_data+0x5c>)
200004ba:	2102      	movs	r1, #2
200004bc:	438b      	bics	r3, r1
200004be:	b2db      	uxtb	r3, r3
200004c0:	7013      	strb	r3, [r2, #0]
	graphic_write(data, c);
200004c2:	1dbb      	adds	r3, r7, #6
200004c4:	781a      	ldrb	r2, [r3, #0]
200004c6:	1dfb      	adds	r3, r7, #7
200004c8:	781b      	ldrb	r3, [r3, #0]
200004ca:	0011      	movs	r1, r2
200004cc:	0018      	movs	r0, r3
200004ce:	f7ff ff57 	bl	20000380 <graphic_write>
}
200004d2:	46c0      	nop			; (mov r8, r8)
200004d4:	46bd      	mov	sp, r7
200004d6:	b002      	add	sp, #8
200004d8:	bd80      	pop	{r7, pc}
200004da:	46c0      	nop			; (mov r8, r8)
200004dc:	40021014 	andmi	r1, r2, r4, lsl r0

200004e0 <graphic_read_data>:

unsigned char graphic_read_data(unsigned char c){
200004e0:	b580      	push	{r7, lr}
200004e2:	b082      	sub	sp, #8
200004e4:	af00      	add	r7, sp, #0
200004e6:	0002      	movs	r2, r0
200004e8:	1dfb      	adds	r3, r7, #7
200004ea:	701a      	strb	r2, [r3, #0]
	graphic_read(c);
200004ec:	1dfb      	adds	r3, r7, #7
200004ee:	781b      	ldrb	r3, [r3, #0]
200004f0:	0018      	movs	r0, r3
200004f2:	f7ff fee1 	bl	200002b8 <graphic_read>
	return graphic_read(c);
200004f6:	1dfb      	adds	r3, r7, #7
200004f8:	781b      	ldrb	r3, [r3, #0]
200004fa:	0018      	movs	r0, r3
200004fc:	f7ff fedc 	bl	200002b8 <graphic_read>
20000500:	0003      	movs	r3, r0
}
20000502:	0018      	movs	r0, r3
20000504:	46bd      	mov	sp, r7
20000506:	b002      	add	sp, #8
20000508:	bd80      	pop	{r7, pc}

2000050a <init_lcd>:

void init_lcd(void){
2000050a:	b580      	push	{r7, lr}
2000050c:	af00      	add	r7, sp, #0
	*portModerE = 0x55555555;
2000050e:	4b03      	ldr	r3, [pc, #12]	; (2000051c <init_lcd+0x12>)
20000510:	4a03      	ldr	r2, [pc, #12]	; (20000520 <init_lcd+0x16>)
20000512:	601a      	str	r2, [r3, #0]
}
20000514:	46c0      	nop			; (mov r8, r8)
20000516:	46bd      	mov	sp, r7
20000518:	bd80      	pop	{r7, pc}
2000051a:	46c0      	nop			; (mov r8, r8)
2000051c:	40021000 	andmi	r1, r2, r0
20000520:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000524 <graphic_initialize>:

void graphic_initialize(void){
20000524:	b580      	push	{r7, lr}
20000526:	af00      	add	r7, sp, #0
	*portOdrLowE = (*portOdrLowE | B_E);
20000528:	4b1e      	ldr	r3, [pc, #120]	; (200005a4 <graphic_initialize+0x80>)
2000052a:	781b      	ldrb	r3, [r3, #0]
2000052c:	b2db      	uxtb	r3, r3
2000052e:	4a1d      	ldr	r2, [pc, #116]	; (200005a4 <graphic_initialize+0x80>)
20000530:	2140      	movs	r1, #64	; 0x40
20000532:	430b      	orrs	r3, r1
20000534:	b2db      	uxtb	r3, r3
20000536:	7013      	strb	r3, [r2, #0]
	*portOdrLowE = (*portOdrLowE &~ B_SELECT );
20000538:	4b1a      	ldr	r3, [pc, #104]	; (200005a4 <graphic_initialize+0x80>)
2000053a:	781b      	ldrb	r3, [r3, #0]
2000053c:	b2db      	uxtb	r3, r3
2000053e:	4a19      	ldr	r2, [pc, #100]	; (200005a4 <graphic_initialize+0x80>)
20000540:	2104      	movs	r1, #4
20000542:	438b      	bics	r3, r1
20000544:	b2db      	uxtb	r3, r3
20000546:	7013      	strb	r3, [r2, #0]
	#ifdef SIMULATOR
		delay_mikro(10);
20000548:	200a      	movs	r0, #10
2000054a:	f7ff fe0a 	bl	20000162 <delay_mikro>
	#endif
	*portOdrLowE = (*portOdrLowE &~(B_RST | B_CS1 | B_CS2 | B_E));
2000054e:	4b15      	ldr	r3, [pc, #84]	; (200005a4 <graphic_initialize+0x80>)
20000550:	781b      	ldrb	r3, [r3, #0]
20000552:	b2db      	uxtb	r3, r3
20000554:	4a13      	ldr	r2, [pc, #76]	; (200005a4 <graphic_initialize+0x80>)
20000556:	2178      	movs	r1, #120	; 0x78
20000558:	438b      	bics	r3, r1
2000055a:	b2db      	uxtb	r3, r3
2000055c:	7013      	strb	r3, [r2, #0]
	#ifndef SIMULATOR
		delay_milli(30);
	#endif
	*portOdrLowE = (*portOdrLowE | B_RST);
2000055e:	4b11      	ldr	r3, [pc, #68]	; (200005a4 <graphic_initialize+0x80>)
20000560:	781b      	ldrb	r3, [r3, #0]
20000562:	b2db      	uxtb	r3, r3
20000564:	4a0f      	ldr	r2, [pc, #60]	; (200005a4 <graphic_initialize+0x80>)
20000566:	2120      	movs	r1, #32
20000568:	430b      	orrs	r3, r1
2000056a:	b2db      	uxtb	r3, r3
2000056c:	7013      	strb	r3, [r2, #0]
	graphic_write_command(0x3E, B_CS1|B_CS2);
2000056e:	2118      	movs	r1, #24
20000570:	203e      	movs	r0, #62	; 0x3e
20000572:	f7ff ff59 	bl	20000428 <graphic_write_command>
	graphic_write_command(0x3F, B_CS1|B_CS2);
20000576:	2118      	movs	r1, #24
20000578:	203f      	movs	r0, #63	; 0x3f
2000057a:	f7ff ff55 	bl	20000428 <graphic_write_command>
	graphic_write_command(0xC0, B_CS1|B_CS2);
2000057e:	2118      	movs	r1, #24
20000580:	20c0      	movs	r0, #192	; 0xc0
20000582:	f7ff ff51 	bl	20000428 <graphic_write_command>
	graphic_write_command(0x40, B_CS1|B_CS2);
20000586:	2118      	movs	r1, #24
20000588:	2040      	movs	r0, #64	; 0x40
2000058a:	f7ff ff4d 	bl	20000428 <graphic_write_command>
	graphic_write_command(0xB8, B_CS1|B_CS2);
2000058e:	2118      	movs	r1, #24
20000590:	20b8      	movs	r0, #184	; 0xb8
20000592:	f7ff ff49 	bl	20000428 <graphic_write_command>
	select_controller(0);
20000596:	2000      	movs	r0, #0
20000598:	f7ff fdf4 	bl	20000184 <select_controller>
}
2000059c:	46c0      	nop			; (mov r8, r8)
2000059e:	46bd      	mov	sp, r7
200005a0:	bd80      	pop	{r7, pc}
200005a2:	46c0      	nop			; (mov r8, r8)
200005a4:	40021014 	andmi	r1, r2, r4, lsl r0

200005a8 <graphic_clean_screen>:

void graphic_clean_screen(void){
200005a8:	b580      	push	{r7, lr}
200005aa:	b082      	sub	sp, #8
200005ac:	af00      	add	r7, sp, #0
	for(int i=0; i < 8; i++){
200005ae:	2300      	movs	r3, #0
200005b0:	607b      	str	r3, [r7, #4]
200005b2:	e01e      	b.n	200005f2 <graphic_clean_screen+0x4a>
		graphic_write_command(0xB8|i, B_CS1|B_CS2);
200005b4:	687b      	ldr	r3, [r7, #4]
200005b6:	b25b      	sxtb	r3, r3
200005b8:	2248      	movs	r2, #72	; 0x48
200005ba:	4252      	negs	r2, r2
200005bc:	4313      	orrs	r3, r2
200005be:	b25b      	sxtb	r3, r3
200005c0:	b2db      	uxtb	r3, r3
200005c2:	2118      	movs	r1, #24
200005c4:	0018      	movs	r0, r3
200005c6:	f7ff ff2f 	bl	20000428 <graphic_write_command>
		graphic_write_command(0x40, B_CS1|B_CS2);
200005ca:	2118      	movs	r1, #24
200005cc:	2040      	movs	r0, #64	; 0x40
200005ce:	f7ff ff2b 	bl	20000428 <graphic_write_command>
		for(int j=0; j<64; j++){
200005d2:	2300      	movs	r3, #0
200005d4:	603b      	str	r3, [r7, #0]
200005d6:	e006      	b.n	200005e6 <graphic_clean_screen+0x3e>
			graphic_write_data(0,B_CS1|B_CS2);
200005d8:	2118      	movs	r1, #24
200005da:	2000      	movs	r0, #0
200005dc:	f7ff ff50 	bl	20000480 <graphic_write_data>
		for(int j=0; j<64; j++){
200005e0:	683b      	ldr	r3, [r7, #0]
200005e2:	3301      	adds	r3, #1
200005e4:	603b      	str	r3, [r7, #0]
200005e6:	683b      	ldr	r3, [r7, #0]
200005e8:	2b3f      	cmp	r3, #63	; 0x3f
200005ea:	ddf5      	ble.n	200005d8 <graphic_clean_screen+0x30>
	for(int i=0; i < 8; i++){
200005ec:	687b      	ldr	r3, [r7, #4]
200005ee:	3301      	adds	r3, #1
200005f0:	607b      	str	r3, [r7, #4]
200005f2:	687b      	ldr	r3, [r7, #4]
200005f4:	2b07      	cmp	r3, #7
200005f6:	dddd      	ble.n	200005b4 <graphic_clean_screen+0xc>
		}
	}
}
200005f8:	46c0      	nop			; (mov r8, r8)
200005fa:	46bd      	mov	sp, r7
200005fc:	b002      	add	sp, #8
200005fe:	bd80      	pop	{r7, pc}

20000600 <graphic_pixel>:

void graphic_pixel(unsigned char x, unsigned char y, unsigned char set){
20000600:	b5b0      	push	{r4, r5, r7, lr}
20000602:	b084      	sub	sp, #16
20000604:	af00      	add	r7, sp, #0
20000606:	0004      	movs	r4, r0
20000608:	0008      	movs	r0, r1
2000060a:	0011      	movs	r1, r2
2000060c:	1dfb      	adds	r3, r7, #7
2000060e:	1c22      	adds	r2, r4, #0
20000610:	701a      	strb	r2, [r3, #0]
20000612:	1dbb      	adds	r3, r7, #6
20000614:	1c02      	adds	r2, r0, #0
20000616:	701a      	strb	r2, [r3, #0]
20000618:	1d7b      	adds	r3, r7, #5
2000061a:	1c0a      	adds	r2, r1, #0
2000061c:	701a      	strb	r2, [r3, #0]
	x -= 1;
2000061e:	1dfb      	adds	r3, r7, #7
20000620:	1dfa      	adds	r2, r7, #7
20000622:	7812      	ldrb	r2, [r2, #0]
20000624:	3a01      	subs	r2, #1
20000626:	701a      	strb	r2, [r3, #0]
	y -= 1;
20000628:	1dbb      	adds	r3, r7, #6
2000062a:	1dba      	adds	r2, r7, #6
2000062c:	7812      	ldrb	r2, [r2, #0]
2000062e:	3a01      	subs	r2, #1
20000630:	701a      	strb	r2, [r3, #0]
	char controller;
	if (x > 127 | y > 63)
20000632:	1dfb      	adds	r3, r7, #7
20000634:	781b      	ldrb	r3, [r3, #0]
20000636:	b25b      	sxtb	r3, r3
20000638:	b2db      	uxtb	r3, r3
2000063a:	09db      	lsrs	r3, r3, #7
2000063c:	b2da      	uxtb	r2, r3
2000063e:	1dbb      	adds	r3, r7, #6
20000640:	781b      	ldrb	r3, [r3, #0]
20000642:	213f      	movs	r1, #63	; 0x3f
20000644:	4299      	cmp	r1, r3
20000646:	419b      	sbcs	r3, r3
20000648:	425b      	negs	r3, r3
2000064a:	b2db      	uxtb	r3, r3
2000064c:	4313      	orrs	r3, r2
2000064e:	b2db      	uxtb	r3, r3
20000650:	2b00      	cmp	r3, #0
20000652:	d16f      	bne.n	20000734 <graphic_pixel+0x134>
		{return;}
	char index = (1<<(y%8));
20000654:	1dbb      	adds	r3, r7, #6
20000656:	781b      	ldrb	r3, [r3, #0]
20000658:	2207      	movs	r2, #7
2000065a:	4013      	ands	r3, r2
2000065c:	2201      	movs	r2, #1
2000065e:	409a      	lsls	r2, r3
20000660:	230d      	movs	r3, #13
20000662:	18fb      	adds	r3, r7, r3
20000664:	701a      	strb	r2, [r3, #0]
	if (x<64){
20000666:	1dfb      	adds	r3, r7, #7
20000668:	781b      	ldrb	r3, [r3, #0]
2000066a:	2b3f      	cmp	r3, #63	; 0x3f
2000066c:	d804      	bhi.n	20000678 <graphic_pixel+0x78>
		controller = B_CS1;
2000066e:	230f      	movs	r3, #15
20000670:	18fb      	adds	r3, r7, r3
20000672:	2208      	movs	r2, #8
20000674:	701a      	strb	r2, [r3, #0]
20000676:	e008      	b.n	2000068a <graphic_pixel+0x8a>
	}
	else{
		controller = B_CS2;
20000678:	230f      	movs	r3, #15
2000067a:	18fb      	adds	r3, r7, r3
2000067c:	2210      	movs	r2, #16
2000067e:	701a      	strb	r2, [r3, #0]
		x -= 64;
20000680:	1dfb      	adds	r3, r7, #7
20000682:	1dfa      	adds	r2, r7, #7
20000684:	7812      	ldrb	r2, [r2, #0]
20000686:	3a40      	subs	r2, #64	; 0x40
20000688:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_command(0x40 | x, controller);
2000068a:	1dfb      	adds	r3, r7, #7
2000068c:	781b      	ldrb	r3, [r3, #0]
2000068e:	2240      	movs	r2, #64	; 0x40
20000690:	4313      	orrs	r3, r2
20000692:	b2da      	uxtb	r2, r3
20000694:	250f      	movs	r5, #15
20000696:	197b      	adds	r3, r7, r5
20000698:	781b      	ldrb	r3, [r3, #0]
2000069a:	0019      	movs	r1, r3
2000069c:	0010      	movs	r0, r2
2000069e:	f7ff fec3 	bl	20000428 <graphic_write_command>
	graphic_write_command(0xB8 | (y/8), controller);
200006a2:	1dbb      	adds	r3, r7, #6
200006a4:	781b      	ldrb	r3, [r3, #0]
200006a6:	08db      	lsrs	r3, r3, #3
200006a8:	b2db      	uxtb	r3, r3
200006aa:	2248      	movs	r2, #72	; 0x48
200006ac:	4252      	negs	r2, r2
200006ae:	4313      	orrs	r3, r2
200006b0:	b2da      	uxtb	r2, r3
200006b2:	197b      	adds	r3, r7, r5
200006b4:	781b      	ldrb	r3, [r3, #0]
200006b6:	0019      	movs	r1, r3
200006b8:	0010      	movs	r0, r2
200006ba:	f7ff feb5 	bl	20000428 <graphic_write_command>
	unsigned char temp = graphic_read_data(controller);
200006be:	230e      	movs	r3, #14
200006c0:	18fc      	adds	r4, r7, r3
200006c2:	197b      	adds	r3, r7, r5
200006c4:	781b      	ldrb	r3, [r3, #0]
200006c6:	0018      	movs	r0, r3
200006c8:	f7ff ff0a 	bl	200004e0 <graphic_read_data>
200006cc:	0003      	movs	r3, r0
200006ce:	7023      	strb	r3, [r4, #0]
	graphic_write_command(0x40 | x, controller);
200006d0:	1dfb      	adds	r3, r7, #7
200006d2:	781b      	ldrb	r3, [r3, #0]
200006d4:	2240      	movs	r2, #64	; 0x40
200006d6:	4313      	orrs	r3, r2
200006d8:	b2da      	uxtb	r2, r3
200006da:	197b      	adds	r3, r7, r5
200006dc:	781b      	ldrb	r3, [r3, #0]
200006de:	0019      	movs	r1, r3
200006e0:	0010      	movs	r0, r2
200006e2:	f7ff fea1 	bl	20000428 <graphic_write_command>
	if(set){
200006e6:	1d7b      	adds	r3, r7, #5
200006e8:	781b      	ldrb	r3, [r3, #0]
200006ea:	2b00      	cmp	r3, #0
200006ec:	d009      	beq.n	20000702 <graphic_pixel+0x102>
		temp = temp | index;
200006ee:	220e      	movs	r2, #14
200006f0:	18bb      	adds	r3, r7, r2
200006f2:	18b9      	adds	r1, r7, r2
200006f4:	220d      	movs	r2, #13
200006f6:	18ba      	adds	r2, r7, r2
200006f8:	7809      	ldrb	r1, [r1, #0]
200006fa:	7812      	ldrb	r2, [r2, #0]
200006fc:	430a      	orrs	r2, r1
200006fe:	701a      	strb	r2, [r3, #0]
20000700:	e00d      	b.n	2000071e <graphic_pixel+0x11e>
	}
	else{
		temp = temp &~index;
20000702:	230d      	movs	r3, #13
20000704:	18fb      	adds	r3, r7, r3
20000706:	781b      	ldrb	r3, [r3, #0]
20000708:	b25b      	sxtb	r3, r3
2000070a:	43db      	mvns	r3, r3
2000070c:	b25b      	sxtb	r3, r3
2000070e:	210e      	movs	r1, #14
20000710:	187a      	adds	r2, r7, r1
20000712:	7812      	ldrb	r2, [r2, #0]
20000714:	b252      	sxtb	r2, r2
20000716:	4013      	ands	r3, r2
20000718:	b25a      	sxtb	r2, r3
2000071a:	187b      	adds	r3, r7, r1
2000071c:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_data(temp, controller);
2000071e:	230f      	movs	r3, #15
20000720:	18fb      	adds	r3, r7, r3
20000722:	781a      	ldrb	r2, [r3, #0]
20000724:	230e      	movs	r3, #14
20000726:	18fb      	adds	r3, r7, r3
20000728:	781b      	ldrb	r3, [r3, #0]
2000072a:	0011      	movs	r1, r2
2000072c:	0018      	movs	r0, r3
2000072e:	f7ff fea7 	bl	20000480 <graphic_write_data>
20000732:	e000      	b.n	20000736 <graphic_pixel+0x136>
		{return;}
20000734:	46c0      	nop			; (mov r8, r8)
}
20000736:	46bd      	mov	sp, r7
20000738:	b004      	add	sp, #16
2000073a:	bdb0      	pop	{r4, r5, r7, pc}

2000073c <lcdBufferDraw>:

void lcdBufferDraw(plcdBuffer toDraw){
2000073c:	b5f0      	push	{r4, r5, r6, r7, lr}
2000073e:	b085      	sub	sp, #20
20000740:	af00      	add	r7, sp, #0
20000742:	6078      	str	r0, [r7, #4]
	//char (*display)[8] = (char(*)[8])toDraw->display;
	
	unsigned char x,i,j;
	unsigned char controller, data;
	for(i=0; i<128; i++){
20000744:	230e      	movs	r3, #14
20000746:	18fb      	adds	r3, r7, r3
20000748:	2200      	movs	r2, #0
2000074a:	701a      	strb	r2, [r3, #0]
2000074c:	e097      	b.n	2000087e <lcdBufferDraw+0x142>
		for(j=0; j<8; j++){
2000074e:	230d      	movs	r3, #13
20000750:	18fb      	adds	r3, r7, r3
20000752:	2200      	movs	r2, #0
20000754:	701a      	strb	r2, [r3, #0]
20000756:	e086      	b.n	20000866 <lcdBufferDraw+0x12a>
			char updated = (toDraw->changeLog[i] &~ (1<<j));
20000758:	230e      	movs	r3, #14
2000075a:	18fb      	adds	r3, r7, r3
2000075c:	781a      	ldrb	r2, [r3, #0]
2000075e:	6879      	ldr	r1, [r7, #4]
20000760:	2380      	movs	r3, #128	; 0x80
20000762:	00db      	lsls	r3, r3, #3
20000764:	188a      	adds	r2, r1, r2
20000766:	18d3      	adds	r3, r2, r3
20000768:	781b      	ldrb	r3, [r3, #0]
2000076a:	b25b      	sxtb	r3, r3
2000076c:	220d      	movs	r2, #13
2000076e:	18ba      	adds	r2, r7, r2
20000770:	7812      	ldrb	r2, [r2, #0]
20000772:	2101      	movs	r1, #1
20000774:	4091      	lsls	r1, r2
20000776:	000a      	movs	r2, r1
20000778:	b252      	sxtb	r2, r2
2000077a:	43d2      	mvns	r2, r2
2000077c:	b252      	sxtb	r2, r2
2000077e:	4013      	ands	r3, r2
20000780:	b25a      	sxtb	r2, r3
20000782:	210b      	movs	r1, #11
20000784:	187b      	adds	r3, r7, r1
20000786:	701a      	strb	r2, [r3, #0]
			if(updated){
20000788:	187b      	adds	r3, r7, r1
2000078a:	781b      	ldrb	r3, [r3, #0]
2000078c:	2b00      	cmp	r3, #0
2000078e:	d064      	beq.n	2000085a <lcdBufferDraw+0x11e>
				if(i<64){
20000790:	230e      	movs	r3, #14
20000792:	18fb      	adds	r3, r7, r3
20000794:	781b      	ldrb	r3, [r3, #0]
20000796:	2b3f      	cmp	r3, #63	; 0x3f
20000798:	d80a      	bhi.n	200007b0 <lcdBufferDraw+0x74>
					controller = B_CS1;
2000079a:	230c      	movs	r3, #12
2000079c:	18fb      	adds	r3, r7, r3
2000079e:	2208      	movs	r2, #8
200007a0:	701a      	strb	r2, [r3, #0]
					x=i;
200007a2:	230f      	movs	r3, #15
200007a4:	18fb      	adds	r3, r7, r3
200007a6:	220e      	movs	r2, #14
200007a8:	18ba      	adds	r2, r7, r2
200007aa:	7812      	ldrb	r2, [r2, #0]
200007ac:	701a      	strb	r2, [r3, #0]
200007ae:	e00a      	b.n	200007c6 <lcdBufferDraw+0x8a>
				}
				else{
					controller = B_CS2;
200007b0:	230c      	movs	r3, #12
200007b2:	18fb      	adds	r3, r7, r3
200007b4:	2210      	movs	r2, #16
200007b6:	701a      	strb	r2, [r3, #0]
					x = i-64;
200007b8:	230f      	movs	r3, #15
200007ba:	18fb      	adds	r3, r7, r3
200007bc:	220e      	movs	r2, #14
200007be:	18ba      	adds	r2, r7, r2
200007c0:	7812      	ldrb	r2, [r2, #0]
200007c2:	3a40      	subs	r2, #64	; 0x40
200007c4:	701a      	strb	r2, [r3, #0]
				}
				data = toDraw->display[i][j];
200007c6:	240e      	movs	r4, #14
200007c8:	193b      	adds	r3, r7, r4
200007ca:	7819      	ldrb	r1, [r3, #0]
200007cc:	250d      	movs	r5, #13
200007ce:	197b      	adds	r3, r7, r5
200007d0:	781a      	ldrb	r2, [r3, #0]
200007d2:	230a      	movs	r3, #10
200007d4:	18fb      	adds	r3, r7, r3
200007d6:	6878      	ldr	r0, [r7, #4]
200007d8:	00c9      	lsls	r1, r1, #3
200007da:	1841      	adds	r1, r0, r1
200007dc:	5c8a      	ldrb	r2, [r1, r2]
200007de:	701a      	strb	r2, [r3, #0]
				graphic_write_command(adress | x, controller);
200007e0:	220f      	movs	r2, #15
200007e2:	18bb      	adds	r3, r7, r2
200007e4:	781b      	ldrb	r3, [r3, #0]
200007e6:	2240      	movs	r2, #64	; 0x40
200007e8:	4313      	orrs	r3, r2
200007ea:	b2da      	uxtb	r2, r3
200007ec:	260c      	movs	r6, #12
200007ee:	19bb      	adds	r3, r7, r6
200007f0:	781b      	ldrb	r3, [r3, #0]
200007f2:	0019      	movs	r1, r3
200007f4:	0010      	movs	r0, r2
200007f6:	f7ff fe17 	bl	20000428 <graphic_write_command>
				graphic_write_command(page | j, controller);
200007fa:	197b      	adds	r3, r7, r5
200007fc:	781b      	ldrb	r3, [r3, #0]
200007fe:	2248      	movs	r2, #72	; 0x48
20000800:	4252      	negs	r2, r2
20000802:	4313      	orrs	r3, r2
20000804:	b2da      	uxtb	r2, r3
20000806:	19bb      	adds	r3, r7, r6
20000808:	781b      	ldrb	r3, [r3, #0]
2000080a:	0019      	movs	r1, r3
2000080c:	0010      	movs	r0, r2
2000080e:	f7ff fe0b 	bl	20000428 <graphic_write_command>
				graphic_write_data(data, controller);
20000812:	19bb      	adds	r3, r7, r6
20000814:	781a      	ldrb	r2, [r3, #0]
20000816:	230a      	movs	r3, #10
20000818:	18fb      	adds	r3, r7, r3
2000081a:	781b      	ldrb	r3, [r3, #0]
2000081c:	0011      	movs	r1, r2
2000081e:	0018      	movs	r0, r3
20000820:	f7ff fe2e 	bl	20000480 <graphic_write_data>
				toDraw->changeLog[i] = (toDraw->changeLog[i] | (1<<j));
20000824:	193b      	adds	r3, r7, r4
20000826:	781a      	ldrb	r2, [r3, #0]
20000828:	6879      	ldr	r1, [r7, #4]
2000082a:	2380      	movs	r3, #128	; 0x80
2000082c:	00db      	lsls	r3, r3, #3
2000082e:	188a      	adds	r2, r1, r2
20000830:	18d3      	adds	r3, r2, r3
20000832:	781b      	ldrb	r3, [r3, #0]
20000834:	b25a      	sxtb	r2, r3
20000836:	197b      	adds	r3, r7, r5
20000838:	781b      	ldrb	r3, [r3, #0]
2000083a:	2101      	movs	r1, #1
2000083c:	4099      	lsls	r1, r3
2000083e:	000b      	movs	r3, r1
20000840:	b25b      	sxtb	r3, r3
20000842:	4313      	orrs	r3, r2
20000844:	b259      	sxtb	r1, r3
20000846:	193b      	adds	r3, r7, r4
20000848:	781a      	ldrb	r2, [r3, #0]
2000084a:	b2c8      	uxtb	r0, r1
2000084c:	6879      	ldr	r1, [r7, #4]
2000084e:	2380      	movs	r3, #128	; 0x80
20000850:	00db      	lsls	r3, r3, #3
20000852:	188a      	adds	r2, r1, r2
20000854:	18d3      	adds	r3, r2, r3
20000856:	1c02      	adds	r2, r0, #0
20000858:	701a      	strb	r2, [r3, #0]
		for(j=0; j<8; j++){
2000085a:	210d      	movs	r1, #13
2000085c:	187b      	adds	r3, r7, r1
2000085e:	781a      	ldrb	r2, [r3, #0]
20000860:	187b      	adds	r3, r7, r1
20000862:	3201      	adds	r2, #1
20000864:	701a      	strb	r2, [r3, #0]
20000866:	230d      	movs	r3, #13
20000868:	18fb      	adds	r3, r7, r3
2000086a:	781b      	ldrb	r3, [r3, #0]
2000086c:	2b07      	cmp	r3, #7
2000086e:	d800      	bhi.n	20000872 <lcdBufferDraw+0x136>
20000870:	e772      	b.n	20000758 <lcdBufferDraw+0x1c>
	for(i=0; i<128; i++){
20000872:	210e      	movs	r1, #14
20000874:	187b      	adds	r3, r7, r1
20000876:	781a      	ldrb	r2, [r3, #0]
20000878:	187b      	adds	r3, r7, r1
2000087a:	3201      	adds	r2, #1
2000087c:	701a      	strb	r2, [r3, #0]
2000087e:	230e      	movs	r3, #14
20000880:	18fb      	adds	r3, r7, r3
20000882:	781b      	ldrb	r3, [r3, #0]
20000884:	b25b      	sxtb	r3, r3
20000886:	2b00      	cmp	r3, #0
20000888:	db00      	blt.n	2000088c <lcdBufferDraw+0x150>
2000088a:	e760      	b.n	2000074e <lcdBufferDraw+0x12>
			}
		}
	}
	
}
2000088c:	46c0      	nop			; (mov r8, r8)
2000088e:	46bd      	mov	sp, r7
20000890:	b005      	add	sp, #20
20000892:	bdf0      	pop	{r4, r5, r6, r7, pc}

20000894 <lcdBufferWritePixel>:

void lcdBufferWritePixel(plcdBuffer lcdBuff, unsigned char x, unsigned char y, unsigned char set){
20000894:	b590      	push	{r4, r7, lr}
20000896:	b085      	sub	sp, #20
20000898:	af00      	add	r7, sp, #0
2000089a:	6078      	str	r0, [r7, #4]
2000089c:	000c      	movs	r4, r1
2000089e:	0010      	movs	r0, r2
200008a0:	0019      	movs	r1, r3
200008a2:	1cfb      	adds	r3, r7, #3
200008a4:	1c22      	adds	r2, r4, #0
200008a6:	701a      	strb	r2, [r3, #0]
200008a8:	1cbb      	adds	r3, r7, #2
200008aa:	1c02      	adds	r2, r0, #0
200008ac:	701a      	strb	r2, [r3, #0]
200008ae:	1c7b      	adds	r3, r7, #1
200008b0:	1c0a      	adds	r2, r1, #0
200008b2:	701a      	strb	r2, [r3, #0]
	char controller;
	if (x > 127 | y > 63)
200008b4:	1cfb      	adds	r3, r7, #3
200008b6:	781b      	ldrb	r3, [r3, #0]
200008b8:	b25b      	sxtb	r3, r3
200008ba:	b2db      	uxtb	r3, r3
200008bc:	09db      	lsrs	r3, r3, #7
200008be:	b2da      	uxtb	r2, r3
200008c0:	1cbb      	adds	r3, r7, #2
200008c2:	781b      	ldrb	r3, [r3, #0]
200008c4:	213f      	movs	r1, #63	; 0x3f
200008c6:	4299      	cmp	r1, r3
200008c8:	419b      	sbcs	r3, r3
200008ca:	425b      	negs	r3, r3
200008cc:	b2db      	uxtb	r3, r3
200008ce:	4313      	orrs	r3, r2
200008d0:	b2db      	uxtb	r3, r3
200008d2:	2b00      	cmp	r3, #0
200008d4:	d16c      	bne.n	200009b0 <lcdBufferWritePixel+0x11c>
		{return;}
	if (x<64){
200008d6:	1cfb      	adds	r3, r7, #3
200008d8:	781b      	ldrb	r3, [r3, #0]
200008da:	2b3f      	cmp	r3, #63	; 0x3f
200008dc:	d804      	bhi.n	200008e8 <lcdBufferWritePixel+0x54>
		controller = B_CS1;
200008de:	230f      	movs	r3, #15
200008e0:	18fb      	adds	r3, r7, r3
200008e2:	2208      	movs	r2, #8
200008e4:	701a      	strb	r2, [r3, #0]
200008e6:	e003      	b.n	200008f0 <lcdBufferWritePixel+0x5c>
	}
	else{
		controller = B_CS2;
200008e8:	230f      	movs	r3, #15
200008ea:	18fb      	adds	r3, r7, r3
200008ec:	2210      	movs	r2, #16
200008ee:	701a      	strb	r2, [r3, #0]
	}
	char index = (1<<(y%8));
200008f0:	1cbb      	adds	r3, r7, #2
200008f2:	781b      	ldrb	r3, [r3, #0]
200008f4:	2207      	movs	r2, #7
200008f6:	4013      	ands	r3, r2
200008f8:	2201      	movs	r2, #1
200008fa:	409a      	lsls	r2, r3
200008fc:	230e      	movs	r3, #14
200008fe:	18fb      	adds	r3, r7, r3
20000900:	701a      	strb	r2, [r3, #0]
	if(set){
20000902:	1c7b      	adds	r3, r7, #1
20000904:	781b      	ldrb	r3, [r3, #0]
20000906:	2b00      	cmp	r3, #0
20000908:	d016      	beq.n	20000938 <lcdBufferWritePixel+0xa4>
		lcdBuff->display[x][y/8] |= index;
2000090a:	1cfb      	adds	r3, r7, #3
2000090c:	781b      	ldrb	r3, [r3, #0]
2000090e:	1cba      	adds	r2, r7, #2
20000910:	7812      	ldrb	r2, [r2, #0]
20000912:	08d2      	lsrs	r2, r2, #3
20000914:	b2d0      	uxtb	r0, r2
20000916:	0001      	movs	r1, r0
20000918:	687a      	ldr	r2, [r7, #4]
2000091a:	00db      	lsls	r3, r3, #3
2000091c:	18d3      	adds	r3, r2, r3
2000091e:	5c59      	ldrb	r1, [r3, r1]
20000920:	1cfb      	adds	r3, r7, #3
20000922:	781b      	ldrb	r3, [r3, #0]
20000924:	220e      	movs	r2, #14
20000926:	18ba      	adds	r2, r7, r2
20000928:	7812      	ldrb	r2, [r2, #0]
2000092a:	430a      	orrs	r2, r1
2000092c:	b2d1      	uxtb	r1, r2
2000092e:	687a      	ldr	r2, [r7, #4]
20000930:	00db      	lsls	r3, r3, #3
20000932:	18d3      	adds	r3, r2, r3
20000934:	1c0a      	adds	r2, r1, #0
20000936:	541a      	strb	r2, [r3, r0]
	}
	if(!set){
20000938:	1c7b      	adds	r3, r7, #1
2000093a:	781b      	ldrb	r3, [r3, #0]
2000093c:	2b00      	cmp	r3, #0
2000093e:	d11b      	bne.n	20000978 <lcdBufferWritePixel+0xe4>
		lcdBuff->display[x][y/8] &= ~index;
20000940:	1cfb      	adds	r3, r7, #3
20000942:	781b      	ldrb	r3, [r3, #0]
20000944:	1cba      	adds	r2, r7, #2
20000946:	7812      	ldrb	r2, [r2, #0]
20000948:	08d2      	lsrs	r2, r2, #3
2000094a:	b2d1      	uxtb	r1, r2
2000094c:	0008      	movs	r0, r1
2000094e:	687a      	ldr	r2, [r7, #4]
20000950:	00db      	lsls	r3, r3, #3
20000952:	18d3      	adds	r3, r2, r3
20000954:	5c1b      	ldrb	r3, [r3, r0]
20000956:	b25b      	sxtb	r3, r3
20000958:	220e      	movs	r2, #14
2000095a:	18ba      	adds	r2, r7, r2
2000095c:	7812      	ldrb	r2, [r2, #0]
2000095e:	b252      	sxtb	r2, r2
20000960:	43d2      	mvns	r2, r2
20000962:	b252      	sxtb	r2, r2
20000964:	4013      	ands	r3, r2
20000966:	b25a      	sxtb	r2, r3
20000968:	1cfb      	adds	r3, r7, #3
2000096a:	781b      	ldrb	r3, [r3, #0]
2000096c:	b2d0      	uxtb	r0, r2
2000096e:	687a      	ldr	r2, [r7, #4]
20000970:	00db      	lsls	r3, r3, #3
20000972:	18d3      	adds	r3, r2, r3
20000974:	1c02      	adds	r2, r0, #0
20000976:	545a      	strb	r2, [r3, r1]
	}
	lcdBuff->changeLog[x] |= (1<<y);
20000978:	1cfb      	adds	r3, r7, #3
2000097a:	781a      	ldrb	r2, [r3, #0]
2000097c:	6879      	ldr	r1, [r7, #4]
2000097e:	2380      	movs	r3, #128	; 0x80
20000980:	00db      	lsls	r3, r3, #3
20000982:	188a      	adds	r2, r1, r2
20000984:	18d3      	adds	r3, r2, r3
20000986:	781b      	ldrb	r3, [r3, #0]
20000988:	b25a      	sxtb	r2, r3
2000098a:	1cbb      	adds	r3, r7, #2
2000098c:	781b      	ldrb	r3, [r3, #0]
2000098e:	2101      	movs	r1, #1
20000990:	4099      	lsls	r1, r3
20000992:	000b      	movs	r3, r1
20000994:	b25b      	sxtb	r3, r3
20000996:	4313      	orrs	r3, r2
20000998:	b259      	sxtb	r1, r3
2000099a:	1cfb      	adds	r3, r7, #3
2000099c:	781a      	ldrb	r2, [r3, #0]
2000099e:	b2c8      	uxtb	r0, r1
200009a0:	6879      	ldr	r1, [r7, #4]
200009a2:	2380      	movs	r3, #128	; 0x80
200009a4:	00db      	lsls	r3, r3, #3
200009a6:	188a      	adds	r2, r1, r2
200009a8:	18d3      	adds	r3, r2, r3
200009aa:	1c02      	adds	r2, r0, #0
200009ac:	701a      	strb	r2, [r3, #0]
200009ae:	e000      	b.n	200009b2 <lcdBufferWritePixel+0x11e>
		{return;}
200009b0:	46c0      	nop			; (mov r8, r8)
}
200009b2:	46bd      	mov	sp, r7
200009b4:	b005      	add	sp, #20
200009b6:	bd90      	pop	{r4, r7, pc}

200009b8 <buffer_clear>:
	buffer_display,
	buffer_changeLog,
	lcdBufferDraw
};*/

void buffer_clear(plcdBuffer plcdBuff){
200009b8:	b580      	push	{r7, lr}
200009ba:	b084      	sub	sp, #16
200009bc:	af00      	add	r7, sp, #0
200009be:	6078      	str	r0, [r7, #4]
	for(int i=0; i<128; i++){
200009c0:	2300      	movs	r3, #0
200009c2:	60fb      	str	r3, [r7, #12]
200009c4:	e01b      	b.n	200009fe <buffer_clear+0x46>
		plcdBuff->changeLog[i] = 0;
200009c6:	6879      	ldr	r1, [r7, #4]
200009c8:	2380      	movs	r3, #128	; 0x80
200009ca:	00db      	lsls	r3, r3, #3
200009cc:	68fa      	ldr	r2, [r7, #12]
200009ce:	188a      	adds	r2, r1, r2
200009d0:	18d3      	adds	r3, r2, r3
200009d2:	2200      	movs	r2, #0
200009d4:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<8; j++){
200009d6:	2300      	movs	r3, #0
200009d8:	60bb      	str	r3, [r7, #8]
200009da:	e00a      	b.n	200009f2 <buffer_clear+0x3a>
			plcdBuff->display[i][j] = 0;
200009dc:	687a      	ldr	r2, [r7, #4]
200009de:	68fb      	ldr	r3, [r7, #12]
200009e0:	00db      	lsls	r3, r3, #3
200009e2:	18d2      	adds	r2, r2, r3
200009e4:	68bb      	ldr	r3, [r7, #8]
200009e6:	18d3      	adds	r3, r2, r3
200009e8:	2200      	movs	r2, #0
200009ea:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<8; j++){
200009ec:	68bb      	ldr	r3, [r7, #8]
200009ee:	3301      	adds	r3, #1
200009f0:	60bb      	str	r3, [r7, #8]
200009f2:	68bb      	ldr	r3, [r7, #8]
200009f4:	2b07      	cmp	r3, #7
200009f6:	ddf1      	ble.n	200009dc <buffer_clear+0x24>
	for(int i=0; i<128; i++){
200009f8:	68fb      	ldr	r3, [r7, #12]
200009fa:	3301      	adds	r3, #1
200009fc:	60fb      	str	r3, [r7, #12]
200009fe:	68fb      	ldr	r3, [r7, #12]
20000a00:	2b7f      	cmp	r3, #127	; 0x7f
20000a02:	dde0      	ble.n	200009c6 <buffer_clear+0xe>
		}
	}
}
20000a04:	46c0      	nop			; (mov r8, r8)
20000a06:	46bd      	mov	sp, r7
20000a08:	b004      	add	sp, #16
20000a0a:	bd80      	pop	{r7, pc}

20000a0c <set_object_speed>:
#include "delay.h"
#include "ponglogic.h"
#include "portDeclare.h"


void set_object_speed(pobject o, int speedx, int speedy){
20000a0c:	b580      	push	{r7, lr}
20000a0e:	b084      	sub	sp, #16
20000a10:	af00      	add	r7, sp, #0
20000a12:	60f8      	str	r0, [r7, #12]
20000a14:	60b9      	str	r1, [r7, #8]
20000a16:	607a      	str	r2, [r7, #4]
	o->dirx = speedx;
20000a18:	68fb      	ldr	r3, [r7, #12]
20000a1a:	68ba      	ldr	r2, [r7, #8]
20000a1c:	605a      	str	r2, [r3, #4]
	o->diry = speedy;
20000a1e:	68fb      	ldr	r3, [r7, #12]
20000a20:	687a      	ldr	r2, [r7, #4]
20000a22:	609a      	str	r2, [r3, #8]
}
20000a24:	46c0      	nop			; (mov r8, r8)
20000a26:	46bd      	mov	sp, r7
20000a28:	b004      	add	sp, #16
20000a2a:	bd80      	pop	{r7, pc}

20000a2c <pong_set_position>:

void pong_set_position(pobject o, int posx, int posy){
20000a2c:	b580      	push	{r7, lr}
20000a2e:	b084      	sub	sp, #16
20000a30:	af00      	add	r7, sp, #0
20000a32:	60f8      	str	r0, [r7, #12]
20000a34:	60b9      	str	r1, [r7, #8]
20000a36:	607a      	str	r2, [r7, #4]
	o->posx = posx;
20000a38:	68fb      	ldr	r3, [r7, #12]
20000a3a:	68ba      	ldr	r2, [r7, #8]
20000a3c:	60da      	str	r2, [r3, #12]
	o->posy = posy;
20000a3e:	68fb      	ldr	r3, [r7, #12]
20000a40:	687a      	ldr	r2, [r7, #4]
20000a42:	611a      	str	r2, [r3, #16]
}
20000a44:	46c0      	nop			; (mov r8, r8)
20000a46:	46bd      	mov	sp, r7
20000a48:	b004      	add	sp, #16
20000a4a:	bd80      	pop	{r7, pc}

20000a4c <draw_object>:

void draw_object(object* o){
20000a4c:	b580      	push	{r7, lr}
20000a4e:	b086      	sub	sp, #24
20000a50:	af00      	add	r7, sp, #0
20000a52:	6078      	str	r0, [r7, #4]
	for (int i=0; i < o->geo->numpoints; i++){
20000a54:	2300      	movs	r3, #0
20000a56:	617b      	str	r3, [r7, #20]
20000a58:	e020      	b.n	20000a9c <draw_object+0x50>
		int drawx = o->posx + o->geo->px[i].x;
20000a5a:	687b      	ldr	r3, [r7, #4]
20000a5c:	68da      	ldr	r2, [r3, #12]
20000a5e:	687b      	ldr	r3, [r7, #4]
20000a60:	6819      	ldr	r1, [r3, #0]
20000a62:	697b      	ldr	r3, [r7, #20]
20000a64:	3304      	adds	r3, #4
20000a66:	005b      	lsls	r3, r3, #1
20000a68:	18cb      	adds	r3, r1, r3
20000a6a:	3304      	adds	r3, #4
20000a6c:	781b      	ldrb	r3, [r3, #0]
20000a6e:	18d3      	adds	r3, r2, r3
20000a70:	613b      	str	r3, [r7, #16]
		int drawy = o->posy + o->geo->px[i].y;
20000a72:	687b      	ldr	r3, [r7, #4]
20000a74:	691a      	ldr	r2, [r3, #16]
20000a76:	687b      	ldr	r3, [r7, #4]
20000a78:	6819      	ldr	r1, [r3, #0]
20000a7a:	697b      	ldr	r3, [r7, #20]
20000a7c:	3304      	adds	r3, #4
20000a7e:	005b      	lsls	r3, r3, #1
20000a80:	18cb      	adds	r3, r1, r3
20000a82:	3305      	adds	r3, #5
20000a84:	781b      	ldrb	r3, [r3, #0]
20000a86:	18d3      	adds	r3, r2, r3
20000a88:	60fb      	str	r3, [r7, #12]
		graphic_pixel(drawx, drawy,1);
20000a8a:	68f9      	ldr	r1, [r7, #12]
20000a8c:	693b      	ldr	r3, [r7, #16]
20000a8e:	2201      	movs	r2, #1
20000a90:	0018      	movs	r0, r3
20000a92:	f7ff fdb5 	bl	20000600 <graphic_pixel>
	for (int i=0; i < o->geo->numpoints; i++){
20000a96:	697b      	ldr	r3, [r7, #20]
20000a98:	3301      	adds	r3, #1
20000a9a:	617b      	str	r3, [r7, #20]
20000a9c:	687b      	ldr	r3, [r7, #4]
20000a9e:	681b      	ldr	r3, [r3, #0]
20000aa0:	681b      	ldr	r3, [r3, #0]
20000aa2:	697a      	ldr	r2, [r7, #20]
20000aa4:	429a      	cmp	r2, r3
20000aa6:	dbd8      	blt.n	20000a5a <draw_object+0xe>
	}
}
20000aa8:	46c0      	nop			; (mov r8, r8)
20000aaa:	46bd      	mov	sp, r7
20000aac:	b006      	add	sp, #24
20000aae:	bd80      	pop	{r7, pc}

20000ab0 <clear_object>:

void clear_object(object* o){
20000ab0:	b580      	push	{r7, lr}
20000ab2:	b084      	sub	sp, #16
20000ab4:	af00      	add	r7, sp, #0
20000ab6:	6078      	str	r0, [r7, #4]
	for (int i=0; i < o->geo->numpoints; i++){
20000ab8:	2300      	movs	r3, #0
20000aba:	60fb      	str	r3, [r7, #12]
20000abc:	e01c      	b.n	20000af8 <clear_object+0x48>
		graphic_pixel(o->posx + o->geo->px[i].x, o->posy + o->geo->px[i].y,0);
20000abe:	687b      	ldr	r3, [r7, #4]
20000ac0:	68da      	ldr	r2, [r3, #12]
20000ac2:	687b      	ldr	r3, [r7, #4]
20000ac4:	6819      	ldr	r1, [r3, #0]
20000ac6:	68fb      	ldr	r3, [r7, #12]
20000ac8:	3304      	adds	r3, #4
20000aca:	005b      	lsls	r3, r3, #1
20000acc:	18cb      	adds	r3, r1, r3
20000ace:	3304      	adds	r3, #4
20000ad0:	781b      	ldrb	r3, [r3, #0]
20000ad2:	18d0      	adds	r0, r2, r3
20000ad4:	687b      	ldr	r3, [r7, #4]
20000ad6:	691a      	ldr	r2, [r3, #16]
20000ad8:	687b      	ldr	r3, [r7, #4]
20000ada:	6819      	ldr	r1, [r3, #0]
20000adc:	68fb      	ldr	r3, [r7, #12]
20000ade:	3304      	adds	r3, #4
20000ae0:	005b      	lsls	r3, r3, #1
20000ae2:	18cb      	adds	r3, r1, r3
20000ae4:	3305      	adds	r3, #5
20000ae6:	781b      	ldrb	r3, [r3, #0]
20000ae8:	18d3      	adds	r3, r2, r3
20000aea:	2200      	movs	r2, #0
20000aec:	0019      	movs	r1, r3
20000aee:	f7ff fd87 	bl	20000600 <graphic_pixel>
	for (int i=0; i < o->geo->numpoints; i++){
20000af2:	68fb      	ldr	r3, [r7, #12]
20000af4:	3301      	adds	r3, #1
20000af6:	60fb      	str	r3, [r7, #12]
20000af8:	687b      	ldr	r3, [r7, #4]
20000afa:	681b      	ldr	r3, [r3, #0]
20000afc:	681b      	ldr	r3, [r3, #0]
20000afe:	68fa      	ldr	r2, [r7, #12]
20000b00:	429a      	cmp	r2, r3
20000b02:	dbdc      	blt.n	20000abe <clear_object+0xe>
	}
}
20000b04:	46c0      	nop			; (mov r8, r8)
20000b06:	46bd      	mov	sp, r7
20000b08:	b004      	add	sp, #16
20000b0a:	bd80      	pop	{r7, pc}

20000b0c <move_object>:

void move_object(object* o){
20000b0c:	b580      	push	{r7, lr}
20000b0e:	b082      	sub	sp, #8
20000b10:	af00      	add	r7, sp, #0
20000b12:	6078      	str	r0, [r7, #4]
	clear_object(o);
20000b14:	687b      	ldr	r3, [r7, #4]
20000b16:	0018      	movs	r0, r3
20000b18:	f7ff ffca 	bl	20000ab0 <clear_object>
	o->posx = o->posx + o->dirx;
20000b1c:	687b      	ldr	r3, [r7, #4]
20000b1e:	68da      	ldr	r2, [r3, #12]
20000b20:	687b      	ldr	r3, [r7, #4]
20000b22:	685b      	ldr	r3, [r3, #4]
20000b24:	18d2      	adds	r2, r2, r3
20000b26:	687b      	ldr	r3, [r7, #4]
20000b28:	60da      	str	r2, [r3, #12]
	o->posy = o->posy + o->diry;
20000b2a:	687b      	ldr	r3, [r7, #4]
20000b2c:	691a      	ldr	r2, [r3, #16]
20000b2e:	687b      	ldr	r3, [r7, #4]
20000b30:	689b      	ldr	r3, [r3, #8]
20000b32:	18d2      	adds	r2, r2, r3
20000b34:	687b      	ldr	r3, [r7, #4]
20000b36:	611a      	str	r2, [r3, #16]
	if(o->posx <= 0 | o->posx >= 124){
20000b38:	687b      	ldr	r3, [r7, #4]
20000b3a:	68db      	ldr	r3, [r3, #12]
20000b3c:	1e5a      	subs	r2, r3, #1
20000b3e:	4313      	orrs	r3, r2
20000b40:	0fdb      	lsrs	r3, r3, #31
20000b42:	b2da      	uxtb	r2, r3
20000b44:	687b      	ldr	r3, [r7, #4]
20000b46:	68db      	ldr	r3, [r3, #12]
20000b48:	2101      	movs	r1, #1
20000b4a:	2b7b      	cmp	r3, #123	; 0x7b
20000b4c:	dc01      	bgt.n	20000b52 <move_object+0x46>
20000b4e:	2300      	movs	r3, #0
20000b50:	1c19      	adds	r1, r3, #0
20000b52:	b2cb      	uxtb	r3, r1
20000b54:	4313      	orrs	r3, r2
20000b56:	b2db      	uxtb	r3, r3
20000b58:	2b00      	cmp	r3, #0
20000b5a:	d004      	beq.n	20000b66 <move_object+0x5a>
			o->dirx = -o->dirx;
20000b5c:	687b      	ldr	r3, [r7, #4]
20000b5e:	685b      	ldr	r3, [r3, #4]
20000b60:	425a      	negs	r2, r3
20000b62:	687b      	ldr	r3, [r7, #4]
20000b64:	605a      	str	r2, [r3, #4]
	}
	if(o->posy <= 0 | o->posy >= 60){
20000b66:	687b      	ldr	r3, [r7, #4]
20000b68:	691b      	ldr	r3, [r3, #16]
20000b6a:	1e5a      	subs	r2, r3, #1
20000b6c:	4313      	orrs	r3, r2
20000b6e:	0fdb      	lsrs	r3, r3, #31
20000b70:	b2da      	uxtb	r2, r3
20000b72:	687b      	ldr	r3, [r7, #4]
20000b74:	691b      	ldr	r3, [r3, #16]
20000b76:	2101      	movs	r1, #1
20000b78:	2b3b      	cmp	r3, #59	; 0x3b
20000b7a:	dc01      	bgt.n	20000b80 <move_object+0x74>
20000b7c:	2300      	movs	r3, #0
20000b7e:	1c19      	adds	r1, r3, #0
20000b80:	b2cb      	uxtb	r3, r1
20000b82:	4313      	orrs	r3, r2
20000b84:	b2db      	uxtb	r3, r3
20000b86:	2b00      	cmp	r3, #0
20000b88:	d004      	beq.n	20000b94 <move_object+0x88>
		o->diry = -o->diry;
20000b8a:	687b      	ldr	r3, [r7, #4]
20000b8c:	689b      	ldr	r3, [r3, #8]
20000b8e:	425a      	negs	r2, r3
20000b90:	687b      	ldr	r3, [r7, #4]
20000b92:	609a      	str	r2, [r3, #8]
	}
	draw_object(o);
20000b94:	687b      	ldr	r3, [r7, #4]
20000b96:	0018      	movs	r0, r3
20000b98:	f7ff ff58 	bl	20000a4c <draw_object>
20000b9c:	46c0      	nop			; (mov r8, r8)
20000b9e:	46bd      	mov	sp, r7
20000ba0:	b002      	add	sp, #8
20000ba2:	bd80      	pop	{r7, pc}

20000ba4 <ascii_ctrl_bit_set>:

#include "delay.h"
#include "ascii_drivers.h"
#include "portDeclare.h"

void ascii_ctrl_bit_set(unsigned short x){
20000ba4:	b580      	push	{r7, lr}
20000ba6:	b084      	sub	sp, #16
20000ba8:	af00      	add	r7, sp, #0
20000baa:	0002      	movs	r2, r0
20000bac:	1dbb      	adds	r3, r7, #6
20000bae:	801a      	strh	r2, [r3, #0]
	
	unsigned char c;
	c = *portOdrLowE;
20000bb0:	4a0c      	ldr	r2, [pc, #48]	; (20000be4 <ascii_ctrl_bit_set+0x40>)
20000bb2:	210f      	movs	r1, #15
20000bb4:	187b      	adds	r3, r7, r1
20000bb6:	7812      	ldrb	r2, [r2, #0]
20000bb8:	701a      	strb	r2, [r3, #0]
	c |= ( B_SELECT | x );
20000bba:	1dbb      	adds	r3, r7, #6
20000bbc:	881b      	ldrh	r3, [r3, #0]
20000bbe:	b2da      	uxtb	r2, r3
20000bc0:	187b      	adds	r3, r7, r1
20000bc2:	781b      	ldrb	r3, [r3, #0]
20000bc4:	4313      	orrs	r3, r2
20000bc6:	b2da      	uxtb	r2, r3
20000bc8:	0008      	movs	r0, r1
20000bca:	187b      	adds	r3, r7, r1
20000bcc:	2104      	movs	r1, #4
20000bce:	430a      	orrs	r2, r1
20000bd0:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = c; 
20000bd2:	4a04      	ldr	r2, [pc, #16]	; (20000be4 <ascii_ctrl_bit_set+0x40>)
20000bd4:	0001      	movs	r1, r0
20000bd6:	187b      	adds	r3, r7, r1
20000bd8:	781b      	ldrb	r3, [r3, #0]
20000bda:	7013      	strb	r3, [r2, #0]
}
20000bdc:	46c0      	nop			; (mov r8, r8)
20000bde:	46bd      	mov	sp, r7
20000be0:	b004      	add	sp, #16
20000be2:	bd80      	pop	{r7, pc}
20000be4:	40021014 	andmi	r1, r2, r4, lsl r0

20000be8 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned short x){
20000be8:	b580      	push	{r7, lr}
20000bea:	b084      	sub	sp, #16
20000bec:	af00      	add	r7, sp, #0
20000bee:	0002      	movs	r2, r0
20000bf0:	1dbb      	adds	r3, r7, #6
20000bf2:	801a      	strh	r2, [r3, #0]
	unsigned char c;
	c = *portOdrLowE;
20000bf4:	4a0d      	ldr	r2, [pc, #52]	; (20000c2c <ascii_ctrl_bit_clear+0x44>)
20000bf6:	210f      	movs	r1, #15
20000bf8:	187b      	adds	r3, r7, r1
20000bfa:	7812      	ldrb	r2, [r2, #0]
20000bfc:	701a      	strb	r2, [r3, #0]
	c = B_SELECT | ( c & ~x );
20000bfe:	1dbb      	adds	r3, r7, #6
20000c00:	881b      	ldrh	r3, [r3, #0]
20000c02:	b25b      	sxtb	r3, r3
20000c04:	43db      	mvns	r3, r3
20000c06:	b25b      	sxtb	r3, r3
20000c08:	187a      	adds	r2, r7, r1
20000c0a:	7812      	ldrb	r2, [r2, #0]
20000c0c:	b252      	sxtb	r2, r2
20000c0e:	4013      	ands	r3, r2
20000c10:	b25b      	sxtb	r3, r3
20000c12:	2204      	movs	r2, #4
20000c14:	4313      	orrs	r3, r2
20000c16:	b25a      	sxtb	r2, r3
20000c18:	187b      	adds	r3, r7, r1
20000c1a:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = c;
20000c1c:	4a03      	ldr	r2, [pc, #12]	; (20000c2c <ascii_ctrl_bit_clear+0x44>)
20000c1e:	187b      	adds	r3, r7, r1
20000c20:	781b      	ldrb	r3, [r3, #0]
20000c22:	7013      	strb	r3, [r2, #0]
}
20000c24:	46c0      	nop			; (mov r8, r8)
20000c26:	46bd      	mov	sp, r7
20000c28:	b004      	add	sp, #16
20000c2a:	bd80      	pop	{r7, pc}
20000c2c:	40021014 	andmi	r1, r2, r4, lsl r0

20000c30 <ascii_write_controller>:

void ascii_write_controller(unsigned char c){
20000c30:	b580      	push	{r7, lr}
20000c32:	b082      	sub	sp, #8
20000c34:	af00      	add	r7, sp, #0
20000c36:	0002      	movs	r2, r0
20000c38:	1dfb      	adds	r3, r7, #7
20000c3a:	701a      	strb	r2, [r3, #0]
	delay_40ns();
20000c3c:	f7ff fa6a 	bl	20000114 <delay_40ns>
	ascii_ctrl_bit_set(B_E);
20000c40:	2040      	movs	r0, #64	; 0x40
20000c42:	f7ff ffaf 	bl	20000ba4 <ascii_ctrl_bit_set>
	*portOdrHighE = c;
20000c46:	4a05      	ldr	r2, [pc, #20]	; (20000c5c <ascii_write_controller+0x2c>)
20000c48:	1dfb      	adds	r3, r7, #7
20000c4a:	781b      	ldrb	r3, [r3, #0]
20000c4c:	7013      	strb	r3, [r2, #0]
	delay_250ns;
	ascii_ctrl_bit_clear(B_E);
20000c4e:	2040      	movs	r0, #64	; 0x40
20000c50:	f7ff ffca 	bl	20000be8 <ascii_ctrl_bit_clear>
}
20000c54:	46c0      	nop			; (mov r8, r8)
20000c56:	46bd      	mov	sp, r7
20000c58:	b002      	add	sp, #8
20000c5a:	bd80      	pop	{r7, pc}
20000c5c:	40021015 	andmi	r1, r2, r5, lsl r0

20000c60 <ascii_read_controller>:
unsigned char ascii_read_controller(void){
20000c60:	b580      	push	{r7, lr}
20000c62:	b082      	sub	sp, #8
20000c64:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_set(B_E);
20000c66:	2040      	movs	r0, #64	; 0x40
20000c68:	f7ff ff9c 	bl	20000ba4 <ascii_ctrl_bit_set>
	delay_250ns;
	delay_250ns;
	unsigned char rv = *portIdrHighE;
20000c6c:	4a06      	ldr	r2, [pc, #24]	; (20000c88 <ascii_read_controller+0x28>)
20000c6e:	1dfb      	adds	r3, r7, #7
20000c70:	7812      	ldrb	r2, [r2, #0]
20000c72:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20000c74:	2040      	movs	r0, #64	; 0x40
20000c76:	f7ff ffb7 	bl	20000be8 <ascii_ctrl_bit_clear>
	return rv;
20000c7a:	1dfb      	adds	r3, r7, #7
20000c7c:	781b      	ldrb	r3, [r3, #0]
}
20000c7e:	0018      	movs	r0, r3
20000c80:	46bd      	mov	sp, r7
20000c82:	b002      	add	sp, #8
20000c84:	bd80      	pop	{r7, pc}
20000c86:	46c0      	nop			; (mov r8, r8)
20000c88:	40021011 	andmi	r1, r2, r1, lsl r0

20000c8c <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20000c8c:	b580      	push	{r7, lr}
20000c8e:	b082      	sub	sp, #8
20000c90:	af00      	add	r7, sp, #0
20000c92:	0002      	movs	r2, r0
20000c94:	1dfb      	adds	r3, r7, #7
20000c96:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000c98:	2001      	movs	r0, #1
20000c9a:	f7ff ffa5 	bl	20000be8 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000c9e:	2002      	movs	r0, #2
20000ca0:	f7ff ffa2 	bl	20000be8 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20000ca4:	1dfb      	adds	r3, r7, #7
20000ca6:	781b      	ldrb	r3, [r3, #0]
20000ca8:	0018      	movs	r0, r3
20000caa:	f7ff ffc1 	bl	20000c30 <ascii_write_controller>
}
20000cae:	46c0      	nop			; (mov r8, r8)
20000cb0:	46bd      	mov	sp, r7
20000cb2:	b002      	add	sp, #8
20000cb4:	bd80      	pop	{r7, pc}

20000cb6 <ascii_write_data>:

void ascii_write_data(unsigned char data){
20000cb6:	b580      	push	{r7, lr}
20000cb8:	b082      	sub	sp, #8
20000cba:	af00      	add	r7, sp, #0
20000cbc:	0002      	movs	r2, r0
20000cbe:	1dfb      	adds	r3, r7, #7
20000cc0:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000cc2:	2001      	movs	r0, #1
20000cc4:	f7ff ff6e 	bl	20000ba4 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20000cc8:	2002      	movs	r0, #2
20000cca:	f7ff ff8d 	bl	20000be8 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20000cce:	1dfb      	adds	r3, r7, #7
20000cd0:	781b      	ldrb	r3, [r3, #0]
20000cd2:	0018      	movs	r0, r3
20000cd4:	f7ff ffac 	bl	20000c30 <ascii_write_controller>
}
20000cd8:	46c0      	nop			; (mov r8, r8)
20000cda:	46bd      	mov	sp, r7
20000cdc:	b002      	add	sp, #8
20000cde:	bd80      	pop	{r7, pc}

20000ce0 <ascii_read_status>:

unsigned char ascii_read_status(void){
20000ce0:	b590      	push	{r4, r7, lr}
20000ce2:	b083      	sub	sp, #12
20000ce4:	af00      	add	r7, sp, #0
	*portModerE = (*portModerE & 0x0000FFFF);
20000ce6:	4b0e      	ldr	r3, [pc, #56]	; (20000d20 <ascii_read_status+0x40>)
20000ce8:	681a      	ldr	r2, [r3, #0]
20000cea:	4b0d      	ldr	r3, [pc, #52]	; (20000d20 <ascii_read_status+0x40>)
20000cec:	0412      	lsls	r2, r2, #16
20000cee:	0c12      	lsrs	r2, r2, #16
20000cf0:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000cf2:	2001      	movs	r0, #1
20000cf4:	f7ff ff78 	bl	20000be8 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
20000cf8:	2002      	movs	r0, #2
20000cfa:	f7ff ff53 	bl	20000ba4 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20000cfe:	1dfc      	adds	r4, r7, #7
20000d00:	f7ff ffae 	bl	20000c60 <ascii_read_controller>
20000d04:	0003      	movs	r3, r0
20000d06:	7023      	strb	r3, [r4, #0]
	*portModerE = (*portModerE | 0x55550000);
20000d08:	4b05      	ldr	r3, [pc, #20]	; (20000d20 <ascii_read_status+0x40>)
20000d0a:	681a      	ldr	r2, [r3, #0]
20000d0c:	4b04      	ldr	r3, [pc, #16]	; (20000d20 <ascii_read_status+0x40>)
20000d0e:	4905      	ldr	r1, [pc, #20]	; (20000d24 <ascii_read_status+0x44>)
20000d10:	430a      	orrs	r2, r1
20000d12:	601a      	str	r2, [r3, #0]
	return rv;
20000d14:	1dfb      	adds	r3, r7, #7
20000d16:	781b      	ldrb	r3, [r3, #0]
}
20000d18:	0018      	movs	r0, r3
20000d1a:	46bd      	mov	sp, r7
20000d1c:	b003      	add	sp, #12
20000d1e:	bd90      	pop	{r4, r7, pc}
20000d20:	40021000 	andmi	r1, r2, r0
20000d24:	55550000 	ldrbpl	r0, [r5, #-0]

20000d28 <ascii_read_data>:

unsigned char ascii_read_data(void){
20000d28:	b590      	push	{r4, r7, lr}
20000d2a:	b083      	sub	sp, #12
20000d2c:	af00      	add	r7, sp, #0
	*portModerE = (*portModerE & 0x0000FFFF);
20000d2e:	4b0e      	ldr	r3, [pc, #56]	; (20000d68 <ascii_read_data+0x40>)
20000d30:	681a      	ldr	r2, [r3, #0]
20000d32:	4b0d      	ldr	r3, [pc, #52]	; (20000d68 <ascii_read_data+0x40>)
20000d34:	0412      	lsls	r2, r2, #16
20000d36:	0c12      	lsrs	r2, r2, #16
20000d38:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000d3a:	2001      	movs	r0, #1
20000d3c:	f7ff ff32 	bl	20000ba4 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20000d40:	2002      	movs	r0, #2
20000d42:	f7ff ff2f 	bl	20000ba4 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20000d46:	1dfc      	adds	r4, r7, #7
20000d48:	f7ff ff8a 	bl	20000c60 <ascii_read_controller>
20000d4c:	0003      	movs	r3, r0
20000d4e:	7023      	strb	r3, [r4, #0]
	*portModerE = (*portModerE | 0x55550000);
20000d50:	4b05      	ldr	r3, [pc, #20]	; (20000d68 <ascii_read_data+0x40>)
20000d52:	681a      	ldr	r2, [r3, #0]
20000d54:	4b04      	ldr	r3, [pc, #16]	; (20000d68 <ascii_read_data+0x40>)
20000d56:	4905      	ldr	r1, [pc, #20]	; (20000d6c <ascii_read_data+0x44>)
20000d58:	430a      	orrs	r2, r1
20000d5a:	601a      	str	r2, [r3, #0]
	return rv;
20000d5c:	1dfb      	adds	r3, r7, #7
20000d5e:	781b      	ldrb	r3, [r3, #0]
}
20000d60:	0018      	movs	r0, r3
20000d62:	46bd      	mov	sp, r7
20000d64:	b003      	add	sp, #12
20000d66:	bd90      	pop	{r4, r7, pc}
20000d68:	40021000 	andmi	r1, r2, r0
20000d6c:	55550000 	ldrbpl	r0, [r5, #-0]

20000d70 <ascii_init>:

void ascii_init(void){
20000d70:	b580      	push	{r7, lr}
20000d72:	af00      	add	r7, sp, #0
	while((ascii_read_status() & 0x80) == 0x80){}
20000d74:	46c0      	nop			; (mov r8, r8)
20000d76:	f7ff ffb3 	bl	20000ce0 <ascii_read_status>
20000d7a:	0003      	movs	r3, r0
20000d7c:	001a      	movs	r2, r3
20000d7e:	2380      	movs	r3, #128	; 0x80
20000d80:	4013      	ands	r3, r2
20000d82:	2b80      	cmp	r3, #128	; 0x80
20000d84:	d0f7      	beq.n	20000d76 <ascii_init+0x6>
	delay_mikro(8);
20000d86:	2008      	movs	r0, #8
20000d88:	f7ff f9eb 	bl	20000162 <delay_mikro>
	ascii_write_cmd(0x38);
20000d8c:	2038      	movs	r0, #56	; 0x38
20000d8e:	f7ff ff7d 	bl	20000c8c <ascii_write_cmd>
	delay_mikro(40);
20000d92:	2028      	movs	r0, #40	; 0x28
20000d94:	f7ff f9e5 	bl	20000162 <delay_mikro>
	ascii_write_cmd(0xE);
20000d98:	200e      	movs	r0, #14
20000d9a:	f7ff ff77 	bl	20000c8c <ascii_write_cmd>
	delay_mikro(40);
20000d9e:	2028      	movs	r0, #40	; 0x28
20000da0:	f7ff f9df 	bl	20000162 <delay_mikro>
	ascii_write_cmd(0x4);
20000da4:	2004      	movs	r0, #4
20000da6:	f7ff ff71 	bl	20000c8c <ascii_write_cmd>
	delay_mikro(40);
20000daa:	2028      	movs	r0, #40	; 0x28
20000dac:	f7ff f9d9 	bl	20000162 <delay_mikro>
}
20000db0:	46c0      	nop			; (mov r8, r8)
20000db2:	46bd      	mov	sp, r7
20000db4:	bd80      	pop	{r7, pc}

20000db6 <ascii_write_char>:

void ascii_write_char(char c){
20000db6:	b580      	push	{r7, lr}
20000db8:	b082      	sub	sp, #8
20000dba:	af00      	add	r7, sp, #0
20000dbc:	0002      	movs	r2, r0
20000dbe:	1dfb      	adds	r3, r7, #7
20000dc0:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80){}
20000dc2:	46c0      	nop			; (mov r8, r8)
20000dc4:	f7ff ff8c 	bl	20000ce0 <ascii_read_status>
20000dc8:	0003      	movs	r3, r0
20000dca:	001a      	movs	r2, r3
20000dcc:	2380      	movs	r3, #128	; 0x80
20000dce:	4013      	ands	r3, r2
20000dd0:	2b80      	cmp	r3, #128	; 0x80
20000dd2:	d0f7      	beq.n	20000dc4 <ascii_write_char+0xe>
	delay_mikro(8);
20000dd4:	2008      	movs	r0, #8
20000dd6:	f7ff f9c4 	bl	20000162 <delay_mikro>
	ascii_write_data(c);
20000dda:	1dfb      	adds	r3, r7, #7
20000ddc:	781b      	ldrb	r3, [r3, #0]
20000dde:	0018      	movs	r0, r3
20000de0:	f7ff ff69 	bl	20000cb6 <ascii_write_data>
	delay_mikro(43);
20000de4:	202b      	movs	r0, #43	; 0x2b
20000de6:	f7ff f9bc 	bl	20000162 <delay_mikro>
}
20000dea:	46c0      	nop			; (mov r8, r8)
20000dec:	46bd      	mov	sp, r7
20000dee:	b002      	add	sp, #8
20000df0:	bd80      	pop	{r7, pc}

20000df2 <ascii_gotoxy>:

void ascii_gotoxy(int x, int y){
20000df2:	b580      	push	{r7, lr}
20000df4:	b084      	sub	sp, #16
20000df6:	af00      	add	r7, sp, #0
20000df8:	6078      	str	r0, [r7, #4]
20000dfa:	6039      	str	r1, [r7, #0]
	int adress = (x - 1 + (y-1)*64);
20000dfc:	687b      	ldr	r3, [r7, #4]
20000dfe:	1e5a      	subs	r2, r3, #1
20000e00:	683b      	ldr	r3, [r7, #0]
20000e02:	3b01      	subs	r3, #1
20000e04:	019b      	lsls	r3, r3, #6
20000e06:	18d3      	adds	r3, r2, r3
20000e08:	60fb      	str	r3, [r7, #12]
	ascii_write_cmd(0x80 | adress);
20000e0a:	68fb      	ldr	r3, [r7, #12]
20000e0c:	b25b      	sxtb	r3, r3
20000e0e:	2280      	movs	r2, #128	; 0x80
20000e10:	4252      	negs	r2, r2
20000e12:	4313      	orrs	r3, r2
20000e14:	b25b      	sxtb	r3, r3
20000e16:	b2db      	uxtb	r3, r3
20000e18:	0018      	movs	r0, r3
20000e1a:	f7ff ff37 	bl	20000c8c <ascii_write_cmd>
}
20000e1e:	46c0      	nop			; (mov r8, r8)
20000e20:	46bd      	mov	sp, r7
20000e22:	b004      	add	sp, #16
20000e24:	bd80      	pop	{r7, pc}

20000e26 <ascii_init_app>:

void ascii_init_app(void){
20000e26:	b580      	push	{r7, lr}
20000e28:	af00      	add	r7, sp, #0
	*portModerE = 0x55555555;
20000e2a:	4b06      	ldr	r3, [pc, #24]	; (20000e44 <ascii_init_app+0x1e>)
20000e2c:	4a06      	ldr	r2, [pc, #24]	; (20000e48 <ascii_init_app+0x22>)
20000e2e:	601a      	str	r2, [r3, #0]
	*portOtyperE = 0x0000;
20000e30:	4b06      	ldr	r3, [pc, #24]	; (20000e4c <ascii_init_app+0x26>)
20000e32:	2200      	movs	r2, #0
20000e34:	801a      	strh	r2, [r3, #0]
	*portOspeedrE = 0x0000;
20000e36:	4b06      	ldr	r3, [pc, #24]	; (20000e50 <ascii_init_app+0x2a>)
20000e38:	2200      	movs	r2, #0
20000e3a:	601a      	str	r2, [r3, #0]

20000e3c:	46c0      	nop			; (mov r8, r8)
20000e3e:	46bd      	mov	sp, r7
20000e40:	bd80      	pop	{r7, pc}
20000e42:	46c0      	nop			; (mov r8, r8)
20000e44:	40021000 	andmi	r1, r2, r0
20000e48:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000e4c:	40021004 	andmi	r1, r2, r4
20000e50:	40021008 	andmi	r1, r2, r8

20000e54 <init_keypad>:

#include "delay.h"
#include "keypad_drivers.h"
#include "portDeclare.h"

void init_keypad(void){
20000e54:	b580      	push	{r7, lr}
20000e56:	af00      	add	r7, sp, #0
	#ifdef bargraph
		*((unsigned long *)(0x40021000)) = 0x5555;
	#endif
	*portModerD = 0x55005555;
20000e58:	4b07      	ldr	r3, [pc, #28]	; (20000e78 <init_keypad+0x24>)
20000e5a:	4a08      	ldr	r2, [pc, #32]	; (20000e7c <init_keypad+0x28>)
20000e5c:	601a      	str	r2, [r3, #0]
	*portOtyperD = 0x0000;
20000e5e:	4b08      	ldr	r3, [pc, #32]	; (20000e80 <init_keypad+0x2c>)
20000e60:	2200      	movs	r2, #0
20000e62:	801a      	strh	r2, [r3, #0]
	*portOspeedrD = 0x0000;
20000e64:	4b07      	ldr	r3, [pc, #28]	; (20000e84 <init_keypad+0x30>)
20000e66:	2200      	movs	r2, #0
20000e68:	601a      	str	r2, [r3, #0]
	*portPupdrD = 0x00AA0000;
20000e6a:	4b07      	ldr	r3, [pc, #28]	; (20000e88 <init_keypad+0x34>)
20000e6c:	22aa      	movs	r2, #170	; 0xaa
20000e6e:	0412      	lsls	r2, r2, #16
20000e70:	601a      	str	r2, [r3, #0]
	

}
20000e72:	46c0      	nop			; (mov r8, r8)
20000e74:	46bd      	mov	sp, r7
20000e76:	bd80      	pop	{r7, pc}
20000e78:	40020c00 	andmi	r0, r2, r0, lsl #24
20000e7c:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000e80:	40020c04 	andmi	r0, r2, r4, lsl #24
20000e84:	40020c08 	andmi	r0, r2, r8, lsl #24
20000e88:	40020c0c 	andmi	r0, r2, ip, lsl #24

20000e8c <keyb>:

unsigned char keyb(void){
20000e8c:	b590      	push	{r4, r7, lr}
20000e8e:	b087      	sub	sp, #28
20000e90:	af00      	add	r7, sp, #0
	
	unsigned char count = 0;
20000e92:	2317      	movs	r3, #23
20000e94:	18fb      	adds	r3, r7, r3
20000e96:	2200      	movs	r2, #0
20000e98:	701a      	strb	r2, [r3, #0]
	unsigned char numpad[] = {0x1,0x2,0x3,0xA,0x4,0x5,0x6,0xB,0x7,0x8,0x9,0xC,0xE,0x0,0xF,0xD};
20000e9a:	1d3b      	adds	r3, r7, #4
20000e9c:	4a27      	ldr	r2, [pc, #156]	; (20000f3c <keyb+0xb0>)
20000e9e:	ca13      	ldmia	r2!, {r0, r1, r4}
20000ea0:	c313      	stmia	r3!, {r0, r1, r4}
20000ea2:	6812      	ldr	r2, [r2, #0]
20000ea4:	601a      	str	r2, [r3, #0]
	
	for (char i=0; i < 4; i++){
20000ea6:	2316      	movs	r3, #22
20000ea8:	18fb      	adds	r3, r7, r3
20000eaa:	2200      	movs	r2, #0
20000eac:	701a      	strb	r2, [r3, #0]
20000eae:	e03b      	b.n	20000f28 <keyb+0x9c>
		char activeRow = 0x10 << i;
20000eb0:	2316      	movs	r3, #22
20000eb2:	18fb      	adds	r3, r7, r3
20000eb4:	781b      	ldrb	r3, [r3, #0]
20000eb6:	2210      	movs	r2, #16
20000eb8:	409a      	lsls	r2, r3
20000eba:	2114      	movs	r1, #20
20000ebc:	187b      	adds	r3, r7, r1
20000ebe:	701a      	strb	r2, [r3, #0]
		*portOdrHighD = activeRow;
20000ec0:	4a1f      	ldr	r2, [pc, #124]	; (20000f40 <keyb+0xb4>)
20000ec2:	187b      	adds	r3, r7, r1
20000ec4:	781b      	ldrb	r3, [r3, #0]
20000ec6:	7013      	strb	r3, [r2, #0]
		char keys = *portIdrHighD & 0x0f;
20000ec8:	4b1e      	ldr	r3, [pc, #120]	; (20000f44 <keyb+0xb8>)
20000eca:	781b      	ldrb	r3, [r3, #0]
20000ecc:	b2da      	uxtb	r2, r3
20000ece:	2015      	movs	r0, #21
20000ed0:	183b      	adds	r3, r7, r0
20000ed2:	210f      	movs	r1, #15
20000ed4:	400a      	ands	r2, r1
20000ed6:	701a      	strb	r2, [r3, #0]
		
		if (keys != 0){
20000ed8:	183b      	adds	r3, r7, r0
20000eda:	781b      	ldrb	r3, [r3, #0]
20000edc:	2b00      	cmp	r3, #0
20000ede:	d01d      	beq.n	20000f1c <keyb+0x90>
		
			while((keys & 0x1) == 0){
20000ee0:	e00b      	b.n	20000efa <keyb+0x6e>
				keys = keys >> 1;
20000ee2:	2215      	movs	r2, #21
20000ee4:	18bb      	adds	r3, r7, r2
20000ee6:	18ba      	adds	r2, r7, r2
20000ee8:	7812      	ldrb	r2, [r2, #0]
20000eea:	0852      	lsrs	r2, r2, #1
20000eec:	701a      	strb	r2, [r3, #0]
				count++;
20000eee:	2117      	movs	r1, #23
20000ef0:	187b      	adds	r3, r7, r1
20000ef2:	781a      	ldrb	r2, [r3, #0]
20000ef4:	187b      	adds	r3, r7, r1
20000ef6:	3201      	adds	r2, #1
20000ef8:	701a      	strb	r2, [r3, #0]
			while((keys & 0x1) == 0){
20000efa:	2315      	movs	r3, #21
20000efc:	18fb      	adds	r3, r7, r3
20000efe:	781b      	ldrb	r3, [r3, #0]
20000f00:	2201      	movs	r2, #1
20000f02:	4013      	ands	r3, r2
20000f04:	d0ed      	beq.n	20000ee2 <keyb+0x56>
			}
			return numpad[i*4+count];
20000f06:	2316      	movs	r3, #22
20000f08:	18fb      	adds	r3, r7, r3
20000f0a:	781b      	ldrb	r3, [r3, #0]
20000f0c:	009a      	lsls	r2, r3, #2
20000f0e:	2317      	movs	r3, #23
20000f10:	18fb      	adds	r3, r7, r3
20000f12:	781b      	ldrb	r3, [r3, #0]
20000f14:	18d3      	adds	r3, r2, r3
20000f16:	1d3a      	adds	r2, r7, #4
20000f18:	5cd3      	ldrb	r3, [r2, r3]
20000f1a:	e00b      	b.n	20000f34 <keyb+0xa8>
	for (char i=0; i < 4; i++){
20000f1c:	2116      	movs	r1, #22
20000f1e:	187b      	adds	r3, r7, r1
20000f20:	781a      	ldrb	r2, [r3, #0]
20000f22:	187b      	adds	r3, r7, r1
20000f24:	3201      	adds	r2, #1
20000f26:	701a      	strb	r2, [r3, #0]
20000f28:	2316      	movs	r3, #22
20000f2a:	18fb      	adds	r3, r7, r3
20000f2c:	781b      	ldrb	r3, [r3, #0]
20000f2e:	2b03      	cmp	r3, #3
20000f30:	d9be      	bls.n	20000eb0 <keyb+0x24>
		}
			
	}
	return 0xff;
20000f32:	23ff      	movs	r3, #255	; 0xff
}
20000f34:	0018      	movs	r0, r3
20000f36:	46bd      	mov	sp, r7
20000f38:	b007      	add	sp, #28
20000f3a:	bd90      	pop	{r4, r7, pc}
20000f3c:	20001e10 	andcs	r1, r0, r0, lsl lr
20000f40:	40020c15 	andmi	r0, r2, r5, lsl ip
20000f44:	40020c11 	andmi	r0, r2, r1, lsl ip

20000f48 <out7seg>:

void out7seg(unsigned char num){
20000f48:	b5b0      	push	{r4, r5, r7, lr}
20000f4a:	b086      	sub	sp, #24
20000f4c:	af00      	add	r7, sp, #0
20000f4e:	0002      	movs	r2, r0
20000f50:	1dfb      	adds	r3, r7, #7
20000f52:	701a      	strb	r2, [r3, #0]
	unsigned char segCodes[] = {0x3f,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71};
20000f54:	2008      	movs	r0, #8
20000f56:	183b      	adds	r3, r7, r0
20000f58:	4a06      	ldr	r2, [pc, #24]	; (20000f74 <out7seg+0x2c>)
20000f5a:	ca32      	ldmia	r2!, {r1, r4, r5}
20000f5c:	c332      	stmia	r3!, {r1, r4, r5}
20000f5e:	6812      	ldr	r2, [r2, #0]
20000f60:	601a      	str	r2, [r3, #0]
	if (num & 0xf0 == 0){
		*portOdrLowE = 0;
		return;
	}
	*portOdrLowD = segCodes[num];
20000f62:	1dfb      	adds	r3, r7, #7
20000f64:	781b      	ldrb	r3, [r3, #0]
20000f66:	4904      	ldr	r1, [pc, #16]	; (20000f78 <out7seg+0x30>)
20000f68:	183a      	adds	r2, r7, r0
20000f6a:	5cd3      	ldrb	r3, [r2, r3]
20000f6c:	700b      	strb	r3, [r1, #0]
}
20000f6e:	46bd      	mov	sp, r7
20000f70:	b006      	add	sp, #24
20000f72:	bdb0      	pop	{r4, r5, r7, pc}
20000f74:	20001e20 	andcs	r1, r0, r0, lsr #28
20000f78:	40020c14 	andmi	r0, r2, r4, lsl ip

20000f7c <keyRead>:

unsigned short keyRead(void){
20000f7c:	b580      	push	{r7, lr}
20000f7e:	b082      	sub	sp, #8
20000f80:	af00      	add	r7, sp, #0
	
	unsigned char count = 0;
20000f82:	1d3b      	adds	r3, r7, #4
20000f84:	2200      	movs	r2, #0
20000f86:	701a      	strb	r2, [r3, #0]
	unsigned short read = 0;
20000f88:	1dbb      	adds	r3, r7, #6
20000f8a:	2200      	movs	r2, #0
20000f8c:	801a      	strh	r2, [r3, #0]
	for (char i=0; i < 4; i++){
20000f8e:	1d7b      	adds	r3, r7, #5
20000f90:	2200      	movs	r2, #0
20000f92:	701a      	strb	r2, [r3, #0]
20000f94:	e027      	b.n	20000fe6 <keyRead+0x6a>
		char activeRow = 0x10 << i;
20000f96:	1d7b      	adds	r3, r7, #5
20000f98:	781b      	ldrb	r3, [r3, #0]
20000f9a:	2210      	movs	r2, #16
20000f9c:	409a      	lsls	r2, r3
20000f9e:	1cfb      	adds	r3, r7, #3
20000fa0:	701a      	strb	r2, [r3, #0]
		*portOdrHighD = activeRow;
20000fa2:	4a16      	ldr	r2, [pc, #88]	; (20000ffc <keyRead+0x80>)
20000fa4:	1cfb      	adds	r3, r7, #3
20000fa6:	781b      	ldrb	r3, [r3, #0]
20000fa8:	7013      	strb	r3, [r2, #0]
		unsigned volatile char keys = *portIdrHighD & 0x0f;
20000faa:	4b15      	ldr	r3, [pc, #84]	; (20001000 <keyRead+0x84>)
20000fac:	781b      	ldrb	r3, [r3, #0]
20000fae:	b2db      	uxtb	r3, r3
20000fb0:	220f      	movs	r2, #15
20000fb2:	4013      	ands	r3, r2
20000fb4:	b2da      	uxtb	r2, r3
20000fb6:	1cbb      	adds	r3, r7, #2
20000fb8:	701a      	strb	r2, [r3, #0]
		read |= (keys<<(i*4));
20000fba:	1cbb      	adds	r3, r7, #2
20000fbc:	781b      	ldrb	r3, [r3, #0]
20000fbe:	b2db      	uxtb	r3, r3
20000fc0:	001a      	movs	r2, r3
20000fc2:	1d7b      	adds	r3, r7, #5
20000fc4:	781b      	ldrb	r3, [r3, #0]
20000fc6:	009b      	lsls	r3, r3, #2
20000fc8:	409a      	lsls	r2, r3
20000fca:	0013      	movs	r3, r2
20000fcc:	b21a      	sxth	r2, r3
20000fce:	1dbb      	adds	r3, r7, #6
20000fd0:	2100      	movs	r1, #0
20000fd2:	5e5b      	ldrsh	r3, [r3, r1]
20000fd4:	4313      	orrs	r3, r2
20000fd6:	b21a      	sxth	r2, r3
20000fd8:	1dbb      	adds	r3, r7, #6
20000fda:	801a      	strh	r2, [r3, #0]
	for (char i=0; i < 4; i++){
20000fdc:	1d7b      	adds	r3, r7, #5
20000fde:	781a      	ldrb	r2, [r3, #0]
20000fe0:	1d7b      	adds	r3, r7, #5
20000fe2:	3201      	adds	r2, #1
20000fe4:	701a      	strb	r2, [r3, #0]
20000fe6:	1d7b      	adds	r3, r7, #5
20000fe8:	781b      	ldrb	r3, [r3, #0]
20000fea:	2b03      	cmp	r3, #3
20000fec:	d9d3      	bls.n	20000f96 <keyRead+0x1a>
			}
			return numpad[i*4+count];
		}*/
			
	}
	return read;
20000fee:	1dbb      	adds	r3, r7, #6
20000ff0:	881b      	ldrh	r3, [r3, #0]
20000ff2:	0018      	movs	r0, r3
20000ff4:	46bd      	mov	sp, r7
20000ff6:	b002      	add	sp, #8
20000ff8:	bd80      	pop	{r7, pc}
20000ffa:	46c0      	nop			; (mov r8, r8)
20000ffc:	40020c15 	andmi	r0, r2, r5, lsl ip
20001000:	40020c11 	andmi	r0, r2, r1, lsl ip

20001004 <buffer>:
	...

20001490 <buffer>:
	...

2000191c <buffer_changeLog>:
	...

2000199c <buffer_display>:
	...

20001d9c <ball_geometry>:
20001d9c:	0000000c 	andeq	r0, r0, ip
20001da0:	00000004 	andeq	r0, r0, r4
20001da4:	00000004 	andeq	r0, r0, r4
20001da8:	02000100 	andeq	r0, r0, #0, 2
20001dac:	01010001 	tsteq	r1, r1
20001db0:	03010201 	movweq	r0, #4609	; 0x1201
20001db4:	01020002 	tsteq	r2, r2
20001db8:	03020202 	movweq	r0, #8706	; 0x2202
20001dbc:	01030103 	tsteq	r3, r3, lsl #2
	...

20001dd0 <ball>:
20001dd0:	20001d9c 	mulcs	r0, ip, sp
	...
20001ddc:	00000001 	andeq	r0, r0, r1
20001de0:	00000001 	andeq	r0, r0, r1
20001de4:	20000a4d 	andcs	r0, r0, sp, asr #20
20001de8:	20000ab1 			; <UNDEFINED> instruction: 0x20000ab1
20001dec:	20000b0d 	andcs	r0, r0, sp, lsl #22
20001df0:	20000a0d 	andcs	r0, r0, sp, lsl #20
20001df4:	20000a2d 	andcs	r0, r0, sp, lsr #20
20001df8:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
20001dfc:	31207265 			; <UNDEFINED> instruction: 0x31207265
20001e00:	0000203a 	andeq	r2, r0, sl, lsr r0
20001e04:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
20001e08:	32207265 	eorcc	r7, r0, #1342177286	; 0x50000006
20001e0c:	0000203a 	andeq	r2, r0, sl, lsr r0
20001e10:	0a030201 	beq	200c261c <ball+0xc084c>
20001e14:	0b060504 	bleq	2018322c <ball+0x18145c>
20001e18:	0c090807 	stceq	8, cr0, [r9], {7}
20001e1c:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20001dec <ball+0x1c>
20001e20:	4f5b063f 	svcmi	0x005b063f
20001e24:	077d6d66 	ldrbeq	r6, [sp, -r6, ror #26]!
20001e28:	7c776f7f 	ldclvc	15, cr6, [r7], #-508	; 0xfffffe04
20001e2c:	71795e39 	cmnvc	r9, r9, lsr lr

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000034d 	andeq	r0, r0, sp, asr #6
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000003d 	andeq	r0, r0, sp, lsr r0
  10:	0001510c 	andeq	r5, r1, ip, lsl #2
  14:	0000e300 	andeq	lr, r0, r0, lsl #6
	...
  24:	01420200 	mrseq	r0, (UNDEF: 98)
  28:	048c0000 	streq	r0, [ip], #0
  2c:	00730b02 	rsbseq	r0, r3, r2, lsl #22
  30:	58030000 	stmdapl	r3, {}	; <UNPREDICTABLE>
  34:	02000002 	andeq	r0, r0, #2
  38:	0000730c 	andeq	r7, r0, ip, lsl #6
  3c:	2d040000 	stccs	0, cr0, [r4, #-0]
  40:	02000002 	andeq	r0, r0, #2
  44:	0000970d 	andeq	r9, r0, sp, lsl #14
  48:	04040000 	streq	r0, [r4], #-0
  4c:	0000014c 	andeq	r0, r0, ip, asr #2
  50:	00b80e02 	adcseq	r0, r8, r2, lsl #28
  54:	04800000 	streq	r0, [r0], #0
  58:	00030204 	andeq	r0, r3, r4, lsl #4
  5c:	df0f0200 	svcle	0x000f0200
  60:	84000000 	strhi	r0, [r0], #-0
  64:	02200404 	eoreq	r0, r0, #4, 8	; 0x4000000
  68:	10020000 	andne	r0, r2, r0
  6c:	000000b8 	strheq	r0, [r0], -r8
  70:	05000488 	streq	r0, [r0, #-1160]	; 0xfffffb78
  74:	00000090 	muleq	r0, r0, r0
  78:	00000089 	andeq	r0, r0, r9, lsl #1
  7c:	00008906 	andeq	r8, r0, r6, lsl #18
  80:	89067f00 	stmdbhi	r6, {r8, r9, sl, fp, ip, sp, lr}
  84:	07000000 	streq	r0, [r0, -r0]
  88:	07040700 	streq	r0, [r4, -r0, lsl #14]
  8c:	00000021 	andeq	r0, r0, r1, lsr #32
  90:	de080107 	adflee	f0, f0, f7
  94:	05000000 	streq	r0, [r0, #-0]
  98:	00000090 	muleq	r0, r0, r0
  9c:	000000a7 	andeq	r0, r0, r7, lsr #1
  a0:	00008906 	andeq	r8, r0, r6, lsl #18
  a4:	08007f00 	stmdaeq	r0, {r8, r9, sl, fp, ip, sp, lr}
  a8:	000000b2 	strheq	r0, [r0], -r2
  ac:	0000b209 	andeq	fp, r0, r9, lsl #4
  b0:	040a0000 	streq	r0, [sl], #-0
  b4:	00000025 	andeq	r0, r0, r5, lsr #32
  b8:	00a7040a 	adceq	r0, r7, sl, lsl #8
  bc:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
  c0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
  c4:	000000b2 	strheq	r0, [r0], -r2
  c8:	0000d809 	andeq	sp, r0, r9, lsl #16
  cc:	00d80900 	sbcseq	r0, r8, r0, lsl #18
  d0:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
  d4:	00000000 	andeq	r0, r0, r0
  d8:	d5080107 	strle	r0, [r8, #-263]	; 0xfffffef9
  dc:	0a000000 	beq	e4 <startup-0x1fffff1c>
  e0:	0000be04 	andeq	fp, r0, r4, lsl #28
  e4:	030e0b00 	movweq	r0, #60160	; 0xeb00
  e8:	12020000 	andne	r0, r2, #0
  ec:	00000025 	andeq	r0, r0, r5, lsr #32
  f0:	0001450c 	andeq	r4, r1, ip, lsl #10
  f4:	e51e0200 	ldr	r0, [lr, #-512]	; 0xfffffe00
  f8:	05000000 	streq	r0, [r0, #-0]
  fc:	00100403 	andseq	r0, r0, r3, lsl #8
 100:	03020d20 	movweq	r0, #11552	; 0x2d20
 104:	00011e05 	andeq	r1, r1, r5, lsl #28
 108:	00780e00 	rsbseq	r0, r8, r0, lsl #28
 10c:	00d80603 	sbcseq	r0, r8, r3, lsl #12
 110:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 114:	07030079 	smlsdxeq	r3, r9, r0, r0
 118:	000000d8 	ldrdeq	r0, [r0], -r8
 11c:	100b0001 	andne	r0, fp, r1
 120:	03000000 	movweq	r0, #0
 124:	00010108 	andeq	r0, r1, r8, lsl #2
 128:	03340d00 	teqeq	r4, #0, 26
 12c:	00016119 	andeq	r6, r1, r9, lsl r1
 130:	019c0300 	orrseq	r0, ip, r0, lsl #6
 134:	1a030000 	bne	c013c <startup-0x1ff3fec4>
 138:	00000161 	andeq	r0, r0, r1, ror #2
 13c:	01310300 	teqeq	r1, r0, lsl #6
 140:	1b030000 	blne	c0148 <startup-0x1ff3feb8>
 144:	00000161 	andeq	r0, r0, r1, ror #2
 148:	01370304 	teqeq	r7, r4, lsl #6
 14c:	1c030000 	stcne	0, cr0, [r3], {-0}
 150:	00000161 	andeq	r0, r0, r1, ror #2
 154:	78700e08 	ldmdavc	r0!, {r3, r9, sl, fp}^
 158:	681d0300 	ldmdavs	sp, {r8, r9}
 15c:	0c000001 	stceq	0, cr0, [r0], {1}
 160:	05040f00 	streq	r0, [r4, #-3840]	; 0xfffff100
 164:	00746e69 	rsbseq	r6, r4, r9, ror #28
 168:	00011e05 	andeq	r1, r1, r5, lsl #28
 16c:	00017800 	andeq	r7, r1, r0, lsl #16
 170:	00890600 	addeq	r0, r9, r0, lsl #12
 174:	00130000 	andseq	r0, r3, r0
 178:	0001230b 	andeq	r2, r1, fp, lsl #6
 17c:	291e0300 	ldmdbcs	lr, {r8, r9}
 180:	0b000001 	bleq	18c <startup-0x1ffffe74>
 184:	000001ab 	andeq	r0, r0, fp, lsr #3
 188:	018e1e03 	orreq	r1, lr, r3, lsl #28
 18c:	040a0000 	streq	r0, [sl], #-0
 190:	00000129 	andeq	r0, r0, r9, lsr #2
 194:	00019710 	andeq	r9, r1, r0, lsl r7
 198:	22032800 	andcs	r2, r3, #0, 16
 19c:	00000219 	andeq	r0, r0, r9, lsl r2
 1a0:	6f65670e 	svcvs	0x0065670e
 1a4:	83230300 			; <UNDEFINED> instruction: 0x83230300
 1a8:	00000001 	andeq	r0, r0, r1
 1ac:	00002e03 	andeq	r2, r0, r3, lsl #28
 1b0:	61240300 			; <UNDEFINED> instruction: 0x61240300
 1b4:	04000001 	streq	r0, [r0], #-1
 1b8:	00003303 	andeq	r3, r0, r3, lsl #6
 1bc:	61240300 			; <UNDEFINED> instruction: 0x61240300
 1c0:	08000001 	stmdaeq	r0, {r0}
 1c4:	00011403 	andeq	r1, r1, r3, lsl #8
 1c8:	61250300 			; <UNDEFINED> instruction: 0x61250300
 1cc:	0c000001 	stceq	0, cr0, [r0], {1}
 1d0:	00011903 	andeq	r1, r1, r3, lsl #18
 1d4:	61250300 			; <UNDEFINED> instruction: 0x61250300
 1d8:	10000001 	andne	r0, r0, r1
 1dc:	00014c03 	andeq	r4, r1, r3, lsl #24
 1e0:	2a260300 	bcs	980de8 <startup-0x1f67f218>
 1e4:	14000002 	strne	r0, [r0], #-2
 1e8:	00022003 	andeq	r2, r2, r3
 1ec:	2a270300 	bcs	9c0df4 <startup-0x1f63f20c>
 1f0:	18000002 	stmdane	r0, {r1}
 1f4:	00018203 	andeq	r8, r1, r3, lsl #4
 1f8:	2a280300 	bcs	a00e00 <startup-0x1f5ff200>
 1fc:	1c000002 	stcne	0, cr0, [r0], {2}
 200:	00010a03 	andeq	r0, r1, r3, lsl #20
 204:	45290300 	strmi	r0, [r9, #-768]!	; 0xfffffd00
 208:	20000002 	andcs	r0, r0, r2
 20c:	0003a903 	andeq	sl, r3, r3, lsl #18
 210:	5b2a0300 	blpl	a80e18 <startup-0x1f57f1e8>
 214:	24000002 	strcs	r0, [r0], #-2
 218:	02240800 	eoreq	r0, r4, #0, 16
 21c:	24090000 	strcs	r0, [r9], #-0
 220:	00000002 	andeq	r0, r0, r2
 224:	0194040a 	orrseq	r0, r4, sl, lsl #8
 228:	040a0000 	streq	r0, [sl], #-0
 22c:	00000219 	andeq	r0, r0, r9, lsl r2
 230:	00024508 	andeq	r4, r2, r8, lsl #10
 234:	02240900 	eoreq	r0, r4, #0, 18
 238:	61090000 	mrsvs	r0, (UNDEF: 9)
 23c:	09000001 	stmdbeq	r0, {r0}
 240:	00000161 	andeq	r0, r0, r1, ror #2
 244:	30040a00 	andcc	r0, r4, r0, lsl #20
 248:	08000002 	stmdaeq	r0, {r1}
 24c:	0000025b 	andeq	r0, r0, fp, asr r2
 250:	00022409 	andeq	r2, r2, r9, lsl #8
 254:	011e0900 	tsteq	lr, r0, lsl #18
 258:	0a000000 	beq	260 <startup-0x1ffffda0>
 25c:	00024b04 	andeq	r4, r2, r4, lsl #22
 260:	04240b00 	strteq	r0, [r4], #-2816	; 0xfffff500
 264:	2b030000 	blcs	c026c <startup-0x1ff3fd94>
 268:	00000194 	muleq	r0, r4, r1
 26c:	0000080b 	andeq	r0, r0, fp, lsl #16
 270:	242b0300 	strtcs	r0, [fp], #-768	; 0xfffffd00
 274:	11000002 	tstne	r0, r2
 278:	0000011e 	andeq	r0, r0, lr, lsl r1
 27c:	01781d01 	cmneq	r8, r1, lsl #26
 280:	03050000 	movweq	r0, #20480	; 0x5000
 284:	20001d9c 	mulcs	r0, ip, sp
 288:	0000380c 	andeq	r3, r0, ip, lsl #16
 28c:	61240100 			; <UNDEFINED> instruction: 0x61240100
 290:	05000002 	streq	r0, [r0, #-2]
 294:	001dd003 	andseq	sp, sp, r3
 298:	012c1220 			; <UNDEFINED> instruction: 0x012c1220
 29c:	2f010000 	svccs	0x00010000
 2a0:	20000010 	andcs	r0, r0, r0, lsl r0
 2a4:	00000104 	andeq	r0, r0, r4, lsl #2
 2a8:	03179c01 	tsteq	r7, #256	; 0x100
 2ac:	3d130000 	ldccc	0, cr0, [r3, #-0]
 2b0:	01000001 	tsteq	r0, r1
 2b4:	0001612f 	andeq	r6, r1, pc, lsr #2
 2b8:	44910200 	ldrmi	r0, [r1], #512	; 0x200
 2bc:	00001613 	andeq	r1, r0, r3, lsl r6
 2c0:	172f0100 	strne	r0, [pc, -r0, lsl #2]!
 2c4:	02000003 	andeq	r0, r0, #3
 2c8:	73144091 	tstvc	r4, #145	; 0x91
 2cc:	1d380100 	ldfnes	f0, [r8, #-0]
 2d0:	02000003 	andeq	r0, r0, #3
 2d4:	870c6c91 			; <UNDEFINED> instruction: 0x870c6c91
 2d8:	01000001 	tsteq	r0, r1
 2dc:	00032339 	andeq	r2, r3, r9, lsr r3
 2e0:	5c910200 	lfmpl	f0, 4, [r1], {0}
 2e4:	00018f0c 	andeq	r8, r1, ip, lsl #30
 2e8:	233e0100 	teqcs	lr, #0, 2
 2ec:	02000003 	andeq	r0, r0, #3
 2f0:	70145091 	mulsvc	r4, r1, r0
 2f4:	6c540100 	ldfvse	f0, [r4], {-0}
 2f8:	02000002 	andeq	r0, r0, #2
 2fc:	16156891 			; <UNDEFINED> instruction: 0x16156891
 300:	000001a6 	andeq	r0, r0, r6, lsr #3
 304:	033a6101 	teqeq	sl, #1073741824	; 0x40000000
 308:	17150000 	ldrne	r0, [r5, -r0]
 30c:	63010069 	movwvs	r0, #4201	; 0x1069
 310:	00000161 	andeq	r0, r0, r1, ror #2
 314:	0a000000 	beq	31c <startup-0x1ffffce4>
 318:	00031d04 	andeq	r1, r3, r4, lsl #26
 31c:	90040a00 	andls	r0, r4, r0, lsl #20
 320:	05000000 	streq	r0, [r0, #-0]
 324:	00000090 	muleq	r0, r0, r0
 328:	00000333 	andeq	r0, r0, r3, lsr r3
 32c:	00008906 	andeq	r8, r0, r6, lsl #18
 330:	07000a00 	streq	r0, [r0, -r0, lsl #20]
 334:	001b0702 	andseq	r0, fp, r2, lsl #14
 338:	33180000 	tstcc	r8, #0
 33c:	19000003 	stmdbne	r0, {r0, r1}
 340:	00000000 	andeq	r0, r0, r0
 344:	00000701 	andeq	r0, r0, r1, lsl #14
 348:	000c2000 	andeq	r2, ip, r0
 34c:	9c010000 	stcls	0, cr0, [r1], {-0}
 350:	00009800 	andeq	r9, r0, r0, lsl #16
 354:	50000400 	andpl	r0, r0, r0, lsl #8
 358:	04000001 	streq	r0, [r0], #-1
 35c:	00003d01 	andeq	r3, r0, r1, lsl #26
 360:	01b50c00 			; <UNDEFINED> instruction: 0x01b50c00
 364:	00e30000 	rsceq	r0, r3, r0
 368:	01140000 	tsteq	r4, r0
 36c:	006e2000 	rsbeq	r2, lr, r0
 370:	00b70000 	adcseq	r0, r7, r0
 374:	01020000 	mrseq	r0, (UNDEF: 2)
 378:	0000d508 	andeq	sp, r0, r8, lsl #10
 37c:	01fb0300 	mvnseq	r0, r0, lsl #6
 380:	24010000 	strcs	r0, [r1], #-0
 384:	20000172 	andcs	r0, r0, r2, ror r1
 388:	00000010 	andeq	r0, r0, r0, lsl r0
 38c:	004f9c01 	subeq	r9, pc, r1, lsl #24
 390:	6d040000 	stcvs	0, cr0, [r4, #-0]
 394:	24010073 	strcs	r0, [r1], #-115	; 0xffffff8d
 398:	0000004f 	andeq	r0, r0, pc, asr #32
 39c:	00749102 	rsbseq	r9, r4, r2, lsl #2
 3a0:	21070402 	tstcs	r7, r2, lsl #8
 3a4:	03000000 	movweq	r0, #0
 3a8:	000001e4 	andeq	r0, r0, r4, ror #3
 3ac:	01621b01 	cmneq	r2, r1, lsl #22
 3b0:	00102000 	andseq	r2, r0, r0
 3b4:	9c010000 	stcls	0, cr0, [r1], {-0}
 3b8:	00000079 	andeq	r0, r0, r9, ror r0
 3bc:	00737504 	rsbseq	r7, r3, r4, lsl #10
 3c0:	004f1b01 	subeq	r1, pc, r1, lsl #22
 3c4:	91020000 	mrsls	r0, (UNDEF: 2)
 3c8:	07050074 	smlsdxeq	r5, r4, r0, r0
 3cc:	01000002 	tsteq	r0, r2
 3d0:	0001580f 	andeq	r5, r1, pc, lsl #16
 3d4:	00000a20 	andeq	r0, r0, r0, lsr #20
 3d8:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
 3dc:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 3e0:	01140501 	tsteq	r4, r1, lsl #10
 3e4:	00442000 	subeq	r2, r4, r0
 3e8:	9c010000 	stcls	0, cr0, [r1], {-0}
 3ec:	00047e00 	andeq	r7, r4, r0, lsl #28
 3f0:	b0000400 	andlt	r0, r0, r0, lsl #8
 3f4:	04000001 	streq	r0, [r0], #-1
 3f8:	00003d01 	andeq	r3, r0, r1, lsl #26
 3fc:	02a80c00 	adceq	r0, r8, #0, 24
 400:	00e30000 	rsceq	r0, r3, r0
 404:	01840000 	orreq	r0, r4, r0
 408:	08882000 	stmeq	r8, {sp}
 40c:	01290000 			; <UNDEFINED> instruction: 0x01290000
 410:	42020000 	andmi	r0, r2, #0
 414:	8c000001 	stchi	0, cr0, [r0], {1}
 418:	730b0204 	movwvc	r0, #45572	; 0xb204
 41c:	03000000 	movweq	r0, #0
 420:	00000258 	andeq	r0, r0, r8, asr r2
 424:	00730c02 	rsbseq	r0, r3, r2, lsl #24
 428:	04000000 	streq	r0, [r0], #-0
 42c:	0000022d 	andeq	r0, r0, sp, lsr #4
 430:	00970d02 	addseq	r0, r7, r2, lsl #26
 434:	04000000 	streq	r0, [r0], #-0
 438:	00014c04 	andeq	r4, r1, r4, lsl #24
 43c:	b80e0200 	stmdalt	lr, {r9}
 440:	80000000 	andhi	r0, r0, r0
 444:	03020404 	movweq	r0, #9220	; 0x2404
 448:	0f020000 	svceq	0x00020000
 44c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 450:	20040484 	andcs	r0, r4, r4, lsl #9
 454:	02000002 	andeq	r0, r0, #2
 458:	0000b810 	andeq	fp, r0, r0, lsl r8
 45c:	00048800 	andeq	r8, r4, r0, lsl #16
 460:	00009005 	andeq	r9, r0, r5
 464:	00008900 	andeq	r8, r0, r0, lsl #18
 468:	00890600 	addeq	r0, r9, r0, lsl #12
 46c:	067f0000 	ldrbteq	r0, [pc], -r0
 470:	00000089 	andeq	r0, r0, r9, lsl #1
 474:	04070007 	streq	r0, [r7], #-7
 478:	00002107 	andeq	r2, r0, r7, lsl #2
 47c:	08010700 	stmdaeq	r1, {r8, r9, sl}
 480:	000000de 	ldrdeq	r0, [r0], -lr
 484:	00009005 	andeq	r9, r0, r5
 488:	0000a700 	andeq	sl, r0, r0, lsl #14
 48c:	00890600 	addeq	r0, r9, r0, lsl #12
 490:	007f0000 	rsbseq	r0, pc, r0
 494:	0000b208 	andeq	fp, r0, r8, lsl #4
 498:	00b20900 	adcseq	r0, r2, r0, lsl #18
 49c:	0a000000 	beq	4a4 <startup-0x1ffffb5c>
 4a0:	00002504 	andeq	r2, r0, r4, lsl #10
 4a4:	a7040a00 	strge	r0, [r4, -r0, lsl #20]
 4a8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 4ac:	000000d8 	ldrdeq	r0, [r0], -r8
 4b0:	0000b209 	andeq	fp, r0, r9, lsl #4
 4b4:	00d80900 	sbcseq	r0, r8, r0, lsl #18
 4b8:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
 4bc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 4c0:	000000d8 	ldrdeq	r0, [r0], -r8
 4c4:	08010700 	stmdaeq	r1, {r8, r9, sl}
 4c8:	000000d5 	ldrdeq	r0, [r0], -r5
 4cc:	00be040a 	adcseq	r0, lr, sl, lsl #8
 4d0:	0e0b0000 	cdpeq	0, 0, cr0, cr11, cr0, {0}
 4d4:	02000003 	andeq	r0, r0, #3
 4d8:	00002512 	andeq	r2, r0, r2, lsl r5
 4dc:	030d0b00 	movweq	r0, #56064	; 0xdb00
 4e0:	12020000 	andne	r0, r2, #0
 4e4:	000000b2 	strheq	r0, [r0], -r2
 4e8:	0001450c 	andeq	r4, r1, ip, lsl #10
 4ec:	e51e0200 	ldr	r0, [lr, #-512]	; 0xfffffe00
 4f0:	05000000 	streq	r0, [r0, #-0]
 4f4:	00149003 	andseq	r9, r4, r3
 4f8:	01070d20 	tsteq	r7, r0, lsr #26
 4fc:	000000d8 	ldrdeq	r0, [r0], -r8
 500:	01441d03 	cmpeq	r4, r3, lsl #26
 504:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
 508:	01000003 	tsteq	r0, r3
 50c:	00027e0e 	andeq	r7, r2, lr, lsl #28
 510:	1e0e0200 	cdpne	2, 0, cr0, cr14, cr0, {0}
 514:	04000003 	streq	r0, [r0], #-3
 518:	0003180e 	andeq	r1, r3, lr, lsl #16
 51c:	130e0800 	movwne	r0, #59392	; 0xe800
 520:	10000002 	andne	r0, r0, r2
 524:	0002dd0e 	andeq	sp, r2, lr, lsl #26
 528:	420f2000 	andmi	r2, pc, #0
 52c:	4000455f 	andmi	r4, r0, pc, asr r5
 530:	02511000 	subseq	r1, r1, #0
 534:	d2010000 	andle	r0, r1, #0
 538:	00000073 	andeq	r0, r0, r3, ror r0
 53c:	199c0305 	ldmibne	ip, {r0, r2, r8, r9}
 540:	26102000 	ldrcs	r2, [r0], -r0
 544:	01000002 	tsteq	r0, r2
 548:	000097d3 	ldrdeq	r9, [r0], -r3
 54c:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
 550:	11200019 			; <UNDEFINED> instruction: 0x11200019
 554:	00000219 	andeq	r0, r0, r9, lsl r2
 558:	09b8db01 	ldmibeq	r8!, {r0, r8, r9, fp, ip, lr, pc}
 55c:	00542000 	subseq	r2, r4, r0
 560:	9c010000 	stcls	0, cr0, [r1], {-0}
 564:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
 568:	00026012 	andeq	r6, r2, r2, lsl r0
 56c:	f0db0100 			; <UNDEFINED> instruction: 0xf0db0100
 570:	02000000 	andeq	r0, r0, #0
 574:	c0136c91 	mulsgt	r3, r1, ip
 578:	44200009 	strtmi	r0, [r0], #-9
 57c:	14000000 	strne	r0, [r0], #-0
 580:	dc010069 	stcle	0, cr0, [r1], {105}	; 0x69
 584:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
 588:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
 58c:	200009d6 	ldrdcs	r0, [r0], -r6
 590:	00000022 	andeq	r0, r0, r2, lsr #32
 594:	01006a14 	tsteq	r0, r4, lsl sl
 598:	0001b6de 	ldrdeq	fp, [r1], -lr
 59c:	70910200 	addsvc	r0, r1, r0, lsl #4
 5a0:	15000000 	strne	r0, [r0, #-0]
 5a4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 5a8:	40110074 	andsmi	r0, r1, r4, ror r0
 5ac:	01000003 	tsteq	r0, r3
 5b0:	000894be 			; <UNDEFINED> instruction: 0x000894be
 5b4:	00012420 	andeq	r2, r1, r0, lsr #8
 5b8:	239c0100 	orrscs	r0, ip, #0, 2
 5bc:	12000002 	andne	r0, r0, #2
 5c0:	00000261 	andeq	r0, r0, r1, ror #4
 5c4:	00f0be01 	rscseq	fp, r0, r1, lsl #28
 5c8:	91020000 	mrsls	r0, (UNDEF: 2)
 5cc:	00781664 	rsbseq	r1, r8, r4, ror #12
 5d0:	00d8be01 	sbcseq	fp, r8, r1, lsl #28
 5d4:	91020000 	mrsls	r0, (UNDEF: 2)
 5d8:	00791663 	rsbseq	r1, r9, r3, ror #12
 5dc:	00d8be01 	sbcseq	fp, r8, r1, lsl #28
 5e0:	91020000 	mrsls	r0, (UNDEF: 2)
 5e4:	65731662 	ldrbvs	r1, [r3, #-1634]!	; 0xfffff99e
 5e8:	be010074 	mcrlt	0, 0, r0, cr1, cr4, {3}
 5ec:	000000d8 	ldrdeq	r0, [r0], -r8
 5f0:	0c619102 	stfeqp	f1, [r1], #-8
 5f4:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
 5f8:	0090bf01 	addseq	fp, r0, r1, lsl #30
 5fc:	91020000 	mrsls	r0, (UNDEF: 2)
 600:	03270c6f 			; <UNDEFINED> instruction: 0x03270c6f
 604:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
 608:	00000090 	muleq	r0, r0, r0
 60c:	006e9102 	rsbeq	r9, lr, r2, lsl #2
 610:	0002ec17 	andeq	lr, r2, r7, lsl ip
 614:	3ca20100 	stfccs	f0, [r2]
 618:	58200007 	stmdapl	r0!, {r0, r1, r2}
 61c:	01000001 	tsteq	r0, r1
 620:	00029f9c 	muleq	r2, ip, pc	; <UNPREDICTABLE>
 624:	038a1200 	orreq	r1, sl, #0, 4
 628:	a2010000 	andge	r0, r1, #0
 62c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 630:	145c9102 	ldrbne	r9, [ip], #-258	; 0xfffffefe
 634:	a5010078 	strge	r0, [r1, #-120]	; 0xffffff88
 638:	000000d8 	ldrdeq	r0, [r0], -r8
 63c:	14679102 	strbtne	r9, [r7], #-258	; 0xfffffefe
 640:	a5010069 	strge	r0, [r1, #-105]	; 0xffffff97
 644:	000000d8 	ldrdeq	r0, [r0], -r8
 648:	14669102 	strbtne	r9, [r6], #-258	; 0xfffffefe
 64c:	a501006a 	strge	r0, [r1, #-106]	; 0xffffff96
 650:	000000d8 	ldrdeq	r0, [r0], -r8
 654:	0c659102 	stfeqp	f1, [r5], #-8
 658:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
 65c:	00d8a601 	sbcseq	sl, r8, r1, lsl #12
 660:	91020000 	mrsls	r0, (UNDEF: 2)
 664:	024c0c64 	subeq	r0, ip, #100, 24	; 0x6400
 668:	a6010000 	strge	r0, [r1], -r0
 66c:	000000d8 	ldrdeq	r0, [r0], -r8
 670:	13629102 	cmnne	r2, #-2147483648	; 0x80000000
 674:	20000758 	andcs	r0, r0, r8, asr r7
 678:	00000102 	andeq	r0, r0, r2, lsl #2
 67c:	0002370c 	andeq	r3, r2, ip, lsl #14
 680:	90a90100 	adcls	r0, r9, r0, lsl #2
 684:	02000000 	andeq	r0, r0, #0
 688:	00006391 	muleq	r0, r1, r3
 68c:	0002fa17 	andeq	pc, r2, r7, lsl sl	; <UNPREDICTABLE>
 690:	00870100 	addeq	r0, r7, r0, lsl #2
 694:	3c200006 	stccc	0, cr0, [r0], #-24	; 0xffffffe8
 698:	01000001 	tsteq	r0, r1
 69c:	0003059c 	muleq	r3, ip, r5
 6a0:	00781600 	rsbseq	r1, r8, r0, lsl #12
 6a4:	00d88701 	sbcseq	r8, r8, r1, lsl #14
 6a8:	91020000 	mrsls	r0, (UNDEF: 2)
 6ac:	00791667 	rsbseq	r1, r9, r7, ror #12
 6b0:	00d88701 	sbcseq	r8, r8, r1, lsl #14
 6b4:	91020000 	mrsls	r0, (UNDEF: 2)
 6b8:	65731666 	ldrbvs	r1, [r3, #-1638]!	; 0xfffff99a
 6bc:	87010074 	smlsdxhi	r1, r4, r0, r0
 6c0:	000000d8 	ldrdeq	r0, [r0], -r8
 6c4:	0c659102 	stfeqp	f1, [r5], #-8
 6c8:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
 6cc:	00908a01 	addseq	r8, r0, r1, lsl #20
 6d0:	91020000 	mrsls	r0, (UNDEF: 2)
 6d4:	03270c6f 			; <UNDEFINED> instruction: 0x03270c6f
 6d8:	8d010000 	stchi	0, cr0, [r1, #-0]
 6dc:	00000090 	muleq	r0, r0, r0
 6e0:	0c6d9102 	stfeqp	f1, [sp], #-8
 6e4:	00000291 	muleq	r0, r1, r2
 6e8:	00d89701 	sbcseq	r9, r8, r1, lsl #14
 6ec:	91020000 	mrsls	r0, (UNDEF: 2)
 6f0:	6917006e 	ldmdbvs	r7, {r1, r2, r3, r5, r6}
 6f4:	01000002 	tsteq	r0, r2
 6f8:	0005a87d 	andeq	sl, r5, sp, ror r8
 6fc:	00005820 	andeq	r5, r0, r0, lsr #16
 700:	479c0100 	ldrmi	r0, [ip, r0, lsl #2]
 704:	13000003 	movwne	r0, #3
 708:	200005ae 	andcs	r0, r0, lr, lsr #11
 70c:	0000004a 	andeq	r0, r0, sl, asr #32
 710:	01006914 	tsteq	r0, r4, lsl r9
 714:	0001b67e 	andeq	fp, r1, lr, ror r6
 718:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 71c:	0005d213 	andeq	sp, r5, r3, lsl r2
 720:	00001a20 	andeq	r1, r0, r0, lsr #20
 724:	006a1400 	rsbeq	r1, sl, r0, lsl #8
 728:	01b68101 			; <UNDEFINED> instruction: 0x01b68101
 72c:	91020000 	mrsls	r0, (UNDEF: 2)
 730:	00000070 	andeq	r0, r0, r0, ror r0
 734:	00039118 	andeq	r9, r3, r8, lsl r1
 738:	246a0100 	strbtcs	r0, [sl], #-256	; 0xffffff00
 73c:	84200005 	strthi	r0, [r0], #-5
 740:	01000000 	mrseq	r0, (UNDEF: 0)
 744:	02e3199c 	rsceq	r1, r3, #156, 18	; 0x270000
 748:	66010000 	strvs	r0, [r1], -r0
 74c:	2000050a 	andcs	r0, r0, sl, lsl #10
 750:	0000001a 	andeq	r0, r0, sl, lsl r0
 754:	3f1a9c01 	svccc	0x001a9c01
 758:	01000002 	tsteq	r0, r2
 75c:	0000d861 	andeq	sp, r0, r1, ror #16
 760:	0004e000 	andeq	lr, r4, r0
 764:	00002a20 	andeq	r2, r0, r0, lsr #20
 768:	8f9c0100 	svchi	0x009c0100
 76c:	16000003 	strne	r0, [r0], -r3
 770:	61010063 	tstvs	r1, r3, rrx
 774:	000000d8 	ldrdeq	r0, [r0], -r8
 778:	00779102 	rsbseq	r9, r7, r2, lsl #2
 77c:	00032d17 	andeq	r2, r3, r7, lsl sp
 780:	805a0100 	subshi	r0, sl, r0, lsl #2
 784:	60200004 	eorvs	r0, r0, r4
 788:	01000000 	mrseq	r0, (UNDEF: 0)
 78c:	0003bf9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
 790:	024c1200 	subeq	r1, ip, #0, 4
 794:	5a010000 	bpl	4079c <startup-0x1ffbf864>
 798:	000000d8 	ldrdeq	r0, [r0], -r8
 79c:	16779102 	ldrbtne	r9, [r7], -r2, lsl #2
 7a0:	5a010063 	bpl	40934 <startup-0x1ffbf6cc>
 7a4:	000000d8 	ldrdeq	r0, [r0], -r8
 7a8:	00769102 	rsbseq	r9, r6, r2, lsl #2
 7ac:	00037417 	andeq	r7, r3, r7, lsl r4
 7b0:	28530100 	ldmdacs	r3, {r8}^
 7b4:	58200004 	stmdapl	r0!, {r2}
 7b8:	01000000 	mrseq	r0, (UNDEF: 0)
 7bc:	0003ef9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
 7c0:	6d631600 	stclvs	6, cr1, [r3, #-0]
 7c4:	53010064 	movwpl	r0, #4196	; 0x1064
 7c8:	000000d8 	ldrdeq	r0, [r0], -r8
 7cc:	16779102 	ldrbtne	r9, [r7], -r2, lsl #2
 7d0:	53010063 	movwpl	r0, #4195	; 0x1063
 7d4:	000000d8 	ldrdeq	r0, [r0], -r8
 7d8:	00769102 	rsbseq	r9, r6, r2, lsl #2
 7dc:	00028317 	andeq	r8, r2, r7, lsl r3
 7e0:	803d0100 	eorshi	r0, sp, r0, lsl #2
 7e4:	a8200003 	stmdage	r0!, {r0, r1}
 7e8:	01000000 	mrseq	r0, (UNDEF: 0)
 7ec:	00041f9c 	muleq	r4, ip, pc	; <UNPREDICTABLE>
 7f0:	61761600 	cmnvs	r6, r0, lsl #12
 7f4:	3d01006c 	stccc	0, cr0, [r1, #-432]	; 0xfffffe50
 7f8:	000000d8 	ldrdeq	r0, [r0], -r8
 7fc:	16779102 	ldrbtne	r9, [r7], -r2, lsl #2
 800:	3d010063 	stccc	0, cr0, [r1, #-396]	; 0xfffffe74
 804:	000000d8 	ldrdeq	r0, [r0], -r8
 808:	00769102 	rsbseq	r9, r6, r2, lsl #2
 80c:	0003541a 	andeq	r5, r3, sl, lsl r4
 810:	90240100 	eorls	r0, r4, r0, lsl #2
 814:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
 818:	c8200002 	stmdagt	r0!, {r1}
 81c:	01000000 	mrseq	r0, (UNDEF: 0)
 820:	0004529c 	muleq	r4, ip, r2
 824:	00631600 	rsbeq	r1, r3, r0, lsl #12
 828:	00d82401 	sbcseq	r2, r8, r1, lsl #8
 82c:	91020000 	mrsls	r0, (UNDEF: 2)
 830:	5652146f 	ldrbpl	r1, [r2], -pc, ror #8
 834:	d82e0100 	stmdale	lr!, {r8}
 838:	02000000 	andeq	r0, r0, #0
 83c:	1b007791 	blne	1e688 <startup-0x1ffe1978>
 840:	00000361 	andeq	r0, r0, r1, ror #6
 844:	02141201 	andseq	r1, r4, #268435456	; 0x10000000
 848:	00a42000 	adceq	r2, r4, r0
 84c:	9c010000 	stcls	0, cr0, [r1], {-0}
 850:	0002961c 	andeq	r9, r2, ip, lsl r6
 854:	84090100 	strhi	r0, [r9], #-256	; 0xffffff00
 858:	90200001 	eorls	r0, r0, r1
 85c:	01000000 	mrseq	r0, (UNDEF: 0)
 860:	0063169c 	mlseq	r3, ip, r6, r1
 864:	00900901 	addseq	r0, r0, r1, lsl #18
 868:	91020000 	mrsls	r0, (UNDEF: 2)
 86c:	f5000077 			; <UNDEFINED> instruction: 0xf5000077
 870:	04000002 	streq	r0, [r0], #-2
 874:	00036600 	andeq	r6, r3, r0, lsl #12
 878:	3d010400 	cfstrscc	mvf0, [r1, #-0]
 87c:	0c000000 	stceq	0, cr0, [r0], {-0}
 880:	000003b6 			; <UNDEFINED> instruction: 0x000003b6
 884:	000000e3 	andeq	r0, r0, r3, ror #1
 888:	20000a0c 	andcs	r0, r0, ip, lsl #20
 88c:	00000198 	muleq	r0, r8, r1
 890:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
 894:	05020202 	streq	r0, [r2, #-514]	; 0xfffffdfe
 898:	00000042 	andeq	r0, r0, r2, asr #32
 89c:	02007803 	andeq	r7, r0, #196608	; 0x30000
 8a0:	00004206 	andeq	r4, r0, r6, lsl #4
 8a4:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
 8a8:	42070200 	andmi	r0, r7, #0, 4
 8ac:	01000000 	mrseq	r0, (UNDEF: 0)
 8b0:	08010400 	stmdaeq	r1, {sl}
 8b4:	000000d5 	ldrdeq	r0, [r0], -r5
 8b8:	00001005 	andeq	r1, r0, r5
 8bc:	25080200 	strcs	r0, [r8, #-512]	; 0xfffffe00
 8c0:	02000000 	andeq	r0, r0, #0
 8c4:	8c190234 	lfmhi	f0, 4, [r9], {52}	; 0x34
 8c8:	06000000 	streq	r0, [r0], -r0
 8cc:	0000019c 	muleq	r0, ip, r1
 8d0:	008c1a02 	addeq	r1, ip, r2, lsl #20
 8d4:	06000000 	streq	r0, [r0], -r0
 8d8:	00000131 	andeq	r0, r0, r1, lsr r1
 8dc:	008c1b02 	addeq	r1, ip, r2, lsl #22
 8e0:	06040000 	streq	r0, [r4], -r0
 8e4:	00000137 	andeq	r0, r0, r7, lsr r1
 8e8:	008c1c02 	addeq	r1, ip, r2, lsl #24
 8ec:	03080000 	movweq	r0, #32768	; 0x8000
 8f0:	02007870 	andeq	r7, r0, #112, 16	; 0x700000
 8f4:	0000931d 	andeq	r9, r0, sp, lsl r3
 8f8:	07000c00 	streq	r0, [r0, -r0, lsl #24]
 8fc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 900:	49080074 	stmdbmi	r8, {r2, r4, r5, r6}
 904:	a3000000 	movwge	r0, #0
 908:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 90c:	000000a3 	andeq	r0, r0, r3, lsr #1
 910:	04040013 	streq	r0, [r4], #-19	; 0xffffffed
 914:	00002107 	andeq	r2, r0, r7, lsl #2
 918:	01ab0500 			; <UNDEFINED> instruction: 0x01ab0500
 91c:	1e020000 	cdpne	0, 0, cr0, cr2, cr0, {0}
 920:	000000b5 	strheq	r0, [r0], -r5
 924:	0054040a 	subseq	r0, r4, sl, lsl #8
 928:	970b0000 	strls	r0, [fp, -r0]
 92c:	28000001 	stmdacs	r0, {r0}
 930:	01402202 	cmpeq	r0, r2, lsl #4
 934:	67030000 	strvs	r0, [r3, -r0]
 938:	02006f65 	andeq	r6, r0, #404	; 0x194
 93c:	0000aa23 	andeq	sl, r0, r3, lsr #20
 940:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
 944:	02000000 	andeq	r0, r0, #0
 948:	00008c24 	andeq	r8, r0, r4, lsr #24
 94c:	33060400 	movwcc	r0, #25600	; 0x6400
 950:	02000000 	andeq	r0, r0, #0
 954:	00008c24 	andeq	r8, r0, r4, lsr #24
 958:	14060800 	strne	r0, [r6], #-2048	; 0xfffff800
 95c:	02000001 	andeq	r0, r0, #1
 960:	00008c25 	andeq	r8, r0, r5, lsr #24
 964:	19060c00 	stmdbne	r6, {sl, fp}
 968:	02000001 	andeq	r0, r0, #1
 96c:	00008c25 	andeq	r8, r0, r5, lsr #24
 970:	4c061000 	stcmi	0, cr1, [r6], {-0}
 974:	02000001 	andeq	r0, r0, #1
 978:	00015126 	andeq	r5, r1, r6, lsr #2
 97c:	20061400 	andcs	r1, r6, r0, lsl #8
 980:	02000002 	andeq	r0, r0, #2
 984:	00015127 	andeq	r5, r1, r7, lsr #2
 988:	82061800 	andhi	r1, r6, #0, 16
 98c:	02000001 	andeq	r0, r0, #1
 990:	00015128 	andeq	r5, r1, r8, lsr #2
 994:	0a061c00 	beq	18799c <startup-0x1fe78664>
 998:	02000001 	andeq	r0, r0, #1
 99c:	00016c29 	andeq	r6, r1, r9, lsr #24
 9a0:	a9062000 	stmdbge	r6, {sp}
 9a4:	02000003 	andeq	r0, r0, #3
 9a8:	0001822a 	andeq	r8, r1, sl, lsr #4
 9ac:	0c002400 	cfstrseq	mvf2, [r0], {-0}
 9b0:	0000014b 	andeq	r0, r0, fp, asr #2
 9b4:	00014b0d 	andeq	r4, r1, sp, lsl #22
 9b8:	040a0000 	streq	r0, [sl], #-0
 9bc:	000000bb 	strheq	r0, [r0], -fp
 9c0:	0140040a 	cmpeq	r0, sl, lsl #8
 9c4:	6c0c0000 	stcvs	0, cr0, [ip], {-0}
 9c8:	0d000001 	stceq	0, cr0, [r0, #-4]
 9cc:	0000014b 	andeq	r0, r0, fp, asr #2
 9d0:	00008c0d 	andeq	r8, r0, sp, lsl #24
 9d4:	008c0d00 	addeq	r0, ip, r0, lsl #26
 9d8:	0a000000 	beq	9e0 <startup-0x1ffff620>
 9dc:	00015704 	andeq	r5, r1, r4, lsl #14
 9e0:	01820c00 	orreq	r0, r2, r0, lsl #24
 9e4:	4b0d0000 	blmi	3409ec <startup-0x1fcbf614>
 9e8:	0d000001 	stceq	0, cr0, [r0, #-4]
 9ec:	00000049 	andeq	r0, r0, r9, asr #32
 9f0:	72040a00 	andvc	r0, r4, #0, 20
 9f4:	05000001 	streq	r0, [r0, #-1]
 9f8:	00000424 	andeq	r0, r0, r4, lsr #8
 9fc:	00bb2b02 	adcseq	r2, fp, r2, lsl #22
 a00:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
 a04:	02000000 	andeq	r0, r0, #0
 a08:	00014b2b 	andeq	r4, r1, fp, lsr #22
 a0c:	041f0e00 	ldreq	r0, [pc], #-3584	; a14 <startup-0x1ffff5ec>
 a10:	1f010000 	svcne	0x00010000
 a14:	20000b0c 	andcs	r0, r0, ip, lsl #22
 a18:	00000098 	muleq	r0, r8, r0
 a1c:	01c09c01 	biceq	r9, r0, r1, lsl #24
 a20:	6f0f0000 	svcvs	0x000f0000
 a24:	c01f0100 	andsgt	r0, pc, r0, lsl #2
 a28:	02000001 	andeq	r0, r0, #1
 a2c:	0a007491 	beq	1dc78 <startup-0x1ffe2388>
 a30:	00018804 	andeq	r8, r1, r4, lsl #16
 a34:	04060e00 	streq	r0, [r6], #-3584	; 0xfffff200
 a38:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
 a3c:	20000ab0 			; <UNDEFINED> instruction: 0x20000ab0
 a40:	0000005c 	andeq	r0, r0, ip, asr r0
 a44:	02159c01 	andseq	r9, r5, #256	; 0x100
 a48:	6f0f0000 	svcvs	0x000f0000
 a4c:	c0190100 	andsgt	r0, r9, r0, lsl #2
 a50:	02000001 	andeq	r0, r0, #1
 a54:	b8106c91 	ldmdalt	r0, {r0, r4, r7, sl, fp, sp, lr}
 a58:	4c20000a 	stcmi	0, cr0, [r0], #-40	; 0xffffffd8
 a5c:	11000000 	mrsne	r0, (UNDEF: 0)
 a60:	1a010069 	bne	40c0c <startup-0x1ffbf3f4>
 a64:	0000008c 	andeq	r0, r0, ip, lsl #1
 a68:	10749102 	rsbsne	r9, r4, r2, lsl #2
 a6c:	20000abe 			; <UNDEFINED> instruction: 0x20000abe
 a70:	00000034 	andeq	r0, r0, r4, lsr r0
 a74:	0002fa12 	andeq	pc, r2, r2, lsl sl	; <UNPREDICTABLE>
 a78:	8c150100 	ldfhis	f0, [r5], {-0}
 a7c:	13000000 	movwne	r0, #0
 a80:	00000000 	andeq	r0, r0, r0
 a84:	0004130e 	andeq	r1, r4, lr, lsl #6
 a88:	4c110100 	ldfmis	f0, [r1], {-0}
 a8c:	6420000a 	strtvs	r0, [r0], #-10
 a90:	01000000 	mrseq	r0, (UNDEF: 0)
 a94:	0002809c 	muleq	r2, ip, r0
 a98:	006f0f00 	rsbeq	r0, pc, r0, lsl #30
 a9c:	01c01101 	biceq	r1, r0, r1, lsl #2
 aa0:	91020000 	mrsls	r0, (UNDEF: 2)
 aa4:	0a541064 	beq	1504c3c <startup-0x1eafb3c4>
 aa8:	00542000 	subseq	r2, r4, r0
 aac:	69110000 	ldmdbvs	r1, {}	; <UNPREDICTABLE>
 ab0:	8c120100 	ldfhis	f0, [r2], {-0}
 ab4:	02000000 	andeq	r0, r0, #0
 ab8:	5a107491 	bpl	41dd04 <startup-0x1fbe22fc>
 abc:	3c20000a 	stccc	0, cr0, [r0], #-40	; 0xffffffd8
 ac0:	14000000 	strne	r0, [r0], #-0
 ac4:	000003fa 	strdeq	r0, [r0], -sl
 ac8:	008c1301 	addeq	r1, ip, r1, lsl #6
 acc:	91020000 	mrsls	r0, (UNDEF: 2)
 ad0:	04001470 	streq	r1, [r0], #-1136	; 0xfffffb90
 ad4:	14010000 	strne	r0, [r1], #-0
 ad8:	0000008c 	andeq	r0, r0, ip, lsl #1
 adc:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
 ae0:	000002fa 	strdeq	r0, [r0], -sl
 ae4:	008c1501 	addeq	r1, ip, r1, lsl #10
 ae8:	00130000 	andseq	r0, r3, r0
 aec:	15000000 	strne	r0, [r0, #-0]
 af0:	000003a4 	andeq	r0, r0, r4, lsr #7
 af4:	0a2c0c01 	beq	b03b00 <startup-0x1f4fc500>
 af8:	00202000 	eoreq	r2, r0, r0
 afc:	9c010000 	stcls	0, cr0, [r1], {-0}
 b00:	000002be 			; <UNDEFINED> instruction: 0x000002be
 b04:	01006f0f 	tsteq	r0, pc, lsl #30
 b08:	0001930c 	andeq	r9, r1, ip, lsl #6
 b0c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 b10:	00011416 	andeq	r1, r1, r6, lsl r4
 b14:	8c0c0100 	stfhis	f0, [ip], {-0}
 b18:	02000000 	andeq	r0, r0, #0
 b1c:	19167091 	ldmdbne	r6, {r0, r4, r7, ip, sp, lr}
 b20:	01000001 	tsteq	r0, r1
 b24:	00008c0c 	andeq	r8, r0, ip, lsl #24
 b28:	6c910200 	lfmvs	f0, 4, [r1], {0}
 b2c:	03e91700 	mvneq	r1, #0, 14
 b30:	07010000 	streq	r0, [r1, -r0]
 b34:	20000a0c 	andcs	r0, r0, ip, lsl #20
 b38:	00000020 	andeq	r0, r0, r0, lsr #32
 b3c:	6f0f9c01 	svcvs	0x000f9c01
 b40:	93070100 	movwls	r0, #28928	; 0x7100
 b44:	02000001 	andeq	r0, r0, #1
 b48:	2b167491 	blcs	59dd94 <startup-0x1fa6226c>
 b4c:	01000004 	tsteq	r0, r4
 b50:	00008c07 	andeq	r8, r0, r7, lsl #24
 b54:	70910200 	addsvc	r0, r1, r0, lsl #4
 b58:	00043216 	andeq	r3, r4, r6, lsl r2
 b5c:	8c070100 	stfhis	f0, [r7], {-0}
 b60:	02000000 	andeq	r0, r0, #0
 b64:	00006c91 	muleq	r0, r1, ip
 b68:	0000022d 	andeq	r0, r0, sp, lsr #4
 b6c:	04a90004 	strteq	r0, [r9], #4
 b70:	01040000 	mrseq	r0, (UNDEF: 4)
 b74:	0000003d 	andeq	r0, r0, sp, lsr r0
 b78:	0004c20c 	andeq	ip, r4, ip, lsl #4
 b7c:	0000e300 	andeq	lr, r0, r0, lsl #6
 b80:	000ba400 	andeq	sl, fp, r0, lsl #8
 b84:	0002b020 	andeq	fp, r2, r0, lsr #32
 b88:	00036a00 	andeq	r6, r3, r0, lsl #20
 b8c:	01070200 	mrseq	r0, (UNDEF: 39)
 b90:	0000005d 	andeq	r0, r0, sp, asr r0
 b94:	005d1d02 	subseq	r1, sp, r2, lsl #26
 b98:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
 b9c:	01000003 	tsteq	r0, r3
 ba0:	00027e03 	andeq	r7, r2, r3, lsl #28
 ba4:	1e030200 	cdpne	2, 0, cr0, cr3, cr0, {0}
 ba8:	04000003 	streq	r0, [r0], #-3
 bac:	00031803 	andeq	r1, r3, r3, lsl #16
 bb0:	13030800 	movwne	r0, #14336	; 0x3800
 bb4:	10000002 	andne	r0, r0, r2
 bb8:	0002dd03 	andeq	sp, r2, r3, lsl #26
 bbc:	42042000 	andmi	r2, r4, #0
 bc0:	4000455f 	andmi	r4, r0, pc, asr r5
 bc4:	08010500 	stmdaeq	r1, {r8, sl}
 bc8:	000000d5 	ldrdeq	r0, [r0], -r5
 bcc:	00052606 	andeq	r2, r5, r6, lsl #12
 bd0:	265a0100 	ldrbcs	r0, [sl], -r0, lsl #2
 bd4:	2e20000e 	cdpcs	0, 2, cr0, cr0, cr14, {0}
 bd8:	01000000 	mrseq	r0, (UNDEF: 0)
 bdc:	0519079c 	ldreq	r0, [r9, #-1948]	; 0xfffff864
 be0:	55010000 	strpl	r0, [r1, #-0]
 be4:	20000df2 	strdcs	r0, [r0], -r2
 be8:	00000034 	andeq	r0, r0, r4, lsr r0
 bec:	00b19c01 	adcseq	r9, r1, r1, lsl #24
 bf0:	78080000 	stmdavc	r8, {}	; <UNPREDICTABLE>
 bf4:	b1550100 	cmplt	r5, r0, lsl #2
 bf8:	02000000 	andeq	r0, r0, #0
 bfc:	79086c91 	stmdbvc	r8, {r0, r4, r7, sl, fp, sp, lr}
 c00:	b1550100 	cmplt	r5, r0, lsl #2
 c04:	02000000 	andeq	r0, r0, #0
 c08:	35096891 	strcc	r6, [r9, #-2193]	; 0xfffff76f
 c0c:	01000005 	tsteq	r0, r5
 c10:	0000b156 	andeq	fp, r0, r6, asr r1
 c14:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 c18:	05040a00 	streq	r0, [r4, #-2560]	; 0xfffff600
 c1c:	00746e69 	rsbseq	r6, r4, r9, ror #28
 c20:	00047807 	andeq	r7, r4, r7, lsl #16
 c24:	b64e0100 	strblt	r0, [lr], -r0, lsl #2
 c28:	3c20000d 	stccc	0, cr0, [r0], #-52	; 0xffffffcc
 c2c:	01000000 	mrseq	r0, (UNDEF: 0)
 c30:	0000da9c 	muleq	r0, ip, sl
 c34:	00630800 	rsbeq	r0, r3, r0, lsl #16
 c38:	00da4e01 	sbcseq	r4, sl, r1, lsl #28
 c3c:	91020000 	mrsls	r0, (UNDEF: 2)
 c40:	01050077 	tsteq	r5, r7, ror r0
 c44:	0000de08 	andeq	sp, r0, r8, lsl #28
 c48:	053c0b00 	ldreq	r0, [ip, #-2816]!	; 0xfffff500
 c4c:	43010000 	movwmi	r0, #4096	; 0x1000
 c50:	20000d70 	andcs	r0, r0, r0, ror sp
 c54:	00000046 	andeq	r0, r0, r6, asr #32
 c58:	f90c9c01 			; <UNDEFINED> instruction: 0xf90c9c01
 c5c:	01000004 	tsteq	r0, r4
 c60:	00005d3a 	andeq	r5, r0, sl, lsr sp
 c64:	000d2800 	andeq	r2, sp, r0, lsl #16
 c68:	00004820 	andeq	r4, r0, r0, lsr #16
 c6c:	199c0100 	ldmibne	ip, {r8}
 c70:	0d000001 	stceq	0, cr0, [r0, #-4]
 c74:	01007672 	tsteq	r0, r2, ror r6
 c78:	00005d3e 	andeq	r5, r0, lr, lsr sp
 c7c:	6f910200 	svcvs	0x00910200
 c80:	049a0c00 	ldreq	r0, [sl], #3072	; 0xc00
 c84:	31010000 	mrscc	r0, (UNDEF: 1)
 c88:	0000005d 	andeq	r0, r0, sp, asr r0
 c8c:	20000ce0 	andcs	r0, r0, r0, ror #25
 c90:	00000048 	andeq	r0, r0, r8, asr #32
 c94:	01409c01 	cmpeq	r0, r1, lsl #24
 c98:	720d0000 	andvc	r0, sp, #0
 c9c:	35010076 	strcc	r0, [r1, #-118]	; 0xffffff8a
 ca0:	0000005d 	andeq	r0, r0, sp, asr r0
 ca4:	006f9102 	rsbeq	r9, pc, r2, lsl #2
 ca8:	00048907 	andeq	r8, r4, r7, lsl #18
 cac:	b62b0100 	strtlt	r0, [fp], -r0, lsl #2
 cb0:	2a20000c 	bcs	800ce8 <startup-0x1f7ff318>
 cb4:	01000000 	mrseq	r0, (UNDEF: 0)
 cb8:	0001649c 	muleq	r1, ip, r4
 cbc:	024c0e00 	subeq	r0, ip, #0, 28
 cc0:	2b010000 	blcs	40cc8 <startup-0x1ffbf338>
 cc4:	0000005d 	andeq	r0, r0, sp, asr r0
 cc8:	00779102 	rsbseq	r9, r7, r2, lsl #2
 ccc:	00050907 	andeq	r0, r5, r7, lsl #18
 cd0:	8c250100 	stfhis	f0, [r5], #-0
 cd4:	2a20000c 	bcs	800d0c <startup-0x1f7ff2f4>
 cd8:	01000000 	mrseq	r0, (UNDEF: 0)
 cdc:	0001889c 	muleq	r1, ip, r8
 ce0:	03820e00 	orreq	r0, r2, #0, 28
 ce4:	25010000 	strcs	r0, [r1, #-0]
 ce8:	0000005d 	andeq	r0, r0, sp, asr r0
 cec:	00779102 	rsbseq	r9, r7, r2, lsl #2
 cf0:	0004ac0c 	andeq	sl, r4, ip, lsl #24
 cf4:	5d1c0100 	ldfpls	f0, [ip, #-0]
 cf8:	60000000 	andvs	r0, r0, r0
 cfc:	2c20000c 	stccs	0, cr0, [r0], #-48	; 0xffffffd0
 d00:	01000000 	mrseq	r0, (UNDEF: 0)
 d04:	0001af9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
 d08:	76720d00 	ldrbtvc	r0, [r2], -r0, lsl #26
 d0c:	5d200100 	stfpls	f0, [r0, #-0]
 d10:	02000000 	andeq	r0, r0, #0
 d14:	07007791 			; <UNDEFINED> instruction: 0x07007791
 d18:	0000044e 	andeq	r0, r0, lr, asr #8
 d1c:	0c301501 	cfldr32eq	mvfx1, [r0], #-4
 d20:	00302000 	eorseq	r2, r0, r0
 d24:	9c010000 	stcls	0, cr0, [r1], {-0}
 d28:	000001d1 	ldrdeq	r0, [r0], -r1
 d2c:	01006308 	tsteq	r0, r8, lsl #6
 d30:	00005d15 	andeq	r5, r0, r5, lsl sp
 d34:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 d38:	04390f00 	ldrteq	r0, [r9], #-3840	; 0xfffff100
 d3c:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
 d40:	20000be8 	andcs	r0, r0, r8, ror #23
 d44:	00000048 	andeq	r0, r0, r8, asr #32
 d48:	01ff9c01 	mvnseq	r9, r1, lsl #24
 d4c:	78080000 	stmdavc	r8, {}	; <UNPREDICTABLE>
 d50:	ff0e0100 			; <UNDEFINED> instruction: 0xff0e0100
 d54:	02000001 	andeq	r0, r0, #1
 d58:	630d6e91 	movwvs	r6, #56977	; 0xde91
 d5c:	5d0f0100 	stfpls	f0, [pc, #-0]	; d64 <startup-0x1ffff29c>
 d60:	02000000 	andeq	r0, r0, #0
 d64:	05007791 	streq	r7, [r0, #-1937]	; 0xfffff86f
 d68:	001b0702 	andseq	r0, fp, r2, lsl #14
 d6c:	65100000 	ldrvs	r0, [r0, #-0]
 d70:	01000004 	tsteq	r0, r4
 d74:	000ba406 	andeq	sl, fp, r6, lsl #8
 d78:	00004420 	andeq	r4, r0, r0, lsr #8
 d7c:	089c0100 	ldmeq	ip, {r8}
 d80:	06010078 			; <UNDEFINED> instruction: 0x06010078
 d84:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 d88:	0d6e9102 	stfeqp	f1, [lr, #-8]!
 d8c:	08010063 	stmdaeq	r1, {r0, r1, r5, r6}
 d90:	0000005d 	andeq	r0, r0, sp, asr r0
 d94:	00779102 	rsbseq	r9, r7, r2, lsl #2
 d98:	00017a00 	andeq	r7, r1, r0, lsl #20
 d9c:	ca000400 	bgt	1da4 <startup-0x1fffe25c>
 da0:	04000005 	streq	r0, [r0], #-5
 da4:	00003d01 	andeq	r3, r0, r1, lsl #26
 da8:	054c0c00 	strbeq	r0, [ip, #-3072]	; 0xfffff400
 dac:	00e30000 	rsceq	r0, r3, r0
 db0:	0e540000 	cdpeq	0, 5, cr0, cr4, cr0, {0}
 db4:	01b02000 	movseq	r2, r0
 db8:	04350000 	ldrteq	r0, [r5], #-0
 dbc:	01020000 	mrseq	r0, (UNDEF: 2)
 dc0:	0000d508 	andeq	sp, r0, r8, lsl #10
 dc4:	00250300 	eoreq	r0, r5, r0, lsl #6
 dc8:	b1040000 	mrslt	r0, (UNDEF: 4)
 dcc:	01000005 	tsteq	r0, r5
 dd0:	0000a332 	andeq	sl, r0, r2, lsr r3
 dd4:	000f7c00 	andeq	r7, pc, r0, lsl #24
 dd8:	00008820 	andeq	r8, r0, r0, lsr #16
 ddc:	a39c0100 	orrsge	r0, ip, #0, 2
 de0:	05000000 	streq	r0, [r0, #-0]
 de4:	000005a3 	andeq	r0, r0, r3, lsr #11
 de8:	00253401 	eoreq	r3, r5, r1, lsl #8
 dec:	91020000 	mrsls	r0, (UNDEF: 2)
 df0:	035c0574 	cmpeq	ip, #116, 10	; 0x1d000000
 df4:	35010000 	strcc	r0, [r1, #-0]
 df8:	000000a3 	andeq	r0, r0, r3, lsr #1
 dfc:	06769102 	ldrbteq	r9, [r6], -r2, lsl #2
 e00:	20000f8e 	andcs	r0, r0, lr, lsl #31
 e04:	00000060 	andeq	r0, r0, r0, rrx
 e08:	01006907 	tsteq	r0, r7, lsl #18
 e0c:	0000aa36 	andeq	sl, r0, r6, lsr sl
 e10:	75910200 	ldrvc	r0, [r1, #512]	; 0x200
 e14:	000f9606 	andeq	r9, pc, r6, lsl #12
 e18:	00004620 	andeq	r4, r0, r0, lsr #12
 e1c:	05840500 	streq	r0, [r4, #1280]	; 0x500
 e20:	37010000 	strcc	r0, [r1, -r0]
 e24:	000000aa 	andeq	r0, r0, sl, lsr #1
 e28:	05739102 	ldrbeq	r9, [r3, #-258]!	; 0xfffffefe
 e2c:	000001a6 	andeq	r0, r0, r6, lsr #3
 e30:	002c3901 	eoreq	r3, ip, r1, lsl #18
 e34:	91020000 	mrsls	r0, (UNDEF: 2)
 e38:	00000072 	andeq	r0, r0, r2, ror r0
 e3c:	1b070202 	blne	1c164c <startup-0x1fe3e9b4>
 e40:	02000000 	andeq	r0, r0, #0
 e44:	00de0801 	sbcseq	r0, lr, r1, lsl #16
 e48:	a9080000 	stmdbge	r8, {}	; <UNPREDICTABLE>
 e4c:	01000005 	tsteq	r0, r5
 e50:	000f4829 	andeq	r4, pc, r9, lsr #16
 e54:	00003420 	andeq	r3, r0, r0, lsr #8
 e58:	e39c0100 	orrs	r0, ip, #0, 2
 e5c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 e60:	006d756e 	rsbeq	r7, sp, lr, ror #10
 e64:	00252901 	eoreq	r2, r5, r1, lsl #18
 e68:	91020000 	mrsls	r0, (UNDEF: 2)
 e6c:	058e055f 	streq	r0, [lr, #1375]	; 0x55f
 e70:	2a010000 	bcs	40e78 <startup-0x1ffbf188>
 e74:	000000e3 	andeq	r0, r0, r3, ror #1
 e78:	00609102 	rsbeq	r9, r0, r2, lsl #2
 e7c:	0000250a 	andeq	r2, r0, sl, lsl #10
 e80:	0000f300 	andeq	pc, r0, r0, lsl #6
 e84:	00f30b00 	rscseq	r0, r3, r0, lsl #22
 e88:	000f0000 	andeq	r0, pc, r0
 e8c:	21070402 	tstcs	r7, r2, lsl #8
 e90:	04000000 	streq	r0, [r0], #-0
 e94:	00000547 	andeq	r0, r0, r7, asr #10
 e98:	00251201 	eoreq	r1, r5, r1, lsl #4
 e9c:	0e8c0000 	cdpeq	0, 8, cr0, cr12, cr0, {0}
 ea0:	00bc2000 	adcseq	r2, ip, r0
 ea4:	9c010000 	stcls	0, cr0, [r1], {-0}
 ea8:	0000016c 	andeq	r0, r0, ip, ror #2
 eac:	0005a305 	andeq	sl, r5, r5, lsl #6
 eb0:	25140100 	ldrcs	r0, [r4, #-256]	; 0xffffff00
 eb4:	02000000 	andeq	r0, r0, #0
 eb8:	b9056f91 	stmdblt	r5, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
 ebc:	01000005 	tsteq	r0, r5
 ec0:	0000e315 	andeq	lr, r0, r5, lsl r3
 ec4:	5c910200 	lfmpl	f0, 4, [r1], {0}
 ec8:	000ea606 	andeq	sl, lr, r6, lsl #12
 ecc:	00008c20 	andeq	r8, r0, r0, lsr #24
 ed0:	00690700 	rsbeq	r0, r9, r0, lsl #14
 ed4:	00aa1701 	adceq	r1, sl, r1, lsl #14
 ed8:	91020000 	mrsls	r0, (UNDEF: 2)
 edc:	0eb0066e 	cdpeq	6, 11, cr0, cr0, cr14, {3}
 ee0:	006c2000 	rsbeq	r2, ip, r0
 ee4:	84050000 	strhi	r0, [r5], #-0
 ee8:	01000005 	tsteq	r0, r5
 eec:	0000aa18 	andeq	sl, r0, r8, lsl sl
 ef0:	6c910200 	lfmvs	f0, 4, [r1], {0}
 ef4:	0001a605 	andeq	sl, r1, r5, lsl #12
 ef8:	aa1a0100 	bge	681300 <startup-0x1f97ed00>
 efc:	02000000 	andeq	r0, r0, #0
 f00:	00006d91 	muleq	r0, r1, sp
 f04:	05970c00 	ldreq	r0, [r7, #3072]	; 0xc00
 f08:	06010000 	streq	r0, [r1], -r0
 f0c:	20000e54 	andcs	r0, r0, r4, asr lr
 f10:	00000038 	andeq	r0, r0, r8, lsr r0
 f14:	Address 0x00000f14 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
  18:	0b3a050b 	bleq	e8144c <startup-0x1f17ebb4>
  1c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  20:	0d030000 	stceq	0, cr0, [r3, #-0]
  24:	3a0e0300 	bcc	380c2c <startup-0x1fc7f3d4>
  28:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  2c:	000b3813 	andeq	r3, fp, r3, lsl r8
  30:	000d0400 	andeq	r0, sp, r0, lsl #8
  34:	0b3a0e03 	bleq	e83848 <startup-0x1f17c7b8>
  38:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  3c:	00000538 	andeq	r0, r0, r8, lsr r5
  40:	49010105 	stmdbmi	r1, {r0, r2, r8}
  44:	00130113 	andseq	r0, r3, r3, lsl r1
  48:	00210600 	eoreq	r0, r1, r0, lsl #12
  4c:	0b2f1349 	bleq	bc4d78 <startup-0x1f43b288>
  50:	24070000 	strcs	r0, [r7], #-0
  54:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  58:	000e030b 	andeq	r0, lr, fp, lsl #6
  5c:	01150800 	tsteq	r5, r0, lsl #16
  60:	13011927 	movwne	r1, #6439	; 0x1927
  64:	05090000 	streq	r0, [r9, #-0]
  68:	00134900 	andseq	r4, r3, r0, lsl #18
  6c:	000f0a00 	andeq	r0, pc, r0, lsl #20
  70:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  74:	160b0000 	strne	r0, [fp], -r0
  78:	3a0e0300 	bcc	380c80 <startup-0x1fc7f380>
  7c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  80:	0c000013 	stceq	0, cr0, [r0], {19}
  84:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  88:	0b3b0b3a 	bleq	ec2d78 <startup-0x1f13d288>
  8c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  90:	130d0000 	movwne	r0, #53248	; 0xd000
  94:	3a0b0b01 	bcc	2c2ca0 <startup-0x1fd3d360>
  98:	010b3b0b 	tsteq	fp, fp, lsl #22
  9c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  a0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  a4:	0b3b0b3a 	bleq	ec2d94 <startup-0x1f13d26c>
  a8:	0b381349 	bleq	e04dd4 <startup-0x1f1fb22c>
  ac:	240f0000 	strcs	r0, [pc], #-0	; b4 <startup-0x1fffff4c>
  b0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  b4:	0008030b 	andeq	r0, r8, fp, lsl #6
  b8:	01131000 	tsteq	r3, r0
  bc:	0b0b0e03 	bleq	2c38d0 <startup-0x1fd3c730>
  c0:	0b3b0b3a 	bleq	ec2db0 <startup-0x1f13d250>
  c4:	00001301 	andeq	r1, r0, r1, lsl #6
  c8:	03003411 	movweq	r3, #1041	; 0x411
  cc:	3b0b3a0e 	blcc	2ce90c <startup-0x1fd316f4>
  d0:	3f13490b 	svccc	0x0013490b
  d4:	00180219 	andseq	r0, r8, r9, lsl r2
  d8:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
  dc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  e0:	0b3b0b3a 	bleq	ec2dd0 <startup-0x1f13d230>
  e4:	01111927 	tsteq	r1, r7, lsr #18
  e8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  ec:	01194296 			; <UNDEFINED> instruction: 0x01194296
  f0:	13000013 	movwne	r0, #19
  f4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
  f8:	0b3b0b3a 	bleq	ec2de8 <startup-0x1f13d218>
  fc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 100:	34140000 	ldrcc	r0, [r4], #-0
 104:	3a080300 	bcc	200d0c <startup-0x1fdff2f4>
 108:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 10c:	00180213 	andseq	r0, r8, r3, lsl r2
 110:	010b1500 	tsteq	fp, r0, lsl #10
 114:	34160000 	ldrcc	r0, [r6], #-0
 118:	3a0e0300 	bcc	380d20 <startup-0x1fc7f2e0>
 11c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 120:	17000013 	smladne	r0, r3, r0, r0
 124:	08030034 	stmdaeq	r3, {r2, r4, r5}
 128:	0b3b0b3a 	bleq	ec2e18 <startup-0x1f13d1e8>
 12c:	00001349 	andeq	r1, r0, r9, asr #6
 130:	49003518 	stmdbmi	r0, {r3, r4, r8, sl, ip, sp}
 134:	19000013 	stmdbne	r0, {r0, r1, r4}
 138:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 13c:	0b3a0e03 	bleq	e83950 <startup-0x1f17c6b0>
 140:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 144:	06120111 			; <UNDEFINED> instruction: 0x06120111
 148:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 14c:	00000019 	andeq	r0, r0, r9, lsl r0
 150:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 154:	030b130e 	movweq	r1, #45838	; 0xb30e
 158:	110e1b0e 	tstne	lr, lr, lsl #22
 15c:	10061201 	andne	r1, r6, r1, lsl #4
 160:	02000017 	andeq	r0, r0, #23
 164:	0b0b0024 	bleq	2c01fc <startup-0x1fd3fe04>
 168:	0e030b3e 	vmoveq.16	d3[0], r0
 16c:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
 170:	03193f01 	tsteq	r9, #1, 30
 174:	3b0b3a0e 	blcc	2ce9b4 <startup-0x1fd3164c>
 178:	1119270b 	tstne	r9, fp, lsl #14
 17c:	40061201 	andmi	r1, r6, r1, lsl #4
 180:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 184:	00001301 	andeq	r1, r0, r1, lsl #6
 188:	03000504 	movweq	r0, #1284	; 0x504
 18c:	3b0b3a08 	blcc	2ce9b4 <startup-0x1fd3164c>
 190:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 194:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
 198:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 19c:	0b3a0e03 	bleq	e839b0 <startup-0x1f17c650>
 1a0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1a8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1ac:	00000019 	andeq	r0, r0, r9, lsl r0
 1b0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 1b4:	030b130e 	movweq	r1, #45838	; 0xb30e
 1b8:	110e1b0e 	tstne	lr, lr, lsl #22
 1bc:	10061201 	andne	r1, r6, r1, lsl #4
 1c0:	02000017 	andeq	r0, r0, #23
 1c4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 1c8:	0b3a050b 	bleq	e815fc <startup-0x1f17ea04>
 1cc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 1d0:	0d030000 	stceq	0, cr0, [r3, #-0]
 1d4:	3a0e0300 	bcc	380ddc <startup-0x1fc7f224>
 1d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1dc:	000b3813 	andeq	r3, fp, r3, lsl r8
 1e0:	000d0400 	andeq	r0, sp, r0, lsl #8
 1e4:	0b3a0e03 	bleq	e839f8 <startup-0x1f17c608>
 1e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1ec:	00000538 	andeq	r0, r0, r8, lsr r5
 1f0:	49010105 	stmdbmi	r1, {r0, r2, r8}
 1f4:	00130113 	andseq	r0, r3, r3, lsl r1
 1f8:	00210600 	eoreq	r0, r1, r0, lsl #12
 1fc:	0b2f1349 	bleq	bc4f28 <startup-0x1f43b0d8>
 200:	24070000 	strcs	r0, [r7], #-0
 204:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 208:	000e030b 	andeq	r0, lr, fp, lsl #6
 20c:	01150800 	tsteq	r5, r0, lsl #16
 210:	13011927 	movwne	r1, #6439	; 0x1927
 214:	05090000 	streq	r0, [r9, #-0]
 218:	00134900 	andseq	r4, r3, r0, lsl #18
 21c:	000f0a00 	andeq	r0, pc, r0, lsl #20
 220:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 224:	160b0000 	strne	r0, [fp], -r0
 228:	3a0e0300 	bcc	380e30 <startup-0x1fc7f1d0>
 22c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 230:	0c000013 	stceq	0, cr0, [r0], {19}
 234:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 238:	0b3b0b3a 	bleq	ec2f28 <startup-0x1f13d0d8>
 23c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 240:	040d0000 	streq	r0, [sp], #-0
 244:	0b0b3e01 	bleq	2cfa50 <startup-0x1fd305b0>
 248:	3a13490b 	bcc	4d267c <startup-0x1fb2d984>
 24c:	010b3b0b 	tsteq	fp, fp, lsl #22
 250:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 254:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 258:	00000b1c 	andeq	r0, r0, ip, lsl fp
 25c:	0300280f 	movweq	r2, #2063	; 0x80f
 260:	000b1c08 	andeq	r1, fp, r8, lsl #24
 264:	00341000 	eorseq	r1, r4, r0
 268:	0b3a0e03 	bleq	e83a7c <startup-0x1f17c584>
 26c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 270:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 274:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 278:	03193f01 	tsteq	r9, #1, 30
 27c:	3b0b3a0e 	blcc	2ceabc <startup-0x1fd31544>
 280:	1119270b 	tstne	r9, fp, lsl #14
 284:	40061201 	andmi	r1, r6, r1, lsl #4
 288:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 28c:	00001301 	andeq	r1, r0, r1, lsl #6
 290:	03000512 	movweq	r0, #1298	; 0x512
 294:	3b0b3a0e 	blcc	2cead4 <startup-0x1fd3152c>
 298:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 29c:	13000018 	movwne	r0, #24
 2a0:	0111010b 	tsteq	r1, fp, lsl #2
 2a4:	00000612 	andeq	r0, r0, r2, lsl r6
 2a8:	03003414 	movweq	r3, #1044	; 0x414
 2ac:	3b0b3a08 	blcc	2cead4 <startup-0x1fd3152c>
 2b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 2b4:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 2b8:	0b0b0024 	bleq	2c0350 <startup-0x1fd3fcb0>
 2bc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 2c0:	05160000 	ldreq	r0, [r6, #-0]
 2c4:	3a080300 	bcc	200ecc <startup-0x1fdff134>
 2c8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2cc:	00180213 	andseq	r0, r8, r3, lsl r2
 2d0:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 2d4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2d8:	0b3b0b3a 	bleq	ec2fc8 <startup-0x1f13d038>
 2dc:	01111927 	tsteq	r1, r7, lsr #18
 2e0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2e4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 2e8:	18000013 	stmdane	r0, {r0, r1, r4}
 2ec:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 2f0:	0b3a0e03 	bleq	e83b04 <startup-0x1f17c4fc>
 2f4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2fc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 300:	19000019 	stmdbne	r0, {r0, r3, r4}
 304:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 308:	0b3a0e03 	bleq	e83b1c <startup-0x1f17c4e4>
 30c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 310:	06120111 			; <UNDEFINED> instruction: 0x06120111
 314:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 318:	1a000019 	bne	384 <startup-0x1ffffc7c>
 31c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 320:	0b3a0e03 	bleq	e83b34 <startup-0x1f17c4cc>
 324:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 328:	01111349 	tsteq	r1, r9, asr #6
 32c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 330:	01194296 			; <UNDEFINED> instruction: 0x01194296
 334:	1b000013 	blne	388 <startup-0x1ffffc78>
 338:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 33c:	0b3a0e03 	bleq	e83b50 <startup-0x1f17c4b0>
 340:	01110b3b 	tsteq	r1, fp, lsr fp
 344:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 348:	00194296 	mulseq	r9, r6, r2
 34c:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
 350:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 354:	0b3b0b3a 	bleq	ec3044 <startup-0x1f13cfbc>
 358:	01111927 	tsteq	r1, r7, lsr #18
 35c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 360:	00194297 	mulseq	r9, r7, r2
 364:	11010000 	mrsne	r0, (UNDEF: 1)
 368:	130e2501 	movwne	r2, #58625	; 0xe501
 36c:	1b0e030b 	blne	380fa0 <startup-0x1fc7f060>
 370:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 374:	00171006 	andseq	r1, r7, r6
 378:	01130200 	tsteq	r3, r0, lsl #4
 37c:	0b3a0b0b 	bleq	e82fb0 <startup-0x1f17d050>
 380:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 384:	0d030000 	stceq	0, cr0, [r3, #-0]
 388:	3a080300 	bcc	200f90 <startup-0x1fdff070>
 38c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 390:	000b3813 	andeq	r3, fp, r3, lsl r8
 394:	00240400 	eoreq	r0, r4, r0, lsl #8
 398:	0b3e0b0b 	bleq	f82fcc <startup-0x1f07d034>
 39c:	00000e03 	andeq	r0, r0, r3, lsl #28
 3a0:	03001605 	movweq	r1, #1541	; 0x605
 3a4:	3b0b3a0e 	blcc	2cebe4 <startup-0x1fd3141c>
 3a8:	0013490b 	andseq	r4, r3, fp, lsl #18
 3ac:	000d0600 	andeq	r0, sp, r0, lsl #12
 3b0:	0b3a0e03 	bleq	e83bc4 <startup-0x1f17c43c>
 3b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3b8:	00000b38 	andeq	r0, r0, r8, lsr fp
 3bc:	0b002407 	bleq	93e0 <startup-0x1fff6c20>
 3c0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 3c4:	08000008 	stmdaeq	r0, {r3}
 3c8:	13490101 	movtne	r0, #37121	; 0x9101
 3cc:	00001301 	andeq	r1, r0, r1, lsl #6
 3d0:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
 3d4:	000b2f13 	andeq	r2, fp, r3, lsl pc
 3d8:	000f0a00 	andeq	r0, pc, r0, lsl #20
 3dc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 3e0:	130b0000 	movwne	r0, #45056	; 0xb000
 3e4:	0b0e0301 	bleq	380ff0 <startup-0x1fc7f010>
 3e8:	3b0b3a0b 	blcc	2cec1c <startup-0x1fd313e4>
 3ec:	0013010b 	andseq	r0, r3, fp, lsl #2
 3f0:	01150c00 	tsteq	r5, r0, lsl #24
 3f4:	13011927 	movwne	r1, #6439	; 0x1927
 3f8:	050d0000 	streq	r0, [sp, #-0]
 3fc:	00134900 	andseq	r4, r3, r0, lsl #18
 400:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
 404:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 408:	0b3b0b3a 	bleq	ec30f8 <startup-0x1f13cf08>
 40c:	01111927 	tsteq	r1, r7, lsr #18
 410:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 414:	01194296 			; <UNDEFINED> instruction: 0x01194296
 418:	0f000013 	svceq	0x00000013
 41c:	08030005 	stmdaeq	r3, {r0, r2}
 420:	0b3b0b3a 	bleq	ec3110 <startup-0x1f13cef0>
 424:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 428:	0b100000 	bleq	400430 <startup-0x1fbffbd0>
 42c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 430:	11000006 	tstne	r0, r6
 434:	08030034 	stmdaeq	r3, {r2, r4, r5}
 438:	0b3b0b3a 	bleq	ec3128 <startup-0x1f13ced8>
 43c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 440:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 444:	03193f01 	tsteq	r9, #1, 30
 448:	3b0b3a0e 	blcc	2cec88 <startup-0x1fd31378>
 44c:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 450:	13000019 	movwne	r0, #25
 454:	00000018 	andeq	r0, r0, r8, lsl r0
 458:	03003414 	movweq	r3, #1044	; 0x414
 45c:	3b0b3a0e 	blcc	2cec9c <startup-0x1fd31364>
 460:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 464:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 468:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 46c:	0b3a0e03 	bleq	e83c80 <startup-0x1f17c380>
 470:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 474:	06120111 			; <UNDEFINED> instruction: 0x06120111
 478:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 47c:	00130119 	andseq	r0, r3, r9, lsl r1
 480:	00051600 	andeq	r1, r5, r0, lsl #12
 484:	0b3a0e03 	bleq	e83c98 <startup-0x1f17c368>
 488:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 48c:	00001802 	andeq	r1, r0, r2, lsl #16
 490:	3f012e17 	svccc	0x00012e17
 494:	3a0e0319 	bcc	381100 <startup-0x1fc7ef00>
 498:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 49c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 4a0:	97184006 	ldrls	r4, [r8, -r6]
 4a4:	00001942 	andeq	r1, r0, r2, asr #18
 4a8:	01110100 	tsteq	r1, r0, lsl #2
 4ac:	0b130e25 	bleq	4c3d48 <startup-0x1fb3c2b8>
 4b0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 4b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 4b8:	00001710 	andeq	r1, r0, r0, lsl r7
 4bc:	3e010402 	cdpcc	4, 0, cr0, cr1, cr2, {0}
 4c0:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 4c4:	3b0b3a13 	blcc	2ced18 <startup-0x1fd312e8>
 4c8:	0013010b 	andseq	r0, r3, fp, lsl #2
 4cc:	00280300 	eoreq	r0, r8, r0, lsl #6
 4d0:	0b1c0e03 	bleq	703ce4 <startup-0x1f8fc31c>
 4d4:	28040000 	stmdacs	r4, {}	; <UNPREDICTABLE>
 4d8:	1c080300 	stcne	3, cr0, [r8], {-0}
 4dc:	0500000b 	streq	r0, [r0, #-11]
 4e0:	0b0b0024 	bleq	2c0578 <startup-0x1fd3fa88>
 4e4:	0e030b3e 	vmoveq.16	d3[0], r0
 4e8:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
 4ec:	03193f00 	tsteq	r9, #0, 30
 4f0:	3b0b3a0e 	blcc	2ced30 <startup-0x1fd312d0>
 4f4:	1119270b 	tstne	r9, fp, lsl #14
 4f8:	40061201 	andmi	r1, r6, r1, lsl #4
 4fc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 500:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
 504:	03193f01 	tsteq	r9, #1, 30
 508:	3b0b3a0e 	blcc	2ced48 <startup-0x1fd312b8>
 50c:	1119270b 	tstne	r9, fp, lsl #14
 510:	40061201 	andmi	r1, r6, r1, lsl #4
 514:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 518:	00001301 	andeq	r1, r0, r1, lsl #6
 51c:	03000508 	movweq	r0, #1288	; 0x508
 520:	3b0b3a08 	blcc	2ced48 <startup-0x1fd312b8>
 524:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 528:	09000018 	stmdbeq	r0, {r3, r4}
 52c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 530:	0b3b0b3a 	bleq	ec3220 <startup-0x1f13cde0>
 534:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 538:	240a0000 	strcs	r0, [sl], #-0
 53c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 540:	0008030b 	andeq	r0, r8, fp, lsl #6
 544:	002e0b00 	eoreq	r0, lr, r0, lsl #22
 548:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 54c:	0b3b0b3a 	bleq	ec323c <startup-0x1f13cdc4>
 550:	01111927 	tsteq	r1, r7, lsr #18
 554:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 558:	00194296 	mulseq	r9, r6, r2
 55c:	012e0c00 			; <UNDEFINED> instruction: 0x012e0c00
 560:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 564:	0b3b0b3a 	bleq	ec3254 <startup-0x1f13cdac>
 568:	13491927 	movtne	r1, #39207	; 0x9927
 56c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 570:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 574:	00130119 	andseq	r0, r3, r9, lsl r1
 578:	00340d00 	eorseq	r0, r4, r0, lsl #26
 57c:	0b3a0803 	bleq	e82590 <startup-0x1f17da70>
 580:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 584:	00001802 	andeq	r1, r0, r2, lsl #16
 588:	0300050e 	movweq	r0, #1294	; 0x50e
 58c:	3b0b3a0e 	blcc	2cedcc <startup-0x1fd31234>
 590:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 594:	0f000018 	svceq	0x00000018
 598:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 59c:	0b3a0e03 	bleq	e83db0 <startup-0x1f17c250>
 5a0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 5a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5a8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 5ac:	00130119 	andseq	r0, r3, r9, lsl r1
 5b0:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
 5b4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 5b8:	0b3b0b3a 	bleq	ec32a8 <startup-0x1f13cd58>
 5bc:	01111927 	tsteq	r1, r7, lsr #18
 5c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5c4:	00194297 	mulseq	r9, r7, r2
 5c8:	11010000 	mrsne	r0, (UNDEF: 1)
 5cc:	130e2501 	movwne	r2, #58625	; 0xe501
 5d0:	1b0e030b 	blne	381204 <startup-0x1fc7edfc>
 5d4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 5d8:	00171006 	andseq	r1, r7, r6
 5dc:	00240200 	eoreq	r0, r4, r0, lsl #4
 5e0:	0b3e0b0b 	bleq	f83214 <startup-0x1f07cdec>
 5e4:	00000e03 	andeq	r0, r0, r3, lsl #28
 5e8:	49003503 	stmdbmi	r0, {r0, r1, r8, sl, ip, sp}
 5ec:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 5f0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 5f4:	0b3a0e03 	bleq	e83e08 <startup-0x1f17c1f8>
 5f8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 5fc:	01111349 	tsteq	r1, r9, asr #6
 600:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 604:	01194297 			; <UNDEFINED> instruction: 0x01194297
 608:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
 60c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 610:	0b3b0b3a 	bleq	ec3300 <startup-0x1f13cd00>
 614:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 618:	0b060000 	bleq	180620 <startup-0x1fe7f9e0>
 61c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 620:	07000006 	streq	r0, [r0, -r6]
 624:	08030034 	stmdaeq	r3, {r2, r4, r5}
 628:	0b3b0b3a 	bleq	ec3318 <startup-0x1f13cce8>
 62c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 630:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
 634:	03193f01 	tsteq	r9, #1, 30
 638:	3b0b3a0e 	blcc	2cee78 <startup-0x1fd31188>
 63c:	1119270b 	tstne	r9, fp, lsl #14
 640:	40061201 	andmi	r1, r6, r1, lsl #4
 644:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 648:	00001301 	andeq	r1, r0, r1, lsl #6
 64c:	03000509 	movweq	r0, #1289	; 0x509
 650:	3b0b3a08 	blcc	2cee78 <startup-0x1fd31188>
 654:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 658:	0a000018 	beq	6c0 <startup-0x1ffff940>
 65c:	13490101 	movtne	r0, #37121	; 0x9101
 660:	00001301 	andeq	r1, r0, r1, lsl #6
 664:	4900210b 	stmdbmi	r0, {r0, r1, r3, r8, sp}
 668:	000b2f13 	andeq	r2, fp, r3, lsl pc
 66c:	002e0c00 	eoreq	r0, lr, r0, lsl #24
 670:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 674:	0b3b0b3a 	bleq	ec3364 <startup-0x1f13cc9c>
 678:	01111927 	tsteq	r1, r7, lsr #18
 67c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 680:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000104 	andeq	r0, r0, r4, lsl #2
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	03510002 	cmpeq	r1, #2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000114 	andcs	r0, r0, r4, lsl r1
  3c:	0000006e 	andeq	r0, r0, lr, rrx
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	03ed0002 	mvneq	r0, #2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000184 	andcs	r0, r0, r4, lsl #3
  5c:	00000888 	andeq	r0, r0, r8, lsl #17
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	086f0002 	stmdaeq	pc!, {r1}^	; <UNPREDICTABLE>
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000a0c 	andcs	r0, r0, ip, lsl #20
  7c:	00000198 	muleq	r0, r8, r1
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	0b680002 	bleq	1a0009c <startup-0x1e5fff64>
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000ba4 	andcs	r0, r0, r4, lsr #23
  9c:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	0d990002 	ldceq	0, cr0, [r9, #8]
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000e54 	andcs	r0, r0, r4, asr lr
  bc:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000114 	andcs	r0, r0, r4, lsl r1
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000b3 	strheq	r0, [r0], -r3
   4:	00670002 	rsbeq	r0, r7, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	756d6173 	strbvc	r6, [sp, #-371]!	; 0xfffffe8d
  28:	6f442f65 	svcvs	0x00442f65
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	4c706f4d 	ldclmi	15, cr6, [r0], #-308	; 0xfffffecc
  38:	4d2f6261 	sfmmi	f6, 4, [pc, #-388]!	; fffffebc <ball+0xdfffe0ec>
  3c:	6570706f 	ldrbvs	r7, [r0, #-111]!	; 0xffffff91
  40:	7300006e 	movwvc	r0, #110	; 0x6e
  44:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  48:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  4c:	00000100 	andeq	r0, r0, r0, lsl #2
  50:	5f64636c 	svcpl	0x0064636c
  54:	76697264 	strbtvc	r7, [r9], -r4, ror #4
  58:	2e737265 	cdpcs	2, 7, cr7, cr3, cr5, {3}
  5c:	00010068 	andeq	r0, r1, r8, rrx
  60:	6e6f7000 	cdpvs	0, 6, cr7, cr15, cr0, {0}
  64:	676f6c67 	strbvs	r6, [pc, -r7, ror #24]!
  68:	682e6369 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sp, lr}
  6c:	00000100 	andeq	r0, r0, r0, lsl #2
  70:	02050000 	andeq	r0, r5, #0
  74:	20000000 	andcs	r0, r0, r0
  78:	025e1319 	subseq	r1, lr, #1677721600	; 0x64000000
  7c:	01010003 	tsteq	r1, r3
  80:	10020500 	andne	r0, r2, r0, lsl #10
  84:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  88:	2f5e012e 	svccs	0x005e012e
  8c:	2f914c2f 	svccs	0x00914c2f
  90:	4b4c7321 	blmi	131cd1c <startup-0x1ece32e4>
  94:	73212f91 			; <UNDEFINED> instruction: 0x73212f91
  98:	4b3d4b4c 	blmi	f52dd0 <startup-0x1f0ad230>
  9c:	35312f40 	ldrcc	r2, [r1, #-3904]!	; 0xfffff0c0
  a0:	0077082f 	rsbseq	r0, r7, pc, lsr #16
  a4:	68010402 	stmdavs	r1, {r1, sl}
  a8:	01040200 	mrseq	r0, R12_usr
  ac:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
  b0:	08023b01 	stmdaeq	r2, {r0, r8, r9, fp, ip, sp}
  b4:	6e010100 	adfvss	f0, f1, f0
  b8:	02000000 	andeq	r0, r0, #0
  bc:	00004500 	andeq	r4, r0, r0, lsl #10
  c0:	fb010200 	blx	408ca <startup-0x1ffbf736>
  c4:	01000d0e 	tsteq	r0, lr, lsl #26
  c8:	00010101 	andeq	r0, r1, r1, lsl #2
  cc:	00010000 	andeq	r0, r1, r0
  d0:	3a430100 	bcc	10c04d8 <startup-0x1ef3fb28>
  d4:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
  d8:	732f7372 			; <UNDEFINED> instruction: 0x732f7372
  dc:	65756d61 	ldrbvs	r6, [r5, #-3425]!	; 0xfffff29f
  e0:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
  e4:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
  e8:	4d2f7374 	stcmi	3, cr7, [pc, #-464]!	; ffffff20 <ball+0xdfffe150>
  ec:	614c706f 	cmpvs	ip, pc, rrx
  f0:	6f4d2f62 	svcvs	0x004d2f62
  f4:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
  f8:	65640000 	strbvs	r0, [r4, #-0]!
  fc:	2e79616c 	rpwcsez	f6, f1, #4.0
 100:	00010063 	andeq	r0, r1, r3, rrx
 104:	05000000 	streq	r0, [r0, #-0]
 108:	00011402 	andeq	r1, r1, r2, lsl #8
 10c:	3d2f1620 	stccc	6, cr1, [pc, #-128]!	; 94 <startup-0x1fffff6c>
 110:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
 114:	06010402 	streq	r0, [r1], -r2, lsl #8
 118:	3d680620 	stclcc	6, cr0, [r8, #-128]!	; 0xffffff80
 11c:	2e0a03a0 	cdpcs	3, 0, cr0, cr10, cr0, {5}
 120:	4f4c513e 	svcmi	0x004c513e
 124:	01000402 	tsteq	r0, r2, lsl #8
 128:	00018801 	andeq	r8, r1, r1, lsl #16
 12c:	6d000200 	sfmvs	f0, 4, [r0, #-0]
 130:	02000000 	andeq	r0, r0, #0
 134:	0d0efb01 	vstreq	d15, [lr, #-4]
 138:	01010100 	mrseq	r0, (UNDEF: 17)
 13c:	00000001 	andeq	r0, r0, r1
 140:	01000001 	tsteq	r0, r1
 144:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff709 <ball+0xdfffd939>
 148:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 14c:	6d61732f 	stclvs	3, cr7, [r1, #-188]!	; 0xffffff44
 150:	442f6575 	strtmi	r6, [pc], #-1397	; 158 <startup-0x1ffffea8>
 154:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 158:	73746e65 	cmnvc	r4, #1616	; 0x650
 15c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 160:	2f62614c 	svccs	0x0062614c
 164:	70706f4d 	rsbsvc	r6, r0, sp, asr #30
 168:	00006e65 	andeq	r6, r0, r5, ror #28
 16c:	5f64636c 	svcpl	0x0064636c
 170:	76697264 	strbtvc	r7, [r9], -r4, ror #4
 174:	2e737265 	cdpcs	2, 7, cr7, cr3, cr5, {3}
 178:	00010063 	andeq	r0, r1, r3, rrx
 17c:	64636c00 	strbtvs	r6, [r3], #-3072	; 0xfffff400
 180:	6972645f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, sp, lr}^
 184:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 188:	0100682e 	tsteq	r0, lr, lsr #16
 18c:	6f700000 	svcvs	0x00700000
 190:	65447472 	strbvs	r7, [r4, #-1138]	; 0xfffffb8e
 194:	72616c63 	rsbvc	r6, r1, #25344	; 0x6300
 198:	00682e65 	rsbeq	r2, r8, r5, ror #28
 19c:	00000001 	andeq	r0, r0, r1
 1a0:	84020500 	strhi	r0, [r2], #-1280	; 0xfffffb00
 1a4:	1a200001 	bne	8001b0 <startup-0x1f7ffe50>
 1a8:	7a037a67 	bvc	deb4c <startup-0x1ff214b4>
 1ac:	911b5020 	tstls	fp, r0, lsr #32
 1b0:	7692d7d7 			; <UNDEFINED> instruction: 0x7692d7d7
 1b4:	ad3d832f 	ldcge	3, cr8, [sp, #-188]!	; 0xffffff44
 1b8:	83212f2f 			; <UNDEFINED> instruction: 0x83212f2f
 1bc:	2f832f2f 	svccs	0x00832f2f
 1c0:	6e2e7a03 	vmulvs.f32	s14, s28, s6
 1c4:	67bc3d83 	ldrvs	r3, [ip, r3, lsl #27]!
 1c8:	59833d83 	stmibpl	r3, {r0, r1, r7, r8, sl, fp, ip, sp}
 1cc:	2f832f2f 	svccs	0x00832f2f
 1d0:	3d83592f 	vstrcc.16	s10, [r3, #94]	; 0x5e	; <UNPREDICTABLE>
 1d4:	59303d59 	ldmdbpl	r0!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
 1d8:	e63d313d 			; <UNDEFINED> instruction: 0xe63d313d
 1dc:	2f594b91 	svccs	0x00594b91
 1e0:	2f2f832f 	svccs	0x002f832f
 1e4:	303d5983 	eorscc	r5, sp, r3, lsl #19
 1e8:	3d303d59 	ldccc	13, cr3, [r0, #-356]!	; 0xfffffe9c
 1ec:	91843d83 	orrls	r3, r4, r3, lsl #27
 1f0:	83835983 	orrhi	r5, r3, #2146304	; 0x20c000
 1f4:	59839168 	stmibpl	r3, {r3, r5, r6, r8, ip, pc}
 1f8:	677683ad 	ldrbvs	r8, [r6, -sp, lsr #7]!
 1fc:	2f4c6759 	svccs	0x004c6759
 200:	832f843d 			; <UNDEFINED> instruction: 0x832f843d
 204:	83863e84 	orrhi	r3, r6, #132, 28	; 0x840
 208:	4b4b4b4b 	blmi	12d2f3c <startup-0x1ed2d0c4>
 20c:	3d683d4b 	stclcc	13, cr3, [r8, #-300]!	; 0xfffffed4
 210:	004bad3d 	subeq	sl, fp, sp, lsr sp
 214:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 218:	03040200 	movweq	r0, #16896	; 0x4200
 21c:	04020049 	streq	r0, [r2], #-73	; 0xffffffb7
 220:	003c0601 	eorseq	r0, ip, r1, lsl #12
 224:	06020402 	streq	r0, [r2], -r2, lsl #8
 228:	04020039 	streq	r0, [r2], #-57	; 0xffffffc7
 22c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 230:	59e54c43 	stmibpl	r5!, {r0, r1, r6, sl, fp, lr}^
 234:	9114085a 	tstls	r4, sl, asr r8
 238:	5a4b5b4b 	bpl	12d6f6c <startup-0x1ed29094>
 23c:	ad91d7bb 	ldcge	7, cr13, [r1, #748]	; 0x2ec
 240:	03d8a14b 	bicseq	sl, r8, #-1073741806	; 0xc0000012
 244:	1403ac6d 	strne	sl, [r3], #-3181	; 0xfffff393
 248:	594f3e20 	stmdbpl	pc, {r5, r9, sl, fp, ip, sp}^	; <UNPREDICTABLE>
 24c:	4b750859 	blmi	1d423b8 <startup-0x1e2bdc48>
 250:	4b774b59 	blmi	1dd2fbc <startup-0x1e22d044>
 254:	bbc9c976 	bllt	ff272834 <ball+0xdf270a64>
 258:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
 25c:	08710302 	ldmdaeq	r1!, {r1, r8, r9}^
 260:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
 264:	00660601 	rsbeq	r0, r6, r1, lsl #12
 268:	06020402 	streq	r0, [r2], -r2, lsl #8
 26c:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
 270:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 274:	4c741503 	cfldr64mi	mvdx1, [r4], #-12
 278:	4b1408f4 	blmi	502650 <startup-0x1fafd9b0>
 27c:	4b914c5b 	blmi	fe4533f0 <ball+0xde451620>
 280:	084b6808 	stmdaeq	fp, {r3, fp, sp, lr}^
 284:	087203ae 	ldmdaeq	r2!, {r1, r2, r3, r5, r7, r8, r9}^
 288:	200f03ac 	andcs	r0, pc, ip, lsr #7
 28c:	4b3c0b03 	blmi	f02ea0 <startup-0x1f0fd160>
 290:	0200833d 	andeq	r8, r0, #-201326592	; 0xf4000000
 294:	003d0304 	eorseq	r0, sp, r4, lsl #6
 298:	81030402 	tsthi	r3, r2, lsl #8
 29c:	01040200 	mrseq	r0, R12_usr
 2a0:	02003c06 	andeq	r3, r0, #1536	; 0x600
 2a4:	3a060204 	bcc	180abc <startup-0x1fe7f544>
 2a8:	01040200 	mrseq	r0, R12_usr
 2ac:	42063c06 	andmi	r3, r6, #1536	; 0x600
 2b0:	01000402 	tsteq	r0, r2, lsl #8
 2b4:	0000b101 	andeq	fp, r0, r1, lsl #2
 2b8:	58000200 	stmdapl	r0, {r9}
 2bc:	02000000 	andeq	r0, r0, #0
 2c0:	0d0efb01 	vstreq	d15, [lr, #-4]
 2c4:	01010100 	mrseq	r0, (UNDEF: 17)
 2c8:	00000001 	andeq	r0, r0, r1
 2cc:	01000001 	tsteq	r0, r1
 2d0:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff895 <ball+0xdfffdac5>
 2d4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 2d8:	6d61732f 	stclvs	3, cr7, [r1, #-188]!	; 0xffffff44
 2dc:	442f6575 	strtmi	r6, [pc], #-1397	; 2e4 <startup-0x1ffffd1c>
 2e0:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 2e4:	73746e65 	cmnvc	r4, #1616	; 0x650
 2e8:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 2ec:	2f62614c 	svccs	0x0062614c
 2f0:	70706f4d 	rsbsvc	r6, r0, sp, asr #30
 2f4:	00006e65 	andeq	r6, r0, r5, ror #28
 2f8:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 2fc:	69676f6c 	stmdbvs	r7!, {r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 300:	00632e63 	rsbeq	r2, r3, r3, ror #28
 304:	70000001 	andvc	r0, r0, r1
 308:	6c676e6f 	stclvs	14, cr6, [r7], #-444	; 0xfffffe44
 30c:	6369676f 	cmnvs	r9, #29097984	; 0x1bc0000
 310:	0100682e 	tsteq	r0, lr, lsr #16
 314:	00000000 	andeq	r0, r0, r0
 318:	0a0c0205 	beq	300b34 <startup-0x1fcff4cc>
 31c:	67182000 	ldrvs	r2, [r8, -r0]
 320:	674c3d3d 	smlaldxvs	r3, ip, sp, sp
 324:	4b4c3d3d 	blmi	130f820 <startup-0x1ecf07e0>
 328:	03040200 	movweq	r0, #16896	; 0x4200
 32c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 330:	0200bb03 	andeq	fp, r0, #3072	; 0xc00
 334:	00bb0304 	adcseq	r0, fp, r4, lsl #6
 338:	63030402 	movwvs	r0, #13314	; 0x3402
 33c:	01040200 	mrseq	r0, R12_usr
 340:	6b063c06 	blvs	18f360 <startup-0x1fe70ca0>
 344:	02004b4c 	andeq	r4, r0, #76, 22	; 0x13000
 348:	003d0304 	eorseq	r0, sp, r4, lsl #6
 34c:	08030402 	stmdaeq	r3, {r1, sl}
 350:	0402008f 	streq	r0, [r2], #-143	; 0xffffff71
 354:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 358:	4b4b4c69 	blmi	12d3504 <startup-0x1ed2cafc>
 35c:	21087575 	tstcs	r8, r5, ror r5
 360:	5a21085a 	bpl	8424d0 <startup-0x1f7bdb30>
 364:	0004024b 	andeq	r0, r4, fp, asr #4
 368:	00c70101 	sbceq	r0, r7, r1, lsl #2
 36c:	00020000 	andeq	r0, r2, r0
 370:	0000005e 	andeq	r0, r0, lr, asr r0
 374:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 378:	0101000d 	tsteq	r1, sp
 37c:	00000101 	andeq	r0, r0, r1, lsl #2
 380:	00000100 	andeq	r0, r0, r0, lsl #2
 384:	2f3a4301 	svccs	0x003a4301
 388:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 38c:	61732f73 	cmnvs	r3, r3, ror pc
 390:	2f65756d 	svccs	0x0065756d
 394:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 398:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 39c:	6f4d2f73 	svcvs	0x004d2f73
 3a0:	62614c70 	rsbvs	r4, r1, #112, 24	; 0x7000
 3a4:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 3a8:	006e6570 	rsbeq	r6, lr, r0, ror r5
 3ac:	63736100 	cmnvs	r3, #0, 2
 3b0:	645f6969 	ldrbvs	r6, [pc], #-2409	; 3b8 <startup-0x1ffffc48>
 3b4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 3b8:	632e7372 			; <UNDEFINED> instruction: 0x632e7372
 3bc:	00000100 	andeq	r0, r0, r0, lsl #2
 3c0:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 3c4:	6c636544 	cfstr64vs	mvdx6, [r3], #-272	; 0xfffffef0
 3c8:	2e657261 	cdpcs	2, 6, cr7, cr5, cr1, {3}
 3cc:	00010068 	andeq	r0, r1, r8, rrx
 3d0:	05000000 	streq	r0, [r0, #-0]
 3d4:	000ba402 	andeq	sl, fp, r2, lsl #8
 3d8:	59691720 	stmdbpl	r9!, {r5, r8, r9, sl, ip}^
 3dc:	686859bb 	stmdavs	r8!, {r0, r1, r3, r4, r5, r7, r8, fp, ip, lr}^
 3e0:	684be559 	stmdavs	fp, {r0, r3, r4, r6, r8, sl, sp, lr, pc}^
 3e4:	4c3d2f67 	ldcmi	15, cr2, [sp], #-412	; 0xfffffe64
 3e8:	3f3d673d 	svccc	0x003d673d
 3ec:	762f3d4b 	strtvc	r3, [pc], -fp, asr #26
 3f0:	593d3d67 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}
 3f4:	3d3d674c 	ldccc	7, cr6, [sp, #-304]!	; 0xfffffed0
 3f8:	673d4c59 			; <UNDEFINED> instruction: 0x673d4c59
 3fc:	67593d3d 	smmlarvs	r9, sp, sp, r3
 400:	673d842f 	ldrvs	r8, [sp, -pc, lsr #8]!
 404:	67593d3d 	smmlarvs	r9, sp, sp, r3
 408:	002f842f 	eoreq	r8, pc, pc, lsr #8
 40c:	06010402 	streq	r0, [r1], -r2, lsl #8
 410:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
 414:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 418:	673e3d3d 			; <UNDEFINED> instruction: 0x673e3d3d
 41c:	01040200 	mrseq	r0, R12_usr
 420:	83062006 	movwhi	r2, #24582	; 0x6006
 424:	4c3d593d 			; <UNDEFINED> instruction: 0x4c3d593d
 428:	4c9f7559 	cfldr32mi	mvfx7, [pc], {89}	; 0x59
 42c:	3e3d3d2f 	cdpcc	13, 3, cr3, cr13, cr15, {1}
 430:	01000c02 	tsteq	r0, r2, lsl #24
 434:	0000b501 	andeq	fp, r0, r1, lsl #10
 438:	4e000200 	cdpmi	2, 0, cr0, cr0, cr0, {0}
 43c:	02000000 	andeq	r0, r0, #0
 440:	0d0efb01 	vstreq	d15, [lr, #-4]
 444:	01010100 	mrseq	r0, (UNDEF: 17)
 448:	00000001 	andeq	r0, r0, r1
 44c:	01000001 	tsteq	r0, r1
 450:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffa15 <ball+0xdfffdc45>
 454:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 458:	6d61732f 	stclvs	3, cr7, [r1, #-188]!	; 0xffffff44
 45c:	442f6575 	strtmi	r6, [pc], #-1397	; 464 <startup-0x1ffffb9c>
 460:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 464:	73746e65 	cmnvc	r4, #1616	; 0x650
 468:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 46c:	2f62614c 	svccs	0x0062614c
 470:	70706f4d 	rsbsvc	r6, r0, sp, asr #30
 474:	00006e65 	andeq	r6, r0, r5, ror #28
 478:	7079656b 	rsbsvc	r6, r9, fp, ror #10
 47c:	645f6461 	ldrbvs	r6, [pc], #-1121	; 484 <startup-0x1ffffb7c>
 480:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 484:	632e7372 			; <UNDEFINED> instruction: 0x632e7372
 488:	00000100 	andeq	r0, r0, r0, lsl #2
 48c:	02050000 	andeq	r0, r5, #0
 490:	20000e54 	andcs	r0, r0, r4, asr lr
 494:	3d3d3217 	lfmcc	f3, 4, [sp, #-92]!	; 0xffffffa4
 498:	3eca4d3d 	mcrcc	13, 6, r4, cr10, cr13, {1}
 49c:	8359684b 	cmphi	r9, #4915200	; 0x4b0000
 4a0:	214c844b 	cmpcs	ip, fp, asr #8
 4a4:	006a6467 	rsbeq	r6, sl, r7, ror #8
 4a8:	03020402 	movweq	r0, #9218	; 0x2402
 4ac:	0200ac75 	andeq	sl, r0, #29952	; 0x7500
 4b0:	66060104 	strvs	r0, [r6], -r4, lsl #2
 4b4:	580f0306 	stmdapl	pc, {r1, r2, r8, r9}	; <UNPREDICTABLE>
 4b8:	01040200 	mrseq	r0, R12_usr
 4bc:	7967a021 	stmdbvc	r7!, {r0, r5, sp, pc}^
 4c0:	3d3e7667 	ldccc	6, cr7, [lr, #-412]!	; 0xfffffe64
 4c4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 4c8:	02004b03 	andeq	r4, r0, #3072	; 0xc00
 4cc:	00670304 	rsbeq	r0, r7, r4, lsl #6
 4d0:	4b030402 	blmi	c14e0 <startup-0x1ff3eb20>
 4d4:	03040200 	movweq	r0, #16896	; 0x4200
 4d8:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
 4dc:	0200fc03 	andeq	pc, r0, #768	; 0x300
 4e0:	58060104 	stmdapl	r6, {r2, r8}
 4e4:	4a100306 	bmi	401104 <startup-0x1fbfeefc>
 4e8:	0009022f 	andeq	r0, r9, pc, lsr #4
 4ec:	Address 0x000004ec is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
   4:	00707574 	rsbseq	r7, r0, r4, ror r5
   8:	6a626f70 	bvs	189bdd0 <startup-0x1e764230>
   c:	00746365 	rsbseq	r6, r4, r5, ror #6
  10:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
  14:	72610074 	rsbvc	r0, r1, #116	; 0x74
  18:	73007667 	movwvc	r7, #1639	; 0x667
  1c:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
  20:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
  24:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  28:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
  2c:	69640074 	stmdbvs	r4!, {r2, r4, r5, r6}^
  30:	64007872 	strvs	r7, [r0], #-2162	; 0xfffff78e
  34:	00797269 	rsbseq	r7, r9, r9, ror #4
  38:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
  3c:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  40:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  44:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  48:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  4c:	30373130 	eorscc	r3, r7, r0, lsr r1
  50:	20343039 	eorscs	r3, r4, r9, lsr r0
  54:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  58:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  5c:	415b2029 	cmpmi	fp, r9, lsr #32
  60:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff316 <ball+0xdfffd546>
  64:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  68:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  6c:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  70:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  74:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  78:	6f697369 	svcvs	0x00697369
  7c:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  80:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  84:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
  88:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  8c:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  90:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  94:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  98:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  9c:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  a0:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
  a4:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
  a8:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
  ac:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
  b0:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  b4:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  b8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  bc:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  c0:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  c4:	20672d20 	rsbcs	r2, r7, r0, lsr #26
  c8:	20304f2d 	eorscs	r4, r0, sp, lsr #30
  cc:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
  d0:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
  d4:	736e7500 	cmnvc	lr, #0, 10
  d8:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  dc:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
  e0:	43007261 	movwmi	r7, #609	; 0x261
  e4:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
  e8:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
  ec:	756d6173 	strbvc	r6, [sp, #-371]!	; 0xfffffe8d
  f0:	6f445c65 	svcvs	0x00445c65
  f4:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  f8:	5c73746e 	cfldrdpl	mvd7, [r3], #-440	; 0xfffffe48
  fc:	4c706f4d 	ldclmi	15, cr6, [r0], #-308	; 0xfffffecc
 100:	4d5c6261 	lfmmi	f6, 2, [ip, #-388]	; 0xfffffe7c
 104:	6570706f 	ldrbvs	r7, [r0, #-111]!	; 0xffffff91
 108:	6573006e 	ldrbvs	r0, [r3, #-110]!	; 0xffffff92
 10c:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 110:	00646565 	rsbeq	r6, r4, r5, ror #10
 114:	78736f70 	ldmdavc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 118:	736f7000 	cmnvc	pc, #0
 11c:	61620079 	smcvs	8201	; 0x2009
 120:	675f6c6c 	ldrbvs	r6, [pc, -ip, ror #24]
 124:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 128:	00797274 	rsbseq	r7, r9, r4, ror r2
 12c:	6e69616d 	powvsez	f6, f1, #5.0
 130:	7a697300 	bvc	1a5cd38 <startup-0x1e5a32c8>
 134:	73007865 	movwvc	r7, #2149	; 0x865
 138:	79657a69 	stmdbvc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 13c:	67726100 	ldrbvs	r6, [r2, -r0, lsl #2]!
 140:	6d740063 	ldclvs	0, cr0, [r4, #-396]!	; 0xfffffe74
 144:	66756270 			; <UNDEFINED> instruction: 0x66756270
 148:	00726566 	rsbseq	r6, r2, r6, ror #10
 14c:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 150:	2f3a4300 	svccs	0x003a4300
 154:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 158:	61732f73 	cmnvs	r3, r3, ror pc
 15c:	2f65756d 	svccs	0x0065756d
 160:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 164:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 168:	6f4d2f73 	svcvs	0x004d2f73
 16c:	62614c70 	rsbvs	r4, r1, #112, 24	; 0x7000
 170:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 174:	2f6e6570 	svccs	0x006e6570
 178:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 17c:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 180:	6f6d0063 	svcvs	0x006d0063
 184:	73006576 	movwvc	r6, #1398	; 0x576
 188:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
 18c:	73003167 	movwvc	r3, #359	; 0x167
 190:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
 194:	74003267 	strvc	r3, [r0], #-615	; 0xfffffd99
 198:	006a624f 	rsbeq	r6, sl, pc, asr #4
 19c:	706d756e 	rsbvc	r7, sp, lr, ror #10
 1a0:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 1a4:	656b0073 	strbvs	r0, [fp, #-115]!	; 0xffffff8d
 1a8:	70007379 	andvc	r7, r0, r9, ror r3
 1ac:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; 18 <startup-0x1fffffe8>
 1b0:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 1b4:	2f3a4300 	svccs	0x003a4300
 1b8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 1bc:	61732f73 	cmnvs	r3, r3, ror pc
 1c0:	2f65756d 	svccs	0x0065756d
 1c4:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 1c8:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 1cc:	6f4d2f73 	svcvs	0x004d2f73
 1d0:	62614c70 	rsbvs	r4, r1, #112, 24	; 0x7000
 1d4:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 1d8:	2f6e6570 	svccs	0x006e6570
 1dc:	616c6564 	cmnvs	ip, r4, ror #10
 1e0:	00632e79 	rsbeq	r2, r3, r9, ror lr
 1e4:	616c6564 	cmnvs	ip, r4, ror #10
 1e8:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 1ec:	006f726b 	rsbeq	r7, pc, fp, ror #4
 1f0:	616c6564 	cmnvs	ip, r4, ror #10
 1f4:	30345f79 	eorscc	r5, r4, r9, ror pc
 1f8:	6400736e 	strvs	r7, [r0], #-878	; 0xfffffc92
 1fc:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 200:	6c696d5f 	stclvs	13, cr6, [r9], #-380	; 0xfffffe84
 204:	6400696c 	strvs	r6, [r0], #-2412	; 0xfffff694
 208:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 20c:	3035325f 	eorscc	r3, r5, pc, asr r2
 210:	4200736e 	andmi	r7, r0, #-1207959551	; 0xb8000001
 214:	3253435f 	subscc	r4, r3, #2080374785	; 0x7c000001
 218:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
 21c:	5f726566 	svcpl	0x00726566
 220:	61656c63 	cmnvs	r5, r3, ror #24
 224:	75620072 	strbvc	r0, [r2, #-114]!	; 0xffffff8e
 228:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 22c:	6168635f 	cmnvs	r8, pc, asr r3
 230:	4c65676e 	stclmi	7, cr6, [r5], #-440	; 0xfffffe48
 234:	7500676f 	strvc	r6, [r0, #-1903]	; 0xfffff891
 238:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
 23c:	67006465 	strvs	r6, [r0, -r5, ror #8]
 240:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 244:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 248:	5f646165 	svcpl	0x00646165
 24c:	61746164 	cmnvs	r4, r4, ror #2
 250:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
 254:	5f726566 	svcpl	0x00726566
 258:	70736964 	rsbsvc	r6, r3, r4, ror #18
 25c:	0079616c 	rsbseq	r6, r9, ip, ror #2
 260:	64636c70 	strbtvs	r6, [r3], #-3184	; 0xfffff390
 264:	66667542 	strbtvs	r7, [r6], -r2, asr #10
 268:	61726700 	cmnvs	r2, r0, lsl #14
 26c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 270:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 274:	735f6e61 	cmpvc	pc, #1552	; 0x610
 278:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 27c:	5f42006e 	svcpl	0x0042006e
 280:	67005752 	smlsdvs	r0, r2, r7, r5
 284:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 288:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 28c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 290:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 294:	65730070 	ldrbvs	r0, [r3, #-112]!	; 0xffffff90
 298:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
 29c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 2a0:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; d8 <startup-0x1fffff28>
 2a4:	0072656c 	rsbseq	r6, r2, ip, ror #10
 2a8:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff86d <ball+0xdfffda9d>
 2ac:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 2b0:	6d61732f 	stclvs	3, cr7, [r1, #-188]!	; 0xffffff44
 2b4:	442f6575 	strtmi	r6, [pc], #-1397	; 2bc <startup-0x1ffffd44>
 2b8:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 2bc:	73746e65 	cmnvc	r4, #1616	; 0x650
 2c0:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 2c4:	2f62614c 	svccs	0x0062614c
 2c8:	70706f4d 	rsbsvc	r6, r0, sp, asr #30
 2cc:	6c2f6e65 	stcvs	14, cr6, [pc], #-404	; 140 <startup-0x1ffffec0>
 2d0:	645f6463 	ldrbvs	r6, [pc], #-1123	; 2d8 <startup-0x1ffffd28>
 2d4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 2d8:	632e7372 			; <UNDEFINED> instruction: 0x632e7372
 2dc:	525f4200 	subspl	r4, pc, #0, 4
 2e0:	69005453 	stmdbvs	r0, {r0, r1, r4, r6, sl, ip, lr}
 2e4:	5f74696e 	svcpl	0x0074696e
 2e8:	0064636c 	rsbeq	r6, r4, ip, ror #6
 2ec:	4264636c 	rsbmi	r6, r4, #108, 6	; 0xb0000001
 2f0:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 2f4:	61724472 	cmnvs	r2, r2, ror r4
 2f8:	72670077 	rsbvc	r0, r7, #119	; 0x77
 2fc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 300:	69705f63 	ldmdbvs	r0!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
 304:	006c6578 	rsbeq	r6, ip, r8, ror r5
 308:	53525f42 	cmppl	r2, #264	; 0x108
 30c:	636c7000 	cmnvs	ip, #0
 310:	66754264 	ldrbtvs	r4, [r5], -r4, ror #4
 314:	00726566 	rsbseq	r6, r2, r6, ror #10
 318:	53435f42 	movtpl	r5, #16194	; 0x3f42
 31c:	5f420031 	svcpl	0x00420031
 320:	454c4553 	strbmi	r4, [ip, #-1363]	; 0xfffffaad
 324:	69005443 	stmdbvs	r0, {r0, r1, r6, sl, ip, lr}
 328:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 32c:	61726700 	cmnvs	r2, r0, lsl #14
 330:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 334:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 338:	645f6574 	ldrbvs	r6, [pc], #-1396	; 340 <startup-0x1ffffcc0>
 33c:	00617461 	rsbeq	r7, r1, r1, ror #8
 340:	4264636c 	rsbmi	r6, r4, #108, 6	; 0xb0000001
 344:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 348:	69725772 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, ip, lr}^
 34c:	69506574 	ldmdbvs	r0, {r2, r4, r5, r6, r8, sl, sp, lr}^
 350:	006c6578 	rsbeq	r6, ip, r8, ror r5
 354:	70617267 	rsbvc	r7, r1, r7, ror #4
 358:	5f636968 	svcpl	0x00636968
 35c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 360:	61726700 	cmnvs	r2, r0, lsl #14
 364:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 368:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 36c:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
 370:	00796461 	rsbseq	r6, r9, r1, ror #8
 374:	70617267 	rsbvc	r7, r1, r7, ror #4
 378:	5f636968 	svcpl	0x00636968
 37c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 380:	6f635f65 	svcvs	0x00635f65
 384:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 388:	6f740064 	svcvs	0x00740064
 38c:	77617244 	strbvc	r7, [r1, -r4, asr #4]!
 390:	61726700 	cmnvs	r2, r0, lsl #14
 394:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 398:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 39c:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
 3a0:	00657a69 	rsbeq	r7, r5, r9, ror #20
 3a4:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 3a8:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 3ac:	736f705f 	cmnvc	pc, #95	; 0x5f
 3b0:	6f697469 	svcvs	0x00697469
 3b4:	3a43006e 	bcc	10c0574 <startup-0x1ef3fa8c>
 3b8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 3bc:	732f7372 			; <UNDEFINED> instruction: 0x732f7372
 3c0:	65756d61 	ldrbvs	r6, [r5, #-3425]!	; 0xfffff29f
 3c4:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 3c8:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 3cc:	4d2f7374 	stcmi	3, cr7, [pc, #-464]!	; 204 <startup-0x1ffffdfc>
 3d0:	614c706f 	cmpvs	ip, pc, rrx
 3d4:	6f4d2f62 	svcvs	0x004d2f62
 3d8:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
 3dc:	6e6f702f 	cdpvs	0, 6, cr7, cr15, cr15, {1}
 3e0:	676f6c67 	strbvs	r6, [pc, -r7, ror #24]!
 3e4:	632e6369 			; <UNDEFINED> instruction: 0x632e6369
 3e8:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 3ec:	6a626f5f 	bvs	189c170 <startup-0x1e763e90>
 3f0:	5f746365 	svcpl	0x00746365
 3f4:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 3f8:	72640064 	rsbvc	r0, r4, #100	; 0x64
 3fc:	00787761 	rsbseq	r7, r8, r1, ror #14
 400:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 404:	6c630079 	stclvs	0, cr0, [r3], #-484	; 0xfffffe1c
 408:	5f726165 	svcpl	0x00726165
 40c:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 410:	64007463 	strvs	r7, [r0], #-1123	; 0xfffffb9d
 414:	5f776172 	svcpl	0x00776172
 418:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 41c:	6d007463 	cfstrsvs	mvf7, [r0, #-396]	; 0xfffffe74
 420:	5f65766f 	svcpl	0x0065766f
 424:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 428:	73007463 	movwvc	r7, #1123	; 0x463
 42c:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 430:	70730078 	rsbsvc	r0, r3, r8, ror r0
 434:	79646565 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 438:	63736100 	cmnvs	r3, #0, 2
 43c:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 440:	5f6c7274 	svcpl	0x006c7274
 444:	5f746962 	svcpl	0x00746962
 448:	61656c63 	cmnvs	r5, r3, ror #24
 44c:	73610072 	cmnvc	r1, #114	; 0x72
 450:	5f696963 	svcpl	0x00696963
 454:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 458:	6f635f65 	svcvs	0x00635f65
 45c:	6f72746e 	svcvs	0x0072746e
 460:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 464:	63736100 	cmnvs	r3, #0, 2
 468:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 46c:	5f6c7274 	svcpl	0x006c7274
 470:	5f746962 	svcpl	0x00746962
 474:	00746573 	rsbseq	r6, r4, r3, ror r5
 478:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 47c:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 480:	5f657469 	svcpl	0x00657469
 484:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 488:	63736100 	cmnvs	r3, #0, 2
 48c:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 490:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 494:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 498:	73610061 	cmnvc	r1, #97	; 0x61
 49c:	5f696963 	svcpl	0x00696963
 4a0:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 4a4:	6174735f 	cmnvs	r4, pc, asr r3
 4a8:	00737574 	rsbseq	r7, r3, r4, ror r5
 4ac:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 4b0:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 4b4:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
 4b8:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 4bc:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 4c0:	3a430072 	bcc	10c0690 <startup-0x1ef3f970>
 4c4:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 4c8:	732f7372 			; <UNDEFINED> instruction: 0x732f7372
 4cc:	65756d61 	ldrbvs	r6, [r5, #-3425]!	; 0xfffff29f
 4d0:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 4d4:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 4d8:	4d2f7374 	stcmi	3, cr7, [pc, #-464]!	; 310 <startup-0x1ffffcf0>
 4dc:	614c706f 	cmpvs	ip, pc, rrx
 4e0:	6f4d2f62 	svcvs	0x004d2f62
 4e4:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
 4e8:	6373612f 	cmnvs	r3, #-1073741813	; 0xc000000b
 4ec:	645f6969 	ldrbvs	r6, [pc], #-2409	; 4f4 <startup-0x1ffffb0c>
 4f0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 4f4:	632e7372 			; <UNDEFINED> instruction: 0x632e7372
 4f8:	63736100 	cmnvs	r3, #0, 2
 4fc:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 500:	5f646165 	svcpl	0x00646165
 504:	61746164 	cmnvs	r4, r4, ror #2
 508:	63736100 	cmnvs	r3, #0, 2
 50c:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 510:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 514:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
 518:	63736100 	cmnvs	r3, #0, 2
 51c:	675f6969 	ldrbvs	r6, [pc, -r9, ror #18]
 520:	786f746f 	stmdavc	pc!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 524:	73610079 	cmnvc	r1, #121	; 0x79
 528:	5f696963 	svcpl	0x00696963
 52c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 530:	7070615f 	rsbsvc	r6, r0, pc, asr r1
 534:	72646100 	rsbvc	r6, r4, #0, 2
 538:	00737365 	rsbseq	r7, r3, r5, ror #6
 53c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 540:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
 544:	6b007469 	blvs	1d6f0 <startup-0x1ffe2910>
 548:	00627965 	rsbeq	r7, r2, r5, ror #18
 54c:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffb11 <ball+0xdfffdd41>
 550:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 554:	6d61732f 	stclvs	3, cr7, [r1, #-188]!	; 0xffffff44
 558:	442f6575 	strtmi	r6, [pc], #-1397	; 560 <startup-0x1ffffaa0>
 55c:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 560:	73746e65 	cmnvc	r4, #1616	; 0x650
 564:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 568:	2f62614c 	svccs	0x0062614c
 56c:	70706f4d 	rsbsvc	r6, r0, sp, asr #30
 570:	6b2f6e65 	blvs	bdbf0c <startup-0x1f4240f4>
 574:	61707965 	cmnvs	r0, r5, ror #18
 578:	72645f64 	rsbvc	r5, r4, #100, 30	; 0x190
 57c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 580:	00632e73 	rsbeq	r2, r3, r3, ror lr
 584:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 588:	6f526576 	svcvs	0x00526576
 58c:	65730077 	ldrbvs	r0, [r3, #-119]!	; 0xffffff89
 590:	646f4367 	strbtvs	r4, [pc], #-871	; 598 <startup-0x1ffffa68>
 594:	69007365 	stmdbvs	r0, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 598:	5f74696e 	svcpl	0x0074696e
 59c:	7079656b 	rsbsvc	r6, r9, fp, ror #10
 5a0:	63006461 	movwvs	r6, #1121	; 0x461
 5a4:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 5a8:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
 5ac:	67657337 			; <UNDEFINED> instruction: 0x67657337
 5b0:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 5b4:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
 5b8:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 5bc:	00646170 	rsbeq	r6, r4, r0, ror r1

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <ball+0xdfffd53e>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000020 	andeq	r0, r0, r0, lsr #32
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000104 	andeq	r0, r0, r4, lsl #2
  30:	400c0e41 	andmi	r0, ip, r1, asr #28
  34:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  38:	018e4002 	orreq	r4, lr, r2
  3c:	41400e41 	cmpmi	r0, r1, asr #28
  40:	0000070d 	andeq	r0, r0, sp, lsl #14
  44:	0000000c 	andeq	r0, r0, ip
  48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  4c:	7c020001 	stcvc	0, cr0, [r2], {1}
  50:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  54:	00000018 	andeq	r0, r0, r8, lsl r0
  58:	00000044 	andeq	r0, r0, r4, asr #32
  5c:	20000114 	andcs	r0, r0, r4, lsl r1
  60:	00000044 	andeq	r0, r0, r4, asr #32
  64:	40080e41 	andmi	r0, r8, r1, asr #28
  68:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  6c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  70:	00000018 	andeq	r0, r0, r8, lsl r0
  74:	00000044 	andeq	r0, r0, r4, asr #32
  78:	20000158 	andcs	r0, r0, r8, asr r1
  7c:	0000000a 	andeq	r0, r0, sl
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  8c:	0000001c 	andeq	r0, r0, ip, lsl r0
  90:	00000044 	andeq	r0, r0, r4, asr #32
  94:	20000162 	andcs	r0, r0, r2, ror #2
  98:	00000010 	andeq	r0, r0, r0, lsl r0
  9c:	40080e41 	andmi	r0, r8, r1, asr #28
  a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a4:	100e4101 	andne	r4, lr, r1, lsl #2
  a8:	00070d41 	andeq	r0, r7, r1, asr #26
  ac:	0000001c 	andeq	r0, r0, ip, lsl r0
  b0:	00000044 	andeq	r0, r0, r4, asr #32
  b4:	20000172 	andcs	r0, r0, r2, ror r1
  b8:	00000010 	andeq	r0, r0, r0, lsl r0
  bc:	40080e41 	andmi	r0, r8, r1, asr #28
  c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c4:	100e4101 	andne	r4, lr, r1, lsl #2
  c8:	00070d41 	andeq	r0, r7, r1, asr #26
  cc:	0000000c 	andeq	r0, r0, ip
  d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  d4:	7c020001 	stcvc	0, cr0, [r2], {1}
  d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  dc:	0000001c 	andeq	r0, r0, ip, lsl r0
  e0:	000000cc 	andeq	r0, r0, ip, asr #1
  e4:	20000184 	andcs	r0, r0, r4, lsl #3
  e8:	00000090 	muleq	r0, r0, r0
  ec:	40080e41 	andmi	r0, r8, r1, asr #28
  f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f4:	100e4101 	andne	r4, lr, r1, lsl #2
  f8:	00070d41 	andeq	r0, r7, r1, asr #26
  fc:	00000018 	andeq	r0, r0, r8, lsl r0
 100:	000000cc 	andeq	r0, r0, ip, asr #1
 104:	20000214 	andcs	r0, r0, r4, lsl r2
 108:	000000a4 	andeq	r0, r0, r4, lsr #1
 10c:	40080e41 	andmi	r0, r8, r1, asr #28
 110:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 114:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	000000cc 	andeq	r0, r0, ip, asr #1
 120:	200002b8 			; <UNDEFINED> instruction: 0x200002b8
 124:	000000c8 	andeq	r0, r0, r8, asr #1
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	180e4101 	stmdane	lr, {r0, r8, lr}
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	000000cc 	andeq	r0, r0, ip, asr #1
 140:	20000380 	andcs	r0, r0, r0, lsl #7
 144:	000000a8 	andeq	r0, r0, r8, lsr #1
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	100e4101 	andne	r4, lr, r1, lsl #2
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	000000cc 	andeq	r0, r0, ip, asr #1
 160:	20000428 	andcs	r0, r0, r8, lsr #8
 164:	00000058 	andeq	r0, r0, r8, asr r0
 168:	40080e41 	andmi	r0, r8, r1, asr #28
 16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 170:	100e4101 	andne	r4, lr, r1, lsl #2
 174:	00070d41 	andeq	r0, r7, r1, asr #26
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	000000cc 	andeq	r0, r0, ip, asr #1
 180:	20000480 	andcs	r0, r0, r0, lsl #9
 184:	00000060 	andeq	r0, r0, r0, rrx
 188:	40080e41 	andmi	r0, r8, r1, asr #28
 18c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 190:	100e4101 	andne	r4, lr, r1, lsl #2
 194:	00070d41 	andeq	r0, r7, r1, asr #26
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	000000cc 	andeq	r0, r0, ip, asr #1
 1a0:	200004e0 	andcs	r0, r0, r0, ror #9
 1a4:	0000002a 	andeq	r0, r0, sl, lsr #32
 1a8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b0:	100e4101 	andne	r4, lr, r1, lsl #2
 1b4:	00070d41 	andeq	r0, r7, r1, asr #26
 1b8:	00000018 	andeq	r0, r0, r8, lsl r0
 1bc:	000000cc 	andeq	r0, r0, ip, asr #1
 1c0:	2000050a 	andcs	r0, r0, sl, lsl #10
 1c4:	0000001a 	andeq	r0, r0, sl, lsl r0
 1c8:	40080e41 	andmi	r0, r8, r1, asr #28
 1cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1d4:	00000018 	andeq	r0, r0, r8, lsl r0
 1d8:	000000cc 	andeq	r0, r0, ip, asr #1
 1dc:	20000524 	andcs	r0, r0, r4, lsr #10
 1e0:	00000084 	andeq	r0, r0, r4, lsl #1
 1e4:	40080e41 	andmi	r0, r8, r1, asr #28
 1e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ec:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	000000cc 	andeq	r0, r0, ip, asr #1
 1f8:	200005a8 	andcs	r0, r0, r8, lsr #11
 1fc:	00000058 	andeq	r0, r0, r8, asr r0
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	100e4101 	andne	r4, lr, r1, lsl #2
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	00000024 	andeq	r0, r0, r4, lsr #32
 214:	000000cc 	andeq	r0, r0, ip, asr #1
 218:	20000600 	andcs	r0, r0, r0, lsl #12
 21c:	0000013c 	andeq	r0, r0, ip, lsr r1
 220:	40100e41 	andsmi	r0, r0, r1, asr #28
 224:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 228:	02874003 	addeq	r4, r7, #3
 22c:	41018e40 	tstmi	r1, r0, asr #28
 230:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 234:	00000007 	andeq	r0, r0, r7
 238:	00000024 	andeq	r0, r0, r4, lsr #32
 23c:	000000cc 	andeq	r0, r0, ip, asr #1
 240:	2000073c 	andcs	r0, r0, ip, lsr r7
 244:	00000158 	andeq	r0, r0, r8, asr r1
 248:	40140e41 	andsmi	r0, r4, r1, asr #28
 24c:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
 250:	03864004 	orreq	r4, r6, #4
 254:	40028740 	andmi	r8, r2, r0, asr #14
 258:	0e41018e 	dvfeqd	f0, f1, #0.5
 25c:	070d4128 	streq	r4, [sp, -r8, lsr #2]
 260:	00000020 	andeq	r0, r0, r0, lsr #32
 264:	000000cc 	andeq	r0, r0, ip, asr #1
 268:	20000894 	mulcs	r0, r4, r8
 26c:	00000124 	andeq	r0, r0, r4, lsr #2
 270:	400c0e41 	andmi	r0, ip, r1, asr #28
 274:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 278:	018e4002 	orreq	r4, lr, r2
 27c:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 280:	0000070d 	andeq	r0, r0, sp, lsl #14
 284:	0000001c 	andeq	r0, r0, ip, lsl r0
 288:	000000cc 	andeq	r0, r0, ip, asr #1
 28c:	200009b8 			; <UNDEFINED> instruction: 0x200009b8
 290:	00000054 	andeq	r0, r0, r4, asr r0
 294:	40080e41 	andmi	r0, r8, r1, asr #28
 298:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 29c:	180e4101 	stmdane	lr, {r0, r8, lr}
 2a0:	00070d41 	andeq	r0, r7, r1, asr #26
 2a4:	0000000c 	andeq	r0, r0, ip
 2a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2ac:	7c020001 	stcvc	0, cr0, [r2], {1}
 2b0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b8:	000002a4 	andeq	r0, r0, r4, lsr #5
 2bc:	20000a0c 	andcs	r0, r0, ip, lsl #20
 2c0:	00000020 	andeq	r0, r0, r0, lsr #32
 2c4:	40080e41 	andmi	r0, r8, r1, asr #28
 2c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2cc:	180e4101 	stmdane	lr, {r0, r8, lr}
 2d0:	00070d41 	andeq	r0, r7, r1, asr #26
 2d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d8:	000002a4 	andeq	r0, r0, r4, lsr #5
 2dc:	20000a2c 	andcs	r0, r0, ip, lsr #20
 2e0:	00000020 	andeq	r0, r0, r0, lsr #32
 2e4:	40080e41 	andmi	r0, r8, r1, asr #28
 2e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2ec:	180e4101 	stmdane	lr, {r0, r8, lr}
 2f0:	00070d41 	andeq	r0, r7, r1, asr #26
 2f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f8:	000002a4 	andeq	r0, r0, r4, lsr #5
 2fc:	20000a4c 	andcs	r0, r0, ip, asr #20
 300:	00000064 	andeq	r0, r0, r4, rrx
 304:	40080e41 	andmi	r0, r8, r1, asr #28
 308:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 30c:	200e4101 	andcs	r4, lr, r1, lsl #2
 310:	00070d41 	andeq	r0, r7, r1, asr #26
 314:	0000001c 	andeq	r0, r0, ip, lsl r0
 318:	000002a4 	andeq	r0, r0, r4, lsr #5
 31c:	20000ab0 			; <UNDEFINED> instruction: 0x20000ab0
 320:	0000005c 	andeq	r0, r0, ip, asr r0
 324:	40080e41 	andmi	r0, r8, r1, asr #28
 328:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 32c:	180e4101 	stmdane	lr, {r0, r8, lr}
 330:	00070d41 	andeq	r0, r7, r1, asr #26
 334:	0000001c 	andeq	r0, r0, ip, lsl r0
 338:	000002a4 	andeq	r0, r0, r4, lsr #5
 33c:	20000b0c 	andcs	r0, r0, ip, lsl #22
 340:	00000098 	muleq	r0, r8, r0
 344:	40080e41 	andmi	r0, r8, r1, asr #28
 348:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 34c:	100e4101 	andne	r4, lr, r1, lsl #2
 350:	00070d41 	andeq	r0, r7, r1, asr #26
 354:	0000000c 	andeq	r0, r0, ip
 358:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 35c:	7c020001 	stcvc	0, cr0, [r2], {1}
 360:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 364:	0000001c 	andeq	r0, r0, ip, lsl r0
 368:	00000354 	andeq	r0, r0, r4, asr r3
 36c:	20000ba4 	andcs	r0, r0, r4, lsr #23
 370:	00000044 	andeq	r0, r0, r4, asr #32
 374:	40080e41 	andmi	r0, r8, r1, asr #28
 378:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 37c:	180e4101 	stmdane	lr, {r0, r8, lr}
 380:	00070d41 	andeq	r0, r7, r1, asr #26
 384:	0000001c 	andeq	r0, r0, ip, lsl r0
 388:	00000354 	andeq	r0, r0, r4, asr r3
 38c:	20000be8 	andcs	r0, r0, r8, ror #23
 390:	00000048 	andeq	r0, r0, r8, asr #32
 394:	40080e41 	andmi	r0, r8, r1, asr #28
 398:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 39c:	180e4101 	stmdane	lr, {r0, r8, lr}
 3a0:	00070d41 	andeq	r0, r7, r1, asr #26
 3a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a8:	00000354 	andeq	r0, r0, r4, asr r3
 3ac:	20000c30 	andcs	r0, r0, r0, lsr ip
 3b0:	00000030 	andeq	r0, r0, r0, lsr r0
 3b4:	40080e41 	andmi	r0, r8, r1, asr #28
 3b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3bc:	100e4101 	andne	r4, lr, r1, lsl #2
 3c0:	00070d41 	andeq	r0, r7, r1, asr #26
 3c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c8:	00000354 	andeq	r0, r0, r4, asr r3
 3cc:	20000c60 	andcs	r0, r0, r0, ror #24
 3d0:	0000002c 	andeq	r0, r0, ip, lsr #32
 3d4:	40080e41 	andmi	r0, r8, r1, asr #28
 3d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3dc:	100e4101 	andne	r4, lr, r1, lsl #2
 3e0:	00070d41 	andeq	r0, r7, r1, asr #26
 3e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e8:	00000354 	andeq	r0, r0, r4, asr r3
 3ec:	20000c8c 	andcs	r0, r0, ip, lsl #25
 3f0:	0000002a 	andeq	r0, r0, sl, lsr #32
 3f4:	40080e41 	andmi	r0, r8, r1, asr #28
 3f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3fc:	100e4101 	andne	r4, lr, r1, lsl #2
 400:	00070d41 	andeq	r0, r7, r1, asr #26
 404:	0000001c 	andeq	r0, r0, ip, lsl r0
 408:	00000354 	andeq	r0, r0, r4, asr r3
 40c:	20000cb6 			; <UNDEFINED> instruction: 0x20000cb6
 410:	0000002a 	andeq	r0, r0, sl, lsr #32
 414:	40080e41 	andmi	r0, r8, r1, asr #28
 418:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 41c:	100e4101 	andne	r4, lr, r1, lsl #2
 420:	00070d41 	andeq	r0, r7, r1, asr #26
 424:	00000020 	andeq	r0, r0, r0, lsr #32
 428:	00000354 	andeq	r0, r0, r4, asr r3
 42c:	20000ce0 	andcs	r0, r0, r0, ror #25
 430:	00000048 	andeq	r0, r0, r8, asr #32
 434:	400c0e41 	andmi	r0, ip, r1, asr #28
 438:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 43c:	018e4002 	orreq	r4, lr, r2
 440:	41180e41 	tstmi	r8, r1, asr #28
 444:	0000070d 	andeq	r0, r0, sp, lsl #14
 448:	00000020 	andeq	r0, r0, r0, lsr #32
 44c:	00000354 	andeq	r0, r0, r4, asr r3
 450:	20000d28 	andcs	r0, r0, r8, lsr #26
 454:	00000048 	andeq	r0, r0, r8, asr #32
 458:	400c0e41 	andmi	r0, ip, r1, asr #28
 45c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 460:	018e4002 	orreq	r4, lr, r2
 464:	41180e41 	tstmi	r8, r1, asr #28
 468:	0000070d 	andeq	r0, r0, sp, lsl #14
 46c:	00000018 	andeq	r0, r0, r8, lsl r0
 470:	00000354 	andeq	r0, r0, r4, asr r3
 474:	20000d70 	andcs	r0, r0, r0, ror sp
 478:	00000046 	andeq	r0, r0, r6, asr #32
 47c:	40080e41 	andmi	r0, r8, r1, asr #28
 480:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 484:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 488:	0000001c 	andeq	r0, r0, ip, lsl r0
 48c:	00000354 	andeq	r0, r0, r4, asr r3
 490:	20000db6 			; <UNDEFINED> instruction: 0x20000db6
 494:	0000003c 	andeq	r0, r0, ip, lsr r0
 498:	40080e41 	andmi	r0, r8, r1, asr #28
 49c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4a0:	100e4101 	andne	r4, lr, r1, lsl #2
 4a4:	00070d41 	andeq	r0, r7, r1, asr #26
 4a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4ac:	00000354 	andeq	r0, r0, r4, asr r3
 4b0:	20000df2 	strdcs	r0, [r0], -r2
 4b4:	00000034 	andeq	r0, r0, r4, lsr r0
 4b8:	40080e41 	andmi	r0, r8, r1, asr #28
 4bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c0:	180e4101 	stmdane	lr, {r0, r8, lr}
 4c4:	00070d41 	andeq	r0, r7, r1, asr #26
 4c8:	00000018 	andeq	r0, r0, r8, lsl r0
 4cc:	00000354 	andeq	r0, r0, r4, asr r3
 4d0:	20000e26 	andcs	r0, r0, r6, lsr #28
 4d4:	0000002e 	andeq	r0, r0, lr, lsr #32
 4d8:	40080e41 	andmi	r0, r8, r1, asr #28
 4dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 4e4:	0000000c 	andeq	r0, r0, ip
 4e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4ec:	7c020001 	stcvc	0, cr0, [r2], {1}
 4f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4f4:	00000018 	andeq	r0, r0, r8, lsl r0
 4f8:	000004e4 	andeq	r0, r0, r4, ror #9
 4fc:	20000e54 	andcs	r0, r0, r4, asr lr
 500:	00000038 	andeq	r0, r0, r8, lsr r0
 504:	40080e41 	andmi	r0, r8, r1, asr #28
 508:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 50c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 510:	00000020 	andeq	r0, r0, r0, lsr #32
 514:	000004e4 	andeq	r0, r0, r4, ror #9
 518:	20000e8c 	andcs	r0, r0, ip, lsl #29
 51c:	000000bc 	strheq	r0, [r0], -ip
 520:	400c0e41 	andmi	r0, ip, r1, asr #28
 524:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 528:	018e4002 	orreq	r4, lr, r2
 52c:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 530:	0000070d 	andeq	r0, r0, sp, lsl #14
 534:	00000024 	andeq	r0, r0, r4, lsr #32
 538:	000004e4 	andeq	r0, r0, r4, ror #9
 53c:	20000f48 	andcs	r0, r0, r8, asr #30
 540:	00000034 	andeq	r0, r0, r4, lsr r0
 544:	40100e41 	andsmi	r0, r0, r1, asr #28
 548:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 54c:	02874003 	addeq	r4, r7, #3
 550:	41018e40 	tstmi	r1, r0, asr #28
 554:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 558:	00000007 	andeq	r0, r0, r7
 55c:	0000001c 	andeq	r0, r0, ip, lsl r0
 560:	000004e4 	andeq	r0, r0, r4, ror #9
 564:	20000f7c 	andcs	r0, r0, ip, ror pc
 568:	00000088 	andeq	r0, r0, r8, lsl #1
 56c:	40080e41 	andmi	r0, r8, r1, asr #28
 570:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 574:	100e4101 	andne	r4, lr, r1, lsl #2
 578:	00070d41 	andeq	r0, r7, r1, asr #26
