
./Debug/Moppen.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 */
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f804 	bl	20000010 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <main>:
	move_object,
	set_object_speed,
	pong_set_position
	};

void main(int argc, char **argv){
20000010:	b590      	push	{r4, r7, lr}
20000012:	b091      	sub	sp, #68	; 0x44
20000014:	af00      	add	r7, sp, #0
20000016:	6078      	str	r0, [r7, #4]
20000018:	6039      	str	r1, [r7, #0]
	#ifdef USBDM
		*((unsigned long *)0x40023830) = 0x18;
		__asm volatile(" LDR R0,=0x08000209\n BLX R0 \n");
	#endif
	#ifdef ascii
		ascii_init_app();
2000001a:	f001 f856 	bl	200010ca <ascii_init_app>
		ascii_init();
2000001e:	f000 fff9 	bl	20001014 <ascii_init>
		ascii_gotoxy(1,1);
20000022:	2101      	movs	r1, #1
20000024:	2001      	movs	r0, #1
20000026:	f001 f836 	bl	20001096 <ascii_gotoxy>
		char *s;
		char string1[] = "Player 1: ";
2000002a:	2020      	movs	r0, #32
2000002c:	183b      	adds	r3, r7, r0
2000002e:	4ace      	ldr	r2, [pc, #824]	; (20000368 <main+0x358>)
20000030:	ca12      	ldmia	r2!, {r1, r4}
20000032:	c312      	stmia	r3!, {r1, r4}
20000034:	8811      	ldrh	r1, [r2, #0]
20000036:	8019      	strh	r1, [r3, #0]
20000038:	7892      	ldrb	r2, [r2, #2]
2000003a:	709a      	strb	r2, [r3, #2]
		s = string1;
2000003c:	183b      	adds	r3, r7, r0
2000003e:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (*s)
20000040:	e006      	b.n	20000050 <main+0x40>
		ascii_write_char(*s++);
20000042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20000044:	1c5a      	adds	r2, r3, #1
20000046:	63fa      	str	r2, [r7, #60]	; 0x3c
20000048:	781b      	ldrb	r3, [r3, #0]
2000004a:	0018      	movs	r0, r3
2000004c:	f001 f805 	bl	2000105a <ascii_write_char>
	while (*s)
20000050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20000052:	781b      	ldrb	r3, [r3, #0]
20000054:	2b00      	cmp	r3, #0
20000056:	d1f4      	bne.n	20000042 <main+0x32>
	ascii_gotoxy(11,2);
20000058:	2102      	movs	r1, #2
2000005a:	200b      	movs	r0, #11
2000005c:	f001 f81b 	bl	20001096 <ascii_gotoxy>
	char string2[] = "Player 2: ";
20000060:	2014      	movs	r0, #20
20000062:	183b      	adds	r3, r7, r0
20000064:	4ac1      	ldr	r2, [pc, #772]	; (2000036c <main+0x35c>)
20000066:	ca12      	ldmia	r2!, {r1, r4}
20000068:	c312      	stmia	r3!, {r1, r4}
2000006a:	8811      	ldrh	r1, [r2, #0]
2000006c:	8019      	strh	r1, [r3, #0]
2000006e:	7892      	ldrb	r2, [r2, #2]
20000070:	709a      	strb	r2, [r3, #2]
	s = string2;
20000072:	183b      	adds	r3, r7, r0
20000074:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (*s)
20000076:	e006      	b.n	20000086 <main+0x76>
	ascii_write_char(*s++);
20000078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
2000007a:	1c5a      	adds	r2, r3, #1
2000007c:	63fa      	str	r2, [r7, #60]	; 0x3c
2000007e:	781b      	ldrb	r3, [r3, #0]
20000080:	0018      	movs	r0, r3
20000082:	f000 ffea 	bl	2000105a <ascii_write_char>
	while (*s)
20000086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20000088:	781b      	ldrb	r3, [r3, #0]
2000008a:	2b00      	cmp	r3, #0
2000008c:	d1f4      	bne.n	20000078 <main+0x68>
	#endif
	
	#ifdef lcd
		init_lcd();
2000008e:	f000 fb70 	bl	20000772 <init_lcd>
		graphic_initialize();
20000092:	f000 fb7b 	bl	2000078c <graphic_initialize>
	#endif
	#ifdef keypad
		init_keypad();
20000096:	f001 f82f 	bl	200010f8 <init_keypad>
	#endif
	#ifndef SIMULATOR
		graphic_clean_screen();
	#endif
	
	unsigned char playerScore[2] = {0,0};
2000009a:	2110      	movs	r1, #16
2000009c:	187b      	adds	r3, r7, r1
2000009e:	2200      	movs	r2, #0
200000a0:	701a      	strb	r2, [r3, #0]
200000a2:	187b      	adds	r3, r7, r1
200000a4:	2200      	movs	r2, #0
200000a6:	705a      	strb	r2, [r3, #1]
	unsigned char *pScore;
	unsigned volatile short keys;
	pScore = playerScore;
200000a8:	187b      	adds	r3, r7, r1
200000aa:	63bb      	str	r3, [r7, #56]	; 0x38
	pong_inc_playerScore(pScore,1);
200000ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200000ae:	2101      	movs	r1, #1
200000b0:	0018      	movs	r0, r3
200000b2:	f000 fe99 	bl	20000de8 <pong_inc_playerScore>
	pong_inc_playerScore(pScore,2);
200000b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200000b8:	2102      	movs	r1, #2
200000ba:	0018      	movs	r0, r3
200000bc:	f000 fe94 	bl	20000de8 <pong_inc_playerScore>
	pobject p = &ball;
200000c0:	4bab      	ldr	r3, [pc, #684]	; (20000370 <main+0x360>)
200000c2:	637b      	str	r3, [r7, #52]	; 0x34
	pobject player1 = &p1paddle;
200000c4:	4bab      	ldr	r3, [pc, #684]	; (20000374 <main+0x364>)
200000c6:	633b      	str	r3, [r7, #48]	; 0x30
	pobject player2 = &p2paddle;
200000c8:	4bab      	ldr	r3, [pc, #684]	; (20000378 <main+0x368>)
200000ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	pong_set_position(player1,2,28);
200000cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200000ce:	221c      	movs	r2, #28
200000d0:	2102      	movs	r1, #2
200000d2:	0018      	movs	r0, r3
200000d4:	f000 fde3 	bl	20000c9e <pong_set_position>
	pong_set_position(player2,127,28);
200000d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200000da:	221c      	movs	r2, #28
200000dc:	217f      	movs	r1, #127	; 0x7f
200000de:	0018      	movs	r0, r3
200000e0:	f000 fddd 	bl	20000c9e <pong_set_position>
	pong_set_position(p,64-(p->geo->sizex)/2,32-(p->geo->sizey)/2);
200000e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200000e6:	681b      	ldr	r3, [r3, #0]
200000e8:	685b      	ldr	r3, [r3, #4]
200000ea:	2b00      	cmp	r3, #0
200000ec:	da00      	bge.n	200000f0 <main+0xe0>
200000ee:	3301      	adds	r3, #1
200000f0:	105b      	asrs	r3, r3, #1
200000f2:	425b      	negs	r3, r3
200000f4:	3340      	adds	r3, #64	; 0x40
200000f6:	0019      	movs	r1, r3
200000f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200000fa:	681b      	ldr	r3, [r3, #0]
200000fc:	689b      	ldr	r3, [r3, #8]
200000fe:	2b00      	cmp	r3, #0
20000100:	da00      	bge.n	20000104 <main+0xf4>
20000102:	3301      	adds	r3, #1
20000104:	105b      	asrs	r3, r3, #1
20000106:	425b      	negs	r3, r3
20000108:	3320      	adds	r3, #32
2000010a:	001a      	movs	r2, r3
2000010c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000010e:	0018      	movs	r0, r3
20000110:	f000 fdc5 	bl	20000c9e <pong_set_position>

	p->set_speed(p,4,1);
20000114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000116:	6a1b      	ldr	r3, [r3, #32]
20000118:	6b78      	ldr	r0, [r7, #52]	; 0x34
2000011a:	2201      	movs	r2, #1
2000011c:	2104      	movs	r1, #4
2000011e:	4798      	blx	r3
	while(1){
		keys = keyRead();
20000120:	f001 f87e 	bl	20001220 <keyRead>
20000124:	0003      	movs	r3, r0
20000126:	001a      	movs	r2, r3
20000128:	210e      	movs	r1, #14
2000012a:	187b      	adds	r3, r7, r1
2000012c:	801a      	strh	r2, [r3, #0]
		if(keys & (1<<4)){
2000012e:	187b      	adds	r3, r7, r1
20000130:	881b      	ldrh	r3, [r3, #0]
20000132:	b29b      	uxth	r3, r3
20000134:	001a      	movs	r2, r3
20000136:	2310      	movs	r3, #16
20000138:	4013      	ands	r3, r2
2000013a:	d00c      	beq.n	20000156 <main+0x146>
			clear_object(player1);
2000013c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000013e:	0018      	movs	r0, r3
20000140:	f000 fdef 	bl	20000d22 <clear_object>
			pong_set_position(player1,player1->posx,player1->posy-2);
20000144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20000146:	68d9      	ldr	r1, [r3, #12]
20000148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000014a:	691b      	ldr	r3, [r3, #16]
2000014c:	1e9a      	subs	r2, r3, #2
2000014e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20000150:	0018      	movs	r0, r3
20000152:	f000 fda4 	bl	20000c9e <pong_set_position>
		}
		if(keys & (1<<8)){
20000156:	230e      	movs	r3, #14
20000158:	18fb      	adds	r3, r7, r3
2000015a:	881b      	ldrh	r3, [r3, #0]
2000015c:	b29b      	uxth	r3, r3
2000015e:	001a      	movs	r2, r3
20000160:	2380      	movs	r3, #128	; 0x80
20000162:	005b      	lsls	r3, r3, #1
20000164:	4013      	ands	r3, r2
20000166:	d00c      	beq.n	20000182 <main+0x172>
			clear_object(player1);
20000168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000016a:	0018      	movs	r0, r3
2000016c:	f000 fdd9 	bl	20000d22 <clear_object>
			pong_set_position(player1,player1->posx,player1->posy+2);
20000170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20000172:	68d9      	ldr	r1, [r3, #12]
20000174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20000176:	691b      	ldr	r3, [r3, #16]
20000178:	1c9a      	adds	r2, r3, #2
2000017a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000017c:	0018      	movs	r0, r3
2000017e:	f000 fd8e 	bl	20000c9e <pong_set_position>
		}
		if(keys & (1<<7)){
20000182:	230e      	movs	r3, #14
20000184:	18fb      	adds	r3, r7, r3
20000186:	881b      	ldrh	r3, [r3, #0]
20000188:	b29b      	uxth	r3, r3
2000018a:	001a      	movs	r2, r3
2000018c:	2380      	movs	r3, #128	; 0x80
2000018e:	4013      	ands	r3, r2
20000190:	d00c      	beq.n	200001ac <main+0x19c>
			clear_object(player2);
20000192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000194:	0018      	movs	r0, r3
20000196:	f000 fdc4 	bl	20000d22 <clear_object>
			pong_set_position(player2,player2->posx,player2->posy-2);
2000019a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000019c:	68d9      	ldr	r1, [r3, #12]
2000019e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200001a0:	691b      	ldr	r3, [r3, #16]
200001a2:	1e9a      	subs	r2, r3, #2
200001a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200001a6:	0018      	movs	r0, r3
200001a8:	f000 fd79 	bl	20000c9e <pong_set_position>
		}
		if(keys & (1<<11)){
200001ac:	230e      	movs	r3, #14
200001ae:	18fb      	adds	r3, r7, r3
200001b0:	881b      	ldrh	r3, [r3, #0]
200001b2:	b29b      	uxth	r3, r3
200001b4:	001a      	movs	r2, r3
200001b6:	2380      	movs	r3, #128	; 0x80
200001b8:	011b      	lsls	r3, r3, #4
200001ba:	4013      	ands	r3, r2
200001bc:	d00c      	beq.n	200001d8 <main+0x1c8>
			clear_object(player2);
200001be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200001c0:	0018      	movs	r0, r3
200001c2:	f000 fdae 	bl	20000d22 <clear_object>
			pong_set_position(player2,player2->posx,player2->posy+2);
200001c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200001c8:	68d9      	ldr	r1, [r3, #12]
200001ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200001cc:	691b      	ldr	r3, [r3, #16]
200001ce:	1c9a      	adds	r2, r3, #2
200001d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200001d2:	0018      	movs	r0, r3
200001d4:	f000 fd63 	bl	20000c9e <pong_set_position>
		}
		
		move_object(player1);
200001d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200001da:	0018      	movs	r0, r3
200001dc:	f000 fdcf 	bl	20000d7e <move_object>
		move_object(player2);
200001e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200001e2:	0018      	movs	r0, r3
200001e4:	f000 fdcb 	bl	20000d7e <move_object>
		
		if((p->posx<=2) && (p->dirx<0)){
200001e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200001ea:	68db      	ldr	r3, [r3, #12]
200001ec:	2b02      	cmp	r3, #2
200001ee:	dc54      	bgt.n	2000029a <main+0x28a>
200001f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200001f2:	685b      	ldr	r3, [r3, #4]
200001f4:	2b00      	cmp	r3, #0
200001f6:	da50      	bge.n	2000029a <main+0x28a>
			if(((p->posy+(p->geo->sizey/2)) > player1->posy) && ((p->posy-(p->geo->sizey/2)) < (player1->posy + player1->geo->sizey))){
200001f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200001fa:	691a      	ldr	r2, [r3, #16]
200001fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200001fe:	681b      	ldr	r3, [r3, #0]
20000200:	689b      	ldr	r3, [r3, #8]
20000202:	2b00      	cmp	r3, #0
20000204:	da00      	bge.n	20000208 <main+0x1f8>
20000206:	3301      	adds	r3, #1
20000208:	105b      	asrs	r3, r3, #1
2000020a:	18d2      	adds	r2, r2, r3
2000020c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000020e:	691b      	ldr	r3, [r3, #16]
20000210:	429a      	cmp	r2, r3
20000212:	dd18      	ble.n	20000246 <main+0x236>
20000214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000216:	691a      	ldr	r2, [r3, #16]
20000218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000021a:	681b      	ldr	r3, [r3, #0]
2000021c:	689b      	ldr	r3, [r3, #8]
2000021e:	2b00      	cmp	r3, #0
20000220:	da00      	bge.n	20000224 <main+0x214>
20000222:	3301      	adds	r3, #1
20000224:	105b      	asrs	r3, r3, #1
20000226:	425b      	negs	r3, r3
20000228:	18d2      	adds	r2, r2, r3
2000022a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000022c:	6919      	ldr	r1, [r3, #16]
2000022e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20000230:	681b      	ldr	r3, [r3, #0]
20000232:	689b      	ldr	r3, [r3, #8]
20000234:	18cb      	adds	r3, r1, r3
20000236:	429a      	cmp	r2, r3
20000238:	da05      	bge.n	20000246 <main+0x236>
			p->dirx = -p->dirx;	
2000023a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000023c:	685b      	ldr	r3, [r3, #4]
2000023e:	425a      	negs	r2, r3
20000240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000242:	605a      	str	r2, [r3, #4]
20000244:	e029      	b.n	2000029a <main+0x28a>
			}
			else{
				pong_inc_playerScore(pScore, 2);
20000246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20000248:	2102      	movs	r1, #2
2000024a:	0018      	movs	r0, r3
2000024c:	f000 fdcc 	bl	20000de8 <pong_inc_playerScore>
				clear_object(p);
20000250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000252:	0018      	movs	r0, r3
20000254:	f000 fd65 	bl	20000d22 <clear_object>
				pong_set_position(p,64-(p->geo->sizex/2),32-(p->geo->sizey/2));
20000258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000025a:	681b      	ldr	r3, [r3, #0]
2000025c:	685b      	ldr	r3, [r3, #4]
2000025e:	2b00      	cmp	r3, #0
20000260:	da00      	bge.n	20000264 <main+0x254>
20000262:	3301      	adds	r3, #1
20000264:	105b      	asrs	r3, r3, #1
20000266:	425b      	negs	r3, r3
20000268:	3340      	adds	r3, #64	; 0x40
2000026a:	0019      	movs	r1, r3
2000026c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000026e:	681b      	ldr	r3, [r3, #0]
20000270:	689b      	ldr	r3, [r3, #8]
20000272:	2b00      	cmp	r3, #0
20000274:	da00      	bge.n	20000278 <main+0x268>
20000276:	3301      	adds	r3, #1
20000278:	105b      	asrs	r3, r3, #1
2000027a:	425b      	negs	r3, r3
2000027c:	3320      	adds	r3, #32
2000027e:	001a      	movs	r2, r3
20000280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000282:	0018      	movs	r0, r3
20000284:	f000 fd0b 	bl	20000c9e <pong_set_position>
				set_object_speed(p,-p->dirx,p->diry);
20000288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000028a:	685b      	ldr	r3, [r3, #4]
2000028c:	4259      	negs	r1, r3
2000028e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000290:	689a      	ldr	r2, [r3, #8]
20000292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000294:	0018      	movs	r0, r3
20000296:	f000 fcf2 	bl	20000c7e <set_object_speed>
			}
		}
		if((p->posx>=(127-p->geo->sizex)) && (p->dirx > 0)){
2000029a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000029c:	68da      	ldr	r2, [r3, #12]
2000029e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200002a0:	681b      	ldr	r3, [r3, #0]
200002a2:	685b      	ldr	r3, [r3, #4]
200002a4:	217f      	movs	r1, #127	; 0x7f
200002a6:	1acb      	subs	r3, r1, r3
200002a8:	429a      	cmp	r2, r3
200002aa:	db54      	blt.n	20000356 <main+0x346>
200002ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200002ae:	685b      	ldr	r3, [r3, #4]
200002b0:	2b00      	cmp	r3, #0
200002b2:	dd50      	ble.n	20000356 <main+0x346>
			if(((p->posy+(p->geo->sizey/2)) > player2->posy) && ((p->posy-(p->geo->sizey/2)) < (player2->posy + player2->geo->sizey))){
200002b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200002b6:	691a      	ldr	r2, [r3, #16]
200002b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200002ba:	681b      	ldr	r3, [r3, #0]
200002bc:	689b      	ldr	r3, [r3, #8]
200002be:	2b00      	cmp	r3, #0
200002c0:	da00      	bge.n	200002c4 <main+0x2b4>
200002c2:	3301      	adds	r3, #1
200002c4:	105b      	asrs	r3, r3, #1
200002c6:	18d2      	adds	r2, r2, r3
200002c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200002ca:	691b      	ldr	r3, [r3, #16]
200002cc:	429a      	cmp	r2, r3
200002ce:	dd18      	ble.n	20000302 <main+0x2f2>
200002d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200002d2:	691a      	ldr	r2, [r3, #16]
200002d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200002d6:	681b      	ldr	r3, [r3, #0]
200002d8:	689b      	ldr	r3, [r3, #8]
200002da:	2b00      	cmp	r3, #0
200002dc:	da00      	bge.n	200002e0 <main+0x2d0>
200002de:	3301      	adds	r3, #1
200002e0:	105b      	asrs	r3, r3, #1
200002e2:	425b      	negs	r3, r3
200002e4:	18d2      	adds	r2, r2, r3
200002e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200002e8:	6919      	ldr	r1, [r3, #16]
200002ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200002ec:	681b      	ldr	r3, [r3, #0]
200002ee:	689b      	ldr	r3, [r3, #8]
200002f0:	18cb      	adds	r3, r1, r3
200002f2:	429a      	cmp	r2, r3
200002f4:	da05      	bge.n	20000302 <main+0x2f2>
			p->dirx = -p->dirx;	
200002f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200002f8:	685b      	ldr	r3, [r3, #4]
200002fa:	425a      	negs	r2, r3
200002fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200002fe:	605a      	str	r2, [r3, #4]
20000300:	e029      	b.n	20000356 <main+0x346>
			}
			else{
				pong_inc_playerScore(pScore, 1);
20000302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20000304:	2101      	movs	r1, #1
20000306:	0018      	movs	r0, r3
20000308:	f000 fd6e 	bl	20000de8 <pong_inc_playerScore>
				clear_object(p);
2000030c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000030e:	0018      	movs	r0, r3
20000310:	f000 fd07 	bl	20000d22 <clear_object>
				pong_set_position(p,64-(p->geo->sizex/2),32-(p->geo->sizey/2));
20000314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000316:	681b      	ldr	r3, [r3, #0]
20000318:	685b      	ldr	r3, [r3, #4]
2000031a:	2b00      	cmp	r3, #0
2000031c:	da00      	bge.n	20000320 <main+0x310>
2000031e:	3301      	adds	r3, #1
20000320:	105b      	asrs	r3, r3, #1
20000322:	425b      	negs	r3, r3
20000324:	3340      	adds	r3, #64	; 0x40
20000326:	0019      	movs	r1, r3
20000328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000032a:	681b      	ldr	r3, [r3, #0]
2000032c:	689b      	ldr	r3, [r3, #8]
2000032e:	2b00      	cmp	r3, #0
20000330:	da00      	bge.n	20000334 <main+0x324>
20000332:	3301      	adds	r3, #1
20000334:	105b      	asrs	r3, r3, #1
20000336:	425b      	negs	r3, r3
20000338:	3320      	adds	r3, #32
2000033a:	001a      	movs	r2, r3
2000033c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000033e:	0018      	movs	r0, r3
20000340:	f000 fcad 	bl	20000c9e <pong_set_position>
				set_object_speed(p,-p->dirx,p->diry);
20000344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000346:	685b      	ldr	r3, [r3, #4]
20000348:	4259      	negs	r1, r3
2000034a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000034c:	689a      	ldr	r2, [r3, #8]
2000034e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000350:	0018      	movs	r0, r3
20000352:	f000 fc94 	bl	20000c7e <set_object_speed>
			}
		}
		move_object(p);
20000356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000358:	0018      	movs	r0, r3
2000035a:	f000 fd10 	bl	20000d7e <move_object>
		
		delay_milli(40);
2000035e:	2028      	movs	r0, #40	; 0x28
20000360:	f000 f83b 	bl	200003da <delay_milli>
		keys = keyRead();
20000364:	e6dc      	b.n	20000120 <main+0x110>
20000366:	46c0      	nop			; (mov r8, r8)
20000368:	20002120 	andcs	r2, r0, r0, lsr #2
2000036c:	2000212c 	andcs	r2, r0, ip, lsr #2
20000370:	20002074 	andcs	r2, r0, r4, ror r0
20000374:	200020d0 	ldrdcs	r2, [r0], -r0
20000378:	200020f8 	strdcs	r2, [r0], -r8

2000037c <delay_40ns>:

#include "delay.h"
#include "portDeclare.h"

void delay_40ns(void){
2000037c:	b580      	push	{r7, lr}
2000037e:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000380:	4b0c      	ldr	r3, [pc, #48]	; (200003b4 <delay_40ns+0x38>)
20000382:	2200      	movs	r2, #0
20000384:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 6;
20000386:	4b0c      	ldr	r3, [pc, #48]	; (200003b8 <delay_40ns+0x3c>)
20000388:	2206      	movs	r2, #6
2000038a:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
2000038c:	4b0b      	ldr	r3, [pc, #44]	; (200003bc <delay_40ns+0x40>)
2000038e:	2200      	movs	r2, #0
20000390:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000392:	4b08      	ldr	r3, [pc, #32]	; (200003b4 <delay_40ns+0x38>)
20000394:	2205      	movs	r2, #5
20000396:	601a      	str	r2, [r3, #0]
	while ((*STK_CTRL & 0x10000) == 0){
20000398:	46c0      	nop			; (mov r8, r8)
2000039a:	4b06      	ldr	r3, [pc, #24]	; (200003b4 <delay_40ns+0x38>)
2000039c:	681a      	ldr	r2, [r3, #0]
2000039e:	2380      	movs	r3, #128	; 0x80
200003a0:	025b      	lsls	r3, r3, #9
200003a2:	4013      	ands	r3, r2
200003a4:	d0f9      	beq.n	2000039a <delay_40ns+0x1e>
	}
	*STK_CTRL = 0;
200003a6:	4b03      	ldr	r3, [pc, #12]	; (200003b4 <delay_40ns+0x38>)
200003a8:	2200      	movs	r2, #0
200003aa:	601a      	str	r2, [r3, #0]
}
200003ac:	46c0      	nop			; (mov r8, r8)
200003ae:	46bd      	mov	sp, r7
200003b0:	bd80      	pop	{r7, pc}
200003b2:	46c0      	nop			; (mov r8, r8)
200003b4:	e000e010 	and	lr, r0, r0, lsl r0
200003b8:	e000e014 	and	lr, r0, r4, lsl r0
200003bc:	e000e018 	and	lr, r0, r8, lsl r0

200003c0 <delay_250ns>:

void delay_250ns(void){
200003c0:	b580      	push	{r7, lr}
200003c2:	af00      	add	r7, sp, #0
	*STK_CTRL = 5;
	while (!(*STK_CTRL & 0x10000) == 0){
	}
	*STK_CTRL = 0;
	#endif
}
200003c4:	46c0      	nop			; (mov r8, r8)
200003c6:	46bd      	mov	sp, r7
200003c8:	bd80      	pop	{r7, pc}

200003ca <delay_mikro>:

void delay_mikro(unsigned int us){
200003ca:	b580      	push	{r7, lr}
200003cc:	b082      	sub	sp, #8
200003ce:	af00      	add	r7, sp, #0
200003d0:	6078      	str	r0, [r7, #4]
		us = us*4;
	for(int i = 0; i < us; i++){
		delay_250ns();
	}
	#endif
}
200003d2:	46c0      	nop			; (mov r8, r8)
200003d4:	46bd      	mov	sp, r7
200003d6:	b002      	add	sp, #8
200003d8:	bd80      	pop	{r7, pc}

200003da <delay_milli>:

void delay_milli(unsigned int ms){
200003da:	b580      	push	{r7, lr}
200003dc:	b082      	sub	sp, #8
200003de:	af00      	add	r7, sp, #0
200003e0:	6078      	str	r0, [r7, #4]
	#ifndef SIMULATOR
	ms = ms*1000;
	delay_mikro(ms);
	#endif
200003e2:	46c0      	nop			; (mov r8, r8)
200003e4:	46bd      	mov	sp, r7
200003e6:	b002      	add	sp, #8
200003e8:	bd80      	pop	{r7, pc}
200003ea:	46c0      	nop			; (mov r8, r8)

200003ec <select_controller>:
#include "portDeclare.h"

#define adress 0x40
#define page 0xB8

void select_controller(char c){
200003ec:	b580      	push	{r7, lr}
200003ee:	b082      	sub	sp, #8
200003f0:	af00      	add	r7, sp, #0
200003f2:	0002      	movs	r2, r0
200003f4:	1dfb      	adds	r3, r7, #7
200003f6:	701a      	strb	r2, [r3, #0]
	switch(c){
200003f8:	1dfb      	adds	r3, r7, #7
200003fa:	781b      	ldrb	r3, [r3, #0]
200003fc:	2b08      	cmp	r3, #8
200003fe:	d011      	beq.n	20000424 <select_controller+0x38>
20000400:	dc02      	bgt.n	20000408 <select_controller+0x1c>
20000402:	2b00      	cmp	r3, #0
20000404:	d005      	beq.n	20000412 <select_controller+0x26>
		case 0: *portOdrLowE = *portOdrLowE &~ 0x18; break;
		case 0x8: *portOdrLowE = (*portOdrLowE &~ 0x10)|0x8; break;
		case 0x10: *portOdrLowE = (*portOdrLowE &~ 0x8)|0x10; break;
		case 0x18: *portOdrLowE = *portOdrLowE | 0x18; break;
	}
}
20000406:	e032      	b.n	2000046e <select_controller+0x82>
	switch(c){
20000408:	2b10      	cmp	r3, #16
2000040a:	d019      	beq.n	20000440 <select_controller+0x54>
2000040c:	2b18      	cmp	r3, #24
2000040e:	d025      	beq.n	2000045c <select_controller+0x70>
}
20000410:	e02d      	b.n	2000046e <select_controller+0x82>
		case 0: *portOdrLowE = *portOdrLowE &~ 0x18; break;
20000412:	4b19      	ldr	r3, [pc, #100]	; (20000478 <select_controller+0x8c>)
20000414:	781b      	ldrb	r3, [r3, #0]
20000416:	b2db      	uxtb	r3, r3
20000418:	4a17      	ldr	r2, [pc, #92]	; (20000478 <select_controller+0x8c>)
2000041a:	2118      	movs	r1, #24
2000041c:	438b      	bics	r3, r1
2000041e:	b2db      	uxtb	r3, r3
20000420:	7013      	strb	r3, [r2, #0]
20000422:	e024      	b.n	2000046e <select_controller+0x82>
		case 0x8: *portOdrLowE = (*portOdrLowE &~ 0x10)|0x8; break;
20000424:	4b14      	ldr	r3, [pc, #80]	; (20000478 <select_controller+0x8c>)
20000426:	781b      	ldrb	r3, [r3, #0]
20000428:	b2db      	uxtb	r3, r3
2000042a:	b25b      	sxtb	r3, r3
2000042c:	2218      	movs	r2, #24
2000042e:	4393      	bics	r3, r2
20000430:	b25b      	sxtb	r3, r3
20000432:	2208      	movs	r2, #8
20000434:	4313      	orrs	r3, r2
20000436:	b25a      	sxtb	r2, r3
20000438:	4b0f      	ldr	r3, [pc, #60]	; (20000478 <select_controller+0x8c>)
2000043a:	b2d2      	uxtb	r2, r2
2000043c:	701a      	strb	r2, [r3, #0]
2000043e:	e016      	b.n	2000046e <select_controller+0x82>
		case 0x10: *portOdrLowE = (*portOdrLowE &~ 0x8)|0x10; break;
20000440:	4b0d      	ldr	r3, [pc, #52]	; (20000478 <select_controller+0x8c>)
20000442:	781b      	ldrb	r3, [r3, #0]
20000444:	b2db      	uxtb	r3, r3
20000446:	b25b      	sxtb	r3, r3
20000448:	2218      	movs	r2, #24
2000044a:	4393      	bics	r3, r2
2000044c:	b25b      	sxtb	r3, r3
2000044e:	2210      	movs	r2, #16
20000450:	4313      	orrs	r3, r2
20000452:	b25a      	sxtb	r2, r3
20000454:	4b08      	ldr	r3, [pc, #32]	; (20000478 <select_controller+0x8c>)
20000456:	b2d2      	uxtb	r2, r2
20000458:	701a      	strb	r2, [r3, #0]
2000045a:	e008      	b.n	2000046e <select_controller+0x82>
		case 0x18: *portOdrLowE = *portOdrLowE | 0x18; break;
2000045c:	4b06      	ldr	r3, [pc, #24]	; (20000478 <select_controller+0x8c>)
2000045e:	781b      	ldrb	r3, [r3, #0]
20000460:	b2db      	uxtb	r3, r3
20000462:	4a05      	ldr	r2, [pc, #20]	; (20000478 <select_controller+0x8c>)
20000464:	2118      	movs	r1, #24
20000466:	430b      	orrs	r3, r1
20000468:	b2db      	uxtb	r3, r3
2000046a:	7013      	strb	r3, [r2, #0]
2000046c:	46c0      	nop			; (mov r8, r8)
}
2000046e:	46c0      	nop			; (mov r8, r8)
20000470:	46bd      	mov	sp, r7
20000472:	b002      	add	sp, #8
20000474:	bd80      	pop	{r7, pc}
20000476:	46c0      	nop			; (mov r8, r8)
20000478:	40021014 	andmi	r1, r2, r4, lsl r0

2000047c <graphic_wait_ready>:

void graphic_wait_ready(){
2000047c:	b580      	push	{r7, lr}
2000047e:	af00      	add	r7, sp, #0
	*portOdrLowE = (*portOdrLowE &~ B_E);
20000480:	4b23      	ldr	r3, [pc, #140]	; (20000510 <graphic_wait_ready+0x94>)
20000482:	781b      	ldrb	r3, [r3, #0]
20000484:	b2db      	uxtb	r3, r3
20000486:	4a22      	ldr	r2, [pc, #136]	; (20000510 <graphic_wait_ready+0x94>)
20000488:	2140      	movs	r1, #64	; 0x40
2000048a:	438b      	bics	r3, r1
2000048c:	b2db      	uxtb	r3, r3
2000048e:	7013      	strb	r3, [r2, #0]
	*portModerE = 0x5555;
20000490:	4b20      	ldr	r3, [pc, #128]	; (20000514 <graphic_wait_ready+0x98>)
20000492:	4a21      	ldr	r2, [pc, #132]	; (20000518 <graphic_wait_ready+0x9c>)
20000494:	601a      	str	r2, [r3, #0]
	*portOdrLowE = ((*portOdrLowE | B_RW) &~B_RS);
20000496:	4b1e      	ldr	r3, [pc, #120]	; (20000510 <graphic_wait_ready+0x94>)
20000498:	781b      	ldrb	r3, [r3, #0]
2000049a:	b2db      	uxtb	r3, r3
2000049c:	2202      	movs	r2, #2
2000049e:	4313      	orrs	r3, r2
200004a0:	b2db      	uxtb	r3, r3
200004a2:	4a1b      	ldr	r2, [pc, #108]	; (20000510 <graphic_wait_ready+0x94>)
200004a4:	2101      	movs	r1, #1
200004a6:	438b      	bics	r3, r1
200004a8:	b2db      	uxtb	r3, r3
200004aa:	7013      	strb	r3, [r2, #0]
	delay_250ns();
200004ac:	f7ff ff88 	bl	200003c0 <delay_250ns>
	delay_250ns();
200004b0:	f7ff ff86 	bl	200003c0 <delay_250ns>
	while(*portOdrLowE & 0x80){
200004b4:	e017      	b.n	200004e6 <graphic_wait_ready+0x6a>
		*portOdrLowE = (*portOdrLowE | B_E);
200004b6:	4b16      	ldr	r3, [pc, #88]	; (20000510 <graphic_wait_ready+0x94>)
200004b8:	781b      	ldrb	r3, [r3, #0]
200004ba:	b2db      	uxtb	r3, r3
200004bc:	4a14      	ldr	r2, [pc, #80]	; (20000510 <graphic_wait_ready+0x94>)
200004be:	2140      	movs	r1, #64	; 0x40
200004c0:	430b      	orrs	r3, r1
200004c2:	b2db      	uxtb	r3, r3
200004c4:	7013      	strb	r3, [r2, #0]
		delay_250ns();
200004c6:	f7ff ff7b 	bl	200003c0 <delay_250ns>
		delay_250ns();
200004ca:	f7ff ff79 	bl	200003c0 <delay_250ns>
		*portOdrLowE = (*portOdrLowE &~ B_E);
200004ce:	4b10      	ldr	r3, [pc, #64]	; (20000510 <graphic_wait_ready+0x94>)
200004d0:	781b      	ldrb	r3, [r3, #0]
200004d2:	b2db      	uxtb	r3, r3
200004d4:	4a0e      	ldr	r2, [pc, #56]	; (20000510 <graphic_wait_ready+0x94>)
200004d6:	2140      	movs	r1, #64	; 0x40
200004d8:	438b      	bics	r3, r1
200004da:	b2db      	uxtb	r3, r3
200004dc:	7013      	strb	r3, [r2, #0]
		delay_250ns();
200004de:	f7ff ff6f 	bl	200003c0 <delay_250ns>
		delay_250ns();
200004e2:	f7ff ff6d 	bl	200003c0 <delay_250ns>
	while(*portOdrLowE & 0x80){
200004e6:	4b0a      	ldr	r3, [pc, #40]	; (20000510 <graphic_wait_ready+0x94>)
200004e8:	781b      	ldrb	r3, [r3, #0]
200004ea:	b2db      	uxtb	r3, r3
200004ec:	b25b      	sxtb	r3, r3
200004ee:	2b00      	cmp	r3, #0
200004f0:	dbe1      	blt.n	200004b6 <graphic_wait_ready+0x3a>
	}
	*portOdrLowE = (*portOdrLowE | B_E);
200004f2:	4b07      	ldr	r3, [pc, #28]	; (20000510 <graphic_wait_ready+0x94>)
200004f4:	781b      	ldrb	r3, [r3, #0]
200004f6:	b2db      	uxtb	r3, r3
200004f8:	4a05      	ldr	r2, [pc, #20]	; (20000510 <graphic_wait_ready+0x94>)
200004fa:	2140      	movs	r1, #64	; 0x40
200004fc:	430b      	orrs	r3, r1
200004fe:	b2db      	uxtb	r3, r3
20000500:	7013      	strb	r3, [r2, #0]
	*portModerE = 0x55555555;
20000502:	4b04      	ldr	r3, [pc, #16]	; (20000514 <graphic_wait_ready+0x98>)
20000504:	4a05      	ldr	r2, [pc, #20]	; (2000051c <graphic_wait_ready+0xa0>)
20000506:	601a      	str	r2, [r3, #0]
}
20000508:	46c0      	nop			; (mov r8, r8)
2000050a:	46bd      	mov	sp, r7
2000050c:	bd80      	pop	{r7, pc}
2000050e:	46c0      	nop			; (mov r8, r8)
20000510:	40021014 	andmi	r1, r2, r4, lsl r0
20000514:	40021000 	andmi	r1, r2, r0
20000518:	00005555 	andeq	r5, r0, r5, asr r5
2000051c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000520 <graphic_read>:

char graphic_read(unsigned char c){
20000520:	b580      	push	{r7, lr}
20000522:	b084      	sub	sp, #16
20000524:	af00      	add	r7, sp, #0
20000526:	0002      	movs	r2, r0
20000528:	1dfb      	adds	r3, r7, #7
2000052a:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE &~B_E);
2000052c:	4b29      	ldr	r3, [pc, #164]	; (200005d4 <graphic_read+0xb4>)
2000052e:	781b      	ldrb	r3, [r3, #0]
20000530:	b2db      	uxtb	r3, r3
20000532:	4a28      	ldr	r2, [pc, #160]	; (200005d4 <graphic_read+0xb4>)
20000534:	2140      	movs	r1, #64	; 0x40
20000536:	438b      	bics	r3, r1
20000538:	b2db      	uxtb	r3, r3
2000053a:	7013      	strb	r3, [r2, #0]
	*portModerE = 0x00005555;
2000053c:	4b26      	ldr	r3, [pc, #152]	; (200005d8 <graphic_read+0xb8>)
2000053e:	4a27      	ldr	r2, [pc, #156]	; (200005dc <graphic_read+0xbc>)
20000540:	601a      	str	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE | B_RW | B_RS);
20000542:	4b24      	ldr	r3, [pc, #144]	; (200005d4 <graphic_read+0xb4>)
20000544:	781b      	ldrb	r3, [r3, #0]
20000546:	b2db      	uxtb	r3, r3
20000548:	4a22      	ldr	r2, [pc, #136]	; (200005d4 <graphic_read+0xb4>)
2000054a:	2103      	movs	r1, #3
2000054c:	430b      	orrs	r3, r1
2000054e:	b2db      	uxtb	r3, r3
20000550:	7013      	strb	r3, [r2, #0]
	select_controller(c);
20000552:	1dfb      	adds	r3, r7, #7
20000554:	781b      	ldrb	r3, [r3, #0]
20000556:	0018      	movs	r0, r3
20000558:	f7ff ff48 	bl	200003ec <select_controller>
	delay_250ns();
2000055c:	f7ff ff30 	bl	200003c0 <delay_250ns>
	delay_250ns();
20000560:	f7ff ff2e 	bl	200003c0 <delay_250ns>
	*portOdrLowE = (*portOdrLowE | B_E);
20000564:	4b1b      	ldr	r3, [pc, #108]	; (200005d4 <graphic_read+0xb4>)
20000566:	781b      	ldrb	r3, [r3, #0]
20000568:	b2db      	uxtb	r3, r3
2000056a:	4a1a      	ldr	r2, [pc, #104]	; (200005d4 <graphic_read+0xb4>)
2000056c:	2140      	movs	r1, #64	; 0x40
2000056e:	430b      	orrs	r3, r1
20000570:	b2db      	uxtb	r3, r3
20000572:	7013      	strb	r3, [r2, #0]
	delay_250ns();
20000574:	f7ff ff24 	bl	200003c0 <delay_250ns>
	delay_250ns();
20000578:	f7ff ff22 	bl	200003c0 <delay_250ns>
	unsigned char RV = *portIdrHighE;
2000057c:	4a18      	ldr	r2, [pc, #96]	; (200005e0 <graphic_read+0xc0>)
2000057e:	230f      	movs	r3, #15
20000580:	18fb      	adds	r3, r7, r3
20000582:	7812      	ldrb	r2, [r2, #0]
20000584:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE &~ B_E);
20000586:	4b13      	ldr	r3, [pc, #76]	; (200005d4 <graphic_read+0xb4>)
20000588:	781b      	ldrb	r3, [r3, #0]
2000058a:	b2db      	uxtb	r3, r3
2000058c:	4a11      	ldr	r2, [pc, #68]	; (200005d4 <graphic_read+0xb4>)
2000058e:	2140      	movs	r1, #64	; 0x40
20000590:	438b      	bics	r3, r1
20000592:	b2db      	uxtb	r3, r3
20000594:	7013      	strb	r3, [r2, #0]
	*portModerE = 0x55555555;
20000596:	4b10      	ldr	r3, [pc, #64]	; (200005d8 <graphic_read+0xb8>)
20000598:	4a12      	ldr	r2, [pc, #72]	; (200005e4 <graphic_read+0xc4>)
2000059a:	601a      	str	r2, [r3, #0]
	if(c & B_CS1){
2000059c:	1dfb      	adds	r3, r7, #7
2000059e:	781b      	ldrb	r3, [r3, #0]
200005a0:	2208      	movs	r2, #8
200005a2:	4013      	ands	r3, r2
200005a4:	d004      	beq.n	200005b0 <graphic_read+0x90>
	select_controller(B_CS1);
200005a6:	2008      	movs	r0, #8
200005a8:	f7ff ff20 	bl	200003ec <select_controller>
	graphic_wait_ready();
200005ac:	f7ff ff66 	bl	2000047c <graphic_wait_ready>
	}
	if(c & B_CS2){
200005b0:	1dfb      	adds	r3, r7, #7
200005b2:	781b      	ldrb	r3, [r3, #0]
200005b4:	2210      	movs	r2, #16
200005b6:	4013      	ands	r3, r2
200005b8:	d004      	beq.n	200005c4 <graphic_read+0xa4>
	select_controller(B_CS2);
200005ba:	2010      	movs	r0, #16
200005bc:	f7ff ff16 	bl	200003ec <select_controller>
	graphic_wait_ready();
200005c0:	f7ff ff5c 	bl	2000047c <graphic_wait_ready>
	}

	return RV;
200005c4:	230f      	movs	r3, #15
200005c6:	18fb      	adds	r3, r7, r3
200005c8:	781b      	ldrb	r3, [r3, #0]
}
200005ca:	0018      	movs	r0, r3
200005cc:	46bd      	mov	sp, r7
200005ce:	b004      	add	sp, #16
200005d0:	bd80      	pop	{r7, pc}
200005d2:	46c0      	nop			; (mov r8, r8)
200005d4:	40021014 	andmi	r1, r2, r4, lsl r0
200005d8:	40021000 	andmi	r1, r2, r0
200005dc:	00005555 	andeq	r5, r0, r5, asr r5
200005e0:	40021011 	andmi	r1, r2, r1, lsl r0
200005e4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200005e8 <graphic_write>:

void graphic_write(unsigned char val, unsigned char c){
200005e8:	b580      	push	{r7, lr}
200005ea:	b082      	sub	sp, #8
200005ec:	af00      	add	r7, sp, #0
200005ee:	0002      	movs	r2, r0
200005f0:	1dfb      	adds	r3, r7, #7
200005f2:	701a      	strb	r2, [r3, #0]
200005f4:	1dbb      	adds	r3, r7, #6
200005f6:	1c0a      	adds	r2, r1, #0
200005f8:	701a      	strb	r2, [r3, #0]
	*portOdrHighE = val;
200005fa:	4a23      	ldr	r2, [pc, #140]	; (20000688 <graphic_write+0xa0>)
200005fc:	1dfb      	adds	r3, r7, #7
200005fe:	781b      	ldrb	r3, [r3, #0]
20000600:	7013      	strb	r3, [r2, #0]
	select_controller(c);
20000602:	1dbb      	adds	r3, r7, #6
20000604:	781b      	ldrb	r3, [r3, #0]
20000606:	0018      	movs	r0, r3
20000608:	f7ff fef0 	bl	200003ec <select_controller>
	delay_250ns();
2000060c:	f7ff fed8 	bl	200003c0 <delay_250ns>
	delay_250ns();
20000610:	f7ff fed6 	bl	200003c0 <delay_250ns>
	*portOdrLowE = (*portOdrLowE | B_E);
20000614:	4b1d      	ldr	r3, [pc, #116]	; (2000068c <graphic_write+0xa4>)
20000616:	781b      	ldrb	r3, [r3, #0]
20000618:	b2db      	uxtb	r3, r3
2000061a:	4a1c      	ldr	r2, [pc, #112]	; (2000068c <graphic_write+0xa4>)
2000061c:	2140      	movs	r1, #64	; 0x40
2000061e:	430b      	orrs	r3, r1
20000620:	b2db      	uxtb	r3, r3
20000622:	7013      	strb	r3, [r2, #0]
	delay_250ns();
20000624:	f7ff fecc 	bl	200003c0 <delay_250ns>
	delay_250ns();
20000628:	f7ff feca 	bl	200003c0 <delay_250ns>
	*portOdrLowE = (*portOdrLowE &~ B_E);
2000062c:	4b17      	ldr	r3, [pc, #92]	; (2000068c <graphic_write+0xa4>)
2000062e:	781b      	ldrb	r3, [r3, #0]
20000630:	b2db      	uxtb	r3, r3
20000632:	4a16      	ldr	r2, [pc, #88]	; (2000068c <graphic_write+0xa4>)
20000634:	2140      	movs	r1, #64	; 0x40
20000636:	438b      	bics	r3, r1
20000638:	b2db      	uxtb	r3, r3
2000063a:	7013      	strb	r3, [r2, #0]
	if(c & B_CS1){
2000063c:	1dbb      	adds	r3, r7, #6
2000063e:	781b      	ldrb	r3, [r3, #0]
20000640:	2208      	movs	r2, #8
20000642:	4013      	ands	r3, r2
20000644:	d004      	beq.n	20000650 <graphic_write+0x68>
		select_controller(B_CS1);
20000646:	2008      	movs	r0, #8
20000648:	f7ff fed0 	bl	200003ec <select_controller>
		graphic_wait_ready();
2000064c:	f7ff ff16 	bl	2000047c <graphic_wait_ready>
	}
	if(c & B_CS2){
20000650:	1dbb      	adds	r3, r7, #6
20000652:	781b      	ldrb	r3, [r3, #0]
20000654:	2210      	movs	r2, #16
20000656:	4013      	ands	r3, r2
20000658:	d004      	beq.n	20000664 <graphic_write+0x7c>
		select_controller(B_CS2);
2000065a:	2010      	movs	r0, #16
2000065c:	f7ff fec6 	bl	200003ec <select_controller>
		graphic_wait_ready();
20000660:	f7ff ff0c 	bl	2000047c <graphic_wait_ready>
	}
	*portOdrHighE = 0;
20000664:	4b08      	ldr	r3, [pc, #32]	; (20000688 <graphic_write+0xa0>)
20000666:	2200      	movs	r2, #0
20000668:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE | B_E);
2000066a:	4b08      	ldr	r3, [pc, #32]	; (2000068c <graphic_write+0xa4>)
2000066c:	781b      	ldrb	r3, [r3, #0]
2000066e:	b2db      	uxtb	r3, r3
20000670:	4a06      	ldr	r2, [pc, #24]	; (2000068c <graphic_write+0xa4>)
20000672:	2140      	movs	r1, #64	; 0x40
20000674:	430b      	orrs	r3, r1
20000676:	b2db      	uxtb	r3, r3
20000678:	7013      	strb	r3, [r2, #0]
	select_controller(0);
2000067a:	2000      	movs	r0, #0
2000067c:	f7ff feb6 	bl	200003ec <select_controller>
}
20000680:	46c0      	nop			; (mov r8, r8)
20000682:	46bd      	mov	sp, r7
20000684:	b002      	add	sp, #8
20000686:	bd80      	pop	{r7, pc}
20000688:	40021015 	andmi	r1, r2, r5, lsl r0
2000068c:	40021014 	andmi	r1, r2, r4, lsl r0

20000690 <graphic_write_command>:

void graphic_write_command(unsigned char cmd, unsigned char c){
20000690:	b580      	push	{r7, lr}
20000692:	b082      	sub	sp, #8
20000694:	af00      	add	r7, sp, #0
20000696:	0002      	movs	r2, r0
20000698:	1dfb      	adds	r3, r7, #7
2000069a:	701a      	strb	r2, [r3, #0]
2000069c:	1dbb      	adds	r3, r7, #6
2000069e:	1c0a      	adds	r2, r1, #0
200006a0:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE &~ B_E);
200006a2:	4b10      	ldr	r3, [pc, #64]	; (200006e4 <graphic_write_command+0x54>)
200006a4:	781b      	ldrb	r3, [r3, #0]
200006a6:	b2db      	uxtb	r3, r3
200006a8:	4a0e      	ldr	r2, [pc, #56]	; (200006e4 <graphic_write_command+0x54>)
200006aa:	2140      	movs	r1, #64	; 0x40
200006ac:	438b      	bics	r3, r1
200006ae:	b2db      	uxtb	r3, r3
200006b0:	7013      	strb	r3, [r2, #0]
	select_controller(c);
200006b2:	1dbb      	adds	r3, r7, #6
200006b4:	781b      	ldrb	r3, [r3, #0]
200006b6:	0018      	movs	r0, r3
200006b8:	f7ff fe98 	bl	200003ec <select_controller>
	*portOdrLowE = (*portOdrLowE &~B_RS &~B_RW);
200006bc:	4b09      	ldr	r3, [pc, #36]	; (200006e4 <graphic_write_command+0x54>)
200006be:	781b      	ldrb	r3, [r3, #0]
200006c0:	b2db      	uxtb	r3, r3
200006c2:	4a08      	ldr	r2, [pc, #32]	; (200006e4 <graphic_write_command+0x54>)
200006c4:	2103      	movs	r1, #3
200006c6:	438b      	bics	r3, r1
200006c8:	b2db      	uxtb	r3, r3
200006ca:	7013      	strb	r3, [r2, #0]
	graphic_write(cmd, c);
200006cc:	1dbb      	adds	r3, r7, #6
200006ce:	781a      	ldrb	r2, [r3, #0]
200006d0:	1dfb      	adds	r3, r7, #7
200006d2:	781b      	ldrb	r3, [r3, #0]
200006d4:	0011      	movs	r1, r2
200006d6:	0018      	movs	r0, r3
200006d8:	f7ff ff86 	bl	200005e8 <graphic_write>
}
200006dc:	46c0      	nop			; (mov r8, r8)
200006de:	46bd      	mov	sp, r7
200006e0:	b002      	add	sp, #8
200006e2:	bd80      	pop	{r7, pc}
200006e4:	40021014 	andmi	r1, r2, r4, lsl r0

200006e8 <graphic_write_data>:

void graphic_write_data(unsigned char data, unsigned char c){
200006e8:	b580      	push	{r7, lr}
200006ea:	b082      	sub	sp, #8
200006ec:	af00      	add	r7, sp, #0
200006ee:	0002      	movs	r2, r0
200006f0:	1dfb      	adds	r3, r7, #7
200006f2:	701a      	strb	r2, [r3, #0]
200006f4:	1dbb      	adds	r3, r7, #6
200006f6:	1c0a      	adds	r2, r1, #0
200006f8:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE &~ B_E);
200006fa:	4b12      	ldr	r3, [pc, #72]	; (20000744 <graphic_write_data+0x5c>)
200006fc:	781b      	ldrb	r3, [r3, #0]
200006fe:	b2db      	uxtb	r3, r3
20000700:	4a10      	ldr	r2, [pc, #64]	; (20000744 <graphic_write_data+0x5c>)
20000702:	2140      	movs	r1, #64	; 0x40
20000704:	438b      	bics	r3, r1
20000706:	b2db      	uxtb	r3, r3
20000708:	7013      	strb	r3, [r2, #0]
	select_controller(c);
2000070a:	1dbb      	adds	r3, r7, #6
2000070c:	781b      	ldrb	r3, [r3, #0]
2000070e:	0018      	movs	r0, r3
20000710:	f7ff fe6c 	bl	200003ec <select_controller>
	*portOdrLowE = ((*portOdrLowE | B_RS) &~B_RW);
20000714:	4b0b      	ldr	r3, [pc, #44]	; (20000744 <graphic_write_data+0x5c>)
20000716:	781b      	ldrb	r3, [r3, #0]
20000718:	b2db      	uxtb	r3, r3
2000071a:	2201      	movs	r2, #1
2000071c:	4313      	orrs	r3, r2
2000071e:	b2db      	uxtb	r3, r3
20000720:	4a08      	ldr	r2, [pc, #32]	; (20000744 <graphic_write_data+0x5c>)
20000722:	2102      	movs	r1, #2
20000724:	438b      	bics	r3, r1
20000726:	b2db      	uxtb	r3, r3
20000728:	7013      	strb	r3, [r2, #0]
	graphic_write(data, c);
2000072a:	1dbb      	adds	r3, r7, #6
2000072c:	781a      	ldrb	r2, [r3, #0]
2000072e:	1dfb      	adds	r3, r7, #7
20000730:	781b      	ldrb	r3, [r3, #0]
20000732:	0011      	movs	r1, r2
20000734:	0018      	movs	r0, r3
20000736:	f7ff ff57 	bl	200005e8 <graphic_write>
}
2000073a:	46c0      	nop			; (mov r8, r8)
2000073c:	46bd      	mov	sp, r7
2000073e:	b002      	add	sp, #8
20000740:	bd80      	pop	{r7, pc}
20000742:	46c0      	nop			; (mov r8, r8)
20000744:	40021014 	andmi	r1, r2, r4, lsl r0

20000748 <graphic_read_data>:

unsigned char graphic_read_data(unsigned char c){
20000748:	b580      	push	{r7, lr}
2000074a:	b082      	sub	sp, #8
2000074c:	af00      	add	r7, sp, #0
2000074e:	0002      	movs	r2, r0
20000750:	1dfb      	adds	r3, r7, #7
20000752:	701a      	strb	r2, [r3, #0]
	graphic_read(c);
20000754:	1dfb      	adds	r3, r7, #7
20000756:	781b      	ldrb	r3, [r3, #0]
20000758:	0018      	movs	r0, r3
2000075a:	f7ff fee1 	bl	20000520 <graphic_read>
	return graphic_read(c);
2000075e:	1dfb      	adds	r3, r7, #7
20000760:	781b      	ldrb	r3, [r3, #0]
20000762:	0018      	movs	r0, r3
20000764:	f7ff fedc 	bl	20000520 <graphic_read>
20000768:	0003      	movs	r3, r0
}
2000076a:	0018      	movs	r0, r3
2000076c:	46bd      	mov	sp, r7
2000076e:	b002      	add	sp, #8
20000770:	bd80      	pop	{r7, pc}

20000772 <init_lcd>:

void init_lcd(void){
20000772:	b580      	push	{r7, lr}
20000774:	af00      	add	r7, sp, #0
	*portModerE = 0x55555555;
20000776:	4b03      	ldr	r3, [pc, #12]	; (20000784 <init_lcd+0x12>)
20000778:	4a03      	ldr	r2, [pc, #12]	; (20000788 <init_lcd+0x16>)
2000077a:	601a      	str	r2, [r3, #0]
}
2000077c:	46c0      	nop			; (mov r8, r8)
2000077e:	46bd      	mov	sp, r7
20000780:	bd80      	pop	{r7, pc}
20000782:	46c0      	nop			; (mov r8, r8)
20000784:	40021000 	andmi	r1, r2, r0
20000788:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000078c <graphic_initialize>:

void graphic_initialize(void){
2000078c:	b580      	push	{r7, lr}
2000078e:	af00      	add	r7, sp, #0
	*portOdrLowE = (*portOdrLowE | B_E);
20000790:	4b1e      	ldr	r3, [pc, #120]	; (2000080c <graphic_initialize+0x80>)
20000792:	781b      	ldrb	r3, [r3, #0]
20000794:	b2db      	uxtb	r3, r3
20000796:	4a1d      	ldr	r2, [pc, #116]	; (2000080c <graphic_initialize+0x80>)
20000798:	2140      	movs	r1, #64	; 0x40
2000079a:	430b      	orrs	r3, r1
2000079c:	b2db      	uxtb	r3, r3
2000079e:	7013      	strb	r3, [r2, #0]
	*portOdrLowE = (*portOdrLowE &~ B_SELECT );
200007a0:	4b1a      	ldr	r3, [pc, #104]	; (2000080c <graphic_initialize+0x80>)
200007a2:	781b      	ldrb	r3, [r3, #0]
200007a4:	b2db      	uxtb	r3, r3
200007a6:	4a19      	ldr	r2, [pc, #100]	; (2000080c <graphic_initialize+0x80>)
200007a8:	2104      	movs	r1, #4
200007aa:	438b      	bics	r3, r1
200007ac:	b2db      	uxtb	r3, r3
200007ae:	7013      	strb	r3, [r2, #0]
	#ifdef SIMULATOR
		delay_mikro(10);
200007b0:	200a      	movs	r0, #10
200007b2:	f7ff fe0a 	bl	200003ca <delay_mikro>
	#endif
	*portOdrLowE = (*portOdrLowE &~(B_RST | B_CS1 | B_CS2 | B_E));
200007b6:	4b15      	ldr	r3, [pc, #84]	; (2000080c <graphic_initialize+0x80>)
200007b8:	781b      	ldrb	r3, [r3, #0]
200007ba:	b2db      	uxtb	r3, r3
200007bc:	4a13      	ldr	r2, [pc, #76]	; (2000080c <graphic_initialize+0x80>)
200007be:	2178      	movs	r1, #120	; 0x78
200007c0:	438b      	bics	r3, r1
200007c2:	b2db      	uxtb	r3, r3
200007c4:	7013      	strb	r3, [r2, #0]
	#ifndef SIMULATOR
		delay_milli(30);
	#endif
	*portOdrLowE = (*portOdrLowE | B_RST);
200007c6:	4b11      	ldr	r3, [pc, #68]	; (2000080c <graphic_initialize+0x80>)
200007c8:	781b      	ldrb	r3, [r3, #0]
200007ca:	b2db      	uxtb	r3, r3
200007cc:	4a0f      	ldr	r2, [pc, #60]	; (2000080c <graphic_initialize+0x80>)
200007ce:	2120      	movs	r1, #32
200007d0:	430b      	orrs	r3, r1
200007d2:	b2db      	uxtb	r3, r3
200007d4:	7013      	strb	r3, [r2, #0]
	graphic_write_command(0x3E, B_CS1|B_CS2);
200007d6:	2118      	movs	r1, #24
200007d8:	203e      	movs	r0, #62	; 0x3e
200007da:	f7ff ff59 	bl	20000690 <graphic_write_command>
	graphic_write_command(0x3F, B_CS1|B_CS2);
200007de:	2118      	movs	r1, #24
200007e0:	203f      	movs	r0, #63	; 0x3f
200007e2:	f7ff ff55 	bl	20000690 <graphic_write_command>
	graphic_write_command(0xC0, B_CS1|B_CS2);
200007e6:	2118      	movs	r1, #24
200007e8:	20c0      	movs	r0, #192	; 0xc0
200007ea:	f7ff ff51 	bl	20000690 <graphic_write_command>
	graphic_write_command(0x40, B_CS1|B_CS2);
200007ee:	2118      	movs	r1, #24
200007f0:	2040      	movs	r0, #64	; 0x40
200007f2:	f7ff ff4d 	bl	20000690 <graphic_write_command>
	graphic_write_command(0xB8, B_CS1|B_CS2);
200007f6:	2118      	movs	r1, #24
200007f8:	20b8      	movs	r0, #184	; 0xb8
200007fa:	f7ff ff49 	bl	20000690 <graphic_write_command>
	select_controller(0);
200007fe:	2000      	movs	r0, #0
20000800:	f7ff fdf4 	bl	200003ec <select_controller>
}
20000804:	46c0      	nop			; (mov r8, r8)
20000806:	46bd      	mov	sp, r7
20000808:	bd80      	pop	{r7, pc}
2000080a:	46c0      	nop			; (mov r8, r8)
2000080c:	40021014 	andmi	r1, r2, r4, lsl r0

20000810 <graphic_clean_screen>:

void graphic_clean_screen(void){
20000810:	b580      	push	{r7, lr}
20000812:	b082      	sub	sp, #8
20000814:	af00      	add	r7, sp, #0
	for(int i=0; i < 8; i++){
20000816:	2300      	movs	r3, #0
20000818:	607b      	str	r3, [r7, #4]
2000081a:	e01e      	b.n	2000085a <graphic_clean_screen+0x4a>
		graphic_write_command(0xB8|i, B_CS1|B_CS2);
2000081c:	687b      	ldr	r3, [r7, #4]
2000081e:	b25b      	sxtb	r3, r3
20000820:	2248      	movs	r2, #72	; 0x48
20000822:	4252      	negs	r2, r2
20000824:	4313      	orrs	r3, r2
20000826:	b25b      	sxtb	r3, r3
20000828:	b2db      	uxtb	r3, r3
2000082a:	2118      	movs	r1, #24
2000082c:	0018      	movs	r0, r3
2000082e:	f7ff ff2f 	bl	20000690 <graphic_write_command>
		graphic_write_command(0x40, B_CS1|B_CS2);
20000832:	2118      	movs	r1, #24
20000834:	2040      	movs	r0, #64	; 0x40
20000836:	f7ff ff2b 	bl	20000690 <graphic_write_command>
		for(int j=0; j<64; j++){
2000083a:	2300      	movs	r3, #0
2000083c:	603b      	str	r3, [r7, #0]
2000083e:	e006      	b.n	2000084e <graphic_clean_screen+0x3e>
			graphic_write_data(0,B_CS1|B_CS2);
20000840:	2118      	movs	r1, #24
20000842:	2000      	movs	r0, #0
20000844:	f7ff ff50 	bl	200006e8 <graphic_write_data>
		for(int j=0; j<64; j++){
20000848:	683b      	ldr	r3, [r7, #0]
2000084a:	3301      	adds	r3, #1
2000084c:	603b      	str	r3, [r7, #0]
2000084e:	683b      	ldr	r3, [r7, #0]
20000850:	2b3f      	cmp	r3, #63	; 0x3f
20000852:	ddf5      	ble.n	20000840 <graphic_clean_screen+0x30>
	for(int i=0; i < 8; i++){
20000854:	687b      	ldr	r3, [r7, #4]
20000856:	3301      	adds	r3, #1
20000858:	607b      	str	r3, [r7, #4]
2000085a:	687b      	ldr	r3, [r7, #4]
2000085c:	2b07      	cmp	r3, #7
2000085e:	dddd      	ble.n	2000081c <graphic_clean_screen+0xc>
		}
	}
}
20000860:	46c0      	nop			; (mov r8, r8)
20000862:	46bd      	mov	sp, r7
20000864:	b002      	add	sp, #8
20000866:	bd80      	pop	{r7, pc}

20000868 <graphic_pixel>:

void graphic_pixel(unsigned char x, unsigned char y, unsigned char set){
20000868:	b5b0      	push	{r4, r5, r7, lr}
2000086a:	b084      	sub	sp, #16
2000086c:	af00      	add	r7, sp, #0
2000086e:	0004      	movs	r4, r0
20000870:	0008      	movs	r0, r1
20000872:	0011      	movs	r1, r2
20000874:	1dfb      	adds	r3, r7, #7
20000876:	1c22      	adds	r2, r4, #0
20000878:	701a      	strb	r2, [r3, #0]
2000087a:	1dbb      	adds	r3, r7, #6
2000087c:	1c02      	adds	r2, r0, #0
2000087e:	701a      	strb	r2, [r3, #0]
20000880:	1d7b      	adds	r3, r7, #5
20000882:	1c0a      	adds	r2, r1, #0
20000884:	701a      	strb	r2, [r3, #0]
	x -= 1;
20000886:	1dfb      	adds	r3, r7, #7
20000888:	1dfa      	adds	r2, r7, #7
2000088a:	7812      	ldrb	r2, [r2, #0]
2000088c:	3a01      	subs	r2, #1
2000088e:	701a      	strb	r2, [r3, #0]
	y -= 1;
20000890:	1dbb      	adds	r3, r7, #6
20000892:	1dba      	adds	r2, r7, #6
20000894:	7812      	ldrb	r2, [r2, #0]
20000896:	3a01      	subs	r2, #1
20000898:	701a      	strb	r2, [r3, #0]
	char controller;
	if (x > 127 | y > 63)
2000089a:	1dfb      	adds	r3, r7, #7
2000089c:	781b      	ldrb	r3, [r3, #0]
2000089e:	b25b      	sxtb	r3, r3
200008a0:	b2db      	uxtb	r3, r3
200008a2:	09db      	lsrs	r3, r3, #7
200008a4:	b2da      	uxtb	r2, r3
200008a6:	1dbb      	adds	r3, r7, #6
200008a8:	781b      	ldrb	r3, [r3, #0]
200008aa:	213f      	movs	r1, #63	; 0x3f
200008ac:	4299      	cmp	r1, r3
200008ae:	419b      	sbcs	r3, r3
200008b0:	425b      	negs	r3, r3
200008b2:	b2db      	uxtb	r3, r3
200008b4:	4313      	orrs	r3, r2
200008b6:	b2db      	uxtb	r3, r3
200008b8:	2b00      	cmp	r3, #0
200008ba:	d16f      	bne.n	2000099c <graphic_pixel+0x134>
		{return;}
	char index = (1<<(y%8));
200008bc:	1dbb      	adds	r3, r7, #6
200008be:	781b      	ldrb	r3, [r3, #0]
200008c0:	2207      	movs	r2, #7
200008c2:	4013      	ands	r3, r2
200008c4:	2201      	movs	r2, #1
200008c6:	409a      	lsls	r2, r3
200008c8:	230d      	movs	r3, #13
200008ca:	18fb      	adds	r3, r7, r3
200008cc:	701a      	strb	r2, [r3, #0]
	if (x<64){
200008ce:	1dfb      	adds	r3, r7, #7
200008d0:	781b      	ldrb	r3, [r3, #0]
200008d2:	2b3f      	cmp	r3, #63	; 0x3f
200008d4:	d804      	bhi.n	200008e0 <graphic_pixel+0x78>
		controller = B_CS1;
200008d6:	230f      	movs	r3, #15
200008d8:	18fb      	adds	r3, r7, r3
200008da:	2208      	movs	r2, #8
200008dc:	701a      	strb	r2, [r3, #0]
200008de:	e008      	b.n	200008f2 <graphic_pixel+0x8a>
	}
	else{
		controller = B_CS2;
200008e0:	230f      	movs	r3, #15
200008e2:	18fb      	adds	r3, r7, r3
200008e4:	2210      	movs	r2, #16
200008e6:	701a      	strb	r2, [r3, #0]
		x -= 64;
200008e8:	1dfb      	adds	r3, r7, #7
200008ea:	1dfa      	adds	r2, r7, #7
200008ec:	7812      	ldrb	r2, [r2, #0]
200008ee:	3a40      	subs	r2, #64	; 0x40
200008f0:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_command(0x40 | x, controller);
200008f2:	1dfb      	adds	r3, r7, #7
200008f4:	781b      	ldrb	r3, [r3, #0]
200008f6:	2240      	movs	r2, #64	; 0x40
200008f8:	4313      	orrs	r3, r2
200008fa:	b2da      	uxtb	r2, r3
200008fc:	250f      	movs	r5, #15
200008fe:	197b      	adds	r3, r7, r5
20000900:	781b      	ldrb	r3, [r3, #0]
20000902:	0019      	movs	r1, r3
20000904:	0010      	movs	r0, r2
20000906:	f7ff fec3 	bl	20000690 <graphic_write_command>
	graphic_write_command(0xB8 | (y/8), controller);
2000090a:	1dbb      	adds	r3, r7, #6
2000090c:	781b      	ldrb	r3, [r3, #0]
2000090e:	08db      	lsrs	r3, r3, #3
20000910:	b2db      	uxtb	r3, r3
20000912:	2248      	movs	r2, #72	; 0x48
20000914:	4252      	negs	r2, r2
20000916:	4313      	orrs	r3, r2
20000918:	b2da      	uxtb	r2, r3
2000091a:	197b      	adds	r3, r7, r5
2000091c:	781b      	ldrb	r3, [r3, #0]
2000091e:	0019      	movs	r1, r3
20000920:	0010      	movs	r0, r2
20000922:	f7ff feb5 	bl	20000690 <graphic_write_command>
	unsigned char temp = graphic_read_data(controller);
20000926:	230e      	movs	r3, #14
20000928:	18fc      	adds	r4, r7, r3
2000092a:	197b      	adds	r3, r7, r5
2000092c:	781b      	ldrb	r3, [r3, #0]
2000092e:	0018      	movs	r0, r3
20000930:	f7ff ff0a 	bl	20000748 <graphic_read_data>
20000934:	0003      	movs	r3, r0
20000936:	7023      	strb	r3, [r4, #0]
	graphic_write_command(0x40 | x, controller);
20000938:	1dfb      	adds	r3, r7, #7
2000093a:	781b      	ldrb	r3, [r3, #0]
2000093c:	2240      	movs	r2, #64	; 0x40
2000093e:	4313      	orrs	r3, r2
20000940:	b2da      	uxtb	r2, r3
20000942:	197b      	adds	r3, r7, r5
20000944:	781b      	ldrb	r3, [r3, #0]
20000946:	0019      	movs	r1, r3
20000948:	0010      	movs	r0, r2
2000094a:	f7ff fea1 	bl	20000690 <graphic_write_command>
	if(set){
2000094e:	1d7b      	adds	r3, r7, #5
20000950:	781b      	ldrb	r3, [r3, #0]
20000952:	2b00      	cmp	r3, #0
20000954:	d009      	beq.n	2000096a <graphic_pixel+0x102>
		temp = temp | index;
20000956:	220e      	movs	r2, #14
20000958:	18bb      	adds	r3, r7, r2
2000095a:	18b9      	adds	r1, r7, r2
2000095c:	220d      	movs	r2, #13
2000095e:	18ba      	adds	r2, r7, r2
20000960:	7809      	ldrb	r1, [r1, #0]
20000962:	7812      	ldrb	r2, [r2, #0]
20000964:	430a      	orrs	r2, r1
20000966:	701a      	strb	r2, [r3, #0]
20000968:	e00d      	b.n	20000986 <graphic_pixel+0x11e>
	}
	else{
		temp = temp &~index;
2000096a:	230d      	movs	r3, #13
2000096c:	18fb      	adds	r3, r7, r3
2000096e:	781b      	ldrb	r3, [r3, #0]
20000970:	b25b      	sxtb	r3, r3
20000972:	43db      	mvns	r3, r3
20000974:	b25b      	sxtb	r3, r3
20000976:	210e      	movs	r1, #14
20000978:	187a      	adds	r2, r7, r1
2000097a:	7812      	ldrb	r2, [r2, #0]
2000097c:	b252      	sxtb	r2, r2
2000097e:	4013      	ands	r3, r2
20000980:	b25a      	sxtb	r2, r3
20000982:	187b      	adds	r3, r7, r1
20000984:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_data(temp, controller);
20000986:	230f      	movs	r3, #15
20000988:	18fb      	adds	r3, r7, r3
2000098a:	781a      	ldrb	r2, [r3, #0]
2000098c:	230e      	movs	r3, #14
2000098e:	18fb      	adds	r3, r7, r3
20000990:	781b      	ldrb	r3, [r3, #0]
20000992:	0011      	movs	r1, r2
20000994:	0018      	movs	r0, r3
20000996:	f7ff fea7 	bl	200006e8 <graphic_write_data>
2000099a:	e000      	b.n	2000099e <graphic_pixel+0x136>
		{return;}
2000099c:	46c0      	nop			; (mov r8, r8)
}
2000099e:	46bd      	mov	sp, r7
200009a0:	b004      	add	sp, #16
200009a2:	bdb0      	pop	{r4, r5, r7, pc}

200009a4 <lcdBufferDraw>:

void lcdBufferDraw(plcdBuffer toDraw){
200009a4:	b5f0      	push	{r4, r5, r6, r7, lr}
200009a6:	b085      	sub	sp, #20
200009a8:	af00      	add	r7, sp, #0
200009aa:	6078      	str	r0, [r7, #4]
	//char (*display)[8] = (char(*)[8])toDraw->display;
	
	unsigned char x,i,j;
	unsigned char controller, data;
	for(i=0; i<128; i++){
200009ac:	230e      	movs	r3, #14
200009ae:	18fb      	adds	r3, r7, r3
200009b0:	2200      	movs	r2, #0
200009b2:	701a      	strb	r2, [r3, #0]
200009b4:	e097      	b.n	20000ae6 <lcdBufferDraw+0x142>
		for(j=0; j<8; j++){
200009b6:	230d      	movs	r3, #13
200009b8:	18fb      	adds	r3, r7, r3
200009ba:	2200      	movs	r2, #0
200009bc:	701a      	strb	r2, [r3, #0]
200009be:	e086      	b.n	20000ace <lcdBufferDraw+0x12a>
			char updated = (toDraw->changeLog[i] &~ (1<<j));
200009c0:	230e      	movs	r3, #14
200009c2:	18fb      	adds	r3, r7, r3
200009c4:	781a      	ldrb	r2, [r3, #0]
200009c6:	6879      	ldr	r1, [r7, #4]
200009c8:	2380      	movs	r3, #128	; 0x80
200009ca:	00db      	lsls	r3, r3, #3
200009cc:	188a      	adds	r2, r1, r2
200009ce:	18d3      	adds	r3, r2, r3
200009d0:	781b      	ldrb	r3, [r3, #0]
200009d2:	b25b      	sxtb	r3, r3
200009d4:	220d      	movs	r2, #13
200009d6:	18ba      	adds	r2, r7, r2
200009d8:	7812      	ldrb	r2, [r2, #0]
200009da:	2101      	movs	r1, #1
200009dc:	4091      	lsls	r1, r2
200009de:	000a      	movs	r2, r1
200009e0:	b252      	sxtb	r2, r2
200009e2:	43d2      	mvns	r2, r2
200009e4:	b252      	sxtb	r2, r2
200009e6:	4013      	ands	r3, r2
200009e8:	b25a      	sxtb	r2, r3
200009ea:	210b      	movs	r1, #11
200009ec:	187b      	adds	r3, r7, r1
200009ee:	701a      	strb	r2, [r3, #0]
			if(updated){
200009f0:	187b      	adds	r3, r7, r1
200009f2:	781b      	ldrb	r3, [r3, #0]
200009f4:	2b00      	cmp	r3, #0
200009f6:	d064      	beq.n	20000ac2 <lcdBufferDraw+0x11e>
				if(i<64){
200009f8:	230e      	movs	r3, #14
200009fa:	18fb      	adds	r3, r7, r3
200009fc:	781b      	ldrb	r3, [r3, #0]
200009fe:	2b3f      	cmp	r3, #63	; 0x3f
20000a00:	d80a      	bhi.n	20000a18 <lcdBufferDraw+0x74>
					controller = B_CS1;
20000a02:	230c      	movs	r3, #12
20000a04:	18fb      	adds	r3, r7, r3
20000a06:	2208      	movs	r2, #8
20000a08:	701a      	strb	r2, [r3, #0]
					x=i;
20000a0a:	230f      	movs	r3, #15
20000a0c:	18fb      	adds	r3, r7, r3
20000a0e:	220e      	movs	r2, #14
20000a10:	18ba      	adds	r2, r7, r2
20000a12:	7812      	ldrb	r2, [r2, #0]
20000a14:	701a      	strb	r2, [r3, #0]
20000a16:	e00a      	b.n	20000a2e <lcdBufferDraw+0x8a>
				}
				else{
					controller = B_CS2;
20000a18:	230c      	movs	r3, #12
20000a1a:	18fb      	adds	r3, r7, r3
20000a1c:	2210      	movs	r2, #16
20000a1e:	701a      	strb	r2, [r3, #0]
					x = i-64;
20000a20:	230f      	movs	r3, #15
20000a22:	18fb      	adds	r3, r7, r3
20000a24:	220e      	movs	r2, #14
20000a26:	18ba      	adds	r2, r7, r2
20000a28:	7812      	ldrb	r2, [r2, #0]
20000a2a:	3a40      	subs	r2, #64	; 0x40
20000a2c:	701a      	strb	r2, [r3, #0]
				}
				data = toDraw->display[i][j];
20000a2e:	240e      	movs	r4, #14
20000a30:	193b      	adds	r3, r7, r4
20000a32:	7819      	ldrb	r1, [r3, #0]
20000a34:	250d      	movs	r5, #13
20000a36:	197b      	adds	r3, r7, r5
20000a38:	781a      	ldrb	r2, [r3, #0]
20000a3a:	230a      	movs	r3, #10
20000a3c:	18fb      	adds	r3, r7, r3
20000a3e:	6878      	ldr	r0, [r7, #4]
20000a40:	00c9      	lsls	r1, r1, #3
20000a42:	1841      	adds	r1, r0, r1
20000a44:	5c8a      	ldrb	r2, [r1, r2]
20000a46:	701a      	strb	r2, [r3, #0]
				graphic_write_command(adress | x, controller);
20000a48:	220f      	movs	r2, #15
20000a4a:	18bb      	adds	r3, r7, r2
20000a4c:	781b      	ldrb	r3, [r3, #0]
20000a4e:	2240      	movs	r2, #64	; 0x40
20000a50:	4313      	orrs	r3, r2
20000a52:	b2da      	uxtb	r2, r3
20000a54:	260c      	movs	r6, #12
20000a56:	19bb      	adds	r3, r7, r6
20000a58:	781b      	ldrb	r3, [r3, #0]
20000a5a:	0019      	movs	r1, r3
20000a5c:	0010      	movs	r0, r2
20000a5e:	f7ff fe17 	bl	20000690 <graphic_write_command>
				graphic_write_command(page | j, controller);
20000a62:	197b      	adds	r3, r7, r5
20000a64:	781b      	ldrb	r3, [r3, #0]
20000a66:	2248      	movs	r2, #72	; 0x48
20000a68:	4252      	negs	r2, r2
20000a6a:	4313      	orrs	r3, r2
20000a6c:	b2da      	uxtb	r2, r3
20000a6e:	19bb      	adds	r3, r7, r6
20000a70:	781b      	ldrb	r3, [r3, #0]
20000a72:	0019      	movs	r1, r3
20000a74:	0010      	movs	r0, r2
20000a76:	f7ff fe0b 	bl	20000690 <graphic_write_command>
				graphic_write_data(data, controller);
20000a7a:	19bb      	adds	r3, r7, r6
20000a7c:	781a      	ldrb	r2, [r3, #0]
20000a7e:	230a      	movs	r3, #10
20000a80:	18fb      	adds	r3, r7, r3
20000a82:	781b      	ldrb	r3, [r3, #0]
20000a84:	0011      	movs	r1, r2
20000a86:	0018      	movs	r0, r3
20000a88:	f7ff fe2e 	bl	200006e8 <graphic_write_data>
				toDraw->changeLog[i] = (toDraw->changeLog[i] | (1<<j));
20000a8c:	193b      	adds	r3, r7, r4
20000a8e:	781a      	ldrb	r2, [r3, #0]
20000a90:	6879      	ldr	r1, [r7, #4]
20000a92:	2380      	movs	r3, #128	; 0x80
20000a94:	00db      	lsls	r3, r3, #3
20000a96:	188a      	adds	r2, r1, r2
20000a98:	18d3      	adds	r3, r2, r3
20000a9a:	781b      	ldrb	r3, [r3, #0]
20000a9c:	b25a      	sxtb	r2, r3
20000a9e:	197b      	adds	r3, r7, r5
20000aa0:	781b      	ldrb	r3, [r3, #0]
20000aa2:	2101      	movs	r1, #1
20000aa4:	4099      	lsls	r1, r3
20000aa6:	000b      	movs	r3, r1
20000aa8:	b25b      	sxtb	r3, r3
20000aaa:	4313      	orrs	r3, r2
20000aac:	b259      	sxtb	r1, r3
20000aae:	193b      	adds	r3, r7, r4
20000ab0:	781a      	ldrb	r2, [r3, #0]
20000ab2:	b2c8      	uxtb	r0, r1
20000ab4:	6879      	ldr	r1, [r7, #4]
20000ab6:	2380      	movs	r3, #128	; 0x80
20000ab8:	00db      	lsls	r3, r3, #3
20000aba:	188a      	adds	r2, r1, r2
20000abc:	18d3      	adds	r3, r2, r3
20000abe:	1c02      	adds	r2, r0, #0
20000ac0:	701a      	strb	r2, [r3, #0]
		for(j=0; j<8; j++){
20000ac2:	210d      	movs	r1, #13
20000ac4:	187b      	adds	r3, r7, r1
20000ac6:	781a      	ldrb	r2, [r3, #0]
20000ac8:	187b      	adds	r3, r7, r1
20000aca:	3201      	adds	r2, #1
20000acc:	701a      	strb	r2, [r3, #0]
20000ace:	230d      	movs	r3, #13
20000ad0:	18fb      	adds	r3, r7, r3
20000ad2:	781b      	ldrb	r3, [r3, #0]
20000ad4:	2b07      	cmp	r3, #7
20000ad6:	d800      	bhi.n	20000ada <lcdBufferDraw+0x136>
20000ad8:	e772      	b.n	200009c0 <lcdBufferDraw+0x1c>
	for(i=0; i<128; i++){
20000ada:	210e      	movs	r1, #14
20000adc:	187b      	adds	r3, r7, r1
20000ade:	781a      	ldrb	r2, [r3, #0]
20000ae0:	187b      	adds	r3, r7, r1
20000ae2:	3201      	adds	r2, #1
20000ae4:	701a      	strb	r2, [r3, #0]
20000ae6:	230e      	movs	r3, #14
20000ae8:	18fb      	adds	r3, r7, r3
20000aea:	781b      	ldrb	r3, [r3, #0]
20000aec:	b25b      	sxtb	r3, r3
20000aee:	2b00      	cmp	r3, #0
20000af0:	db00      	blt.n	20000af4 <lcdBufferDraw+0x150>
20000af2:	e760      	b.n	200009b6 <lcdBufferDraw+0x12>
			}
		}
	}
	
}
20000af4:	46c0      	nop			; (mov r8, r8)
20000af6:	46bd      	mov	sp, r7
20000af8:	b005      	add	sp, #20
20000afa:	bdf0      	pop	{r4, r5, r6, r7, pc}

20000afc <lcdBufferWritePixel>:

void lcdBufferWritePixel(plcdBuffer lcdBuff, unsigned char x, unsigned char y, unsigned char set){
20000afc:	b590      	push	{r4, r7, lr}
20000afe:	b085      	sub	sp, #20
20000b00:	af00      	add	r7, sp, #0
20000b02:	6078      	str	r0, [r7, #4]
20000b04:	000c      	movs	r4, r1
20000b06:	0010      	movs	r0, r2
20000b08:	0019      	movs	r1, r3
20000b0a:	1cfb      	adds	r3, r7, #3
20000b0c:	1c22      	adds	r2, r4, #0
20000b0e:	701a      	strb	r2, [r3, #0]
20000b10:	1cbb      	adds	r3, r7, #2
20000b12:	1c02      	adds	r2, r0, #0
20000b14:	701a      	strb	r2, [r3, #0]
20000b16:	1c7b      	adds	r3, r7, #1
20000b18:	1c0a      	adds	r2, r1, #0
20000b1a:	701a      	strb	r2, [r3, #0]
	char controller;
	if (x > 127 | y > 63)
20000b1c:	1cfb      	adds	r3, r7, #3
20000b1e:	781b      	ldrb	r3, [r3, #0]
20000b20:	b25b      	sxtb	r3, r3
20000b22:	b2db      	uxtb	r3, r3
20000b24:	09db      	lsrs	r3, r3, #7
20000b26:	b2da      	uxtb	r2, r3
20000b28:	1cbb      	adds	r3, r7, #2
20000b2a:	781b      	ldrb	r3, [r3, #0]
20000b2c:	213f      	movs	r1, #63	; 0x3f
20000b2e:	4299      	cmp	r1, r3
20000b30:	419b      	sbcs	r3, r3
20000b32:	425b      	negs	r3, r3
20000b34:	b2db      	uxtb	r3, r3
20000b36:	4313      	orrs	r3, r2
20000b38:	b2db      	uxtb	r3, r3
20000b3a:	2b00      	cmp	r3, #0
20000b3c:	d16c      	bne.n	20000c18 <lcdBufferWritePixel+0x11c>
		{return;}
	if (x<64){
20000b3e:	1cfb      	adds	r3, r7, #3
20000b40:	781b      	ldrb	r3, [r3, #0]
20000b42:	2b3f      	cmp	r3, #63	; 0x3f
20000b44:	d804      	bhi.n	20000b50 <lcdBufferWritePixel+0x54>
		controller = B_CS1;
20000b46:	230f      	movs	r3, #15
20000b48:	18fb      	adds	r3, r7, r3
20000b4a:	2208      	movs	r2, #8
20000b4c:	701a      	strb	r2, [r3, #0]
20000b4e:	e003      	b.n	20000b58 <lcdBufferWritePixel+0x5c>
	}
	else{
		controller = B_CS2;
20000b50:	230f      	movs	r3, #15
20000b52:	18fb      	adds	r3, r7, r3
20000b54:	2210      	movs	r2, #16
20000b56:	701a      	strb	r2, [r3, #0]
	}
	char index = (1<<(y%8));
20000b58:	1cbb      	adds	r3, r7, #2
20000b5a:	781b      	ldrb	r3, [r3, #0]
20000b5c:	2207      	movs	r2, #7
20000b5e:	4013      	ands	r3, r2
20000b60:	2201      	movs	r2, #1
20000b62:	409a      	lsls	r2, r3
20000b64:	230e      	movs	r3, #14
20000b66:	18fb      	adds	r3, r7, r3
20000b68:	701a      	strb	r2, [r3, #0]
	if(set){
20000b6a:	1c7b      	adds	r3, r7, #1
20000b6c:	781b      	ldrb	r3, [r3, #0]
20000b6e:	2b00      	cmp	r3, #0
20000b70:	d016      	beq.n	20000ba0 <lcdBufferWritePixel+0xa4>
		lcdBuff->display[x][y/8] |= index;
20000b72:	1cfb      	adds	r3, r7, #3
20000b74:	781b      	ldrb	r3, [r3, #0]
20000b76:	1cba      	adds	r2, r7, #2
20000b78:	7812      	ldrb	r2, [r2, #0]
20000b7a:	08d2      	lsrs	r2, r2, #3
20000b7c:	b2d0      	uxtb	r0, r2
20000b7e:	0001      	movs	r1, r0
20000b80:	687a      	ldr	r2, [r7, #4]
20000b82:	00db      	lsls	r3, r3, #3
20000b84:	18d3      	adds	r3, r2, r3
20000b86:	5c59      	ldrb	r1, [r3, r1]
20000b88:	1cfb      	adds	r3, r7, #3
20000b8a:	781b      	ldrb	r3, [r3, #0]
20000b8c:	220e      	movs	r2, #14
20000b8e:	18ba      	adds	r2, r7, r2
20000b90:	7812      	ldrb	r2, [r2, #0]
20000b92:	430a      	orrs	r2, r1
20000b94:	b2d1      	uxtb	r1, r2
20000b96:	687a      	ldr	r2, [r7, #4]
20000b98:	00db      	lsls	r3, r3, #3
20000b9a:	18d3      	adds	r3, r2, r3
20000b9c:	1c0a      	adds	r2, r1, #0
20000b9e:	541a      	strb	r2, [r3, r0]
	}
	if(!set){
20000ba0:	1c7b      	adds	r3, r7, #1
20000ba2:	781b      	ldrb	r3, [r3, #0]
20000ba4:	2b00      	cmp	r3, #0
20000ba6:	d11b      	bne.n	20000be0 <lcdBufferWritePixel+0xe4>
		lcdBuff->display[x][y/8] &= ~index;
20000ba8:	1cfb      	adds	r3, r7, #3
20000baa:	781b      	ldrb	r3, [r3, #0]
20000bac:	1cba      	adds	r2, r7, #2
20000bae:	7812      	ldrb	r2, [r2, #0]
20000bb0:	08d2      	lsrs	r2, r2, #3
20000bb2:	b2d1      	uxtb	r1, r2
20000bb4:	0008      	movs	r0, r1
20000bb6:	687a      	ldr	r2, [r7, #4]
20000bb8:	00db      	lsls	r3, r3, #3
20000bba:	18d3      	adds	r3, r2, r3
20000bbc:	5c1b      	ldrb	r3, [r3, r0]
20000bbe:	b25b      	sxtb	r3, r3
20000bc0:	220e      	movs	r2, #14
20000bc2:	18ba      	adds	r2, r7, r2
20000bc4:	7812      	ldrb	r2, [r2, #0]
20000bc6:	b252      	sxtb	r2, r2
20000bc8:	43d2      	mvns	r2, r2
20000bca:	b252      	sxtb	r2, r2
20000bcc:	4013      	ands	r3, r2
20000bce:	b25a      	sxtb	r2, r3
20000bd0:	1cfb      	adds	r3, r7, #3
20000bd2:	781b      	ldrb	r3, [r3, #0]
20000bd4:	b2d0      	uxtb	r0, r2
20000bd6:	687a      	ldr	r2, [r7, #4]
20000bd8:	00db      	lsls	r3, r3, #3
20000bda:	18d3      	adds	r3, r2, r3
20000bdc:	1c02      	adds	r2, r0, #0
20000bde:	545a      	strb	r2, [r3, r1]
	}
	lcdBuff->changeLog[x] |= (1<<y);
20000be0:	1cfb      	adds	r3, r7, #3
20000be2:	781a      	ldrb	r2, [r3, #0]
20000be4:	6879      	ldr	r1, [r7, #4]
20000be6:	2380      	movs	r3, #128	; 0x80
20000be8:	00db      	lsls	r3, r3, #3
20000bea:	188a      	adds	r2, r1, r2
20000bec:	18d3      	adds	r3, r2, r3
20000bee:	781b      	ldrb	r3, [r3, #0]
20000bf0:	b25a      	sxtb	r2, r3
20000bf2:	1cbb      	adds	r3, r7, #2
20000bf4:	781b      	ldrb	r3, [r3, #0]
20000bf6:	2101      	movs	r1, #1
20000bf8:	4099      	lsls	r1, r3
20000bfa:	000b      	movs	r3, r1
20000bfc:	b25b      	sxtb	r3, r3
20000bfe:	4313      	orrs	r3, r2
20000c00:	b259      	sxtb	r1, r3
20000c02:	1cfb      	adds	r3, r7, #3
20000c04:	781a      	ldrb	r2, [r3, #0]
20000c06:	b2c8      	uxtb	r0, r1
20000c08:	6879      	ldr	r1, [r7, #4]
20000c0a:	2380      	movs	r3, #128	; 0x80
20000c0c:	00db      	lsls	r3, r3, #3
20000c0e:	188a      	adds	r2, r1, r2
20000c10:	18d3      	adds	r3, r2, r3
20000c12:	1c02      	adds	r2, r0, #0
20000c14:	701a      	strb	r2, [r3, #0]
20000c16:	e000      	b.n	20000c1a <lcdBufferWritePixel+0x11e>
		{return;}
20000c18:	46c0      	nop			; (mov r8, r8)
}
20000c1a:	46bd      	mov	sp, r7
20000c1c:	b005      	add	sp, #20
20000c1e:	bd90      	pop	{r4, r7, pc}

20000c20 <buffer_clear>:
	buffer_display,
	buffer_changeLog,
	lcdBufferDraw
};*/

void buffer_clear(plcdBuffer plcdBuff){
20000c20:	b580      	push	{r7, lr}
20000c22:	b084      	sub	sp, #16
20000c24:	af00      	add	r7, sp, #0
20000c26:	6078      	str	r0, [r7, #4]
	for(int i=0; i<128; i++){
20000c28:	2300      	movs	r3, #0
20000c2a:	60fb      	str	r3, [r7, #12]
20000c2c:	e01b      	b.n	20000c66 <buffer_clear+0x46>
		plcdBuff->changeLog[i] = 0;
20000c2e:	6879      	ldr	r1, [r7, #4]
20000c30:	2380      	movs	r3, #128	; 0x80
20000c32:	00db      	lsls	r3, r3, #3
20000c34:	68fa      	ldr	r2, [r7, #12]
20000c36:	188a      	adds	r2, r1, r2
20000c38:	18d3      	adds	r3, r2, r3
20000c3a:	2200      	movs	r2, #0
20000c3c:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<8; j++){
20000c3e:	2300      	movs	r3, #0
20000c40:	60bb      	str	r3, [r7, #8]
20000c42:	e00a      	b.n	20000c5a <buffer_clear+0x3a>
			plcdBuff->display[i][j] = 0;
20000c44:	687a      	ldr	r2, [r7, #4]
20000c46:	68fb      	ldr	r3, [r7, #12]
20000c48:	00db      	lsls	r3, r3, #3
20000c4a:	18d2      	adds	r2, r2, r3
20000c4c:	68bb      	ldr	r3, [r7, #8]
20000c4e:	18d3      	adds	r3, r2, r3
20000c50:	2200      	movs	r2, #0
20000c52:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<8; j++){
20000c54:	68bb      	ldr	r3, [r7, #8]
20000c56:	3301      	adds	r3, #1
20000c58:	60bb      	str	r3, [r7, #8]
20000c5a:	68bb      	ldr	r3, [r7, #8]
20000c5c:	2b07      	cmp	r3, #7
20000c5e:	ddf1      	ble.n	20000c44 <buffer_clear+0x24>
	for(int i=0; i<128; i++){
20000c60:	68fb      	ldr	r3, [r7, #12]
20000c62:	3301      	adds	r3, #1
20000c64:	60fb      	str	r3, [r7, #12]
20000c66:	68fb      	ldr	r3, [r7, #12]
20000c68:	2b7f      	cmp	r3, #127	; 0x7f
20000c6a:	dde0      	ble.n	20000c2e <buffer_clear+0xe>
		}
	}
}
20000c6c:	46c0      	nop			; (mov r8, r8)
20000c6e:	46bd      	mov	sp, r7
20000c70:	b004      	add	sp, #16
20000c72:	bd80      	pop	{r7, pc}

20000c74 <pong_init>:
#include "ponglogic.h"
#include "portDeclare.h"



void pong_init(){
20000c74:	b580      	push	{r7, lr}
20000c76:	af00      	add	r7, sp, #0
	
}
20000c78:	46c0      	nop			; (mov r8, r8)
20000c7a:	46bd      	mov	sp, r7
20000c7c:	bd80      	pop	{r7, pc}

20000c7e <set_object_speed>:

void set_object_speed(pobject o, int speedx, int speedy){
20000c7e:	b580      	push	{r7, lr}
20000c80:	b084      	sub	sp, #16
20000c82:	af00      	add	r7, sp, #0
20000c84:	60f8      	str	r0, [r7, #12]
20000c86:	60b9      	str	r1, [r7, #8]
20000c88:	607a      	str	r2, [r7, #4]
	o->dirx = speedx;
20000c8a:	68fb      	ldr	r3, [r7, #12]
20000c8c:	68ba      	ldr	r2, [r7, #8]
20000c8e:	605a      	str	r2, [r3, #4]
	o->diry = speedy;
20000c90:	68fb      	ldr	r3, [r7, #12]
20000c92:	687a      	ldr	r2, [r7, #4]
20000c94:	609a      	str	r2, [r3, #8]
}
20000c96:	46c0      	nop			; (mov r8, r8)
20000c98:	46bd      	mov	sp, r7
20000c9a:	b004      	add	sp, #16
20000c9c:	bd80      	pop	{r7, pc}

20000c9e <pong_set_position>:

void pong_set_position(pobject o, int posx, int posy){
20000c9e:	b580      	push	{r7, lr}
20000ca0:	b084      	sub	sp, #16
20000ca2:	af00      	add	r7, sp, #0
20000ca4:	60f8      	str	r0, [r7, #12]
20000ca6:	60b9      	str	r1, [r7, #8]
20000ca8:	607a      	str	r2, [r7, #4]
	o->posx = posx;
20000caa:	68fb      	ldr	r3, [r7, #12]
20000cac:	68ba      	ldr	r2, [r7, #8]
20000cae:	60da      	str	r2, [r3, #12]
	o->posy = posy;
20000cb0:	68fb      	ldr	r3, [r7, #12]
20000cb2:	687a      	ldr	r2, [r7, #4]
20000cb4:	611a      	str	r2, [r3, #16]
}
20000cb6:	46c0      	nop			; (mov r8, r8)
20000cb8:	46bd      	mov	sp, r7
20000cba:	b004      	add	sp, #16
20000cbc:	bd80      	pop	{r7, pc}

20000cbe <draw_object>:

void draw_object(object* o){
20000cbe:	b580      	push	{r7, lr}
20000cc0:	b086      	sub	sp, #24
20000cc2:	af00      	add	r7, sp, #0
20000cc4:	6078      	str	r0, [r7, #4]
	for (int i=0; i < o->geo->numpoints; i++){
20000cc6:	2300      	movs	r3, #0
20000cc8:	617b      	str	r3, [r7, #20]
20000cca:	e020      	b.n	20000d0e <draw_object+0x50>
		int drawx = o->posx + o->geo->px[i].x;
20000ccc:	687b      	ldr	r3, [r7, #4]
20000cce:	68da      	ldr	r2, [r3, #12]
20000cd0:	687b      	ldr	r3, [r7, #4]
20000cd2:	6819      	ldr	r1, [r3, #0]
20000cd4:	697b      	ldr	r3, [r7, #20]
20000cd6:	3304      	adds	r3, #4
20000cd8:	005b      	lsls	r3, r3, #1
20000cda:	18cb      	adds	r3, r1, r3
20000cdc:	3304      	adds	r3, #4
20000cde:	781b      	ldrb	r3, [r3, #0]
20000ce0:	18d3      	adds	r3, r2, r3
20000ce2:	613b      	str	r3, [r7, #16]
		int drawy = o->posy + o->geo->px[i].y;
20000ce4:	687b      	ldr	r3, [r7, #4]
20000ce6:	691a      	ldr	r2, [r3, #16]
20000ce8:	687b      	ldr	r3, [r7, #4]
20000cea:	6819      	ldr	r1, [r3, #0]
20000cec:	697b      	ldr	r3, [r7, #20]
20000cee:	3304      	adds	r3, #4
20000cf0:	005b      	lsls	r3, r3, #1
20000cf2:	18cb      	adds	r3, r1, r3
20000cf4:	3305      	adds	r3, #5
20000cf6:	781b      	ldrb	r3, [r3, #0]
20000cf8:	18d3      	adds	r3, r2, r3
20000cfa:	60fb      	str	r3, [r7, #12]
		graphic_pixel(drawx, drawy,1);
20000cfc:	68f9      	ldr	r1, [r7, #12]
20000cfe:	693b      	ldr	r3, [r7, #16]
20000d00:	2201      	movs	r2, #1
20000d02:	0018      	movs	r0, r3
20000d04:	f7ff fdb0 	bl	20000868 <graphic_pixel>
	for (int i=0; i < o->geo->numpoints; i++){
20000d08:	697b      	ldr	r3, [r7, #20]
20000d0a:	3301      	adds	r3, #1
20000d0c:	617b      	str	r3, [r7, #20]
20000d0e:	687b      	ldr	r3, [r7, #4]
20000d10:	681b      	ldr	r3, [r3, #0]
20000d12:	681b      	ldr	r3, [r3, #0]
20000d14:	697a      	ldr	r2, [r7, #20]
20000d16:	429a      	cmp	r2, r3
20000d18:	dbd8      	blt.n	20000ccc <draw_object+0xe>
	}
}
20000d1a:	46c0      	nop			; (mov r8, r8)
20000d1c:	46bd      	mov	sp, r7
20000d1e:	b006      	add	sp, #24
20000d20:	bd80      	pop	{r7, pc}

20000d22 <clear_object>:

void clear_object(object* o){
20000d22:	b580      	push	{r7, lr}
20000d24:	b084      	sub	sp, #16
20000d26:	af00      	add	r7, sp, #0
20000d28:	6078      	str	r0, [r7, #4]
	for (int i=0; i < o->geo->numpoints; i++){
20000d2a:	2300      	movs	r3, #0
20000d2c:	60fb      	str	r3, [r7, #12]
20000d2e:	e01c      	b.n	20000d6a <clear_object+0x48>
		graphic_pixel(o->posx + o->geo->px[i].x, o->posy + o->geo->px[i].y,0);
20000d30:	687b      	ldr	r3, [r7, #4]
20000d32:	68da      	ldr	r2, [r3, #12]
20000d34:	687b      	ldr	r3, [r7, #4]
20000d36:	6819      	ldr	r1, [r3, #0]
20000d38:	68fb      	ldr	r3, [r7, #12]
20000d3a:	3304      	adds	r3, #4
20000d3c:	005b      	lsls	r3, r3, #1
20000d3e:	18cb      	adds	r3, r1, r3
20000d40:	3304      	adds	r3, #4
20000d42:	781b      	ldrb	r3, [r3, #0]
20000d44:	18d0      	adds	r0, r2, r3
20000d46:	687b      	ldr	r3, [r7, #4]
20000d48:	691a      	ldr	r2, [r3, #16]
20000d4a:	687b      	ldr	r3, [r7, #4]
20000d4c:	6819      	ldr	r1, [r3, #0]
20000d4e:	68fb      	ldr	r3, [r7, #12]
20000d50:	3304      	adds	r3, #4
20000d52:	005b      	lsls	r3, r3, #1
20000d54:	18cb      	adds	r3, r1, r3
20000d56:	3305      	adds	r3, #5
20000d58:	781b      	ldrb	r3, [r3, #0]
20000d5a:	18d3      	adds	r3, r2, r3
20000d5c:	2200      	movs	r2, #0
20000d5e:	0019      	movs	r1, r3
20000d60:	f7ff fd82 	bl	20000868 <graphic_pixel>
	for (int i=0; i < o->geo->numpoints; i++){
20000d64:	68fb      	ldr	r3, [r7, #12]
20000d66:	3301      	adds	r3, #1
20000d68:	60fb      	str	r3, [r7, #12]
20000d6a:	687b      	ldr	r3, [r7, #4]
20000d6c:	681b      	ldr	r3, [r3, #0]
20000d6e:	681b      	ldr	r3, [r3, #0]
20000d70:	68fa      	ldr	r2, [r7, #12]
20000d72:	429a      	cmp	r2, r3
20000d74:	dbdc      	blt.n	20000d30 <clear_object+0xe>
	}
}
20000d76:	46c0      	nop			; (mov r8, r8)
20000d78:	46bd      	mov	sp, r7
20000d7a:	b004      	add	sp, #16
20000d7c:	bd80      	pop	{r7, pc}

20000d7e <move_object>:

void move_object(object* o){
20000d7e:	b580      	push	{r7, lr}
20000d80:	b082      	sub	sp, #8
20000d82:	af00      	add	r7, sp, #0
20000d84:	6078      	str	r0, [r7, #4]
	clear_object(o);
20000d86:	687b      	ldr	r3, [r7, #4]
20000d88:	0018      	movs	r0, r3
20000d8a:	f7ff ffca 	bl	20000d22 <clear_object>
	o->posx = o->posx + o->dirx;
20000d8e:	687b      	ldr	r3, [r7, #4]
20000d90:	68da      	ldr	r2, [r3, #12]
20000d92:	687b      	ldr	r3, [r7, #4]
20000d94:	685b      	ldr	r3, [r3, #4]
20000d96:	18d2      	adds	r2, r2, r3
20000d98:	687b      	ldr	r3, [r7, #4]
20000d9a:	60da      	str	r2, [r3, #12]
	o->posy = o->posy + o->diry;
20000d9c:	687b      	ldr	r3, [r7, #4]
20000d9e:	691a      	ldr	r2, [r3, #16]
20000da0:	687b      	ldr	r3, [r7, #4]
20000da2:	689b      	ldr	r3, [r3, #8]
20000da4:	18d2      	adds	r2, r2, r3
20000da6:	687b      	ldr	r3, [r7, #4]
20000da8:	611a      	str	r2, [r3, #16]
	
	if(o->posy <= 0 | o->posy >= 60){
20000daa:	687b      	ldr	r3, [r7, #4]
20000dac:	691b      	ldr	r3, [r3, #16]
20000dae:	1e5a      	subs	r2, r3, #1
20000db0:	4313      	orrs	r3, r2
20000db2:	0fdb      	lsrs	r3, r3, #31
20000db4:	b2da      	uxtb	r2, r3
20000db6:	687b      	ldr	r3, [r7, #4]
20000db8:	691b      	ldr	r3, [r3, #16]
20000dba:	2101      	movs	r1, #1
20000dbc:	2b3b      	cmp	r3, #59	; 0x3b
20000dbe:	dc01      	bgt.n	20000dc4 <move_object+0x46>
20000dc0:	2300      	movs	r3, #0
20000dc2:	1c19      	adds	r1, r3, #0
20000dc4:	b2cb      	uxtb	r3, r1
20000dc6:	4313      	orrs	r3, r2
20000dc8:	b2db      	uxtb	r3, r3
20000dca:	2b00      	cmp	r3, #0
20000dcc:	d004      	beq.n	20000dd8 <move_object+0x5a>
		o->diry = -o->diry;
20000dce:	687b      	ldr	r3, [r7, #4]
20000dd0:	689b      	ldr	r3, [r3, #8]
20000dd2:	425a      	negs	r2, r3
20000dd4:	687b      	ldr	r3, [r7, #4]
20000dd6:	609a      	str	r2, [r3, #8]
	}
	draw_object(o);
20000dd8:	687b      	ldr	r3, [r7, #4]
20000dda:	0018      	movs	r0, r3
20000ddc:	f7ff ff6f 	bl	20000cbe <draw_object>
}
20000de0:	46c0      	nop			; (mov r8, r8)
20000de2:	46bd      	mov	sp, r7
20000de4:	b002      	add	sp, #8
20000de6:	bd80      	pop	{r7, pc}

20000de8 <pong_inc_playerScore>:

void pong_inc_playerScore(char* playerScore, char player){
20000de8:	b580      	push	{r7, lr}
20000dea:	b084      	sub	sp, #16
20000dec:	af00      	add	r7, sp, #0
20000dee:	6078      	str	r0, [r7, #4]
20000df0:	000a      	movs	r2, r1
20000df2:	1cfb      	adds	r3, r7, #3
20000df4:	701a      	strb	r2, [r3, #0]
	ascii_init();
20000df6:	f000 f90d 	bl	20001014 <ascii_init>
	playerScore[player-1]++;
20000dfa:	1cfb      	adds	r3, r7, #3
20000dfc:	781b      	ldrb	r3, [r3, #0]
20000dfe:	3b01      	subs	r3, #1
20000e00:	687a      	ldr	r2, [r7, #4]
20000e02:	18d3      	adds	r3, r2, r3
20000e04:	781a      	ldrb	r2, [r3, #0]
20000e06:	3201      	adds	r2, #1
20000e08:	b2d2      	uxtb	r2, r2
20000e0a:	701a      	strb	r2, [r3, #0]
	ascii_gotoxy(10*player,1*player);
20000e0c:	1cfb      	adds	r3, r7, #3
20000e0e:	781a      	ldrb	r2, [r3, #0]
20000e10:	0013      	movs	r3, r2
20000e12:	009b      	lsls	r3, r3, #2
20000e14:	189b      	adds	r3, r3, r2
20000e16:	005b      	lsls	r3, r3, #1
20000e18:	001a      	movs	r2, r3
20000e1a:	1cfb      	adds	r3, r7, #3
20000e1c:	781b      	ldrb	r3, [r3, #0]
20000e1e:	0019      	movs	r1, r3
20000e20:	0010      	movs	r0, r2
20000e22:	f000 f938 	bl	20001096 <ascii_gotoxy>
	char newScore = playerScore[player-1]+47;
20000e26:	1cfb      	adds	r3, r7, #3
20000e28:	781b      	ldrb	r3, [r3, #0]
20000e2a:	3b01      	subs	r3, #1
20000e2c:	687a      	ldr	r2, [r7, #4]
20000e2e:	18d3      	adds	r3, r2, r3
20000e30:	781a      	ldrb	r2, [r3, #0]
20000e32:	210f      	movs	r1, #15
20000e34:	187b      	adds	r3, r7, r1
20000e36:	322f      	adds	r2, #47	; 0x2f
20000e38:	701a      	strb	r2, [r3, #0]
	ascii_write_char(newScore);
20000e3a:	187b      	adds	r3, r7, r1
20000e3c:	781b      	ldrb	r3, [r3, #0]
20000e3e:	0018      	movs	r0, r3
20000e40:	f000 f90b 	bl	2000105a <ascii_write_char>
	graphic_initialize();
20000e44:	f7ff fca2 	bl	2000078c <graphic_initialize>
}
20000e48:	46c0      	nop			; (mov r8, r8)
20000e4a:	46bd      	mov	sp, r7
20000e4c:	b004      	add	sp, #16
20000e4e:	bd80      	pop	{r7, pc}

20000e50 <ascii_ctrl_bit_set>:

#include "delay.h"
#include "ascii_drivers.h"
#include "portDeclare.h"

void ascii_ctrl_bit_set(unsigned short x){
20000e50:	b580      	push	{r7, lr}
20000e52:	b084      	sub	sp, #16
20000e54:	af00      	add	r7, sp, #0
20000e56:	0002      	movs	r2, r0
20000e58:	1dbb      	adds	r3, r7, #6
20000e5a:	801a      	strh	r2, [r3, #0]
	
	unsigned char c;
	c = *portOdrLowE;
20000e5c:	4a0c      	ldr	r2, [pc, #48]	; (20000e90 <ascii_ctrl_bit_set+0x40>)
20000e5e:	210f      	movs	r1, #15
20000e60:	187b      	adds	r3, r7, r1
20000e62:	7812      	ldrb	r2, [r2, #0]
20000e64:	701a      	strb	r2, [r3, #0]
	c |= ( B_SELECT | x );
20000e66:	1dbb      	adds	r3, r7, #6
20000e68:	881b      	ldrh	r3, [r3, #0]
20000e6a:	b2da      	uxtb	r2, r3
20000e6c:	187b      	adds	r3, r7, r1
20000e6e:	781b      	ldrb	r3, [r3, #0]
20000e70:	4313      	orrs	r3, r2
20000e72:	b2da      	uxtb	r2, r3
20000e74:	0008      	movs	r0, r1
20000e76:	187b      	adds	r3, r7, r1
20000e78:	2104      	movs	r1, #4
20000e7a:	430a      	orrs	r2, r1
20000e7c:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = c; 
20000e7e:	4a04      	ldr	r2, [pc, #16]	; (20000e90 <ascii_ctrl_bit_set+0x40>)
20000e80:	0001      	movs	r1, r0
20000e82:	187b      	adds	r3, r7, r1
20000e84:	781b      	ldrb	r3, [r3, #0]
20000e86:	7013      	strb	r3, [r2, #0]
}
20000e88:	46c0      	nop			; (mov r8, r8)
20000e8a:	46bd      	mov	sp, r7
20000e8c:	b004      	add	sp, #16
20000e8e:	bd80      	pop	{r7, pc}
20000e90:	40021014 	andmi	r1, r2, r4, lsl r0

20000e94 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned short x){
20000e94:	b580      	push	{r7, lr}
20000e96:	b084      	sub	sp, #16
20000e98:	af00      	add	r7, sp, #0
20000e9a:	0002      	movs	r2, r0
20000e9c:	1dbb      	adds	r3, r7, #6
20000e9e:	801a      	strh	r2, [r3, #0]
	unsigned char c;
	c = *portOdrLowE;
20000ea0:	4a0d      	ldr	r2, [pc, #52]	; (20000ed8 <ascii_ctrl_bit_clear+0x44>)
20000ea2:	210f      	movs	r1, #15
20000ea4:	187b      	adds	r3, r7, r1
20000ea6:	7812      	ldrb	r2, [r2, #0]
20000ea8:	701a      	strb	r2, [r3, #0]
	c = B_SELECT | ( c & ~x );
20000eaa:	1dbb      	adds	r3, r7, #6
20000eac:	881b      	ldrh	r3, [r3, #0]
20000eae:	b25b      	sxtb	r3, r3
20000eb0:	43db      	mvns	r3, r3
20000eb2:	b25b      	sxtb	r3, r3
20000eb4:	187a      	adds	r2, r7, r1
20000eb6:	7812      	ldrb	r2, [r2, #0]
20000eb8:	b252      	sxtb	r2, r2
20000eba:	4013      	ands	r3, r2
20000ebc:	b25b      	sxtb	r3, r3
20000ebe:	2204      	movs	r2, #4
20000ec0:	4313      	orrs	r3, r2
20000ec2:	b25a      	sxtb	r2, r3
20000ec4:	187b      	adds	r3, r7, r1
20000ec6:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = c;
20000ec8:	4a03      	ldr	r2, [pc, #12]	; (20000ed8 <ascii_ctrl_bit_clear+0x44>)
20000eca:	187b      	adds	r3, r7, r1
20000ecc:	781b      	ldrb	r3, [r3, #0]
20000ece:	7013      	strb	r3, [r2, #0]
}
20000ed0:	46c0      	nop			; (mov r8, r8)
20000ed2:	46bd      	mov	sp, r7
20000ed4:	b004      	add	sp, #16
20000ed6:	bd80      	pop	{r7, pc}
20000ed8:	40021014 	andmi	r1, r2, r4, lsl r0

20000edc <ascii_write_controller>:

void ascii_write_controller(unsigned char c){
20000edc:	b580      	push	{r7, lr}
20000ede:	b082      	sub	sp, #8
20000ee0:	af00      	add	r7, sp, #0
20000ee2:	0002      	movs	r2, r0
20000ee4:	1dfb      	adds	r3, r7, #7
20000ee6:	701a      	strb	r2, [r3, #0]
	delay_40ns();
20000ee8:	f7ff fa48 	bl	2000037c <delay_40ns>
	ascii_ctrl_bit_set(B_E);
20000eec:	2040      	movs	r0, #64	; 0x40
20000eee:	f7ff ffaf 	bl	20000e50 <ascii_ctrl_bit_set>
	*portOdrHighE = c;
20000ef2:	4a05      	ldr	r2, [pc, #20]	; (20000f08 <ascii_write_controller+0x2c>)
20000ef4:	1dfb      	adds	r3, r7, #7
20000ef6:	781b      	ldrb	r3, [r3, #0]
20000ef8:	7013      	strb	r3, [r2, #0]
	delay_250ns;
	ascii_ctrl_bit_clear(B_E);
20000efa:	2040      	movs	r0, #64	; 0x40
20000efc:	f7ff ffca 	bl	20000e94 <ascii_ctrl_bit_clear>
}
20000f00:	46c0      	nop			; (mov r8, r8)
20000f02:	46bd      	mov	sp, r7
20000f04:	b002      	add	sp, #8
20000f06:	bd80      	pop	{r7, pc}
20000f08:	40021015 	andmi	r1, r2, r5, lsl r0

20000f0c <ascii_read_controller>:
unsigned char ascii_read_controller(void){
20000f0c:	b580      	push	{r7, lr}
20000f0e:	b082      	sub	sp, #8
20000f10:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_set(B_E);
20000f12:	2040      	movs	r0, #64	; 0x40
20000f14:	f7ff ff9c 	bl	20000e50 <ascii_ctrl_bit_set>
	delay_250ns;
	delay_250ns;
	unsigned char rv = *portIdrHighE;
20000f18:	4a06      	ldr	r2, [pc, #24]	; (20000f34 <ascii_read_controller+0x28>)
20000f1a:	1dfb      	adds	r3, r7, #7
20000f1c:	7812      	ldrb	r2, [r2, #0]
20000f1e:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20000f20:	2040      	movs	r0, #64	; 0x40
20000f22:	f7ff ffb7 	bl	20000e94 <ascii_ctrl_bit_clear>
	return rv;
20000f26:	1dfb      	adds	r3, r7, #7
20000f28:	781b      	ldrb	r3, [r3, #0]
}
20000f2a:	0018      	movs	r0, r3
20000f2c:	46bd      	mov	sp, r7
20000f2e:	b002      	add	sp, #8
20000f30:	bd80      	pop	{r7, pc}
20000f32:	46c0      	nop			; (mov r8, r8)
20000f34:	40021011 	andmi	r1, r2, r1, lsl r0

20000f38 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20000f38:	b580      	push	{r7, lr}
20000f3a:	b082      	sub	sp, #8
20000f3c:	af00      	add	r7, sp, #0
20000f3e:	0002      	movs	r2, r0
20000f40:	1dfb      	adds	r3, r7, #7
20000f42:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000f44:	2001      	movs	r0, #1
20000f46:	f7ff ffa5 	bl	20000e94 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000f4a:	2002      	movs	r0, #2
20000f4c:	f7ff ffa2 	bl	20000e94 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20000f50:	1dfb      	adds	r3, r7, #7
20000f52:	781b      	ldrb	r3, [r3, #0]
20000f54:	0018      	movs	r0, r3
20000f56:	f7ff ffc1 	bl	20000edc <ascii_write_controller>
}
20000f5a:	46c0      	nop			; (mov r8, r8)
20000f5c:	46bd      	mov	sp, r7
20000f5e:	b002      	add	sp, #8
20000f60:	bd80      	pop	{r7, pc}

20000f62 <ascii_write_data>:

void ascii_write_data(unsigned char data){
20000f62:	b580      	push	{r7, lr}
20000f64:	b082      	sub	sp, #8
20000f66:	af00      	add	r7, sp, #0
20000f68:	0002      	movs	r2, r0
20000f6a:	1dfb      	adds	r3, r7, #7
20000f6c:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000f6e:	2001      	movs	r0, #1
20000f70:	f7ff ff6e 	bl	20000e50 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20000f74:	2002      	movs	r0, #2
20000f76:	f7ff ff8d 	bl	20000e94 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20000f7a:	1dfb      	adds	r3, r7, #7
20000f7c:	781b      	ldrb	r3, [r3, #0]
20000f7e:	0018      	movs	r0, r3
20000f80:	f7ff ffac 	bl	20000edc <ascii_write_controller>
}
20000f84:	46c0      	nop			; (mov r8, r8)
20000f86:	46bd      	mov	sp, r7
20000f88:	b002      	add	sp, #8
20000f8a:	bd80      	pop	{r7, pc}

20000f8c <ascii_read_status>:

unsigned char ascii_read_status(void){
20000f8c:	b580      	push	{r7, lr}
20000f8e:	b082      	sub	sp, #8
20000f90:	af00      	add	r7, sp, #0
	*portModerE = (*portModerE & 0x0000FFFF);
20000f92:	4b0c      	ldr	r3, [pc, #48]	; (20000fc4 <ascii_read_status+0x38>)
20000f94:	681a      	ldr	r2, [r3, #0]
20000f96:	4b0b      	ldr	r3, [pc, #44]	; (20000fc4 <ascii_read_status+0x38>)
20000f98:	0412      	lsls	r2, r2, #16
20000f9a:	0c12      	lsrs	r2, r2, #16
20000f9c:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000f9e:	2001      	movs	r0, #1
20000fa0:	f7ff ff78 	bl	20000e94 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
20000fa4:	2002      	movs	r0, #2
20000fa6:	f7ff ff53 	bl	20000e50 <ascii_ctrl_bit_set>
	unsigned char rv; 
	#ifndef SIMULATOR
		rv = ascii_read_controller();
	#endif
	*portModerE = (*portModerE | 0x55550000);
20000faa:	4b06      	ldr	r3, [pc, #24]	; (20000fc4 <ascii_read_status+0x38>)
20000fac:	681a      	ldr	r2, [r3, #0]
20000fae:	4b05      	ldr	r3, [pc, #20]	; (20000fc4 <ascii_read_status+0x38>)
20000fb0:	4905      	ldr	r1, [pc, #20]	; (20000fc8 <ascii_read_status+0x3c>)
20000fb2:	430a      	orrs	r2, r1
20000fb4:	601a      	str	r2, [r3, #0]
	return rv;
20000fb6:	1dfb      	adds	r3, r7, #7
20000fb8:	781b      	ldrb	r3, [r3, #0]
}
20000fba:	0018      	movs	r0, r3
20000fbc:	46bd      	mov	sp, r7
20000fbe:	b002      	add	sp, #8
20000fc0:	bd80      	pop	{r7, pc}
20000fc2:	46c0      	nop			; (mov r8, r8)
20000fc4:	40021000 	andmi	r1, r2, r0
20000fc8:	55550000 	ldrbpl	r0, [r5, #-0]

20000fcc <ascii_read_data>:

unsigned char ascii_read_data(void){
20000fcc:	b590      	push	{r4, r7, lr}
20000fce:	b083      	sub	sp, #12
20000fd0:	af00      	add	r7, sp, #0
	*portModerE = (*portModerE & 0x0000FFFF);
20000fd2:	4b0e      	ldr	r3, [pc, #56]	; (2000100c <ascii_read_data+0x40>)
20000fd4:	681a      	ldr	r2, [r3, #0]
20000fd6:	4b0d      	ldr	r3, [pc, #52]	; (2000100c <ascii_read_data+0x40>)
20000fd8:	0412      	lsls	r2, r2, #16
20000fda:	0c12      	lsrs	r2, r2, #16
20000fdc:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000fde:	2001      	movs	r0, #1
20000fe0:	f7ff ff36 	bl	20000e50 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20000fe4:	2002      	movs	r0, #2
20000fe6:	f7ff ff33 	bl	20000e50 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20000fea:	1dfc      	adds	r4, r7, #7
20000fec:	f7ff ff8e 	bl	20000f0c <ascii_read_controller>
20000ff0:	0003      	movs	r3, r0
20000ff2:	7023      	strb	r3, [r4, #0]
	*portModerE = (*portModerE | 0x55550000);
20000ff4:	4b05      	ldr	r3, [pc, #20]	; (2000100c <ascii_read_data+0x40>)
20000ff6:	681a      	ldr	r2, [r3, #0]
20000ff8:	4b04      	ldr	r3, [pc, #16]	; (2000100c <ascii_read_data+0x40>)
20000ffa:	4905      	ldr	r1, [pc, #20]	; (20001010 <ascii_read_data+0x44>)
20000ffc:	430a      	orrs	r2, r1
20000ffe:	601a      	str	r2, [r3, #0]
	return rv;
20001000:	1dfb      	adds	r3, r7, #7
20001002:	781b      	ldrb	r3, [r3, #0]
}
20001004:	0018      	movs	r0, r3
20001006:	46bd      	mov	sp, r7
20001008:	b003      	add	sp, #12
2000100a:	bd90      	pop	{r4, r7, pc}
2000100c:	40021000 	andmi	r1, r2, r0
20001010:	55550000 	ldrbpl	r0, [r5, #-0]

20001014 <ascii_init>:

void ascii_init(void){
20001014:	b580      	push	{r7, lr}
20001016:	af00      	add	r7, sp, #0
	while((ascii_read_status() & 0x80) == 0x80){}
20001018:	46c0      	nop			; (mov r8, r8)
2000101a:	f7ff ffb7 	bl	20000f8c <ascii_read_status>
2000101e:	0003      	movs	r3, r0
20001020:	001a      	movs	r2, r3
20001022:	2380      	movs	r3, #128	; 0x80
20001024:	4013      	ands	r3, r2
20001026:	2b80      	cmp	r3, #128	; 0x80
20001028:	d0f7      	beq.n	2000101a <ascii_init+0x6>
	//ascii_read_status();
	delay_mikro(8);
2000102a:	2008      	movs	r0, #8
2000102c:	f7ff f9cd 	bl	200003ca <delay_mikro>
	ascii_write_cmd(0x38);
20001030:	2038      	movs	r0, #56	; 0x38
20001032:	f7ff ff81 	bl	20000f38 <ascii_write_cmd>
	delay_mikro(40);
20001036:	2028      	movs	r0, #40	; 0x28
20001038:	f7ff f9c7 	bl	200003ca <delay_mikro>
	ascii_write_cmd(0xE);
2000103c:	200e      	movs	r0, #14
2000103e:	f7ff ff7b 	bl	20000f38 <ascii_write_cmd>
	delay_mikro(40);
20001042:	2028      	movs	r0, #40	; 0x28
20001044:	f7ff f9c1 	bl	200003ca <delay_mikro>
	ascii_write_cmd(0x4);
20001048:	2004      	movs	r0, #4
2000104a:	f7ff ff75 	bl	20000f38 <ascii_write_cmd>
	delay_mikro(40);
2000104e:	2028      	movs	r0, #40	; 0x28
20001050:	f7ff f9bb 	bl	200003ca <delay_mikro>
}
20001054:	46c0      	nop			; (mov r8, r8)
20001056:	46bd      	mov	sp, r7
20001058:	bd80      	pop	{r7, pc}

2000105a <ascii_write_char>:

void ascii_write_char(char c){
2000105a:	b580      	push	{r7, lr}
2000105c:	b082      	sub	sp, #8
2000105e:	af00      	add	r7, sp, #0
20001060:	0002      	movs	r2, r0
20001062:	1dfb      	adds	r3, r7, #7
20001064:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80){}
20001066:	46c0      	nop			; (mov r8, r8)
20001068:	f7ff ff90 	bl	20000f8c <ascii_read_status>
2000106c:	0003      	movs	r3, r0
2000106e:	001a      	movs	r2, r3
20001070:	2380      	movs	r3, #128	; 0x80
20001072:	4013      	ands	r3, r2
20001074:	2b80      	cmp	r3, #128	; 0x80
20001076:	d0f7      	beq.n	20001068 <ascii_write_char+0xe>
	delay_mikro(8);
20001078:	2008      	movs	r0, #8
2000107a:	f7ff f9a6 	bl	200003ca <delay_mikro>
	ascii_write_data(c);
2000107e:	1dfb      	adds	r3, r7, #7
20001080:	781b      	ldrb	r3, [r3, #0]
20001082:	0018      	movs	r0, r3
20001084:	f7ff ff6d 	bl	20000f62 <ascii_write_data>
	delay_mikro(43);
20001088:	202b      	movs	r0, #43	; 0x2b
2000108a:	f7ff f99e 	bl	200003ca <delay_mikro>
}
2000108e:	46c0      	nop			; (mov r8, r8)
20001090:	46bd      	mov	sp, r7
20001092:	b002      	add	sp, #8
20001094:	bd80      	pop	{r7, pc}

20001096 <ascii_gotoxy>:

void ascii_gotoxy(int x, int y){
20001096:	b580      	push	{r7, lr}
20001098:	b084      	sub	sp, #16
2000109a:	af00      	add	r7, sp, #0
2000109c:	6078      	str	r0, [r7, #4]
2000109e:	6039      	str	r1, [r7, #0]
	int adress = (x - 1 + (y-1)*64);
200010a0:	687b      	ldr	r3, [r7, #4]
200010a2:	1e5a      	subs	r2, r3, #1
200010a4:	683b      	ldr	r3, [r7, #0]
200010a6:	3b01      	subs	r3, #1
200010a8:	019b      	lsls	r3, r3, #6
200010aa:	18d3      	adds	r3, r2, r3
200010ac:	60fb      	str	r3, [r7, #12]
	ascii_write_cmd(0x80 | adress);
200010ae:	68fb      	ldr	r3, [r7, #12]
200010b0:	b25b      	sxtb	r3, r3
200010b2:	2280      	movs	r2, #128	; 0x80
200010b4:	4252      	negs	r2, r2
200010b6:	4313      	orrs	r3, r2
200010b8:	b25b      	sxtb	r3, r3
200010ba:	b2db      	uxtb	r3, r3
200010bc:	0018      	movs	r0, r3
200010be:	f7ff ff3b 	bl	20000f38 <ascii_write_cmd>
}
200010c2:	46c0      	nop			; (mov r8, r8)
200010c4:	46bd      	mov	sp, r7
200010c6:	b004      	add	sp, #16
200010c8:	bd80      	pop	{r7, pc}

200010ca <ascii_init_app>:

void ascii_init_app(void){
200010ca:	b580      	push	{r7, lr}
200010cc:	af00      	add	r7, sp, #0
	*portModerE = 0x55555555;
200010ce:	4b06      	ldr	r3, [pc, #24]	; (200010e8 <ascii_init_app+0x1e>)
200010d0:	4a06      	ldr	r2, [pc, #24]	; (200010ec <ascii_init_app+0x22>)
200010d2:	601a      	str	r2, [r3, #0]
	*portOtyperE = 0x0000;
200010d4:	4b06      	ldr	r3, [pc, #24]	; (200010f0 <ascii_init_app+0x26>)
200010d6:	2200      	movs	r2, #0
200010d8:	801a      	strh	r2, [r3, #0]
	*portOspeedrE = 0x0000;
200010da:	4b06      	ldr	r3, [pc, #24]	; (200010f4 <ascii_init_app+0x2a>)
200010dc:	2200      	movs	r2, #0
200010de:	601a      	str	r2, [r3, #0]

200010e0:	46c0      	nop			; (mov r8, r8)
200010e2:	46bd      	mov	sp, r7
200010e4:	bd80      	pop	{r7, pc}
200010e6:	46c0      	nop			; (mov r8, r8)
200010e8:	40021000 	andmi	r1, r2, r0
200010ec:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
200010f0:	40021004 	andmi	r1, r2, r4
200010f4:	40021008 	andmi	r1, r2, r8

200010f8 <init_keypad>:

#include "delay.h"
#include "keypad_drivers.h"
#include "portDeclare.h"

void init_keypad(void){
200010f8:	b580      	push	{r7, lr}
200010fa:	af00      	add	r7, sp, #0
	#ifdef bargraph
		*((unsigned long *)(0x40021000)) = 0x5555;
	#endif
	*portModerD = 0x55005555;
200010fc:	4b07      	ldr	r3, [pc, #28]	; (2000111c <init_keypad+0x24>)
200010fe:	4a08      	ldr	r2, [pc, #32]	; (20001120 <init_keypad+0x28>)
20001100:	601a      	str	r2, [r3, #0]
	*portOtyperD = 0x0000;
20001102:	4b08      	ldr	r3, [pc, #32]	; (20001124 <init_keypad+0x2c>)
20001104:	2200      	movs	r2, #0
20001106:	801a      	strh	r2, [r3, #0]
	*portOspeedrD = 0x0000;
20001108:	4b07      	ldr	r3, [pc, #28]	; (20001128 <init_keypad+0x30>)
2000110a:	2200      	movs	r2, #0
2000110c:	601a      	str	r2, [r3, #0]
	*portPupdrD = 0x00AA0000;
2000110e:	4b07      	ldr	r3, [pc, #28]	; (2000112c <init_keypad+0x34>)
20001110:	22aa      	movs	r2, #170	; 0xaa
20001112:	0412      	lsls	r2, r2, #16
20001114:	601a      	str	r2, [r3, #0]
	

}
20001116:	46c0      	nop			; (mov r8, r8)
20001118:	46bd      	mov	sp, r7
2000111a:	bd80      	pop	{r7, pc}
2000111c:	40020c00 	andmi	r0, r2, r0, lsl #24
20001120:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20001124:	40020c04 	andmi	r0, r2, r4, lsl #24
20001128:	40020c08 	andmi	r0, r2, r8, lsl #24
2000112c:	40020c0c 	andmi	r0, r2, ip, lsl #24

20001130 <keyb>:

unsigned char keyb(void){
20001130:	b590      	push	{r4, r7, lr}
20001132:	b087      	sub	sp, #28
20001134:	af00      	add	r7, sp, #0
	
	unsigned char count = 0;
20001136:	2317      	movs	r3, #23
20001138:	18fb      	adds	r3, r7, r3
2000113a:	2200      	movs	r2, #0
2000113c:	701a      	strb	r2, [r3, #0]
	unsigned char numpad[] = {0x1,0x2,0x3,0xA,0x4,0x5,0x6,0xB,0x7,0x8,0x9,0xC,0xE,0x0,0xF,0xD};
2000113e:	1d3b      	adds	r3, r7, #4
20001140:	4a27      	ldr	r2, [pc, #156]	; (200011e0 <keyb+0xb0>)
20001142:	ca13      	ldmia	r2!, {r0, r1, r4}
20001144:	c313      	stmia	r3!, {r0, r1, r4}
20001146:	6812      	ldr	r2, [r2, #0]
20001148:	601a      	str	r2, [r3, #0]
	
	for (char i=0; i < 4; i++){
2000114a:	2316      	movs	r3, #22
2000114c:	18fb      	adds	r3, r7, r3
2000114e:	2200      	movs	r2, #0
20001150:	701a      	strb	r2, [r3, #0]
20001152:	e03b      	b.n	200011cc <keyb+0x9c>
		char activeRow = 0x10 << i;
20001154:	2316      	movs	r3, #22
20001156:	18fb      	adds	r3, r7, r3
20001158:	781b      	ldrb	r3, [r3, #0]
2000115a:	2210      	movs	r2, #16
2000115c:	409a      	lsls	r2, r3
2000115e:	2114      	movs	r1, #20
20001160:	187b      	adds	r3, r7, r1
20001162:	701a      	strb	r2, [r3, #0]
		*portOdrHighD = activeRow;
20001164:	4a1f      	ldr	r2, [pc, #124]	; (200011e4 <keyb+0xb4>)
20001166:	187b      	adds	r3, r7, r1
20001168:	781b      	ldrb	r3, [r3, #0]
2000116a:	7013      	strb	r3, [r2, #0]
		char keys = *portIdrHighD & 0x0f;
2000116c:	4b1e      	ldr	r3, [pc, #120]	; (200011e8 <keyb+0xb8>)
2000116e:	781b      	ldrb	r3, [r3, #0]
20001170:	b2da      	uxtb	r2, r3
20001172:	2015      	movs	r0, #21
20001174:	183b      	adds	r3, r7, r0
20001176:	210f      	movs	r1, #15
20001178:	400a      	ands	r2, r1
2000117a:	701a      	strb	r2, [r3, #0]
		
		if (keys != 0){
2000117c:	183b      	adds	r3, r7, r0
2000117e:	781b      	ldrb	r3, [r3, #0]
20001180:	2b00      	cmp	r3, #0
20001182:	d01d      	beq.n	200011c0 <keyb+0x90>
		
			while((keys & 0x1) == 0){
20001184:	e00b      	b.n	2000119e <keyb+0x6e>
				keys = keys >> 1;
20001186:	2215      	movs	r2, #21
20001188:	18bb      	adds	r3, r7, r2
2000118a:	18ba      	adds	r2, r7, r2
2000118c:	7812      	ldrb	r2, [r2, #0]
2000118e:	0852      	lsrs	r2, r2, #1
20001190:	701a      	strb	r2, [r3, #0]
				count++;
20001192:	2117      	movs	r1, #23
20001194:	187b      	adds	r3, r7, r1
20001196:	781a      	ldrb	r2, [r3, #0]
20001198:	187b      	adds	r3, r7, r1
2000119a:	3201      	adds	r2, #1
2000119c:	701a      	strb	r2, [r3, #0]
			while((keys & 0x1) == 0){
2000119e:	2315      	movs	r3, #21
200011a0:	18fb      	adds	r3, r7, r3
200011a2:	781b      	ldrb	r3, [r3, #0]
200011a4:	2201      	movs	r2, #1
200011a6:	4013      	ands	r3, r2
200011a8:	d0ed      	beq.n	20001186 <keyb+0x56>
			}
			return numpad[i*4+count];
200011aa:	2316      	movs	r3, #22
200011ac:	18fb      	adds	r3, r7, r3
200011ae:	781b      	ldrb	r3, [r3, #0]
200011b0:	009a      	lsls	r2, r3, #2
200011b2:	2317      	movs	r3, #23
200011b4:	18fb      	adds	r3, r7, r3
200011b6:	781b      	ldrb	r3, [r3, #0]
200011b8:	18d3      	adds	r3, r2, r3
200011ba:	1d3a      	adds	r2, r7, #4
200011bc:	5cd3      	ldrb	r3, [r2, r3]
200011be:	e00b      	b.n	200011d8 <keyb+0xa8>
	for (char i=0; i < 4; i++){
200011c0:	2116      	movs	r1, #22
200011c2:	187b      	adds	r3, r7, r1
200011c4:	781a      	ldrb	r2, [r3, #0]
200011c6:	187b      	adds	r3, r7, r1
200011c8:	3201      	adds	r2, #1
200011ca:	701a      	strb	r2, [r3, #0]
200011cc:	2316      	movs	r3, #22
200011ce:	18fb      	adds	r3, r7, r3
200011d0:	781b      	ldrb	r3, [r3, #0]
200011d2:	2b03      	cmp	r3, #3
200011d4:	d9be      	bls.n	20001154 <keyb+0x24>
		}
			
	}
	return 0xff;
200011d6:	23ff      	movs	r3, #255	; 0xff
}
200011d8:	0018      	movs	r0, r3
200011da:	46bd      	mov	sp, r7
200011dc:	b007      	add	sp, #28
200011de:	bd90      	pop	{r4, r7, pc}
200011e0:	20002138 	andcs	r2, r0, r8, lsr r1
200011e4:	40020c15 	andmi	r0, r2, r5, lsl ip
200011e8:	40020c11 	andmi	r0, r2, r1, lsl ip

200011ec <out7seg>:

void out7seg(unsigned char num){
200011ec:	b5b0      	push	{r4, r5, r7, lr}
200011ee:	b086      	sub	sp, #24
200011f0:	af00      	add	r7, sp, #0
200011f2:	0002      	movs	r2, r0
200011f4:	1dfb      	adds	r3, r7, #7
200011f6:	701a      	strb	r2, [r3, #0]
	unsigned char segCodes[] = {0x3f,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71};
200011f8:	2008      	movs	r0, #8
200011fa:	183b      	adds	r3, r7, r0
200011fc:	4a06      	ldr	r2, [pc, #24]	; (20001218 <out7seg+0x2c>)
200011fe:	ca32      	ldmia	r2!, {r1, r4, r5}
20001200:	c332      	stmia	r3!, {r1, r4, r5}
20001202:	6812      	ldr	r2, [r2, #0]
20001204:	601a      	str	r2, [r3, #0]
	if (num & 0xf0 == 0){
		*portOdrLowE = 0;
		return;
	}
	*portOdrLowD = segCodes[num];
20001206:	1dfb      	adds	r3, r7, #7
20001208:	781b      	ldrb	r3, [r3, #0]
2000120a:	4904      	ldr	r1, [pc, #16]	; (2000121c <out7seg+0x30>)
2000120c:	183a      	adds	r2, r7, r0
2000120e:	5cd3      	ldrb	r3, [r2, r3]
20001210:	700b      	strb	r3, [r1, #0]
}
20001212:	46bd      	mov	sp, r7
20001214:	b006      	add	sp, #24
20001216:	bdb0      	pop	{r4, r5, r7, pc}
20001218:	20002148 	andcs	r2, r0, r8, asr #2
2000121c:	40020c14 	andmi	r0, r2, r4, lsl ip

20001220 <keyRead>:

unsigned short keyRead(void){
20001220:	b580      	push	{r7, lr}
20001222:	b082      	sub	sp, #8
20001224:	af00      	add	r7, sp, #0
	
	unsigned char count = 0;
20001226:	1d3b      	adds	r3, r7, #4
20001228:	2200      	movs	r2, #0
2000122a:	701a      	strb	r2, [r3, #0]
	unsigned short read = 0;
2000122c:	1dbb      	adds	r3, r7, #6
2000122e:	2200      	movs	r2, #0
20001230:	801a      	strh	r2, [r3, #0]
	for (char i=0; i < 4; i++){
20001232:	1d7b      	adds	r3, r7, #5
20001234:	2200      	movs	r2, #0
20001236:	701a      	strb	r2, [r3, #0]
20001238:	e027      	b.n	2000128a <keyRead+0x6a>
		char activeRow = 0x10 << i;
2000123a:	1d7b      	adds	r3, r7, #5
2000123c:	781b      	ldrb	r3, [r3, #0]
2000123e:	2210      	movs	r2, #16
20001240:	409a      	lsls	r2, r3
20001242:	1cfb      	adds	r3, r7, #3
20001244:	701a      	strb	r2, [r3, #0]
		*portOdrHighD = activeRow;
20001246:	4a16      	ldr	r2, [pc, #88]	; (200012a0 <keyRead+0x80>)
20001248:	1cfb      	adds	r3, r7, #3
2000124a:	781b      	ldrb	r3, [r3, #0]
2000124c:	7013      	strb	r3, [r2, #0]
		unsigned volatile char keys = *portIdrHighD & 0x0f;
2000124e:	4b15      	ldr	r3, [pc, #84]	; (200012a4 <keyRead+0x84>)
20001250:	781b      	ldrb	r3, [r3, #0]
20001252:	b2db      	uxtb	r3, r3
20001254:	220f      	movs	r2, #15
20001256:	4013      	ands	r3, r2
20001258:	b2da      	uxtb	r2, r3
2000125a:	1cbb      	adds	r3, r7, #2
2000125c:	701a      	strb	r2, [r3, #0]
		read |= (keys<<(i*4));
2000125e:	1cbb      	adds	r3, r7, #2
20001260:	781b      	ldrb	r3, [r3, #0]
20001262:	b2db      	uxtb	r3, r3
20001264:	001a      	movs	r2, r3
20001266:	1d7b      	adds	r3, r7, #5
20001268:	781b      	ldrb	r3, [r3, #0]
2000126a:	009b      	lsls	r3, r3, #2
2000126c:	409a      	lsls	r2, r3
2000126e:	0013      	movs	r3, r2
20001270:	b21a      	sxth	r2, r3
20001272:	1dbb      	adds	r3, r7, #6
20001274:	2100      	movs	r1, #0
20001276:	5e5b      	ldrsh	r3, [r3, r1]
20001278:	4313      	orrs	r3, r2
2000127a:	b21a      	sxth	r2, r3
2000127c:	1dbb      	adds	r3, r7, #6
2000127e:	801a      	strh	r2, [r3, #0]
	for (char i=0; i < 4; i++){
20001280:	1d7b      	adds	r3, r7, #5
20001282:	781a      	ldrb	r2, [r3, #0]
20001284:	1d7b      	adds	r3, r7, #5
20001286:	3201      	adds	r2, #1
20001288:	701a      	strb	r2, [r3, #0]
2000128a:	1d7b      	adds	r3, r7, #5
2000128c:	781b      	ldrb	r3, [r3, #0]
2000128e:	2b03      	cmp	r3, #3
20001290:	d9d3      	bls.n	2000123a <keyRead+0x1a>
			}
			return numpad[i*4+count];
		}*/
			
	}
	return read;
20001292:	1dbb      	adds	r3, r7, #6
20001294:	881b      	ldrh	r3, [r3, #0]
20001296:	0018      	movs	r0, r3
20001298:	46bd      	mov	sp, r7
2000129a:	b002      	add	sp, #8
2000129c:	bd80      	pop	{r7, pc}
2000129e:	46c0      	nop			; (mov r8, r8)
200012a0:	40020c15 	andmi	r0, r2, r5, lsl ip
200012a4:	40020c11 	andmi	r0, r2, r1, lsl ip

200012a8 <buffer>:
	...

20001734 <buffer>:
	...

20001bc0 <buffer_changeLog>:
	...

20001c40 <buffer_display>:
	...

20002040 <ball_geometry>:
20002040:	0000000c 	andeq	r0, r0, ip
20002044:	00000004 	andeq	r0, r0, r4
20002048:	00000004 	andeq	r0, r0, r4
2000204c:	02000100 	andeq	r0, r0, #0, 2
20002050:	01010001 	tsteq	r1, r1
20002054:	03010201 	movweq	r0, #4609	; 0x1201
20002058:	01020002 	tsteq	r2, r2
2000205c:	03020202 	movweq	r0, #8706	; 0x2202
20002060:	01030103 	tsteq	r3, r3, lsl #2
	...

20002074 <ball>:
20002074:	20002040 	andcs	r2, r0, r0, asr #32
	...
20002080:	00000001 	andeq	r0, r0, r1
20002084:	00000001 	andeq	r0, r0, r1
20002088:	20000cbf 			; <UNDEFINED> instruction: 0x20000cbf
2000208c:	20000d23 	andcs	r0, r0, r3, lsr #26
20002090:	20000d7f 	andcs	r0, r0, pc, ror sp
20002094:	20000c7f 	andcs	r0, r0, pc, ror ip
20002098:	20000c9f 	mulcs	r0, pc, ip	; <UNPREDICTABLE>

2000209c <paddle_geometry>:
2000209c:	00000008 	andeq	r0, r0, r8
200020a0:	00000001 	andeq	r0, r0, r1
200020a4:	00000008 	andeq	r0, r0, r8
200020a8:	01000000 	mrseq	r0, (UNDEF: 0)
200020ac:	03000200 	movweq	r0, #512	; 0x200
200020b0:	05000400 	streq	r0, [r0, #-1024]	; 0xfffffc00
200020b4:	07000600 	streq	r0, [r0, -r0, lsl #12]
	...

200020d0 <p1paddle>:
200020d0:	2000209c 	mulcs	r0, ip, r0
	...
200020dc:	00000002 	andeq	r0, r0, r2
200020e0:	0000001c 	andeq	r0, r0, ip, lsl r0
200020e4:	20000cbf 			; <UNDEFINED> instruction: 0x20000cbf
200020e8:	20000d23 	andcs	r0, r0, r3, lsr #26
200020ec:	20000d7f 	andcs	r0, r0, pc, ror sp
200020f0:	20000c7f 	andcs	r0, r0, pc, ror ip
200020f4:	20000c9f 	mulcs	r0, pc, ip	; <UNPREDICTABLE>

200020f8 <p2paddle>:
200020f8:	2000209c 	mulcs	r0, ip, r0
	...
20002104:	0000007f 	andeq	r0, r0, pc, ror r0
20002108:	0000001c 	andeq	r0, r0, ip, lsl r0
2000210c:	20000cbf 			; <UNDEFINED> instruction: 0x20000cbf
20002110:	20000d23 	andcs	r0, r0, r3, lsr #26
20002114:	20000d7f 	andcs	r0, r0, pc, ror sp
20002118:	20000c7f 	andcs	r0, r0, pc, ror ip
2000211c:	20000c9f 	mulcs	r0, pc, ip	; <UNPREDICTABLE>
20002120:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
20002124:	31207265 			; <UNDEFINED> instruction: 0x31207265
20002128:	0000203a 	andeq	r2, r0, sl, lsr r0
2000212c:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
20002130:	32207265 	eorcc	r7, r0, #1342177286	; 0x50000006
20002134:	0000203a 	andeq	r2, r0, sl, lsr r0
20002138:	0a030201 	beq	200c2944 <p2paddle+0xc084c>
2000213c:	0b060504 	bleq	20183554 <p2paddle+0x18145c>
20002140:	0c090807 	stceq	8, cr0, [r9], {7}
20002144:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20002114 <p2paddle+0x1c>
20002148:	4f5b063f 	svcmi	0x005b063f
2000214c:	077d6d66 	ldrbeq	r6, [sp, -r6, ror #26]!
20002150:	7c776f7f 	ldclvc	15, cr6, [r7], #-508	; 0xfffffe04
20002154:	71795e39 	cmnvc	r9, r9, lsr lr

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000003c7 	andeq	r0, r0, r7, asr #7
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000045 	andeq	r0, r0, r5, asr #32
      10:	0001830c 	andeq	r8, r1, ip, lsl #6
      14:	0000eb00 	andeq	lr, r0, r0, lsl #22
	...
      24:	01740200 	cmneq	r4, r0, lsl #4
      28:	048c0000 	streq	r0, [ip], #0
      2c:	00730b02 	rsbseq	r0, r3, r2, lsl #22
      30:	91030000 	mrsls	r0, (UNDEF: 3)
      34:	02000002 	andeq	r0, r0, #2
      38:	0000730c 	andeq	r7, r0, ip, lsl #6
      3c:	66040000 	strvs	r0, [r4], -r0
      40:	02000002 	andeq	r0, r0, #2
      44:	0000970d 	andeq	r9, r0, sp, lsl #14
      48:	04040000 	streq	r0, [r4], #-0
      4c:	0000017e 	andeq	r0, r0, lr, ror r1
      50:	00b80e02 	adcseq	r0, r8, r2, lsl #28
      54:	04800000 	streq	r0, [r0], #0
      58:	00033b04 	andeq	r3, r3, r4, lsl #22
      5c:	df0f0200 	svcle	0x000f0200
      60:	84000000 	strhi	r0, [r0], #-0
      64:	02590404 	subseq	r0, r9, #4, 8	; 0x4000000
      68:	10020000 	andne	r0, r2, r0
      6c:	000000b8 	strheq	r0, [r0], -r8
      70:	05000488 	streq	r0, [r0, #-1160]	; 0xfffffb78
      74:	00000090 	muleq	r0, r0, r0
      78:	00000089 	andeq	r0, r0, r9, lsl #1
      7c:	00008906 	andeq	r8, r0, r6, lsl #18
      80:	89067f00 	stmdbhi	r6, {r8, r9, sl, fp, ip, sp, lr}
      84:	07000000 	streq	r0, [r0, -r0]
      88:	07040700 	streq	r0, [r4, -r0, lsl #14]
      8c:	00000029 	andeq	r0, r0, r9, lsr #32
      90:	e6080107 	str	r0, [r8], -r7, lsl #2
      94:	05000000 	streq	r0, [r0, #-0]
      98:	00000090 	muleq	r0, r0, r0
      9c:	000000a7 	andeq	r0, r0, r7, lsr #1
      a0:	00008906 	andeq	r8, r0, r6, lsl #18
      a4:	08007f00 	stmdaeq	r0, {r8, r9, sl, fp, ip, sp, lr}
      a8:	000000b2 	strheq	r0, [r0], -r2
      ac:	0000b209 	andeq	fp, r0, r9, lsl #4
      b0:	040a0000 	streq	r0, [sl], #-0
      b4:	00000025 	andeq	r0, r0, r5, lsr #32
      b8:	00a7040a 	adceq	r0, r7, sl, lsl #8
      bc:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
      c0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
      c4:	000000b2 	strheq	r0, [r0], -r2
      c8:	0000d809 	andeq	sp, r0, r9, lsl #16
      cc:	00d80900 	sbcseq	r0, r8, r0, lsl #18
      d0:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
      d4:	00000000 	andeq	r0, r0, r0
      d8:	dd080107 	stfles	f0, [r8, #-28]	; 0xffffffe4
      dc:	0a000000 	beq	e4 <startup-0x1fffff1c>
      e0:	0000be04 	andeq	fp, r0, r4, lsl #28
      e4:	03470b00 	movteq	r0, #31488	; 0x7b00
      e8:	12020000 	andne	r0, r2, #0
      ec:	00000025 	andeq	r0, r0, r5, lsr #32
      f0:	0001770c 	andeq	r7, r1, ip, lsl #14
      f4:	e51e0200 	ldr	r0, [lr, #-512]	; 0xfffffe00
      f8:	05000000 	streq	r0, [r0, #-0]
      fc:	0012a803 	andseq	sl, r2, r3, lsl #16
     100:	03020d20 	movweq	r0, #11552	; 0x2d20
     104:	00011e05 	andeq	r1, r1, r5, lsl #28
     108:	00780e00 	rsbseq	r0, r8, r0, lsl #28
     10c:	00d80603 	sbcseq	r0, r8, r3, lsl #12
     110:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     114:	07030079 	smlsdxeq	r3, r9, r0, r0
     118:	000000d8 	ldrdeq	r0, [r0], -r8
     11c:	180b0001 	stmdane	fp, {r0}
     120:	03000000 	movweq	r0, #0
     124:	00010108 	andeq	r0, r1, r8, lsl #2
     128:	03340d00 	teqeq	r4, #0, 26
     12c:	00016119 	andeq	r6, r1, r9, lsl r1
     130:	01d50300 	bicseq	r0, r5, r0, lsl #6
     134:	1a030000 	bne	c013c <startup-0x1ff3fec4>
     138:	00000161 	andeq	r0, r0, r1, ror #2
     13c:	01630300 	cmneq	r3, r0, lsl #6
     140:	1b030000 	blne	c0148 <startup-0x1ff3feb8>
     144:	00000161 	andeq	r0, r0, r1, ror #2
     148:	01690304 	cmneq	r9, r4, lsl #6
     14c:	1c030000 	stcne	0, cr0, [r3], {-0}
     150:	00000161 	andeq	r0, r0, r1, ror #2
     154:	78700e08 	ldmdavc	r0!, {r3, r9, sl, fp}^
     158:	681d0300 	ldmdavs	sp, {r8, r9}
     15c:	0c000001 	stceq	0, cr0, [r0], {1}
     160:	05040f00 	streq	r0, [r4, #-3840]	; 0xfffff100
     164:	00746e69 	rsbseq	r6, r4, r9, ror #28
     168:	00011e05 	andeq	r1, r1, r5, lsl #28
     16c:	00017800 	andeq	r7, r1, r0, lsl #16
     170:	00890600 	addeq	r0, r9, r0, lsl #12
     174:	00130000 	andseq	r0, r3, r0
     178:	0001430b 	andeq	r4, r1, fp, lsl #6
     17c:	291e0300 	ldmdbcs	lr, {r8, r9}
     180:	0b000001 	bleq	18c <startup-0x1ffffe74>
     184:	000001e4 	andeq	r0, r0, r4, ror #3
     188:	018e1e03 	orreq	r1, lr, r3, lsl #28
     18c:	040a0000 	streq	r0, [sl], #-0
     190:	00000129 	andeq	r0, r0, r9, lsr #2
     194:	0001d010 	andeq	sp, r1, r0, lsl r0
     198:	22032800 	andcs	r2, r3, #0, 16
     19c:	00000219 	andeq	r0, r0, r9, lsl r2
     1a0:	6f65670e 	svcvs	0x0065670e
     1a4:	83230300 			; <UNDEFINED> instruction: 0x83230300
     1a8:	00000001 	andeq	r0, r0, r1
     1ac:	00003603 	andeq	r3, r0, r3, lsl #12
     1b0:	61240300 			; <UNDEFINED> instruction: 0x61240300
     1b4:	04000001 	streq	r0, [r0], #-1
     1b8:	00003b03 	andeq	r3, r0, r3, lsl #22
     1bc:	61240300 			; <UNDEFINED> instruction: 0x61240300
     1c0:	08000001 	stmdaeq	r0, {r0}
     1c4:	00011c03 	andeq	r1, r1, r3, lsl #24
     1c8:	61250300 			; <UNDEFINED> instruction: 0x61250300
     1cc:	0c000001 	stceq	0, cr0, [r0], {1}
     1d0:	00012103 	andeq	r2, r1, r3, lsl #2
     1d4:	61250300 			; <UNDEFINED> instruction: 0x61250300
     1d8:	10000001 	andne	r0, r0, r1
     1dc:	00017e03 	andeq	r7, r1, r3, lsl #28
     1e0:	2a260300 	bcs	980de8 <startup-0x1f67f218>
     1e4:	14000002 	strne	r0, [r0], #-2
     1e8:	00025903 	andeq	r5, r2, r3, lsl #18
     1ec:	2a270300 	bcs	9c0df4 <startup-0x1f63f20c>
     1f0:	18000002 	stmdane	r0, {r1}
     1f4:	0001b403 	andeq	fp, r1, r3, lsl #8
     1f8:	2a280300 	bcs	a00e00 <startup-0x1f5ff200>
     1fc:	1c000002 	stcne	0, cr0, [r0], {2}
     200:	00011203 	andeq	r1, r1, r3, lsl #4
     204:	45290300 	strmi	r0, [r9, #-768]!	; 0xfffffd00
     208:	20000002 	andcs	r0, r0, r2
     20c:	0003f703 	andeq	pc, r3, r3, lsl #14
     210:	5b2a0300 	blpl	a80e18 <startup-0x1f57f1e8>
     214:	24000002 	strcs	r0, [r0], #-2
     218:	02240800 	eoreq	r0, r4, #0, 16
     21c:	24090000 	strcs	r0, [r9], #-0
     220:	00000002 	andeq	r0, r0, r2
     224:	0194040a 	orrseq	r0, r4, sl, lsl #8
     228:	040a0000 	streq	r0, [sl], #-0
     22c:	00000219 	andeq	r0, r0, r9, lsl r2
     230:	00024508 	andeq	r4, r2, r8, lsl #10
     234:	02240900 	eoreq	r0, r4, #0, 18
     238:	61090000 	mrsvs	r0, (UNDEF: 9)
     23c:	09000001 	stmdbeq	r0, {r0}
     240:	00000161 	andeq	r0, r0, r1, ror #2
     244:	30040a00 	andcc	r0, r4, r0, lsl #20
     248:	08000002 	stmdaeq	r0, {r1}
     24c:	0000025b 	andeq	r0, r0, fp, asr r2
     250:	00022409 	andeq	r2, r2, r9, lsl #8
     254:	011e0900 	tsteq	lr, r0, lsl #18
     258:	0a000000 	beq	260 <startup-0x1ffffda0>
     25c:	00024b04 	andeq	r4, r2, r4, lsl #22
     260:	04a20b00 	strteq	r0, [r2], #2816	; 0xb00
     264:	2b030000 	blcs	c026c <startup-0x1ff3fd94>
     268:	00000194 	muleq	r0, r4, r1
     26c:	0000080b 	andeq	r0, r0, fp, lsl #16
     270:	242b0300 	strtcs	r0, [fp], #-768	; 0xfffffd00
     274:	11000002 	tstne	r0, r2
     278:	00000126 	andeq	r0, r0, r6, lsr #2
     27c:	01781d01 	cmneq	r8, r1, lsl #26
     280:	03050000 	movweq	r0, #20480	; 0x5000
     284:	20002040 	andcs	r2, r0, r0, asr #32
     288:	0000400c 	andeq	r4, r0, ip
     28c:	61240100 			; <UNDEFINED> instruction: 0x61240100
     290:	05000002 	streq	r0, [r0, #-2]
     294:	00207403 	eoreq	r7, r0, r3, lsl #8
     298:	013c1120 	teqeq	ip, r0, lsr #2
     29c:	2f010000 	svccs	0x00010000
     2a0:	00000178 	andeq	r0, r0, r8, ror r1
     2a4:	209c0305 	addscs	r0, ip, r5, lsl #6
     2a8:	510c2000 	mrspl	r2, (UNDEF: 12)
     2ac:	01000001 	tsteq	r0, r1
     2b0:	00026133 	andeq	r6, r2, r3, lsr r1
     2b4:	d0030500 	andle	r0, r3, r0, lsl #10
     2b8:	0c200020 	stceq	0, cr0, [r0], #-128	; 0xffffff80
     2bc:	0000015a 	andeq	r0, r0, sl, asr r1
     2c0:	02613d01 	rsbeq	r3, r1, #1, 26	; 0x40
     2c4:	03050000 	movweq	r0, #20480	; 0x5000
     2c8:	200020f8 	strdcs	r2, [r0], -r8
     2cc:	00014c12 	andeq	r4, r1, r2, lsl ip
     2d0:	10480100 	subne	r0, r8, r0, lsl #2
     2d4:	6c200000 	stcvs	0, cr0, [r0], #-0
     2d8:	01000003 	tsteq	r0, r3
     2dc:	00037b9c 	muleq	r3, ip, fp
     2e0:	016f1300 	cmneq	pc, r0, lsl #6
     2e4:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
     2e8:	00000161 	andeq	r0, r0, r1, ror #2
     2ec:	7fb49103 	svcvc	0x00b49103
     2f0:	00001e13 	andeq	r1, r0, r3, lsl lr
     2f4:	7b480100 	blvc	12006fc <startup-0x1edff904>
     2f8:	03000003 	movweq	r0, #3
     2fc:	147fb091 	ldrbtne	fp, [pc], #-145	; 304 <startup-0x1ffffcfc>
     300:	51010073 	tstpl	r1, r3, ror r0
     304:	00000381 	andeq	r0, r0, r1, lsl #7
     308:	0c6c9102 	stfeqp	f1, [ip], #-8
     30c:	000001c0 	andeq	r0, r0, r0, asr #3
     310:	03875201 	orreq	r5, r7, #268435456	; 0x10000000
     314:	91020000 	mrsls	r0, (UNDEF: 2)
     318:	01c80c50 	biceq	r0, r8, r0, asr ip
     31c:	57010000 	strpl	r0, [r1, -r0]
     320:	00000387 	andeq	r0, r0, r7, lsl #7
     324:	0c449102 	stfeqp	f1, [r4], {2}
     328:	000003e6 	andeq	r0, r0, r6, ror #7
     32c:	03976801 	orrseq	r6, r7, #65536	; 0x10000
     330:	91020000 	mrsls	r0, (UNDEF: 2)
     334:	01b90c40 			; <UNDEFINED> instruction: 0x01b90c40
     338:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
     33c:	000003a7 	andeq	r0, r0, r7, lsr #7
     340:	0c689102 	stfeqp	f1, [r8], #-8
     344:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     348:	03b46a01 			; <UNDEFINED> instruction: 0x03b46a01
     34c:	91030000 	mrsls	r0, (UNDEF: 3)
     350:	70147fbe 			; <UNDEFINED> instruction: 0x70147fbe
     354:	6c6e0100 	stfvse	f0, [lr], #-0
     358:	02000002 	andeq	r0, r0, #2
     35c:	100c6491 	mulne	ip, r1, r4
     360:	01000000 	mrseq	r0, (UNDEF: 0)
     364:	00026c6f 	andeq	r6, r2, pc, ror #24
     368:	60910200 	addsvs	r0, r1, r0, lsl #4
     36c:	0001340c 	andeq	r3, r1, ip, lsl #8
     370:	6c700100 	ldfvse	f0, [r0], #-0
     374:	02000002 	andeq	r0, r0, #2
     378:	0a005c91 	beq	175c4 <startup-0x1ffe8a3c>
     37c:	00038104 	andeq	r8, r3, r4, lsl #2
     380:	90040a00 	andls	r0, r4, r0, lsl #20
     384:	05000000 	streq	r0, [r0, #-0]
     388:	00000090 	muleq	r0, r0, r0
     38c:	00000397 	muleq	r0, r7, r3
     390:	00008906 	andeq	r8, r0, r6, lsl #18
     394:	05000a00 	streq	r0, [r0, #-2560]	; 0xfffff600
     398:	000000d8 	ldrdeq	r0, [r0], -r8
     39c:	000003a7 	andeq	r0, r0, r7, lsr #7
     3a0:	00008906 	andeq	r8, r0, r6, lsl #18
     3a4:	0a000100 	beq	7ac <startup-0x1ffff854>
     3a8:	0000d804 	andeq	sp, r0, r4, lsl #16
     3ac:	07020700 	streq	r0, [r2, -r0, lsl #14]
     3b0:	00000023 	andeq	r0, r0, r3, lsr #32
     3b4:	0003ad15 	andeq	sl, r3, r5, lsl sp
     3b8:	00001600 	andeq	r1, r0, r0, lsl #12
     3bc:	07010000 	streq	r0, [r1, -r0]
     3c0:	20000000 	andcs	r0, r0, r0
     3c4:	0000000c 	andeq	r0, r0, ip
     3c8:	98009c01 	stmdals	r0, {r0, sl, fp, ip, pc}
     3cc:	04000000 	streq	r0, [r0], #-0
     3d0:	00013100 	andeq	r3, r1, r0, lsl #2
     3d4:	45010400 	strmi	r0, [r1, #-1024]	; 0xfffffc00
     3d8:	0c000000 	stceq	0, cr0, [r0], {-0}
     3dc:	000001ee 	andeq	r0, r0, lr, ror #3
     3e0:	000000eb 	andeq	r0, r0, fp, ror #1
     3e4:	2000037c 	andcs	r0, r0, ip, ror r3
     3e8:	0000006e 	andeq	r0, r0, lr, rrx
     3ec:	000000ef 	andeq	r0, r0, pc, ror #1
     3f0:	dd080102 	stfles	f0, [r8, #-8]
     3f4:	03000000 	movweq	r0, #0
     3f8:	00000234 	andeq	r0, r0, r4, lsr r2
     3fc:	03da2401 	bicseq	r2, sl, #16777216	; 0x1000000
     400:	00102000 	andseq	r2, r0, r0
     404:	9c010000 	stcls	0, cr0, [r1], {-0}
     408:	0000004f 	andeq	r0, r0, pc, asr #32
     40c:	00736d04 	rsbseq	r6, r3, r4, lsl #26
     410:	004f2401 	subeq	r2, pc, r1, lsl #8
     414:	91020000 	mrsls	r0, (UNDEF: 2)
     418:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
     41c:	00002907 	andeq	r2, r0, r7, lsl #18
     420:	021d0300 	andseq	r0, sp, #0, 6
     424:	1b010000 	blne	4042c <startup-0x1ffbfbd4>
     428:	200003ca 	andcs	r0, r0, sl, asr #7
     42c:	00000010 	andeq	r0, r0, r0, lsl r0
     430:	00799c01 	rsbseq	r9, r9, r1, lsl #24
     434:	75040000 	strvc	r0, [r4, #-0]
     438:	1b010073 	blne	4060c <startup-0x1ffbf9f4>
     43c:	0000004f 	andeq	r0, r0, pc, asr #32
     440:	00749102 	rsbseq	r9, r4, r2, lsl #2
     444:	00024005 	andeq	r4, r2, r5
     448:	c00f0100 	andgt	r0, pc, r0, lsl #2
     44c:	0a200003 	beq	800460 <startup-0x1f7ffba0>
     450:	01000000 	mrseq	r0, (UNDEF: 0)
     454:	0229059c 	eoreq	r0, r9, #156, 10	; 0x27000000
     458:	05010000 	streq	r0, [r1, #-0]
     45c:	2000037c 	andcs	r0, r0, ip, ror r3
     460:	00000044 	andeq	r0, r0, r4, asr #32
     464:	7e009c01 	cdpvc	12, 0, cr9, cr0, cr1, {0}
     468:	04000004 	streq	r0, [r0], #-4
     46c:	00019100 	andeq	r9, r1, r0, lsl #2
     470:	45010400 	strmi	r0, [r1, #-1024]	; 0xfffffc00
     474:	0c000000 	stceq	0, cr0, [r0], {-0}
     478:	000002e1 	andeq	r0, r0, r1, ror #5
     47c:	000000eb 	andeq	r0, r0, fp, ror #1
     480:	200003ec 	andcs	r0, r0, ip, ror #7
     484:	00000888 	andeq	r0, r0, r8, lsl #17
     488:	00000161 	andeq	r0, r0, r1, ror #2
     48c:	00017402 	andeq	r7, r1, r2, lsl #8
     490:	02048c00 	andeq	r8, r4, #0, 24
     494:	0000730b 	andeq	r7, r0, fp, lsl #6
     498:	02910300 	addseq	r0, r1, #0, 6
     49c:	0c020000 	stceq	0, cr0, [r2], {-0}
     4a0:	00000073 	andeq	r0, r0, r3, ror r0
     4a4:	02660400 	rsbeq	r0, r6, #0, 8
     4a8:	0d020000 	stceq	0, cr0, [r2, #-0]
     4ac:	00000097 	muleq	r0, r7, r0
     4b0:	7e040400 	cfcpysvc	mvf0, mvf4
     4b4:	02000001 	andeq	r0, r0, #1
     4b8:	0000b80e 	andeq	fp, r0, lr, lsl #16
     4bc:	04048000 	streq	r8, [r4], #-0
     4c0:	0000033b 	andeq	r0, r0, fp, lsr r3
     4c4:	00df0f02 	sbcseq	r0, pc, r2, lsl #30
     4c8:	04840000 	streq	r0, [r4], #0
     4cc:	00025904 	andeq	r5, r2, r4, lsl #18
     4d0:	b8100200 	ldmdalt	r0, {r9}
     4d4:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
     4d8:	90050004 	andls	r0, r5, r4
     4dc:	89000000 	stmdbhi	r0, {}	; <UNPREDICTABLE>
     4e0:	06000000 	streq	r0, [r0], -r0
     4e4:	00000089 	andeq	r0, r0, r9, lsl #1
     4e8:	0089067f 	addeq	r0, r9, pc, ror r6
     4ec:	00070000 	andeq	r0, r7, r0
     4f0:	29070407 	stmdbcs	r7, {r0, r1, r2, sl}
     4f4:	07000000 	streq	r0, [r0, -r0]
     4f8:	00e60801 	rsceq	r0, r6, r1, lsl #16
     4fc:	90050000 	andls	r0, r5, r0
     500:	a7000000 	strge	r0, [r0, -r0]
     504:	06000000 	streq	r0, [r0], -r0
     508:	00000089 	andeq	r0, r0, r9, lsl #1
     50c:	b208007f 	andlt	r0, r8, #127	; 0x7f
     510:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     514:	000000b2 	strheq	r0, [r0], -r2
     518:	25040a00 	strcs	r0, [r4, #-2560]	; 0xfffff600
     51c:	0a000000 	beq	524 <startup-0x1ffffadc>
     520:	0000a704 	andeq	sl, r0, r4, lsl #14
     524:	00d80800 	sbcseq	r0, r8, r0, lsl #16
     528:	b2090000 	andlt	r0, r9, #0
     52c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     530:	000000d8 	ldrdeq	r0, [r0], -r8
     534:	0000d809 	andeq	sp, r0, r9, lsl #16
     538:	00d80900 	sbcseq	r0, r8, r0, lsl #18
     53c:	07000000 	streq	r0, [r0, -r0]
     540:	00dd0801 	sbcseq	r0, sp, r1, lsl #16
     544:	040a0000 	streq	r0, [sl], #-0
     548:	000000be 	strheq	r0, [r0], -lr
     54c:	0003470b 	andeq	r4, r3, fp, lsl #14
     550:	25120200 	ldrcs	r0, [r2, #-512]	; 0xfffffe00
     554:	0b000000 	bleq	55c <startup-0x1ffffaa4>
     558:	00000346 	andeq	r0, r0, r6, asr #6
     55c:	00b21202 	adcseq	r1, r2, r2, lsl #4
     560:	770c0000 	strvc	r0, [ip, -r0]
     564:	02000001 	andeq	r0, r0, #1
     568:	0000e51e 	andeq	lr, r0, lr, lsl r5
     56c:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
     570:	0d200017 	stceq	0, cr0, [r0, #-92]!	; 0xffffffa4
     574:	00d80107 	sbcseq	r0, r8, r7, lsl #2
     578:	1d030000 	stcne	0, cr0, [r3, #-0]
     57c:	00000144 	andeq	r0, r0, r4, asr #2
     580:	0003410e 	andeq	r4, r3, lr, lsl #2
     584:	b70e0100 	strlt	r0, [lr, -r0, lsl #2]
     588:	02000002 	andeq	r0, r0, #2
     58c:	0003570e 	andeq	r5, r3, lr, lsl #14
     590:	510e0400 	tstpl	lr, r0, lsl #8
     594:	08000003 	stmdaeq	r0, {r0, r1}
     598:	00024c0e 	andeq	r4, r2, lr, lsl #24
     59c:	160e1000 	strne	r1, [lr], -r0
     5a0:	20000003 	andcs	r0, r0, r3
     5a4:	455f420f 	ldrbmi	r4, [pc, #-527]	; 39d <startup-0x1ffffc63>
     5a8:	10004000 	andne	r4, r0, r0
     5ac:	0000028a 	andeq	r0, r0, sl, lsl #5
     5b0:	0073d201 	rsbseq	sp, r3, r1, lsl #4
     5b4:	03050000 	movweq	r0, #20480	; 0x5000
     5b8:	20001c40 	andcs	r1, r0, r0, asr #24
     5bc:	00025f10 	andeq	r5, r2, r0, lsl pc
     5c0:	97d30100 	ldrbls	r0, [r3, r0, lsl #2]
     5c4:	05000000 	streq	r0, [r0, #-0]
     5c8:	001bc003 	andseq	ip, fp, r3
     5cc:	02521120 	subseq	r1, r2, #32, 2
     5d0:	db010000 	blle	405d8 <startup-0x1ffbfa28>
     5d4:	20000c20 	andcs	r0, r0, r0, lsr #24
     5d8:	00000054 	andeq	r0, r0, r4, asr r0
     5dc:	01b69c01 			; <UNDEFINED> instruction: 0x01b69c01
     5e0:	99120000 	ldmdbls	r2, {}	; <UNPREDICTABLE>
     5e4:	01000002 	tsteq	r0, r2
     5e8:	0000f0db 	ldrdeq	pc, [r0], -fp
     5ec:	6c910200 	lfmvs	f0, 4, [r1], {0}
     5f0:	000c2813 	andeq	r2, ip, r3, lsl r8
     5f4:	00004420 	andeq	r4, r0, r0, lsr #8
     5f8:	00691400 	rsbeq	r1, r9, r0, lsl #8
     5fc:	01b6dc01 			; <UNDEFINED> instruction: 0x01b6dc01
     600:	91020000 	mrsls	r0, (UNDEF: 2)
     604:	0c3e1374 	ldceq	3, cr1, [lr], #-464	; 0xfffffe30
     608:	00222000 	eoreq	r2, r2, r0
     60c:	6a140000 	bvs	500614 <startup-0x1faff9ec>
     610:	b6de0100 	ldrblt	r0, [lr], r0, lsl #2
     614:	02000001 	andeq	r0, r0, #1
     618:	00007091 	muleq	r0, r1, r0
     61c:	05041500 	streq	r1, [r4, #-1280]	; 0xfffffb00
     620:	00746e69 	rsbseq	r6, r4, r9, ror #28
     624:	00037911 	andeq	r7, r3, r1, lsl r9
     628:	fcbe0100 	ldc2	1, cr0, [lr]
     62c:	2420000a 	strtcs	r0, [r0], #-10
     630:	01000001 	tsteq	r0, r1
     634:	0002239c 	muleq	r2, ip, r3
     638:	029a1200 	addseq	r1, sl, #0, 4
     63c:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
     640:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     644:	16649102 	strbtne	r9, [r4], -r2, lsl #2
     648:	be010078 	mcrlt	0, 0, r0, cr1, cr8, {3}
     64c:	000000d8 	ldrdeq	r0, [r0], -r8
     650:	16639102 	strbtne	r9, [r3], -r2, lsl #2
     654:	be010079 	mcrlt	0, 0, r0, cr1, cr9, {3}
     658:	000000d8 	ldrdeq	r0, [r0], -r8
     65c:	16629102 	strbtne	r9, [r2], -r2, lsl #2
     660:	00746573 	rsbseq	r6, r4, r3, ror r5
     664:	00d8be01 	sbcseq	fp, r8, r1, lsl #28
     668:	91020000 	mrsls	r0, (UNDEF: 2)
     66c:	05370c61 	ldreq	r0, [r7, #-3169]!	; 0xfffff39f
     670:	bf010000 	svclt	0x00010000
     674:	00000090 	muleq	r0, r0, r0
     678:	0c6f9102 	stfeqp	f1, [pc], #-8	; 678 <startup-0x1ffff988>
     67c:	00000360 	andeq	r0, r0, r0, ror #6
     680:	0090c801 	addseq	ip, r0, r1, lsl #16
     684:	91020000 	mrsls	r0, (UNDEF: 2)
     688:	2517006e 	ldrcs	r0, [r7, #-110]	; 0xffffff92
     68c:	01000003 	tsteq	r0, r3
     690:	0009a4a2 	andeq	sl, r9, r2, lsr #9
     694:	00015820 	andeq	r5, r1, r0, lsr #16
     698:	9f9c0100 	svcls	0x009c0100
     69c:	12000002 	andne	r0, r0, #2
     6a0:	000003c3 	andeq	r0, r0, r3, asr #7
     6a4:	00f0a201 	rscseq	sl, r0, r1, lsl #4
     6a8:	91020000 	mrsls	r0, (UNDEF: 2)
     6ac:	0078145c 	rsbseq	r1, r8, ip, asr r4
     6b0:	00d8a501 	sbcseq	sl, r8, r1, lsl #10
     6b4:	91020000 	mrsls	r0, (UNDEF: 2)
     6b8:	00691467 	rsbeq	r1, r9, r7, ror #8
     6bc:	00d8a501 	sbcseq	sl, r8, r1, lsl #10
     6c0:	91020000 	mrsls	r0, (UNDEF: 2)
     6c4:	006a1466 	rsbeq	r1, sl, r6, ror #8
     6c8:	00d8a501 	sbcseq	sl, r8, r1, lsl #10
     6cc:	91020000 	mrsls	r0, (UNDEF: 2)
     6d0:	05370c65 	ldreq	r0, [r7, #-3173]!	; 0xfffff39b
     6d4:	a6010000 	strge	r0, [r1], -r0
     6d8:	000000d8 	ldrdeq	r0, [r0], -r8
     6dc:	0c649102 	stfeqp	f1, [r4], #-8
     6e0:	00000285 	andeq	r0, r0, r5, lsl #5
     6e4:	00d8a601 	sbcseq	sl, r8, r1, lsl #12
     6e8:	91020000 	mrsls	r0, (UNDEF: 2)
     6ec:	09c01362 	stmibeq	r0, {r1, r5, r6, r8, r9, ip}^
     6f0:	01022000 	mrseq	r2, (UNDEF: 2)
     6f4:	700c0000 	andvc	r0, ip, r0
     6f8:	01000002 	tsteq	r0, r2
     6fc:	000090a9 	andeq	r9, r0, r9, lsr #1
     700:	63910200 	orrsvs	r0, r1, #0, 4
     704:	33170000 	tstcc	r7, #0
     708:	01000003 	tsteq	r0, r3
     70c:	00086887 	andeq	r6, r8, r7, lsl #17
     710:	00013c20 	andeq	r3, r1, r0, lsr #24
     714:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
     718:	16000003 	strne	r0, [r0], -r3
     71c:	87010078 	smlsdxhi	r1, r8, r0, r0
     720:	000000d8 	ldrdeq	r0, [r0], -r8
     724:	16679102 	strbtne	r9, [r7], -r2, lsl #2
     728:	87010079 	smlsdxhi	r1, r9, r0, r0
     72c:	000000d8 	ldrdeq	r0, [r0], -r8
     730:	16669102 	strbtne	r9, [r6], -r2, lsl #2
     734:	00746573 	rsbseq	r6, r4, r3, ror r5
     738:	00d88701 	sbcseq	r8, r8, r1, lsl #14
     73c:	91020000 	mrsls	r0, (UNDEF: 2)
     740:	05370c65 	ldreq	r0, [r7, #-3173]!	; 0xfffff39b
     744:	8a010000 	bhi	4074c <startup-0x1ffbf8b4>
     748:	00000090 	muleq	r0, r0, r0
     74c:	0c6f9102 	stfeqp	f1, [pc], #-8	; 74c <startup-0x1ffff8b4>
     750:	00000360 	andeq	r0, r0, r0, ror #6
     754:	00908d01 	addseq	r8, r0, r1, lsl #26
     758:	91020000 	mrsls	r0, (UNDEF: 2)
     75c:	02ca0c6d 	sbceq	r0, sl, #27904	; 0x6d00
     760:	97010000 	strls	r0, [r1, -r0]
     764:	000000d8 	ldrdeq	r0, [r0], -r8
     768:	006e9102 	rsbeq	r9, lr, r2, lsl #2
     76c:	0002a217 	andeq	sl, r2, r7, lsl r2
     770:	107d0100 	rsbsne	r0, sp, r0, lsl #2
     774:	58200008 	stmdapl	r0!, {r3}
     778:	01000000 	mrseq	r0, (UNDEF: 0)
     77c:	0003479c 	muleq	r3, ip, r7
     780:	08161300 	ldmdaeq	r6, {r8, r9, ip}
     784:	004a2000 	subeq	r2, sl, r0
     788:	69140000 	ldmdbvs	r4, {}	; <UNPREDICTABLE>
     78c:	b67e0100 	ldrbtlt	r0, [lr], -r0, lsl #2
     790:	02000001 	andeq	r0, r0, #1
     794:	3a137491 	bcc	4dd9e0 <startup-0x1fb22620>
     798:	1a200008 	bne	8007c0 <startup-0x1f7ff840>
     79c:	14000000 	strne	r0, [r0], #-0
     7a0:	8101006a 	tsthi	r1, sl, rrx
     7a4:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
     7a8:	00709102 	rsbseq	r9, r0, r2, lsl #2
     7ac:	ca180000 	bgt	6007b4 <startup-0x1f9ff84c>
     7b0:	01000003 	tsteq	r0, r3
     7b4:	00078c6a 	andeq	r8, r7, sl, ror #24
     7b8:	00008420 	andeq	r8, r0, r0, lsr #8
     7bc:	199c0100 	ldmibne	ip, {r8}
     7c0:	0000031c 	andeq	r0, r0, ip, lsl r3
     7c4:	07726601 	ldrbeq	r6, [r2, -r1, lsl #12]!
     7c8:	001a2000 	andseq	r2, sl, r0
     7cc:	9c010000 	stcls	0, cr0, [r1], {-0}
     7d0:	0002781a 	andeq	r7, r2, sl, lsl r8
     7d4:	d8610100 	stmdale	r1!, {r8}^
     7d8:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     7dc:	2a200007 	bcs	800800 <startup-0x1f7ff800>
     7e0:	01000000 	mrseq	r0, (UNDEF: 0)
     7e4:	00038f9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
     7e8:	00631600 	rsbeq	r1, r3, r0, lsl #12
     7ec:	00d86101 	sbcseq	r6, r8, r1, lsl #2
     7f0:	91020000 	mrsls	r0, (UNDEF: 2)
     7f4:	66170077 			; <UNDEFINED> instruction: 0x66170077
     7f8:	01000003 	tsteq	r0, r3
     7fc:	0006e85a 	andeq	lr, r6, sl, asr r8
     800:	00006020 	andeq	r6, r0, r0, lsr #32
     804:	bf9c0100 	svclt	0x009c0100
     808:	12000003 	andne	r0, r0, #3
     80c:	00000285 	andeq	r0, r0, r5, lsl #5
     810:	00d85a01 	sbcseq	r5, r8, r1, lsl #20
     814:	91020000 	mrsls	r0, (UNDEF: 2)
     818:	00631677 	rsbeq	r1, r3, r7, ror r6
     81c:	00d85a01 	sbcseq	r5, r8, r1, lsl #20
     820:	91020000 	mrsls	r0, (UNDEF: 2)
     824:	ad170076 	ldcge	0, cr0, [r7, #-472]	; 0xfffffe28
     828:	01000003 	tsteq	r0, r3
     82c:	00069053 	andeq	r9, r6, r3, asr r0
     830:	00005820 	andeq	r5, r0, r0, lsr #16
     834:	ef9c0100 	svc	0x009c0100
     838:	16000003 	strne	r0, [r0], -r3
     83c:	00646d63 	rsbeq	r6, r4, r3, ror #26
     840:	00d85301 	sbcseq	r5, r8, r1, lsl #6
     844:	91020000 	mrsls	r0, (UNDEF: 2)
     848:	00631677 	rsbeq	r1, r3, r7, ror r6
     84c:	00d85301 	sbcseq	r5, r8, r1, lsl #6
     850:	91020000 	mrsls	r0, (UNDEF: 2)
     854:	bc170076 	ldclt	0, cr0, [r7], {118}	; 0x76
     858:	01000002 	tsteq	r0, r2
     85c:	0005e83d 	andeq	lr, r5, sp, lsr r8
     860:	0000a820 	andeq	sl, r0, r0, lsr #16
     864:	1f9c0100 	svcne	0x009c0100
     868:	16000004 	strne	r0, [r0], -r4
     86c:	006c6176 	rsbeq	r6, ip, r6, ror r1
     870:	00d83d01 	sbcseq	r3, r8, r1, lsl #26
     874:	91020000 	mrsls	r0, (UNDEF: 2)
     878:	00631677 	rsbeq	r1, r3, r7, ror r6
     87c:	00d83d01 	sbcseq	r3, r8, r1, lsl #26
     880:	91020000 	mrsls	r0, (UNDEF: 2)
     884:	8d1a0076 	ldchi	0, cr0, [sl, #-472]	; 0xfffffe28
     888:	01000003 	tsteq	r0, r3
     88c:	00009024 	andeq	r9, r0, r4, lsr #32
     890:	00052000 	andeq	r2, r5, r0
     894:	0000c820 	andeq	ip, r0, r0, lsr #16
     898:	529c0100 	addspl	r0, ip, #0, 2
     89c:	16000004 	strne	r0, [r0], -r4
     8a0:	24010063 	strcs	r0, [r1], #-99	; 0xffffff9d
     8a4:	000000d8 	ldrdeq	r0, [r0], -r8
     8a8:	146f9102 	strbtne	r9, [pc], #-258	; 8b0 <startup-0x1ffff750>
     8ac:	01005652 	tsteq	r0, r2, asr r6
     8b0:	0000d82e 	andeq	sp, r0, lr, lsr #16
     8b4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     8b8:	039a1b00 	orrseq	r1, sl, #0, 22
     8bc:	12010000 	andne	r0, r1, #0
     8c0:	2000047c 	andcs	r0, r0, ip, ror r4
     8c4:	000000a4 	andeq	r0, r0, r4, lsr #1
     8c8:	cf1c9c01 	svcgt	0x001c9c01
     8cc:	01000002 	tsteq	r0, r2
     8d0:	0003ec09 	andeq	lr, r3, r9, lsl #24
     8d4:	00009020 	andeq	r9, r0, r0, lsr #32
     8d8:	169c0100 	ldrne	r0, [ip], r0, lsl #2
     8dc:	09010063 	stmdbeq	r1, {r0, r1, r5, r6}
     8e0:	00000090 	muleq	r0, r0, r0
     8e4:	00779102 	rsbseq	r9, r7, r2, lsl #2
     8e8:	00039700 	andeq	r9, r3, r0, lsl #14
     8ec:	47000400 	strmi	r0, [r0, -r0, lsl #8]
     8f0:	04000003 	streq	r0, [r0], #-3
     8f4:	00004501 	andeq	r4, r0, r1, lsl #10
     8f8:	04260c00 	strteq	r0, [r6], #-3072	; 0xfffff400
     8fc:	00eb0000 	rsceq	r0, fp, r0
     900:	0c740000 	ldcleq	0, cr0, [r4], #-0
     904:	01dc2000 	bicseq	r2, ip, r0
     908:	02ed0000 	rsceq	r0, sp, #0
     90c:	02020000 	andeq	r0, r2, #0
     910:	00420502 	subeq	r0, r2, r2, lsl #10
     914:	78030000 	stmdavc	r3, {}	; <UNPREDICTABLE>
     918:	42060200 	andmi	r0, r6, #0, 4
     91c:	00000000 	andeq	r0, r0, r0
     920:	02007903 	andeq	r7, r0, #49152	; 0xc000
     924:	00004207 	andeq	r4, r0, r7, lsl #4
     928:	04000100 	streq	r0, [r0], #-256	; 0xffffff00
     92c:	00dd0801 	sbcseq	r0, sp, r1, lsl #16
     930:	18050000 	stmdane	r5, {}	; <UNPREDICTABLE>
     934:	02000000 	andeq	r0, r0, #0
     938:	00002508 	andeq	r2, r0, r8, lsl #10
     93c:	02340200 	eorseq	r0, r4, #0, 4
     940:	00008c19 	andeq	r8, r0, r9, lsl ip
     944:	01d50600 	bicseq	r0, r5, r0, lsl #12
     948:	1a020000 	bne	80950 <startup-0x1ff7f6b0>
     94c:	0000008c 	andeq	r0, r0, ip, lsl #1
     950:	01630600 	cmneq	r3, r0, lsl #12
     954:	1b020000 	blne	8095c <startup-0x1ff7f6a4>
     958:	0000008c 	andeq	r0, r0, ip, lsl #1
     95c:	01690604 	cmneq	r9, r4, lsl #12
     960:	1c020000 	stcne	0, cr0, [r2], {-0}
     964:	0000008c 	andeq	r0, r0, ip, lsl #1
     968:	78700308 	ldmdavc	r0!, {r3, r8, r9}^
     96c:	931d0200 	tstls	sp, #0, 4
     970:	0c000000 	stceq	0, cr0, [r0], {-0}
     974:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
     978:	00746e69 	rsbseq	r6, r4, r9, ror #28
     97c:	00004908 	andeq	r4, r0, r8, lsl #18
     980:	0000a300 	andeq	sl, r0, r0, lsl #6
     984:	00a30900 	adceq	r0, r3, r0, lsl #18
     988:	00130000 	andseq	r0, r3, r0
     98c:	29070404 	stmdbcs	r7, {r2, sl}
     990:	05000000 	streq	r0, [r0, #-0]
     994:	000001e4 	andeq	r0, r0, r4, ror #3
     998:	00b51e02 	adcseq	r1, r5, r2, lsl #28
     99c:	040a0000 	streq	r0, [sl], #-0
     9a0:	00000054 	andeq	r0, r0, r4, asr r0
     9a4:	0001d00b 	andeq	sp, r1, fp
     9a8:	22022800 	andcs	r2, r2, #0, 16
     9ac:	00000140 	andeq	r0, r0, r0, asr #2
     9b0:	6f656703 	svcvs	0x00656703
     9b4:	aa230200 	bge	8c11bc <startup-0x1f73ee44>
     9b8:	00000000 	andeq	r0, r0, r0
     9bc:	00003606 	andeq	r3, r0, r6, lsl #12
     9c0:	8c240200 	sfmhi	f0, 4, [r4], #-0
     9c4:	04000000 	streq	r0, [r0], #-0
     9c8:	00003b06 	andeq	r3, r0, r6, lsl #22
     9cc:	8c240200 	sfmhi	f0, 4, [r4], #-0
     9d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     9d4:	00011c06 	andeq	r1, r1, r6, lsl #24
     9d8:	8c250200 	sfmhi	f0, 4, [r5], #-0
     9dc:	0c000000 	stceq	0, cr0, [r0], {-0}
     9e0:	00012106 	andeq	r2, r1, r6, lsl #2
     9e4:	8c250200 	sfmhi	f0, 4, [r5], #-0
     9e8:	10000000 	andne	r0, r0, r0
     9ec:	00017e06 	andeq	r7, r1, r6, lsl #28
     9f0:	51260200 			; <UNDEFINED> instruction: 0x51260200
     9f4:	14000001 	strne	r0, [r0], #-1
     9f8:	00025906 	andeq	r5, r2, r6, lsl #18
     9fc:	51270200 			; <UNDEFINED> instruction: 0x51270200
     a00:	18000001 	stmdane	r0, {r0}
     a04:	0001b406 	andeq	fp, r1, r6, lsl #8
     a08:	51280200 			; <UNDEFINED> instruction: 0x51280200
     a0c:	1c000001 	stcne	0, cr0, [r0], {1}
     a10:	00011206 	andeq	r1, r1, r6, lsl #4
     a14:	6c290200 	sfmvs	f0, 4, [r9], #-0
     a18:	20000001 	andcs	r0, r0, r1
     a1c:	0003f706 	andeq	pc, r3, r6, lsl #14
     a20:	822a0200 	eorhi	r0, sl, #0, 4
     a24:	24000001 	strcs	r0, [r0], #-1
     a28:	014b0c00 	cmpeq	fp, r0, lsl #24
     a2c:	4b0d0000 	blmi	340a34 <startup-0x1fcbf5cc>
     a30:	00000001 	andeq	r0, r0, r1
     a34:	00bb040a 	adcseq	r0, fp, sl, lsl #8
     a38:	040a0000 	streq	r0, [sl], #-0
     a3c:	00000140 	andeq	r0, r0, r0, asr #2
     a40:	00016c0c 	andeq	r6, r1, ip, lsl #24
     a44:	014b0d00 	cmpeq	fp, r0, lsl #26
     a48:	8c0d0000 	stchi	0, cr0, [sp], {-0}
     a4c:	0d000000 	stceq	0, cr0, [r0, #-0]
     a50:	0000008c 	andeq	r0, r0, ip, lsl #1
     a54:	57040a00 	strpl	r0, [r4, -r0, lsl #20]
     a58:	0c000001 	stceq	0, cr0, [r0], {1}
     a5c:	00000182 	andeq	r0, r0, r2, lsl #3
     a60:	00014b0d 	andeq	r4, r1, sp, lsl #22
     a64:	00490d00 	subeq	r0, r9, r0, lsl #26
     a68:	0a000000 	beq	a70 <startup-0x1ffff590>
     a6c:	00017204 	andeq	r7, r1, r4, lsl #4
     a70:	04a20500 	strteq	r0, [r2], #1280	; 0x500
     a74:	2b020000 	blcs	80a7c <startup-0x1ff7f584>
     a78:	000000bb 	strheq	r0, [r0], -fp
     a7c:	00000805 	andeq	r0, r0, r5, lsl #16
     a80:	4b2b0200 	blmi	ac1288 <startup-0x1f53ed78>
     a84:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     a88:	000003dd 	ldrdeq	r0, [r0], -sp
     a8c:	0de82f01 	stcleq	15, cr2, [r8, #4]!
     a90:	00682000 	rsbeq	r2, r8, r0
     a94:	9c010000 	stcls	0, cr0, [r1], {-0}
     a98:	0000021e 	andeq	r0, r0, lr, lsl r2
     a9c:	0003e60f 	andeq	lr, r3, pc, lsl #12
     aa0:	1e2f0100 	sufnee	f0, f7, f0
     aa4:	02000002 	andeq	r0, r0, #2
     aa8:	600f6c91 	mulvs	pc, r1, ip	; <UNPREDICTABLE>
     aac:	01000004 	tsteq	r0, r4
     ab0:	0002242f 	andeq	r2, r2, pc, lsr #8
     ab4:	6b910200 	blvs	fe4412bc <p2paddle+0xde43f1c4>
     ab8:	00040410 	andeq	r0, r4, r0, lsl r4
     abc:	8c300100 	ldfhis	f0, [r0], #-0
     ac0:	e0000000 	and	r0, r0, r0
     ac4:	11000001 	tstne	r0, r1
     ac8:	040f1000 	streq	r1, [pc], #-0	; ad0 <startup-0x1ffff530>
     acc:	32010000 	andcc	r0, r1, #0
     ad0:	0000008c 	andeq	r0, r0, ip, lsl #1
     ad4:	000001f1 	strdeq	r0, [r0], -r1
     ad8:	a9120011 	ldmdbge	r2, {r0, r4}
     adc:	01000004 	tsteq	r0, r4
     ae0:	00022433 	andeq	r2, r2, r3, lsr r4
     ae4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     ae8:	0004b910 	andeq	fp, r4, r0, lsl r9
     aec:	8c340100 	ldfhis	f0, [r4], #-0
     af0:	10000000 	andne	r0, r0, r0
     af4:	11000002 	tstne	r0, r2
     af8:	03ca1300 	biceq	r1, sl, #0, 6
     afc:	35010000 	strcc	r0, [r1, #-0]
     b00:	0000008c 	andeq	r0, r0, ip, lsl #1
     b04:	0a000011 	beq	b50 <startup-0x1ffff4b0>
     b08:	00022404 	andeq	r2, r2, r4, lsl #8
     b0c:	08010400 	stmdaeq	r1, {sl}
     b10:	000000e6 	andeq	r0, r0, r6, ror #1
     b14:	00049d0e 	andeq	r9, r4, lr, lsl #26
     b18:	7e240100 	sufvcs	f0, f4, f0
     b1c:	6a20000d 	bvs	800b58 <startup-0x1f7ff4a8>
     b20:	01000000 	mrseq	r0, (UNDEF: 0)
     b24:	00024d9c 	muleq	r2, ip, sp
     b28:	006f1400 	rsbeq	r1, pc, r0, lsl #8
     b2c:	024d2401 	subeq	r2, sp, #16777216	; 0x1000000
     b30:	91020000 	mrsls	r0, (UNDEF: 2)
     b34:	040a0074 	streq	r0, [sl], #-116	; 0xffffff8c
     b38:	00000188 	andeq	r0, r0, r8, lsl #3
     b3c:	0004840e 	andeq	r8, r4, lr, lsl #8
     b40:	221e0100 	andscs	r0, lr, #0, 2
     b44:	5c20000d 	stcpl	0, cr0, [r0], #-52	; 0xffffffcc
     b48:	01000000 	mrseq	r0, (UNDEF: 0)
     b4c:	0002a29c 	muleq	r2, ip, r2
     b50:	006f1400 	rsbeq	r1, pc, r0, lsl #8
     b54:	024d1e01 	subeq	r1, sp, #1, 28
     b58:	91020000 	mrsls	r0, (UNDEF: 2)
     b5c:	0d2a156c 	cfstr32eq	mvfx1, [sl, #-432]!	; 0xfffffe50
     b60:	004c2000 	subeq	r2, ip, r0
     b64:	69160000 	ldmdbvs	r6, {}	; <UNPREDICTABLE>
     b68:	8c1f0100 	ldfhis	f0, [pc], {-0}
     b6c:	02000000 	andeq	r0, r0, #0
     b70:	30157491 	mulscc	r5, r1, r4
     b74:	3420000d 	strtcc	r0, [r0], #-13
     b78:	13000000 	movwne	r0, #0
     b7c:	00000333 	andeq	r0, r0, r3, lsr r3
     b80:	008c1a01 	addeq	r1, ip, r1, lsl #20
     b84:	00110000 	andseq	r0, r1, r0
     b88:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     b8c:	00000491 	muleq	r0, r1, r4
     b90:	0cbe1601 	ldceq	6, cr1, [lr], #4
     b94:	00642000 	rsbeq	r2, r4, r0
     b98:	9c010000 	stcls	0, cr0, [r1], {-0}
     b9c:	0000030d 	andeq	r0, r0, sp, lsl #6
     ba0:	01006f14 	tsteq	r0, r4, lsl pc
     ba4:	00024d16 	andeq	r4, r2, r6, lsl sp
     ba8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     bac:	000cc615 	andeq	ip, ip, r5, lsl r6
     bb0:	00005420 	andeq	r5, r0, r0, lsr #8
     bb4:	00691600 	rsbeq	r1, r9, r0, lsl #12
     bb8:	008c1701 	addeq	r1, ip, r1, lsl #14
     bbc:	91020000 	mrsls	r0, (UNDEF: 2)
     bc0:	0ccc1574 	cfstr64eq	mvdx1, [ip], {116}	; 0x74
     bc4:	003c2000 	eorseq	r2, ip, r0
     bc8:	78120000 	ldmdavc	r2, {}	; <UNPREDICTABLE>
     bcc:	01000004 	tsteq	r0, r4
     bd0:	00008c18 	andeq	r8, r0, r8, lsl ip
     bd4:	70910200 	addsvc	r0, r1, r0, lsl #4
     bd8:	00047e12 	andeq	r7, r4, r2, lsl lr
     bdc:	8c190100 	ldfhis	f0, [r9], {-0}
     be0:	02000000 	andeq	r0, r0, #0
     be4:	33136c91 	tstcc	r3, #37120	; 0x9100
     be8:	01000003 	tsteq	r0, r3
     bec:	00008c1a 	andeq	r8, r0, sl, lsl ip
     bf0:	00001100 	andeq	r1, r0, r0, lsl #2
     bf4:	f2170000 	vhadd.s16	d0, d7, d0
     bf8:	01000003 	tsteq	r0, r3
     bfc:	000c9e11 	andeq	r9, ip, r1, lsl lr
     c00:	00002020 	andeq	r2, r0, r0, lsr #32
     c04:	4b9c0100 	blmi	fe70100c <p2paddle+0xde6fef14>
     c08:	14000003 	strne	r0, [r0], #-3
     c0c:	1101006f 	tstne	r1, pc, rrx
     c10:	00000193 	muleq	r0, r3, r1
     c14:	0f749102 	svceq	0x00749102
     c18:	0000011c 	andeq	r0, r0, ip, lsl r1
     c1c:	008c1101 	addeq	r1, ip, r1, lsl #2
     c20:	91020000 	mrsls	r0, (UNDEF: 2)
     c24:	01210f70 			; <UNDEFINED> instruction: 0x01210f70
     c28:	11010000 	mrsne	r0, (UNDEF: 1)
     c2c:	0000008c 	andeq	r0, r0, ip, lsl #1
     c30:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     c34:	00046717 	andeq	r6, r4, r7, lsl r7
     c38:	7e0c0100 	adfvce	f0, f4, f0
     c3c:	2020000c 	eorcs	r0, r0, ip
     c40:	01000000 	mrseq	r0, (UNDEF: 0)
     c44:	0003899c 	muleq	r3, ip, r9
     c48:	006f1400 	rsbeq	r1, pc, r0, lsl #8
     c4c:	01930c01 	orrseq	r0, r3, r1, lsl #24
     c50:	91020000 	mrsls	r0, (UNDEF: 2)
     c54:	04590f74 	ldrbeq	r0, [r9], #-3956	; 0xfffff08c
     c58:	0c010000 	stceq	0, cr0, [r1], {-0}
     c5c:	0000008c 	andeq	r0, r0, ip, lsl #1
     c60:	0f709102 	svceq	0x00709102
     c64:	000004b2 			; <UNDEFINED> instruction: 0x000004b2
     c68:	008c0c01 	addeq	r0, ip, r1, lsl #24
     c6c:	91020000 	mrsls	r0, (UNDEF: 2)
     c70:	1c18006c 	ldcne	0, cr0, [r8], {108}	; 0x6c
     c74:	01000004 	tsteq	r0, r4
     c78:	000c7408 	andeq	r7, ip, r8, lsl #8
     c7c:	00000a20 	andeq	r0, r0, r0, lsr #20
     c80:	009c0100 	addseq	r0, ip, r0, lsl #2
     c84:	0000022d 	andeq	r0, r0, sp, lsr #4
     c88:	049b0004 	ldreq	r0, [fp], #4
     c8c:	01040000 	mrseq	r0, (UNDEF: 4)
     c90:	00000045 	andeq	r0, r0, r5, asr #32
     c94:	0005420c 	andeq	r4, r5, ip, lsl #4
     c98:	0000eb00 	andeq	lr, r0, r0, lsl #22
     c9c:	000e5000 	andeq	r5, lr, r0
     ca0:	0002a820 	andeq	sl, r2, r0, lsr #16
     ca4:	0003a900 	andeq	sl, r3, r0, lsl #18
     ca8:	01070200 	mrseq	r0, (UNDEF: 39)
     cac:	0000005d 	andeq	r0, r0, sp, asr r0
     cb0:	005d1d02 	subseq	r1, sp, r2, lsl #26
     cb4:	41030000 	mrsmi	r0, (UNDEF: 3)
     cb8:	01000003 	tsteq	r0, r3
     cbc:	0002b703 	andeq	fp, r2, r3, lsl #14
     cc0:	57030200 	strpl	r0, [r3, -r0, lsl #4]
     cc4:	04000003 	streq	r0, [r0], #-3
     cc8:	00035103 	andeq	r5, r3, r3, lsl #2
     ccc:	4c030800 	stcmi	8, cr0, [r3], {-0}
     cd0:	10000002 	andne	r0, r0, r2
     cd4:	00031603 	andeq	r1, r3, r3, lsl #12
     cd8:	42042000 	andmi	r2, r4, #0
     cdc:	4000455f 	andmi	r4, r0, pc, asr r5
     ce0:	08010500 	stmdaeq	r1, {r8, sl}
     ce4:	000000dd 	ldrdeq	r0, [r0], -sp
     ce8:	00059906 	andeq	r9, r5, r6, lsl #18
     cec:	ca5e0100 	bgt	17810f4 <startup-0x1e87ef0c>
     cf0:	2e200010 	miacs	acc0, r0, r0
     cf4:	01000000 	mrseq	r0, (UNDEF: 0)
     cf8:	040f079c 	streq	r0, [pc], #-1948	; d00 <startup-0x1ffff300>
     cfc:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
     d00:	20001096 	mulcs	r0, r6, r0
     d04:	00000034 	andeq	r0, r0, r4, lsr r0
     d08:	00b19c01 	adcseq	r9, r1, r1, lsl #24
     d0c:	78080000 	stmdavc	r8, {}	; <UNPREDICTABLE>
     d10:	b1590100 	cmplt	r9, r0, lsl #2
     d14:	02000000 	andeq	r0, r0, #0
     d18:	79086c91 	stmdbvc	r8, {r0, r4, r7, sl, fp, sp, lr}
     d1c:	b1590100 	cmplt	r9, r0, lsl #2
     d20:	02000000 	andeq	r0, r0, #0
     d24:	a8096891 	stmdage	r9, {r0, r4, r7, fp, sp, lr}
     d28:	01000005 	tsteq	r0, r5
     d2c:	0000b15a 	andeq	fp, r0, sl, asr r1
     d30:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     d34:	05040a00 	streq	r0, [r4, #-2560]	; 0xfffff600
     d38:	00746e69 	rsbseq	r6, r4, r9, ror #28
     d3c:	0004b907 	andeq	fp, r4, r7, lsl #18
     d40:	5a520100 	bpl	1481148 <startup-0x1eb7eeb8>
     d44:	3c200010 	stccc	0, cr0, [r0], #-64	; 0xffffffc0
     d48:	01000000 	mrseq	r0, (UNDEF: 0)
     d4c:	0000da9c 	muleq	r0, ip, sl
     d50:	00630800 	rsbeq	r0, r3, r0, lsl #16
     d54:	00da5201 	sbcseq	r5, sl, r1, lsl #4
     d58:	91020000 	mrsls	r0, (UNDEF: 2)
     d5c:	01050077 	tsteq	r5, r7, ror r0
     d60:	0000e608 	andeq	lr, r0, r8, lsl #12
     d64:	04040b00 	streq	r0, [r4], #-2816	; 0xfffff500
     d68:	46010000 	strmi	r0, [r1], -r0
     d6c:	20001014 	andcs	r1, r0, r4, lsl r0
     d70:	00000046 	andeq	r0, r0, r6, asr #32
     d74:	790c9c01 	stmdbvc	ip, {r0, sl, fp, ip, pc}
     d78:	01000005 	tsteq	r0, r5
     d7c:	00005d3d 	andeq	r5, r0, sp, lsr sp
     d80:	000fcc00 	andeq	ip, pc, r0, lsl #24
     d84:	00004820 	andeq	r4, r0, r0, lsr #16
     d88:	199c0100 	ldmibne	ip, {r8}
     d8c:	0d000001 	stceq	0, cr0, [r0, #-4]
     d90:	01007672 	tsteq	r0, r2, ror r6
     d94:	00005d41 	andeq	r5, r0, r1, asr #26
     d98:	6f910200 	svcvs	0x00910200
     d9c:	051a0c00 	ldreq	r0, [sl, #-3072]	; 0xfffff400
     da0:	31010000 	mrscc	r0, (UNDEF: 1)
     da4:	0000005d 	andeq	r0, r0, sp, asr r0
     da8:	20000f8c 	andcs	r0, r0, ip, lsl #31
     dac:	00000040 	andeq	r0, r0, r0, asr #32
     db0:	01409c01 	cmpeq	r0, r1, lsl #24
     db4:	720d0000 	andvc	r0, sp, #0
     db8:	35010076 	strcc	r0, [r1, #-118]	; 0xffffff8a
     dbc:	0000005d 	andeq	r0, r0, sp, asr r0
     dc0:	00779102 	rsbseq	r9, r7, r2, lsl #2
     dc4:	00050907 	andeq	r0, r5, r7, lsl #18
     dc8:	622b0100 	eorvs	r0, fp, #0, 2
     dcc:	2a20000f 	bcs	800e10 <startup-0x1f7ff1f0>
     dd0:	01000000 	mrseq	r0, (UNDEF: 0)
     dd4:	0001649c 	muleq	r1, ip, r4
     dd8:	02850e00 	addeq	r0, r5, #0, 28
     ddc:	2b010000 	blcs	40de4 <startup-0x1ffbf21c>
     de0:	0000005d 	andeq	r0, r0, sp, asr r0
     de4:	00779102 	rsbseq	r9, r7, r2, lsl #2
     de8:	00058907 	andeq	r8, r5, r7, lsl #18
     dec:	38250100 	stmdacc	r5!, {r8}
     df0:	2a20000f 	bcs	800e34 <startup-0x1f7ff1cc>
     df4:	01000000 	mrseq	r0, (UNDEF: 0)
     df8:	0001889c 	muleq	r1, ip, r8
     dfc:	03bb0e00 			; <UNDEFINED> instruction: 0x03bb0e00
     e00:	25010000 	strcs	r0, [r1, #-0]
     e04:	0000005d 	andeq	r0, r0, sp, asr r0
     e08:	00779102 	rsbseq	r9, r7, r2, lsl #2
     e0c:	00052c0c 	andeq	r2, r5, ip, lsl #24
     e10:	5d1c0100 	ldfpls	f0, [ip, #-0]
     e14:	0c000000 	stceq	0, cr0, [r0], {-0}
     e18:	2c20000f 	stccs	0, cr0, [r0], #-60	; 0xffffffc4
     e1c:	01000000 	mrseq	r0, (UNDEF: 0)
     e20:	0001af9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
     e24:	76720d00 	ldrbtvc	r0, [r2], -r0, lsl #26
     e28:	5d200100 	stfpls	f0, [r0, #-0]
     e2c:	02000000 	andeq	r0, r0, #0
     e30:	07007791 			; <UNDEFINED> instruction: 0x07007791
     e34:	000004df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     e38:	0edc1501 	cdpeq	5, 13, cr1, cr12, cr1, {0}
     e3c:	00302000 	eorseq	r2, r0, r0
     e40:	9c010000 	stcls	0, cr0, [r1], {-0}
     e44:	000001d1 	ldrdeq	r0, [r0], -r1
     e48:	01006308 	tsteq	r0, r8, lsl #6
     e4c:	00005d15 	andeq	r5, r0, r5, lsl sp
     e50:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     e54:	04ca0f00 	strbeq	r0, [sl], #3840	; 0xf00
     e58:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
     e5c:	20000e94 	mulcs	r0, r4, lr
     e60:	00000048 	andeq	r0, r0, r8, asr #32
     e64:	01ff9c01 	mvnseq	r9, r1, lsl #24
     e68:	78080000 	stmdavc	r8, {}	; <UNPREDICTABLE>
     e6c:	ff0e0100 			; <UNDEFINED> instruction: 0xff0e0100
     e70:	02000001 	andeq	r0, r0, #1
     e74:	630d6e91 	movwvs	r6, #56977	; 0xde91
     e78:	5d0f0100 	stfpls	f0, [pc, #-0]	; e80 <startup-0x1ffff180>
     e7c:	02000000 	andeq	r0, r0, #0
     e80:	05007791 	streq	r7, [r0, #-1937]	; 0xfffff86f
     e84:	00230702 	eoreq	r0, r3, r2, lsl #14
     e88:	f6100000 			; <UNDEFINED> instruction: 0xf6100000
     e8c:	01000004 	tsteq	r0, r4
     e90:	000e5006 	andeq	r5, lr, r6
     e94:	00004420 	andeq	r4, r0, r0, lsr #8
     e98:	089c0100 	ldmeq	ip, {r8}
     e9c:	06010078 			; <UNDEFINED> instruction: 0x06010078
     ea0:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     ea4:	0d6e9102 	stfeqp	f1, [lr, #-8]!
     ea8:	08010063 	stmdaeq	r1, {r0, r1, r5, r6}
     eac:	0000005d 	andeq	r0, r0, sp, asr r0
     eb0:	00779102 	rsbseq	r9, r7, r2, lsl #2
     eb4:	00017a00 	andeq	r7, r1, r0, lsl #20
     eb8:	bc000400 	cfstrslt	mvf0, [r0], {-0}
     ebc:	04000005 	streq	r0, [r0], #-5
     ec0:	00004501 	andeq	r4, r0, r1, lsl #10
     ec4:	05b40c00 	ldreq	r0, [r4, #3072]!	; 0xc00
     ec8:	00eb0000 	rsceq	r0, fp, r0
     ecc:	10f80000 	rscsne	r0, r8, r0
     ed0:	01b02000 	movseq	r2, r0
     ed4:	04730000 	ldrbteq	r0, [r3], #-0
     ed8:	01020000 	mrseq	r0, (UNDEF: 2)
     edc:	0000dd08 	andeq	sp, r0, r8, lsl #26
     ee0:	00250300 	eoreq	r0, r5, r0, lsl #6
     ee4:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     ee8:	01000006 	tsteq	r0, r6
     eec:	0000a332 	andeq	sl, r0, r2, lsr r3
     ef0:	00122000 	andseq	r2, r2, r0
     ef4:	00008820 	andeq	r8, r0, r0, lsr #16
     ef8:	a39c0100 	orrsge	r0, ip, #0, 2
     efc:	05000000 	streq	r0, [r0, #-0]
     f00:	0000060b 	andeq	r0, r0, fp, lsl #12
     f04:	00253401 	eoreq	r3, r5, r1, lsl #8
     f08:	91020000 	mrsls	r0, (UNDEF: 2)
     f0c:	03950574 	orrseq	r0, r5, #116, 10	; 0x1d000000
     f10:	35010000 	strcc	r0, [r1, #-0]
     f14:	000000a3 	andeq	r0, r0, r3, lsr #1
     f18:	06769102 	ldrbteq	r9, [r6], -r2, lsl #2
     f1c:	20001232 	andcs	r1, r0, r2, lsr r2
     f20:	00000060 	andeq	r0, r0, r0, rrx
     f24:	01006907 	tsteq	r0, r7, lsl #18
     f28:	0000aa36 	andeq	sl, r0, r6, lsr sl
     f2c:	75910200 	ldrvc	r0, [r1, #512]	; 0x200
     f30:	00123a06 	andseq	r3, r2, r6, lsl #20
     f34:	00004620 	andeq	r4, r0, r0, lsr #12
     f38:	05ec0500 	strbeq	r0, [ip, #1280]!	; 0x500
     f3c:	37010000 	strcc	r0, [r1, -r0]
     f40:	000000aa 	andeq	r0, r0, sl, lsr #1
     f44:	05739102 	ldrbeq	r9, [r3, #-258]!	; 0xfffffefe
     f48:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     f4c:	002c3901 	eoreq	r3, ip, r1, lsl #18
     f50:	91020000 	mrsls	r0, (UNDEF: 2)
     f54:	00000072 	andeq	r0, r0, r2, ror r0
     f58:	23070202 	movwcs	r0, #29186	; 0x7202
     f5c:	02000000 	andeq	r0, r0, #0
     f60:	00e60801 	rsceq	r0, r6, r1, lsl #16
     f64:	11080000 	mrsne	r0, (UNDEF: 8)
     f68:	01000006 	tsteq	r0, r6
     f6c:	0011ec29 	andseq	lr, r1, r9, lsr #24
     f70:	00003420 	andeq	r3, r0, r0, lsr #8
     f74:	e39c0100 	orrs	r0, ip, #0, 2
     f78:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     f7c:	006d756e 	rsbeq	r7, sp, lr, ror #10
     f80:	00252901 	eoreq	r2, r5, r1, lsl #18
     f84:	91020000 	mrsls	r0, (UNDEF: 2)
     f88:	05f6055f 	ldrbeq	r0, [r6, #1375]!	; 0x55f
     f8c:	2a010000 	bcs	40f94 <startup-0x1ffbf06c>
     f90:	000000e3 	andeq	r0, r0, r3, ror #1
     f94:	00609102 	rsbeq	r9, r0, r2, lsl #2
     f98:	0000250a 	andeq	r2, r0, sl, lsl #10
     f9c:	0000f300 	andeq	pc, r0, r0, lsl #6
     fa0:	00f30b00 	rscseq	r0, r3, r0, lsl #22
     fa4:	000f0000 	andeq	r0, pc, r0
     fa8:	29070402 	stmdbcs	r7, {r1, sl}
     fac:	04000000 	streq	r0, [r0], #-0
     fb0:	000005af 	andeq	r0, r0, pc, lsr #11
     fb4:	00251201 	eoreq	r1, r5, r1, lsl #4
     fb8:	11300000 	teqne	r0, r0
     fbc:	00bc2000 	adcseq	r2, ip, r0
     fc0:	9c010000 	stcls	0, cr0, [r1], {-0}
     fc4:	0000016c 	andeq	r0, r0, ip, ror #2
     fc8:	00060b05 	andeq	r0, r6, r5, lsl #22
     fcc:	25140100 	ldrcs	r0, [r4, #-256]	; 0xffffff00
     fd0:	02000000 	andeq	r0, r0, #0
     fd4:	21056f91 			; <UNDEFINED> instruction: 0x21056f91
     fd8:	01000006 	tsteq	r0, r6
     fdc:	0000e315 	andeq	lr, r0, r5, lsl r3
     fe0:	5c910200 	lfmpl	f0, 4, [r1], {0}
     fe4:	00114a06 	andseq	r4, r1, r6, lsl #20
     fe8:	00008c20 	andeq	r8, r0, r0, lsr #24
     fec:	00690700 	rsbeq	r0, r9, r0, lsl #14
     ff0:	00aa1701 	adceq	r1, sl, r1, lsl #14
     ff4:	91020000 	mrsls	r0, (UNDEF: 2)
     ff8:	1154066e 	cmpne	r4, lr, ror #12
     ffc:	006c2000 	rsbeq	r2, ip, r0
    1000:	ec050000 	stc	0, cr0, [r5], {-0}
    1004:	01000005 	tsteq	r0, r5
    1008:	0000aa18 	andeq	sl, r0, r8, lsl sl
    100c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1010:	0001df05 	andeq	sp, r1, r5, lsl #30
    1014:	aa1a0100 	bge	68141c <startup-0x1f97ebe4>
    1018:	02000000 	andeq	r0, r0, #0
    101c:	00006d91 	muleq	r0, r1, sp
    1020:	05ff0c00 	ldrbeq	r0, [pc, #3072]!	; 1c28 <startup-0x1fffe3d8>
    1024:	06010000 	streq	r0, [r1], -r0
    1028:	200010f8 	strdcs	r1, [r0], -r8
    102c:	00000038 	andeq	r0, r0, r8, lsr r0
    1030:	Address 0x00001030 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
  18:	0b3a050b 	bleq	e8144c <startup-0x1f17ebb4>
  1c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  20:	0d030000 	stceq	0, cr0, [r3, #-0]
  24:	3a0e0300 	bcc	380c2c <startup-0x1fc7f3d4>
  28:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  2c:	000b3813 	andeq	r3, fp, r3, lsl r8
  30:	000d0400 	andeq	r0, sp, r0, lsl #8
  34:	0b3a0e03 	bleq	e83848 <startup-0x1f17c7b8>
  38:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  3c:	00000538 	andeq	r0, r0, r8, lsr r5
  40:	49010105 	stmdbmi	r1, {r0, r2, r8}
  44:	00130113 	andseq	r0, r3, r3, lsl r1
  48:	00210600 	eoreq	r0, r1, r0, lsl #12
  4c:	0b2f1349 	bleq	bc4d78 <startup-0x1f43b288>
  50:	24070000 	strcs	r0, [r7], #-0
  54:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  58:	000e030b 	andeq	r0, lr, fp, lsl #6
  5c:	01150800 	tsteq	r5, r0, lsl #16
  60:	13011927 	movwne	r1, #6439	; 0x1927
  64:	05090000 	streq	r0, [r9, #-0]
  68:	00134900 	andseq	r4, r3, r0, lsl #18
  6c:	000f0a00 	andeq	r0, pc, r0, lsl #20
  70:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  74:	160b0000 	strne	r0, [fp], -r0
  78:	3a0e0300 	bcc	380c80 <startup-0x1fc7f380>
  7c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  80:	0c000013 	stceq	0, cr0, [r0], {19}
  84:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  88:	0b3b0b3a 	bleq	ec2d78 <startup-0x1f13d288>
  8c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  90:	130d0000 	movwne	r0, #53248	; 0xd000
  94:	3a0b0b01 	bcc	2c2ca0 <startup-0x1fd3d360>
  98:	010b3b0b 	tsteq	fp, fp, lsl #22
  9c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  a0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  a4:	0b3b0b3a 	bleq	ec2d94 <startup-0x1f13d26c>
  a8:	0b381349 	bleq	e04dd4 <startup-0x1f1fb22c>
  ac:	240f0000 	strcs	r0, [pc], #-0	; b4 <startup-0x1fffff4c>
  b0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  b4:	0008030b 	andeq	r0, r8, fp, lsl #6
  b8:	01131000 	tsteq	r3, r0
  bc:	0b0b0e03 	bleq	2c38d0 <startup-0x1fd3c730>
  c0:	0b3b0b3a 	bleq	ec2db0 <startup-0x1f13d250>
  c4:	00001301 	andeq	r1, r0, r1, lsl #6
  c8:	03003411 	movweq	r3, #1041	; 0x411
  cc:	3b0b3a0e 	blcc	2ce90c <startup-0x1fd316f4>
  d0:	3f13490b 	svccc	0x0013490b
  d4:	00180219 	andseq	r0, r8, r9, lsl r2
  d8:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
  dc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  e0:	0b3b0b3a 	bleq	ec2dd0 <startup-0x1f13d230>
  e4:	01111927 	tsteq	r1, r7, lsr #18
  e8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  ec:	01194296 			; <UNDEFINED> instruction: 0x01194296
  f0:	13000013 	movwne	r0, #19
  f4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
  f8:	0b3b0b3a 	bleq	ec2de8 <startup-0x1f13d218>
  fc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 100:	34140000 	ldrcc	r0, [r4], #-0
 104:	3a080300 	bcc	200d0c <startup-0x1fdff2f4>
 108:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 10c:	00180213 	andseq	r0, r8, r3, lsl r2
 110:	00351500 	eorseq	r1, r5, r0, lsl #10
 114:	00001349 	andeq	r1, r0, r9, asr #6
 118:	3f002e16 	svccc	0x00002e16
 11c:	3a0e0319 	bcc	380d88 <startup-0x1fc7f278>
 120:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 124:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 128:	97184006 	ldrls	r4, [r8, -r6]
 12c:	00001942 	andeq	r1, r0, r2, asr #18
 130:	01110100 	tsteq	r1, r0, lsl #2
 134:	0b130e25 	bleq	4c39d0 <startup-0x1fb3c630>
 138:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 13c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 140:	00001710 	andeq	r1, r0, r0, lsl r7
 144:	0b002402 	bleq	9154 <startup-0x1fff6eac>
 148:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 14c:	0300000e 	movweq	r0, #14
 150:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 154:	0b3a0e03 	bleq	e83968 <startup-0x1f17c698>
 158:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 15c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 160:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 164:	00130119 	andseq	r0, r3, r9, lsl r1
 168:	00050400 	andeq	r0, r5, r0, lsl #8
 16c:	0b3a0803 	bleq	e82180 <startup-0x1f17de80>
 170:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 174:	00001802 	andeq	r1, r0, r2, lsl #16
 178:	3f002e05 	svccc	0x00002e05
 17c:	3a0e0319 	bcc	380de8 <startup-0x1fc7f218>
 180:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 184:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 188:	97184006 	ldrls	r4, [r8, -r6]
 18c:	00001942 	andeq	r1, r0, r2, asr #18
 190:	01110100 	tsteq	r1, r0, lsl #2
 194:	0b130e25 	bleq	4c3a30 <startup-0x1fb3c5d0>
 198:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 19c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1a0:	00001710 	andeq	r1, r0, r0, lsl r7
 1a4:	03011302 	movweq	r1, #4866	; 0x1302
 1a8:	3a050b0e 	bcc	142de8 <startup-0x1febd218>
 1ac:	010b3b0b 	tsteq	fp, fp, lsl #22
 1b0:	03000013 	movweq	r0, #19
 1b4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 1b8:	0b3b0b3a 	bleq	ec2ea8 <startup-0x1f13d158>
 1bc:	0b381349 	bleq	e04ee8 <startup-0x1f1fb118>
 1c0:	0d040000 	stceq	0, cr0, [r4, #-0]
 1c4:	3a0e0300 	bcc	380dcc <startup-0x1fc7f234>
 1c8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1cc:	00053813 	andeq	r3, r5, r3, lsl r8
 1d0:	01010500 	tsteq	r1, r0, lsl #10
 1d4:	13011349 	movwne	r1, #4937	; 0x1349
 1d8:	21060000 	mrscs	r0, (UNDEF: 6)
 1dc:	2f134900 	svccs	0x00134900
 1e0:	0700000b 	streq	r0, [r0, -fp]
 1e4:	0b0b0024 	bleq	2c027c <startup-0x1fd3fd84>
 1e8:	0e030b3e 	vmoveq.16	d3[0], r0
 1ec:	15080000 	strne	r0, [r8, #-0]
 1f0:	01192701 	tsteq	r9, r1, lsl #14
 1f4:	09000013 	stmdbeq	r0, {r0, r1, r4}
 1f8:	13490005 	movtne	r0, #36869	; 0x9005
 1fc:	0f0a0000 	svceq	0x000a0000
 200:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 204:	0b000013 	bleq	258 <startup-0x1ffffda8>
 208:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 20c:	0b3b0b3a 	bleq	ec2efc <startup-0x1f13d104>
 210:	00001349 	andeq	r1, r0, r9, asr #6
 214:	0300340c 	movweq	r3, #1036	; 0x40c
 218:	3b0b3a0e 	blcc	2cea58 <startup-0x1fd315a8>
 21c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 220:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
 224:	0b3e0104 	bleq	f8063c <startup-0x1f07f9c4>
 228:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 22c:	0b3b0b3a 	bleq	ec2f1c <startup-0x1f13d0e4>
 230:	00001301 	andeq	r1, r0, r1, lsl #6
 234:	0300280e 	movweq	r2, #2062	; 0x80e
 238:	000b1c0e 	andeq	r1, fp, lr, lsl #24
 23c:	00280f00 	eoreq	r0, r8, r0, lsl #30
 240:	0b1c0803 	bleq	702254 <startup-0x1f8fddac>
 244:	34100000 	ldrcc	r0, [r0], #-0
 248:	3a0e0300 	bcc	380e50 <startup-0x1fc7f1b0>
 24c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 250:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 254:	11000018 	tstne	r0, r8, lsl r0
 258:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 25c:	0b3a0e03 	bleq	e83a70 <startup-0x1f17c590>
 260:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 264:	06120111 			; <UNDEFINED> instruction: 0x06120111
 268:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 26c:	00130119 	andseq	r0, r3, r9, lsl r1
 270:	00051200 	andeq	r1, r5, r0, lsl #4
 274:	0b3a0e03 	bleq	e83a88 <startup-0x1f17c578>
 278:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 27c:	00001802 	andeq	r1, r0, r2, lsl #16
 280:	11010b13 	tstne	r1, r3, lsl fp
 284:	00061201 	andeq	r1, r6, r1, lsl #4
 288:	00341400 	eorseq	r1, r4, r0, lsl #8
 28c:	0b3a0803 	bleq	e822a0 <startup-0x1f17dd60>
 290:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 294:	00001802 	andeq	r1, r0, r2, lsl #16
 298:	0b002415 	bleq	92f4 <startup-0x1fff6d0c>
 29c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 2a0:	16000008 	strne	r0, [r0], -r8
 2a4:	08030005 	stmdaeq	r3, {r0, r2}
 2a8:	0b3b0b3a 	bleq	ec2f98 <startup-0x1f13d068>
 2ac:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2b0:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 2b4:	03193f01 	tsteq	r9, #1, 30
 2b8:	3b0b3a0e 	blcc	2ceaf8 <startup-0x1fd31508>
 2bc:	1119270b 	tstne	r9, fp, lsl #14
 2c0:	40061201 	andmi	r1, r6, r1, lsl #4
 2c4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2c8:	00001301 	andeq	r1, r0, r1, lsl #6
 2cc:	3f002e18 	svccc	0x00002e18
 2d0:	3a0e0319 	bcc	380f3c <startup-0x1fc7f0c4>
 2d4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 2d8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2dc:	96184006 	ldrls	r4, [r8], -r6
 2e0:	00001942 	andeq	r1, r0, r2, asr #18
 2e4:	3f002e19 	svccc	0x00002e19
 2e8:	3a0e0319 	bcc	380f54 <startup-0x1fc7f0ac>
 2ec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 2f0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2f4:	97184006 	ldrls	r4, [r8, -r6]
 2f8:	00001942 	andeq	r1, r0, r2, asr #18
 2fc:	3f012e1a 	svccc	0x00012e1a
 300:	3a0e0319 	bcc	380f6c <startup-0x1fc7f094>
 304:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 308:	11134919 	tstne	r3, r9, lsl r9
 30c:	40061201 	andmi	r1, r6, r1, lsl #4
 310:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 314:	00001301 	andeq	r1, r0, r1, lsl #6
 318:	3f002e1b 	svccc	0x00002e1b
 31c:	3a0e0319 	bcc	380f88 <startup-0x1fc7f078>
 320:	110b3b0b 	tstne	fp, fp, lsl #22
 324:	40061201 	andmi	r1, r6, r1, lsl #4
 328:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 32c:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
 330:	03193f01 	tsteq	r9, #1, 30
 334:	3b0b3a0e 	blcc	2ceb74 <startup-0x1fd3148c>
 338:	1119270b 	tstne	r9, fp, lsl #14
 33c:	40061201 	andmi	r1, r6, r1, lsl #4
 340:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 344:	01000000 	mrseq	r0, (UNDEF: 0)
 348:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 34c:	0e030b13 	vmoveq.32	d3[0], r0
 350:	01110e1b 	tsteq	r1, fp, lsl lr
 354:	17100612 			; <UNDEFINED> instruction: 0x17100612
 358:	13020000 	movwne	r0, #8192	; 0x2000
 35c:	3a0b0b01 	bcc	2c2f68 <startup-0x1fd3d098>
 360:	010b3b0b 	tsteq	fp, fp, lsl #22
 364:	03000013 	movweq	r0, #19
 368:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 36c:	0b3b0b3a 	bleq	ec305c <startup-0x1f13cfa4>
 370:	0b381349 	bleq	e0509c <startup-0x1f1faf64>
 374:	24040000 	strcs	r0, [r4], #-0
 378:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 37c:	000e030b 	andeq	r0, lr, fp, lsl #6
 380:	00160500 	andseq	r0, r6, r0, lsl #10
 384:	0b3a0e03 	bleq	e83b98 <startup-0x1f17c468>
 388:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 38c:	0d060000 	stceq	0, cr0, [r6, #-0]
 390:	3a0e0300 	bcc	380f98 <startup-0x1fc7f068>
 394:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 398:	000b3813 	andeq	r3, fp, r3, lsl r8
 39c:	00240700 	eoreq	r0, r4, r0, lsl #14
 3a0:	0b3e0b0b 	bleq	f82fd4 <startup-0x1f07d02c>
 3a4:	00000803 	andeq	r0, r0, r3, lsl #16
 3a8:	49010108 	stmdbmi	r1, {r3, r8}
 3ac:	00130113 	andseq	r0, r3, r3, lsl r1
 3b0:	00210900 	eoreq	r0, r1, r0, lsl #18
 3b4:	0b2f1349 	bleq	bc50e0 <startup-0x1f43af20>
 3b8:	0f0a0000 	svceq	0x000a0000
 3bc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 3c0:	0b000013 	bleq	414 <startup-0x1ffffbec>
 3c4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 3c8:	0b3a0b0b 	bleq	e82ffc <startup-0x1f17d004>
 3cc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 3d0:	150c0000 	strne	r0, [ip, #-0]
 3d4:	01192701 	tsteq	r9, r1, lsl #14
 3d8:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 3dc:	13490005 	movtne	r0, #36869	; 0x9005
 3e0:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 3e4:	03193f01 	tsteq	r9, #1, 30
 3e8:	3b0b3a0e 	blcc	2cec28 <startup-0x1fd313d8>
 3ec:	1119270b 	tstne	r9, fp, lsl #14
 3f0:	40061201 	andmi	r1, r6, r1, lsl #4
 3f4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 3f8:	00001301 	andeq	r1, r0, r1, lsl #6
 3fc:	0300050f 	movweq	r0, #1295	; 0x50f
 400:	3b0b3a0e 	blcc	2cec40 <startup-0x1fd313c0>
 404:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 408:	10000018 	andne	r0, r0, r8, lsl r0
 40c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 410:	0b3a0e03 	bleq	e83c24 <startup-0x1f17c3dc>
 414:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 418:	1301193c 	movwne	r1, #6460	; 0x193c
 41c:	18110000 	ldmdane	r1, {}	; <UNPREDICTABLE>
 420:	12000000 	andne	r0, r0, #0
 424:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 428:	0b3b0b3a 	bleq	ec3118 <startup-0x1f13cee8>
 42c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 430:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 434:	03193f01 	tsteq	r9, #1, 30
 438:	3b0b3a0e 	blcc	2cec78 <startup-0x1fd31388>
 43c:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 440:	14000019 	strne	r0, [r0], #-25	; 0xffffffe7
 444:	08030005 	stmdaeq	r3, {r0, r2}
 448:	0b3b0b3a 	bleq	ec3138 <startup-0x1f13cec8>
 44c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 450:	0b150000 	bleq	540458 <startup-0x1fabfba8>
 454:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 458:	16000006 	strne	r0, [r0], -r6
 45c:	08030034 	stmdaeq	r3, {r2, r4, r5}
 460:	0b3b0b3a 	bleq	ec3150 <startup-0x1f13ceb0>
 464:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 468:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 46c:	03193f01 	tsteq	r9, #1, 30
 470:	3b0b3a0e 	blcc	2cecb0 <startup-0x1fd31350>
 474:	1119270b 	tstne	r9, fp, lsl #14
 478:	40061201 	andmi	r1, r6, r1, lsl #4
 47c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 480:	00001301 	andeq	r1, r0, r1, lsl #6
 484:	3f002e18 	svccc	0x00002e18
 488:	3a0e0319 	bcc	3810f4 <startup-0x1fc7ef0c>
 48c:	110b3b0b 	tstne	fp, fp, lsl #22
 490:	40061201 	andmi	r1, r6, r1, lsl #4
 494:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 498:	01000000 	mrseq	r0, (UNDEF: 0)
 49c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 4a0:	0e030b13 	vmoveq.32	d3[0], r0
 4a4:	01110e1b 	tsteq	r1, fp, lsl lr
 4a8:	17100612 			; <UNDEFINED> instruction: 0x17100612
 4ac:	04020000 	streq	r0, [r2], #-0
 4b0:	0b0b3e01 	bleq	2cfcbc <startup-0x1fd30344>
 4b4:	3a13490b 	bcc	4d28e8 <startup-0x1fb2d718>
 4b8:	010b3b0b 	tsteq	fp, fp, lsl #22
 4bc:	03000013 	movweq	r0, #19
 4c0:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 4c4:	00000b1c 	andeq	r0, r0, ip, lsl fp
 4c8:	03002804 	movweq	r2, #2052	; 0x804
 4cc:	000b1c08 	andeq	r1, fp, r8, lsl #24
 4d0:	00240500 	eoreq	r0, r4, r0, lsl #10
 4d4:	0b3e0b0b 	bleq	f83108 <startup-0x1f07cef8>
 4d8:	00000e03 	andeq	r0, r0, r3, lsl #28
 4dc:	3f002e06 	svccc	0x00002e06
 4e0:	3a0e0319 	bcc	38114c <startup-0x1fc7eeb4>
 4e4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 4e8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 4ec:	97184006 	ldrls	r4, [r8, -r6]
 4f0:	00001942 	andeq	r1, r0, r2, asr #18
 4f4:	3f012e07 	svccc	0x00012e07
 4f8:	3a0e0319 	bcc	381164 <startup-0x1fc7ee9c>
 4fc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 500:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 504:	96184006 	ldrls	r4, [r8], -r6
 508:	13011942 	movwne	r1, #6466	; 0x1942
 50c:	05080000 	streq	r0, [r8, #-0]
 510:	3a080300 	bcc	201118 <startup-0x1fdfeee8>
 514:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 518:	00180213 	andseq	r0, r8, r3, lsl r2
 51c:	00340900 	eorseq	r0, r4, r0, lsl #18
 520:	0b3a0e03 	bleq	e83d34 <startup-0x1f17c2cc>
 524:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 528:	00001802 	andeq	r1, r0, r2, lsl #16
 52c:	0b00240a 	bleq	955c <startup-0x1fff6aa4>
 530:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 534:	0b000008 	bleq	55c <startup-0x1ffffaa4>
 538:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 53c:	0b3a0e03 	bleq	e83d50 <startup-0x1f17c2b0>
 540:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 544:	06120111 			; <UNDEFINED> instruction: 0x06120111
 548:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 54c:	0c000019 	stceq	0, cr0, [r0], {25}
 550:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 554:	0b3a0e03 	bleq	e83d68 <startup-0x1f17c298>
 558:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 55c:	01111349 	tsteq	r1, r9, asr #6
 560:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 564:	01194296 			; <UNDEFINED> instruction: 0x01194296
 568:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 56c:	08030034 	stmdaeq	r3, {r2, r4, r5}
 570:	0b3b0b3a 	bleq	ec3260 <startup-0x1f13cda0>
 574:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 578:	050e0000 	streq	r0, [lr, #-0]
 57c:	3a0e0300 	bcc	381184 <startup-0x1fc7ee7c>
 580:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 584:	00180213 	andseq	r0, r8, r3, lsl r2
 588:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
 58c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 590:	0b3b0b3a 	bleq	ec3280 <startup-0x1f13cd80>
 594:	01111927 	tsteq	r1, r7, lsr #18
 598:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 59c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 5a0:	10000013 	andne	r0, r0, r3, lsl r0
 5a4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 5a8:	0b3a0e03 	bleq	e83dbc <startup-0x1f17c244>
 5ac:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 5b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5b4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 5b8:	00000019 	andeq	r0, r0, r9, lsl r0
 5bc:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 5c0:	030b130e 	movweq	r1, #45838	; 0xb30e
 5c4:	110e1b0e 	tstne	lr, lr, lsl #22
 5c8:	10061201 	andne	r1, r6, r1, lsl #4
 5cc:	02000017 	andeq	r0, r0, #23
 5d0:	0b0b0024 	bleq	2c0668 <startup-0x1fd3f998>
 5d4:	0e030b3e 	vmoveq.16	d3[0], r0
 5d8:	35030000 	strcc	r0, [r3, #-0]
 5dc:	00134900 	andseq	r4, r3, r0, lsl #18
 5e0:	012e0400 			; <UNDEFINED> instruction: 0x012e0400
 5e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 5e8:	0b3b0b3a 	bleq	ec32d8 <startup-0x1f13cd28>
 5ec:	13491927 	movtne	r1, #39207	; 0x9927
 5f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5f4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 5f8:	00130119 	andseq	r0, r3, r9, lsl r1
 5fc:	00340500 	eorseq	r0, r4, r0, lsl #10
 600:	0b3a0e03 	bleq	e83e14 <startup-0x1f17c1ec>
 604:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 608:	00001802 	andeq	r1, r0, r2, lsl #16
 60c:	11010b06 	tstne	r1, r6, lsl #22
 610:	00061201 	andeq	r1, r6, r1, lsl #4
 614:	00340700 	eorseq	r0, r4, r0, lsl #14
 618:	0b3a0803 	bleq	e8262c <startup-0x1f17d9d4>
 61c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 620:	00001802 	andeq	r1, r0, r2, lsl #16
 624:	3f012e08 	svccc	0x00012e08
 628:	3a0e0319 	bcc	381294 <startup-0x1fc7ed6c>
 62c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 630:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 634:	97184006 	ldrls	r4, [r8, -r6]
 638:	13011942 	movwne	r1, #6466	; 0x1942
 63c:	05090000 	streq	r0, [r9, #-0]
 640:	3a080300 	bcc	201248 <startup-0x1fdfedb8>
 644:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 648:	00180213 	andseq	r0, r8, r3, lsl r2
 64c:	01010a00 	tsteq	r1, r0, lsl #20
 650:	13011349 	movwne	r1, #4937	; 0x1349
 654:	210b0000 	mrscs	r0, (UNDEF: 11)
 658:	2f134900 	svccs	0x00134900
 65c:	0c00000b 	stceq	0, cr0, [r0], {11}
 660:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 664:	0b3a0e03 	bleq	e83e78 <startup-0x1f17c188>
 668:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 66c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 670:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 674:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000036c 	andeq	r0, r0, ip, ror #6
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	03cb0002 	biceq	r0, fp, #2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	2000037c 	andcs	r0, r0, ip, ror r3
  3c:	0000006e 	andeq	r0, r0, lr, rrx
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	04670002 	strbteq	r0, [r7], #-2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200003ec 	andcs	r0, r0, ip, ror #7
  5c:	00000888 	andeq	r0, r0, r8, lsl #17
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	08e90002 	stmiaeq	r9!, {r1}^
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000c74 	andcs	r0, r0, r4, ror ip
  7c:	000001dc 	ldrdeq	r0, [r0], -ip
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	0c840002 	stceq	0, cr0, [r4], {2}
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000e50 	andcs	r0, r0, r0, asr lr
  9c:	000002a8 	andeq	r0, r0, r8, lsr #5
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	0eb50002 	cdpeq	0, 11, cr0, cr5, cr2, {0}
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200010f8 	strdcs	r1, [r0], -r8
  bc:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	2000037c 	andcs	r0, r0, ip, ror r3
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000eb 	andeq	r0, r0, fp, ror #1
   4:	00670002 	rsbeq	r0, r7, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	756d6173 	strbvc	r6, [sp, #-371]!	; 0xfffffe8d
  28:	6f442f65 	svcvs	0x00442f65
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	4c706f4d 	ldclmi	15, cr6, [r0], #-308	; 0xfffffecc
  38:	4d2f6261 	sfmmi	f6, 4, [pc, #-388]!	; fffffebc <p2paddle+0xdfffddc4>
  3c:	6570706f 	ldrbvs	r7, [r0, #-111]!	; 0xffffff91
  40:	7300006e 	movwvc	r0, #110	; 0x6e
  44:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  48:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  4c:	00000100 	andeq	r0, r0, r0, lsl #2
  50:	5f64636c 	svcpl	0x0064636c
  54:	76697264 	strbtvc	r7, [r9], -r4, ror #4
  58:	2e737265 	cdpcs	2, 7, cr7, cr3, cr5, {3}
  5c:	00010068 	andeq	r0, r1, r8, rrx
  60:	6e6f7000 	cdpvs	0, 6, cr7, cr15, cr0, {0}
  64:	676f6c67 	strbvs	r6, [pc, -r7, ror #24]!
  68:	682e6369 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sp, lr}
  6c:	00000100 	andeq	r0, r0, r0, lsl #2
  70:	02050000 	andeq	r0, r5, #0
  74:	20000000 	andcs	r0, r0, r0
  78:	025e1319 	subseq	r1, lr, #1677721600	; 0x64000000
  7c:	01010003 	tsteq	r1, r3
  80:	10020500 	andne	r0, r2, r0, lsl #10
  84:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  88:	5e0100c7 	cdppl	0, 0, cr0, cr1, cr7, {6}
  8c:	914c2f2f 	cmpls	ip, pc, lsr #30
  90:	4c73212f 	ldfmie	f2, [r3], #-188	; 0xffffff44
  94:	212f914b 			; <UNDEFINED> instruction: 0x212f914b
  98:	312f4f73 			; <UNDEFINED> instruction: 0x312f4f73
  9c:	592f7734 	stmdbpl	pc!, {r2, r4, r5, r8, r9, sl, ip, sp, lr}	; <UNPREDICTABLE>
  a0:	2f2f2f59 	svccs	0x002f2f59
  a4:	76086767 	strvc	r6, [r8], -r7, ror #14
  a8:	4b757568 	blmi	1d5d650 <startup-0x1e2a29b0>
  ac:	924b9192 	subls	r9, fp, #-2147483612	; 0x80000024
  b0:	91924b83 	orrsls	r4, r2, r3, lsl #23
  b4:	4c4b934b 	mcrrmi	3, 4, r9, fp, cr11
  b8:	01040200 	mrseq	r0, R12_usr
  bc:	4b064a06 	blmi	1928dc <startup-0x1fe6d724>
  c0:	01040200 	mrseq	r0, R12_usr
  c4:	0806d606 	stmdaeq	r6, {r1, r2, r9, sl, ip, lr, pc}
  c8:	4b59692f 	blmi	165a58c <startup-0x1e9a5a74>
  cc:	00937508 	addseq	r7, r3, r8, lsl #10
  d0:	06010402 	streq	r0, [r1], -r2, lsl #8
  d4:	004b0690 	umaaleq	r0, fp, r0, r6
  d8:	06010402 	streq	r0, [r1], -r2, lsl #8
  dc:	2f0806d6 	svccs	0x000806d6
  e0:	084b5969 	stmdaeq	fp, {r0, r3, r5, r6, r8, fp, ip, lr}^
  e4:	034c9375 	movteq	r9, #50037	; 0xc375
  e8:	0c023c53 	stceq	12, cr3, [r2], {83}	; 0x53
  ec:	6e010100 	adfvss	f0, f1, f0
  f0:	02000000 	andeq	r0, r0, #0
  f4:	00004500 	andeq	r4, r0, r0, lsl #10
  f8:	fb010200 	blx	40902 <startup-0x1ffbf6fe>
  fc:	01000d0e 	tsteq	r0, lr, lsl #26
 100:	00010101 	andeq	r0, r1, r1, lsl #2
 104:	00010000 	andeq	r0, r1, r0
 108:	3a430100 	bcc	10c0510 <startup-0x1ef3faf0>
 10c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 110:	732f7372 			; <UNDEFINED> instruction: 0x732f7372
 114:	65756d61 	ldrbvs	r6, [r5, #-3425]!	; 0xfffff29f
 118:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 11c:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 120:	4d2f7374 	stcmi	3, cr7, [pc, #-464]!	; ffffff58 <p2paddle+0xdfffde60>
 124:	614c706f 	cmpvs	ip, pc, rrx
 128:	6f4d2f62 	svcvs	0x004d2f62
 12c:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
 130:	65640000 	strbvs	r0, [r4, #-0]!
 134:	2e79616c 	rpwcsez	f6, f1, #4.0
 138:	00010063 	andeq	r0, r1, r3, rrx
 13c:	05000000 	streq	r0, [r0, #-0]
 140:	00037c02 	andeq	r7, r3, r2, lsl #24
 144:	3d2f1620 	stccc	6, cr1, [pc, #-128]!	; cc <startup-0x1fffff34>
 148:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
 14c:	06010402 	streq	r0, [r1], -r2, lsl #8
 150:	3d680620 	stclcc	6, cr0, [r8, #-128]!	; 0xffffff80
 154:	2e0a03a0 	cdpcs	3, 0, cr0, cr10, cr0, {5}
 158:	4f4c513e 	svcmi	0x004c513e
 15c:	01000402 	tsteq	r0, r2, lsl #8
 160:	00018801 	andeq	r8, r1, r1, lsl #16
 164:	6d000200 	sfmvs	f0, 4, [r0, #-0]
 168:	02000000 	andeq	r0, r0, #0
 16c:	0d0efb01 	vstreq	d15, [lr, #-4]
 170:	01010100 	mrseq	r0, (UNDEF: 17)
 174:	00000001 	andeq	r0, r0, r1
 178:	01000001 	tsteq	r0, r1
 17c:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff741 <p2paddle+0xdfffd649>
 180:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 184:	6d61732f 	stclvs	3, cr7, [r1, #-188]!	; 0xffffff44
 188:	442f6575 	strtmi	r6, [pc], #-1397	; 190 <startup-0x1ffffe70>
 18c:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 190:	73746e65 	cmnvc	r4, #1616	; 0x650
 194:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 198:	2f62614c 	svccs	0x0062614c
 19c:	70706f4d 	rsbsvc	r6, r0, sp, asr #30
 1a0:	00006e65 	andeq	r6, r0, r5, ror #28
 1a4:	5f64636c 	svcpl	0x0064636c
 1a8:	76697264 	strbtvc	r7, [r9], -r4, ror #4
 1ac:	2e737265 	cdpcs	2, 7, cr7, cr3, cr5, {3}
 1b0:	00010063 	andeq	r0, r1, r3, rrx
 1b4:	64636c00 	strbtvs	r6, [r3], #-3072	; 0xfffff400
 1b8:	6972645f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, sp, lr}^
 1bc:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 1c0:	0100682e 	tsteq	r0, lr, lsr #16
 1c4:	6f700000 	svcvs	0x00700000
 1c8:	65447472 	strbvs	r7, [r4, #-1138]	; 0xfffffb8e
 1cc:	72616c63 	rsbvc	r6, r1, #25344	; 0x6300
 1d0:	00682e65 	rsbeq	r2, r8, r5, ror #28
 1d4:	00000001 	andeq	r0, r0, r1
 1d8:	ec020500 	cfstr32	mvfx0, [r2], {-0}
 1dc:	1a200003 	bne	8001f0 <startup-0x1f7ffe10>
 1e0:	7a037a67 	bvc	deb84 <startup-0x1ff2147c>
 1e4:	911b5020 	tstls	fp, r0, lsr #32
 1e8:	7692d7d7 			; <UNDEFINED> instruction: 0x7692d7d7
 1ec:	ad3d832f 	ldcge	3, cr8, [sp, #-188]!	; 0xffffff44
 1f0:	83212f2f 			; <UNDEFINED> instruction: 0x83212f2f
 1f4:	2f832f2f 	svccs	0x00832f2f
 1f8:	6e2e7a03 	vmulvs.f32	s14, s28, s6
 1fc:	67bc3d83 	ldrvs	r3, [ip, r3, lsl #27]!
 200:	59833d83 	stmibpl	r3, {r0, r1, r7, r8, sl, fp, ip, sp}
 204:	2f832f2f 	svccs	0x00832f2f
 208:	3d83592f 	vstrcc.16	s10, [r3, #94]	; 0x5e	; <UNPREDICTABLE>
 20c:	59303d59 	ldmdbpl	r0!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
 210:	e63d313d 			; <UNDEFINED> instruction: 0xe63d313d
 214:	2f594b91 	svccs	0x00594b91
 218:	2f2f832f 	svccs	0x002f832f
 21c:	303d5983 	eorscc	r5, sp, r3, lsl #19
 220:	3d303d59 	ldccc	13, cr3, [r0, #-356]!	; 0xfffffe9c
 224:	91843d83 	orrls	r3, r4, r3, lsl #27
 228:	83835983 	orrhi	r5, r3, #2146304	; 0x20c000
 22c:	59839168 	stmibpl	r3, {r3, r5, r6, r8, ip, pc}
 230:	677683ad 	ldrbvs	r8, [r6, -sp, lsr #7]!
 234:	2f4c6759 	svccs	0x004c6759
 238:	832f843d 			; <UNDEFINED> instruction: 0x832f843d
 23c:	83863e84 	orrhi	r3, r6, #132, 28	; 0x840
 240:	4b4b4b4b 	blmi	12d2f74 <startup-0x1ed2d08c>
 244:	3d683d4b 	stclcc	13, cr3, [r8, #-300]!	; 0xfffffed4
 248:	004bad3d 	subeq	sl, fp, sp, lsr sp
 24c:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 250:	03040200 	movweq	r0, #16896	; 0x4200
 254:	04020049 	streq	r0, [r2], #-73	; 0xffffffb7
 258:	003c0601 	eorseq	r0, ip, r1, lsl #12
 25c:	06020402 	streq	r0, [r2], -r2, lsl #8
 260:	04020039 	streq	r0, [r2], #-57	; 0xffffffc7
 264:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 268:	59e54c43 	stmibpl	r5!, {r0, r1, r6, sl, fp, lr}^
 26c:	9114085a 	tstls	r4, sl, asr r8
 270:	5a4b5b4b 	bpl	12d6fa4 <startup-0x1ed2905c>
 274:	ad91d7bb 	ldcge	7, cr13, [r1, #748]	; 0x2ec
 278:	03d8a14b 	bicseq	sl, r8, #-1073741806	; 0xc0000012
 27c:	1403ac6d 	strne	sl, [r3], #-3181	; 0xfffff393
 280:	594f3e20 	stmdbpl	pc, {r5, r9, sl, fp, ip, sp}^	; <UNPREDICTABLE>
 284:	4b750859 	blmi	1d423f0 <startup-0x1e2bdc10>
 288:	4b774b59 	blmi	1dd2ff4 <startup-0x1e22d00c>
 28c:	bbc9c976 	bllt	ff27286c <p2paddle+0xdf270774>
 290:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
 294:	08710302 	ldmdaeq	r1!, {r1, r8, r9}^
 298:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
 29c:	00660601 	rsbeq	r0, r6, r1, lsl #12
 2a0:	06020402 	streq	r0, [r2], -r2, lsl #8
 2a4:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
 2a8:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 2ac:	4c741503 	cfldr64mi	mvdx1, [r4], #-12
 2b0:	4b1408f4 	blmi	502688 <startup-0x1fafd978>
 2b4:	4b914c5b 	blmi	fe453428 <p2paddle+0xde451330>
 2b8:	084b6808 	stmdaeq	fp, {r3, fp, sp, lr}^
 2bc:	087203ae 	ldmdaeq	r2!, {r1, r2, r3, r5, r7, r8, r9}^
 2c0:	200f03ac 	andcs	r0, pc, ip, lsr #7
 2c4:	4b3c0b03 	blmi	f02ed8 <startup-0x1f0fd128>
 2c8:	0200833d 	andeq	r8, r0, #-201326592	; 0xf4000000
 2cc:	003d0304 	eorseq	r0, sp, r4, lsl #6
 2d0:	81030402 	tsthi	r3, r2, lsl #8
 2d4:	01040200 	mrseq	r0, R12_usr
 2d8:	02003c06 	andeq	r3, r0, #1536	; 0x600
 2dc:	3a060204 	bcc	180af4 <startup-0x1fe7f50c>
 2e0:	01040200 	mrseq	r0, R12_usr
 2e4:	42063c06 	andmi	r3, r6, #1536	; 0x600
 2e8:	01000402 	tsteq	r0, r2, lsl #8
 2ec:	0000b801 	andeq	fp, r0, r1, lsl #16
 2f0:	58000200 	stmdapl	r0, {r9}
 2f4:	02000000 	andeq	r0, r0, #0
 2f8:	0d0efb01 	vstreq	d15, [lr, #-4]
 2fc:	01010100 	mrseq	r0, (UNDEF: 17)
 300:	00000001 	andeq	r0, r0, r1
 304:	01000001 	tsteq	r0, r1
 308:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff8cd <p2paddle+0xdfffd7d5>
 30c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 310:	6d61732f 	stclvs	3, cr7, [r1, #-188]!	; 0xffffff44
 314:	442f6575 	strtmi	r6, [pc], #-1397	; 31c <startup-0x1ffffce4>
 318:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 31c:	73746e65 	cmnvc	r4, #1616	; 0x650
 320:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 324:	2f62614c 	svccs	0x0062614c
 328:	70706f4d 	rsbsvc	r6, r0, sp, asr #30
 32c:	00006e65 	andeq	r6, r0, r5, ror #28
 330:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 334:	69676f6c 	stmdbvs	r7!, {r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 338:	00632e63 	rsbeq	r2, r3, r3, ror #28
 33c:	70000001 	andvc	r0, r0, r1
 340:	6c676e6f 	stclvs	14, cr6, [r7], #-444	; 0xfffffe44
 344:	6369676f 	cmnvs	r9, #29097984	; 0x1bc0000
 348:	0100682e 	tsteq	r0, lr, lsr #16
 34c:	00000000 	andeq	r0, r0, r0
 350:	0c740205 	lfmeq	f0, 2, [r4], #-20	; 0xffffffec
 354:	30192000 	andscc	r2, r9, r0
 358:	3d3d673e 	ldccc	7, cr6, [sp, #-248]!	; 0xffffff08
 35c:	3d3d674c 	ldccc	7, cr6, [sp, #-304]!	; 0xfffffed0
 360:	02004b4c 	andeq	r4, r0, #76, 22	; 0x13000
 364:	003d0304 	eorseq	r0, sp, r4, lsl #6
 368:	bb030402 	bllt	c1378 <startup-0x1ff3ec88>
 36c:	03040200 	movweq	r0, #16896	; 0x4200
 370:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
 374:	02006303 	andeq	r6, r0, #201326592	; 0xc000000
 378:	3c060104 	stfccs	f0, [r6], {4}
 37c:	4b4c6b06 	blmi	131af9c <startup-0x1ece5064>
 380:	03040200 	movweq	r0, #16896	; 0x4200
 384:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 388:	008f0803 	addeq	r0, pc, r3, lsl #16
 38c:	06010402 	streq	r0, [r1], -r2, lsl #8
 390:	4c69063c 	stclmi	6, cr0, [r9], #-240	; 0xffffff10
 394:	76754b4b 	ldrbtvc	r4, [r5], -fp, asr #22
 398:	4b5a2108 	blmi	16887c0 <startup-0x1e977840>
 39c:	912f754c 			; <UNDEFINED> instruction: 0x912f754c
 3a0:	2f599fc9 	svccs	0x00599fc9
 3a4:	01000402 	tsteq	r0, r2, lsl #8
 3a8:	0000c601 	andeq	ip, r0, r1, lsl #12
 3ac:	5e000200 	cdppl	2, 0, cr0, cr0, cr0, {0}
 3b0:	02000000 	andeq	r0, r0, #0
 3b4:	0d0efb01 	vstreq	d15, [lr, #-4]
 3b8:	01010100 	mrseq	r0, (UNDEF: 17)
 3bc:	00000001 	andeq	r0, r0, r1
 3c0:	01000001 	tsteq	r0, r1
 3c4:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff989 <p2paddle+0xdfffd891>
 3c8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 3cc:	6d61732f 	stclvs	3, cr7, [r1, #-188]!	; 0xffffff44
 3d0:	442f6575 	strtmi	r6, [pc], #-1397	; 3d8 <startup-0x1ffffc28>
 3d4:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 3d8:	73746e65 	cmnvc	r4, #1616	; 0x650
 3dc:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 3e0:	2f62614c 	svccs	0x0062614c
 3e4:	70706f4d 	rsbsvc	r6, r0, sp, asr #30
 3e8:	00006e65 	andeq	r6, r0, r5, ror #28
 3ec:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 3f0:	72645f69 	rsbvc	r5, r4, #420	; 0x1a4
 3f4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 3f8:	00632e73 	rsbeq	r2, r3, r3, ror lr
 3fc:	70000001 	andvc	r0, r0, r1
 400:	4474726f 	ldrbtmi	r7, [r4], #-623	; 0xfffffd91
 404:	616c6365 	cmnvs	ip, r5, ror #6
 408:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
 40c:	00000100 	andeq	r0, r0, r0, lsl #2
 410:	02050000 	andeq	r0, r5, #0
 414:	20000e50 	andcs	r0, r0, r0, asr lr
 418:	bb596917 	bllt	165a87c <startup-0x1e9a5784>
 41c:	59686859 	stmdbpl	r8!, {r0, r3, r4, r6, fp, sp, lr}^
 420:	67684be5 	strbvs	r4, [r8, -r5, ror #23]!
 424:	3d4c3d2f 	stclcc	13, cr3, [ip, #-188]	; 0xffffff44
 428:	4b3f3d67 	blmi	fcf9cc <startup-0x1f030634>
 42c:	67762f3d 			; <UNDEFINED> instruction: 0x67762f3d
 430:	4c593d3d 	mrrcmi	13, 3, r3, r9, cr13
 434:	593d3d67 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}
 438:	3d673d4c 	stclcc	13, cr3, [r7, #-304]!	; 0xfffffed0
 43c:	922f6741 	eorls	r6, pc, #17039360	; 0x1040000
 440:	3d3d673d 	ldccc	7, cr6, [sp, #-244]!	; 0xffffff0c
 444:	842f6759 	strthi	r6, [pc], #-1881	; 44c <startup-0x1ffffbb4>
 448:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 44c:	06200601 	strteq	r0, [r0], -r1, lsl #12
 450:	3d3d3d84 	ldccc	13, cr3, [sp, #-528]!	; 0xfffffdf0
 454:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 458:	0200673e 	andeq	r6, r0, #16252928	; 0xf80000
 45c:	20060104 	andcs	r0, r6, r4, lsl #2
 460:	593d8306 	ldmdbpl	sp!, {r1, r2, r8, r9, pc}
 464:	75594c3d 	ldrbvc	r4, [r9, #-3133]	; 0xfffff3c3
 468:	3d2f4c9f 	stccc	12, cr4, [pc, #-636]!	; 1f4 <startup-0x1ffffe0c>
 46c:	0c023e3d 	stceq	14, cr3, [r2], {61}	; 0x3d
 470:	b5010100 	strlt	r0, [r1, #-256]	; 0xffffff00
 474:	02000000 	andeq	r0, r0, #0
 478:	00004e00 	andeq	r4, r0, r0, lsl #28
 47c:	fb010200 	blx	40c86 <startup-0x1ffbf37a>
 480:	01000d0e 	tsteq	r0, lr, lsl #26
 484:	00010101 	andeq	r0, r1, r1, lsl #2
 488:	00010000 	andeq	r0, r1, r0
 48c:	3a430100 	bcc	10c0894 <startup-0x1ef3f76c>
 490:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 494:	732f7372 			; <UNDEFINED> instruction: 0x732f7372
 498:	65756d61 	ldrbvs	r6, [r5, #-3425]!	; 0xfffff29f
 49c:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 4a0:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 4a4:	4d2f7374 	stcmi	3, cr7, [pc, #-464]!	; 2dc <startup-0x1ffffd24>
 4a8:	614c706f 	cmpvs	ip, pc, rrx
 4ac:	6f4d2f62 	svcvs	0x004d2f62
 4b0:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
 4b4:	656b0000 	strbvs	r0, [fp, #-0]!
 4b8:	64617079 	strbtvs	r7, [r1], #-121	; 0xffffff87
 4bc:	6972645f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, sp, lr}^
 4c0:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 4c4:	0100632e 	tsteq	r0, lr, lsr #6
 4c8:	00000000 	andeq	r0, r0, r0
 4cc:	10f80205 	rscsne	r0, r8, r5, lsl #4
 4d0:	32172000 	andscc	r2, r7, #0
 4d4:	4d3d3d3d 	ldcmi	13, cr3, [sp, #-244]!	; 0xffffff0c
 4d8:	684b3eca 	stmdavs	fp, {r1, r3, r6, r7, r9, sl, fp, ip, sp}^
 4dc:	844b8359 	strbhi	r8, [fp], #-857	; 0xfffffca7
 4e0:	6467214c 	strbtvs	r2, [r7], #-332	; 0xfffffeb4
 4e4:	0402006a 	streq	r0, [r2], #-106	; 0xffffff96
 4e8:	ac750302 	ldclge	3, cr0, [r5], #-8
 4ec:	01040200 	mrseq	r0, R12_usr
 4f0:	03066606 	movweq	r6, #26118	; 0x6606
 4f4:	0200580f 	andeq	r5, r0, #983040	; 0xf0000
 4f8:	a0210104 	eorge	r0, r1, r4, lsl #2
 4fc:	76677967 	strbtvc	r7, [r7], -r7, ror #18
 500:	003d3d3e 	eorseq	r3, sp, lr, lsr sp
 504:	4b030402 	blmi	c1514 <startup-0x1ff3eaec>
 508:	03040200 	movweq	r0, #16896	; 0x4200
 50c:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 510:	02004b03 	andeq	r4, r0, #3072	; 0xc00
 514:	00830304 	addeq	r0, r3, r4, lsl #6
 518:	fc030402 	stc2	4, cr0, [r3], {2}
 51c:	01040200 	mrseq	r0, R12_usr
 520:	03065806 	movweq	r5, #26630	; 0x6806
 524:	022f4a10 	eoreq	r4, pc, #16, 20	; 0x10000
 528:	01010009 	tsteq	r1, r9

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
   4:	00707574 	rsbseq	r7, r0, r4, ror r5
   8:	6a626f70 	bvs	189bdd0 <startup-0x1e764230>
   c:	00746365 	rsbseq	r6, r4, r5, ror #6
  10:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  14:	00317265 	eorseq	r7, r1, r5, ror #4
  18:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
  1c:	72610074 	rsbvc	r0, r1, #116	; 0x74
  20:	73007667 	movwvc	r7, #1639	; 0x667
  24:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
  28:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
  2c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  30:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
  34:	69640074 	stmdbvs	r4!, {r2, r4, r5, r6}^
  38:	64007872 	strvs	r7, [r0], #-2162	; 0xfffff78e
  3c:	00797269 	rsbseq	r7, r9, r9, ror #4
  40:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
  44:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  48:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  4c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  50:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  54:	30373130 	eorscc	r3, r7, r0, lsr r1
  58:	20343039 	eorscs	r3, r4, r9, lsr r0
  5c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  60:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  64:	415b2029 	cmpmi	fp, r9, lsr #32
  68:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff31e <p2paddle+0xdfffd226>
  6c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  70:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  74:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  78:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  7c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  80:	6f697369 	svcvs	0x00697369
  84:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  88:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  8c:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
  90:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  94:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  98:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  9c:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  a0:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  a4:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  a8:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
  ac:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
  b0:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
  b4:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
  b8:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  bc:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  c0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  c4:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  c8:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  cc:	20672d20 	rsbcs	r2, r7, r0, lsr #26
  d0:	20304f2d 	eorscs	r4, r0, sp, lsr #30
  d4:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
  d8:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
  dc:	736e7500 	cmnvc	lr, #0, 10
  e0:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  e4:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
  e8:	43007261 	movwmi	r7, #609	; 0x261
  ec:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
  f0:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
  f4:	756d6173 	strbvc	r6, [sp, #-371]!	; 0xfffffe8d
  f8:	6f445c65 	svcvs	0x00445c65
  fc:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 100:	5c73746e 	cfldrdpl	mvd7, [r3], #-440	; 0xfffffe48
 104:	4c706f4d 	ldclmi	15, cr6, [r0], #-308	; 0xfffffecc
 108:	4d5c6261 	lfmmi	f6, 2, [ip, #-388]	; 0xfffffe7c
 10c:	6570706f 	ldrbvs	r7, [r0, #-111]!	; 0xffffff91
 110:	6573006e 	ldrbvs	r0, [r3, #-110]!	; 0xffffff92
 114:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 118:	00646565 	rsbeq	r6, r4, r5, ror #10
 11c:	78736f70 	ldmdavc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 120:	736f7000 	cmnvc	pc, #0
 124:	61620079 	smcvs	8201	; 0x2009
 128:	675f6c6c 	ldrbvs	r6, [pc, -ip, ror #24]
 12c:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 130:	00797274 	rsbseq	r7, r9, r4, ror r2
 134:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 138:	00327265 	eorseq	r7, r2, r5, ror #4
 13c:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
 140:	675f656c 	ldrbvs	r6, [pc, -ip, ror #10]
 144:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 148:	00797274 	rsbseq	r7, r9, r4, ror r2
 14c:	6e69616d 	powvsez	f6, f1, #5.0
 150:	70317000 	eorsvc	r7, r1, r0
 154:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 158:	32700065 	rsbscc	r0, r0, #101	; 0x65
 15c:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
 160:	7300656c 	movwvc	r6, #1388	; 0x56c
 164:	78657a69 	stmdavc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 168:	7a697300 	bvc	1a5cd70 <startup-0x1e5a3290>
 16c:	61007965 	tstvs	r0, r5, ror #18
 170:	00636772 	rsbeq	r6, r3, r2, ror r7
 174:	62706d74 	rsbsvs	r6, r0, #116, 26	; 0x1d00
 178:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 17c:	72640072 	rsbvc	r0, r4, #114	; 0x72
 180:	43007761 	movwmi	r7, #1889	; 0x761
 184:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 188:	2f737265 	svccs	0x00737265
 18c:	756d6173 	strbvc	r6, [sp, #-371]!	; 0xfffffe8d
 190:	6f442f65 	svcvs	0x00442f65
 194:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 198:	2f73746e 	svccs	0x0073746e
 19c:	4c706f4d 	ldclmi	15, cr6, [r0], #-308	; 0xfffffecc
 1a0:	4d2f6261 	sfmmi	f6, 4, [pc, #-388]!	; 24 <startup-0x1fffffdc>
 1a4:	6570706f 	ldrbvs	r7, [r0, #-111]!	; 0xffffff91
 1a8:	74732f6e 	ldrbtvc	r2, [r3], #-3950	; 0xfffff092
 1ac:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 1b0:	00632e70 	rsbeq	r2, r3, r0, ror lr
 1b4:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 1b8:	63537000 	cmpvs	r3, #0
 1bc:	0065726f 	rsbeq	r7, r5, pc, ror #4
 1c0:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 1c4:	0031676e 	eorseq	r6, r1, lr, ror #14
 1c8:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 1cc:	0032676e 	eorseq	r6, r2, lr, ror #14
 1d0:	6a624f74 	bvs	1893fa8 <startup-0x1e76c058>
 1d4:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 1d8:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 1dc:	6b007374 	blvs	1cfb4 <startup-0x1ffe304c>
 1e0:	00737965 	rsbseq	r7, r3, r5, ror #18
 1e4:	6f656770 	svcvs	0x00656770
 1e8:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 1ec:	3a430079 	bcc	10c03d8 <startup-0x1ef3fc28>
 1f0:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 1f4:	732f7372 			; <UNDEFINED> instruction: 0x732f7372
 1f8:	65756d61 	ldrbvs	r6, [r5, #-3425]!	; 0xfffff29f
 1fc:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 200:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 204:	4d2f7374 	stcmi	3, cr7, [pc, #-464]!	; 3c <startup-0x1fffffc4>
 208:	614c706f 	cmpvs	ip, pc, rrx
 20c:	6f4d2f62 	svcvs	0x004d2f62
 210:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
 214:	6c65642f 	cfstrdvs	mvd6, [r5], #-188	; 0xffffff44
 218:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 21c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 220:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 166 <startup-0x1ffffe9a>	; <UNPREDICTABLE>
 224:	6f726b69 	svcvs	0x00726b69
 228:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 22c:	345f7961 	ldrbcc	r7, [pc], #-2401	; 234 <startup-0x1ffffdcc>
 230:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 234:	616c6564 	cmnvs	ip, r4, ror #10
 238:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 23c:	00696c6c 	rsbeq	r6, r9, ip, ror #24
 240:	616c6564 	cmnvs	ip, r4, ror #10
 244:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
 248:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 24c:	53435f42 	movtpl	r5, #16194	; 0x3f42
 250:	75620032 	strbvc	r0, [r2, #-50]!	; 0xffffffce
 254:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 258:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 25c:	62007261 	andvs	r7, r0, #268435462	; 0x10000006
 260:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 264:	68635f72 	stmdavs	r3!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 268:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xfffff19f
 26c:	00676f4c 	rsbeq	r6, r7, ip, asr #30
 270:	61647075 	smcvs	18181	; 0x4705
 274:	00646574 	rsbeq	r6, r4, r4, ror r5
 278:	70617267 	rsbvc	r7, r1, r7, ror #4
 27c:	5f636968 	svcpl	0x00636968
 280:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 284:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 288:	75620061 	strbvc	r0, [r2, #-97]!	; 0xffffff9f
 28c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 290:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
 294:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 298:	636c7000 	cmnvs	ip, #0
 29c:	66754264 	ldrbtvs	r4, [r5], -r4, ror #4
 2a0:	72670066 	rsbvc	r0, r7, #102	; 0x66
 2a4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2a8:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 2ac:	5f6e6165 	svcpl	0x006e6165
 2b0:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 2b4:	42006e65 	andmi	r6, r0, #1616	; 0x650
 2b8:	0057525f 	subseq	r5, r7, pc, asr r2
 2bc:	70617267 	rsbvc	r7, r1, r7, ror #4
 2c0:	5f636968 	svcpl	0x00636968
 2c4:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 2c8:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0xffffff9b
 2cc:	7300706d 	movwvc	r7, #109	; 0x6d
 2d0:	63656c65 	cmnvs	r5, #25856	; 0x6500
 2d4:	6f635f74 	svcvs	0x00635f74
 2d8:	6f72746e 	svcvs	0x0072746e
 2dc:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 2e0:	2f3a4300 	svccs	0x003a4300
 2e4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 2e8:	61732f73 	cmnvs	r3, r3, ror pc
 2ec:	2f65756d 	svccs	0x0065756d
 2f0:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 2f4:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 2f8:	6f4d2f73 	svcvs	0x004d2f73
 2fc:	62614c70 	rsbvs	r4, r1, #112, 24	; 0x7000
 300:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 304:	2f6e6570 	svccs	0x006e6570
 308:	5f64636c 	svcpl	0x0064636c
 30c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
 310:	2e737265 	cdpcs	2, 7, cr7, cr3, cr5, {3}
 314:	5f420063 	svcpl	0x00420063
 318:	00545352 	subseq	r5, r4, r2, asr r3
 31c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 320:	64636c5f 	strbtvs	r6, [r3], #-3167	; 0xfffff3a1
 324:	64636c00 	strbtvs	r6, [r3], #-3072	; 0xfffff400
 328:	66667542 	strbtvs	r7, [r6], -r2, asr #10
 32c:	72447265 	subvc	r7, r4, #1342177286	; 0x50000006
 330:	67007761 	strvs	r7, [r0, -r1, ror #14]
 334:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 338:	705f6369 	subsvc	r6, pc, r9, ror #6
 33c:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 340:	525f4200 	subspl	r4, pc, #0, 4
 344:	6c700053 	ldclvs	0, cr0, [r0], #-332	; 0xfffffeb4
 348:	75426463 	strbvc	r6, [r2, #-1123]	; 0xfffffb9d
 34c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 350:	435f4200 	cmpmi	pc, #0, 4
 354:	42003153 	andmi	r3, r0, #-1073741804	; 0xc0000014
 358:	4c45535f 	mcrrmi	3, 5, r5, r5, cr15
 35c:	00544345 	subseq	r4, r4, r5, asr #6
 360:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 364:	72670078 	rsbvc	r0, r7, #120	; 0x78
 368:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 36c:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 370:	5f657469 	svcpl	0x00657469
 374:	61746164 	cmnvs	r4, r4, ror #2
 378:	64636c00 	strbtvs	r6, [r3], #-3072	; 0xfffff400
 37c:	66667542 	strbtvs	r7, [r6], -r2, asr #10
 380:	72577265 	subsvc	r7, r7, #1342177286	; 0x50000006
 384:	50657469 	rsbpl	r7, r5, r9, ror #8
 388:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 38c:	61726700 	cmnvs	r2, r0, lsl #14
 390:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 394:	6165725f 	cmnvs	r5, pc, asr r2
 398:	72670064 	rsbvc	r0, r7, #100	; 0x64
 39c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 3a0:	61775f63 	cmnvs	r7, r3, ror #30
 3a4:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
 3a8:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 3ac:	61726700 	cmnvs	r2, r0, lsl #14
 3b0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 3b4:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 3b8:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 3bc:	616d6d6f 	cmnvs	sp, pc, ror #26
 3c0:	7400646e 	strvc	r6, [r0], #-1134	; 0xfffffb92
 3c4:	6172446f 	cmnvs	r2, pc, ror #8
 3c8:	72670077 	rsbvc	r0, r7, #119	; 0x77
 3cc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 3d0:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 3d4:	61697469 	cmnvs	r9, r9, ror #8
 3d8:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
 3dc:	6e6f7000 	cdpvs	0, 6, cr7, cr15, cr0, {0}
 3e0:	6e695f67 	cdpvs	15, 6, cr5, cr9, cr7, {3}
 3e4:	6c705f63 	ldclvs	15, cr5, [r0], #-396	; 0xfffffe74
 3e8:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
 3ec:	726f6353 	rsbvc	r6, pc, #1275068417	; 0x4c000001
 3f0:	6f700065 	svcvs	0x00700065
 3f4:	735f676e 	cmpvc	pc, #28835840	; 0x1b80000
 3f8:	705f7465 	subsvc	r7, pc, r5, ror #8
 3fc:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
 400:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 404:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 408:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
 40c:	61007469 	tstvs	r0, r9, ror #8
 410:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 414:	746f675f 	strbtvc	r6, [pc], #-1887	; 41c <startup-0x1ffffbe4>
 418:	0079786f 	rsbseq	r7, r9, pc, ror #16
 41c:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 420:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 424:	3a430074 	bcc	10c05fc <startup-0x1ef3fa04>
 428:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 42c:	732f7372 			; <UNDEFINED> instruction: 0x732f7372
 430:	65756d61 	ldrbvs	r6, [r5, #-3425]!	; 0xfffff29f
 434:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 438:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 43c:	4d2f7374 	stcmi	3, cr7, [pc, #-464]!	; 274 <startup-0x1ffffd8c>
 440:	614c706f 	cmpvs	ip, pc, rrx
 444:	6f4d2f62 	svcvs	0x004d2f62
 448:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
 44c:	6e6f702f 	cdpvs	0, 6, cr7, cr15, cr15, {1}
 450:	676f6c67 	strbvs	r6, [pc, -r7, ror #24]!
 454:	632e6369 			; <UNDEFINED> instruction: 0x632e6369
 458:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 45c:	00786465 	rsbseq	r6, r8, r5, ror #8
 460:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 464:	73007265 	movwvc	r7, #613	; 0x265
 468:	6f5f7465 	svcvs	0x005f7465
 46c:	63656a62 	cmnvs	r5, #401408	; 0x62000
 470:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 474:	00646565 	rsbeq	r6, r4, r5, ror #10
 478:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 47c:	72640078 	rsbvc	r0, r4, #120	; 0x78
 480:	00797761 	rsbseq	r7, r9, r1, ror #14
 484:	61656c63 	cmnvs	r5, r3, ror #24
 488:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 48c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 490:	61726400 	cmnvs	r2, r0, lsl #8
 494:	626f5f77 	rsbvs	r5, pc, #476	; 0x1dc
 498:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 49c:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 4a0:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
 4a4:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 4a8:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
 4ac:	726f6353 	rsbvc	r6, pc, #1275068417	; 0x4c000001
 4b0:	70730065 	rsbsvc	r0, r3, r5, rrx
 4b4:	79646565 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 4b8:	63736100 	cmnvs	r3, #0, 2
 4bc:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 4c0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 4c4:	6168635f 	cmnvs	r8, pc, asr r3
 4c8:	73610072 	cmnvc	r1, #114	; 0x72
 4cc:	5f696963 	svcpl	0x00696963
 4d0:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 4d4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 4d8:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 4dc:	61007261 	tstvs	r0, r1, ror #4
 4e0:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 4e4:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 4e8:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 4ec:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 4f0:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 4f4:	73610072 	cmnvc	r1, #114	; 0x72
 4f8:	5f696963 	svcpl	0x00696963
 4fc:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 500:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 504:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 508:	63736100 	cmnvs	r3, #0, 2
 50c:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 510:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 514:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 518:	73610061 	cmnvc	r1, #97	; 0x61
 51c:	5f696963 	svcpl	0x00696963
 520:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 524:	6174735f 	cmnvs	r4, pc, asr r3
 528:	00737574 	rsbseq	r7, r3, r4, ror r5
 52c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 530:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 534:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
 538:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 53c:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 540:	3a430072 	bcc	10c0710 <startup-0x1ef3f8f0>
 544:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 548:	732f7372 			; <UNDEFINED> instruction: 0x732f7372
 54c:	65756d61 	ldrbvs	r6, [r5, #-3425]!	; 0xfffff29f
 550:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 554:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 558:	4d2f7374 	stcmi	3, cr7, [pc, #-464]!	; 390 <startup-0x1ffffc70>
 55c:	614c706f 	cmpvs	ip, pc, rrx
 560:	6f4d2f62 	svcvs	0x004d2f62
 564:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
 568:	6373612f 	cmnvs	r3, #-1073741813	; 0xc000000b
 56c:	645f6969 	ldrbvs	r6, [pc], #-2409	; 574 <startup-0x1ffffa8c>
 570:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 574:	632e7372 			; <UNDEFINED> instruction: 0x632e7372
 578:	63736100 	cmnvs	r3, #0, 2
 57c:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 580:	5f646165 	svcpl	0x00646165
 584:	61746164 	cmnvs	r4, r4, ror #2
 588:	63736100 	cmnvs	r3, #0, 2
 58c:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 590:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 594:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
 598:	63736100 	cmnvs	r3, #0, 2
 59c:	695f6969 	ldmdbvs	pc, {r0, r3, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
 5a0:	5f74696e 	svcpl	0x0074696e
 5a4:	00707061 	rsbseq	r7, r0, r1, rrx
 5a8:	65726461 	ldrbvs	r6, [r2, #-1121]!	; 0xfffffb9f
 5ac:	6b007373 	blvs	1d380 <startup-0x1ffe2c80>
 5b0:	00627965 	rsbeq	r7, r2, r5, ror #18
 5b4:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffb79 <p2paddle+0xdfffda81>
 5b8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 5bc:	6d61732f 	stclvs	3, cr7, [r1, #-188]!	; 0xffffff44
 5c0:	442f6575 	strtmi	r6, [pc], #-1397	; 5c8 <startup-0x1ffffa38>
 5c4:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 5c8:	73746e65 	cmnvc	r4, #1616	; 0x650
 5cc:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 5d0:	2f62614c 	svccs	0x0062614c
 5d4:	70706f4d 	rsbsvc	r6, r0, sp, asr #30
 5d8:	6b2f6e65 	blvs	bdbf74 <startup-0x1f42408c>
 5dc:	61707965 	cmnvs	r0, r5, ror #18
 5e0:	72645f64 	rsbvc	r5, r4, #100, 30	; 0x190
 5e4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 5e8:	00632e73 	rsbeq	r2, r3, r3, ror lr
 5ec:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 5f0:	6f526576 	svcvs	0x00526576
 5f4:	65730077 	ldrbvs	r0, [r3, #-119]!	; 0xffffff89
 5f8:	646f4367 	strbtvs	r4, [pc], #-871	; 600 <startup-0x1ffffa00>
 5fc:	69007365 	stmdbvs	r0, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 600:	5f74696e 	svcpl	0x0074696e
 604:	7079656b 	rsbsvc	r6, r9, fp, ror #10
 608:	63006461 	movwvs	r6, #1121	; 0x461
 60c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 610:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
 614:	67657337 			; <UNDEFINED> instruction: 0x67657337
 618:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 61c:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
 620:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 624:	00646170 	rsbeq	r6, r4, r0, ror r1

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <p2paddle+0xdfffd216>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000020 	andeq	r0, r0, r0, lsr #32
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	0000036c 	andeq	r0, r0, ip, ror #6
  30:	400c0e41 	andmi	r0, ip, r1, asr #28
  34:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  38:	018e4002 	orreq	r4, lr, r2
  3c:	41500e41 	cmpmi	r0, r1, asr #28
  40:	0000070d 	andeq	r0, r0, sp, lsl #14
  44:	0000000c 	andeq	r0, r0, ip
  48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  4c:	7c020001 	stcvc	0, cr0, [r2], {1}
  50:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  54:	00000018 	andeq	r0, r0, r8, lsl r0
  58:	00000044 	andeq	r0, r0, r4, asr #32
  5c:	2000037c 	andcs	r0, r0, ip, ror r3
  60:	00000044 	andeq	r0, r0, r4, asr #32
  64:	40080e41 	andmi	r0, r8, r1, asr #28
  68:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  6c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  70:	00000018 	andeq	r0, r0, r8, lsl r0
  74:	00000044 	andeq	r0, r0, r4, asr #32
  78:	200003c0 	andcs	r0, r0, r0, asr #7
  7c:	0000000a 	andeq	r0, r0, sl
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  8c:	0000001c 	andeq	r0, r0, ip, lsl r0
  90:	00000044 	andeq	r0, r0, r4, asr #32
  94:	200003ca 	andcs	r0, r0, sl, asr #7
  98:	00000010 	andeq	r0, r0, r0, lsl r0
  9c:	40080e41 	andmi	r0, r8, r1, asr #28
  a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a4:	100e4101 	andne	r4, lr, r1, lsl #2
  a8:	00070d41 	andeq	r0, r7, r1, asr #26
  ac:	0000001c 	andeq	r0, r0, ip, lsl r0
  b0:	00000044 	andeq	r0, r0, r4, asr #32
  b4:	200003da 	ldrdcs	r0, [r0], -sl
  b8:	00000010 	andeq	r0, r0, r0, lsl r0
  bc:	40080e41 	andmi	r0, r8, r1, asr #28
  c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c4:	100e4101 	andne	r4, lr, r1, lsl #2
  c8:	00070d41 	andeq	r0, r7, r1, asr #26
  cc:	0000000c 	andeq	r0, r0, ip
  d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  d4:	7c020001 	stcvc	0, cr0, [r2], {1}
  d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  dc:	0000001c 	andeq	r0, r0, ip, lsl r0
  e0:	000000cc 	andeq	r0, r0, ip, asr #1
  e4:	200003ec 	andcs	r0, r0, ip, ror #7
  e8:	00000090 	muleq	r0, r0, r0
  ec:	40080e41 	andmi	r0, r8, r1, asr #28
  f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f4:	100e4101 	andne	r4, lr, r1, lsl #2
  f8:	00070d41 	andeq	r0, r7, r1, asr #26
  fc:	00000018 	andeq	r0, r0, r8, lsl r0
 100:	000000cc 	andeq	r0, r0, ip, asr #1
 104:	2000047c 	andcs	r0, r0, ip, ror r4
 108:	000000a4 	andeq	r0, r0, r4, lsr #1
 10c:	40080e41 	andmi	r0, r8, r1, asr #28
 110:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 114:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	000000cc 	andeq	r0, r0, ip, asr #1
 120:	20000520 	andcs	r0, r0, r0, lsr #10
 124:	000000c8 	andeq	r0, r0, r8, asr #1
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	180e4101 	stmdane	lr, {r0, r8, lr}
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	000000cc 	andeq	r0, r0, ip, asr #1
 140:	200005e8 	andcs	r0, r0, r8, ror #11
 144:	000000a8 	andeq	r0, r0, r8, lsr #1
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	100e4101 	andne	r4, lr, r1, lsl #2
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	000000cc 	andeq	r0, r0, ip, asr #1
 160:	20000690 	mulcs	r0, r0, r6
 164:	00000058 	andeq	r0, r0, r8, asr r0
 168:	40080e41 	andmi	r0, r8, r1, asr #28
 16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 170:	100e4101 	andne	r4, lr, r1, lsl #2
 174:	00070d41 	andeq	r0, r7, r1, asr #26
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	000000cc 	andeq	r0, r0, ip, asr #1
 180:	200006e8 	andcs	r0, r0, r8, ror #13
 184:	00000060 	andeq	r0, r0, r0, rrx
 188:	40080e41 	andmi	r0, r8, r1, asr #28
 18c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 190:	100e4101 	andne	r4, lr, r1, lsl #2
 194:	00070d41 	andeq	r0, r7, r1, asr #26
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	000000cc 	andeq	r0, r0, ip, asr #1
 1a0:	20000748 	andcs	r0, r0, r8, asr #14
 1a4:	0000002a 	andeq	r0, r0, sl, lsr #32
 1a8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b0:	100e4101 	andne	r4, lr, r1, lsl #2
 1b4:	00070d41 	andeq	r0, r7, r1, asr #26
 1b8:	00000018 	andeq	r0, r0, r8, lsl r0
 1bc:	000000cc 	andeq	r0, r0, ip, asr #1
 1c0:	20000772 	andcs	r0, r0, r2, ror r7
 1c4:	0000001a 	andeq	r0, r0, sl, lsl r0
 1c8:	40080e41 	andmi	r0, r8, r1, asr #28
 1cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1d4:	00000018 	andeq	r0, r0, r8, lsl r0
 1d8:	000000cc 	andeq	r0, r0, ip, asr #1
 1dc:	2000078c 	andcs	r0, r0, ip, lsl #15
 1e0:	00000084 	andeq	r0, r0, r4, lsl #1
 1e4:	40080e41 	andmi	r0, r8, r1, asr #28
 1e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ec:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	000000cc 	andeq	r0, r0, ip, asr #1
 1f8:	20000810 	andcs	r0, r0, r0, lsl r8
 1fc:	00000058 	andeq	r0, r0, r8, asr r0
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	100e4101 	andne	r4, lr, r1, lsl #2
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	00000024 	andeq	r0, r0, r4, lsr #32
 214:	000000cc 	andeq	r0, r0, ip, asr #1
 218:	20000868 	andcs	r0, r0, r8, ror #16
 21c:	0000013c 	andeq	r0, r0, ip, lsr r1
 220:	40100e41 	andsmi	r0, r0, r1, asr #28
 224:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 228:	02874003 	addeq	r4, r7, #3
 22c:	41018e40 	tstmi	r1, r0, asr #28
 230:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 234:	00000007 	andeq	r0, r0, r7
 238:	00000024 	andeq	r0, r0, r4, lsr #32
 23c:	000000cc 	andeq	r0, r0, ip, asr #1
 240:	200009a4 	andcs	r0, r0, r4, lsr #19
 244:	00000158 	andeq	r0, r0, r8, asr r1
 248:	40140e41 	andsmi	r0, r4, r1, asr #28
 24c:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
 250:	03864004 	orreq	r4, r6, #4
 254:	40028740 	andmi	r8, r2, r0, asr #14
 258:	0e41018e 	dvfeqd	f0, f1, #0.5
 25c:	070d4128 	streq	r4, [sp, -r8, lsr #2]
 260:	00000020 	andeq	r0, r0, r0, lsr #32
 264:	000000cc 	andeq	r0, r0, ip, asr #1
 268:	20000afc 	strdcs	r0, [r0], -ip
 26c:	00000124 	andeq	r0, r0, r4, lsr #2
 270:	400c0e41 	andmi	r0, ip, r1, asr #28
 274:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 278:	018e4002 	orreq	r4, lr, r2
 27c:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 280:	0000070d 	andeq	r0, r0, sp, lsl #14
 284:	0000001c 	andeq	r0, r0, ip, lsl r0
 288:	000000cc 	andeq	r0, r0, ip, asr #1
 28c:	20000c20 	andcs	r0, r0, r0, lsr #24
 290:	00000054 	andeq	r0, r0, r4, asr r0
 294:	40080e41 	andmi	r0, r8, r1, asr #28
 298:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 29c:	180e4101 	stmdane	lr, {r0, r8, lr}
 2a0:	00070d41 	andeq	r0, r7, r1, asr #26
 2a4:	0000000c 	andeq	r0, r0, ip
 2a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2ac:	7c020001 	stcvc	0, cr0, [r2], {1}
 2b0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2b4:	00000018 	andeq	r0, r0, r8, lsl r0
 2b8:	000002a4 	andeq	r0, r0, r4, lsr #5
 2bc:	20000c74 	andcs	r0, r0, r4, ror ip
 2c0:	0000000a 	andeq	r0, r0, sl
 2c4:	40080e41 	andmi	r0, r8, r1, asr #28
 2c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2cc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d4:	000002a4 	andeq	r0, r0, r4, lsr #5
 2d8:	20000c7e 	andcs	r0, r0, lr, ror ip
 2dc:	00000020 	andeq	r0, r0, r0, lsr #32
 2e0:	40080e41 	andmi	r0, r8, r1, asr #28
 2e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e8:	180e4101 	stmdane	lr, {r0, r8, lr}
 2ec:	00070d41 	andeq	r0, r7, r1, asr #26
 2f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f4:	000002a4 	andeq	r0, r0, r4, lsr #5
 2f8:	20000c9e 	mulcs	r0, lr, ip
 2fc:	00000020 	andeq	r0, r0, r0, lsr #32
 300:	40080e41 	andmi	r0, r8, r1, asr #28
 304:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 308:	180e4101 	stmdane	lr, {r0, r8, lr}
 30c:	00070d41 	andeq	r0, r7, r1, asr #26
 310:	0000001c 	andeq	r0, r0, ip, lsl r0
 314:	000002a4 	andeq	r0, r0, r4, lsr #5
 318:	20000cbe 			; <UNDEFINED> instruction: 0x20000cbe
 31c:	00000064 	andeq	r0, r0, r4, rrx
 320:	40080e41 	andmi	r0, r8, r1, asr #28
 324:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 328:	200e4101 	andcs	r4, lr, r1, lsl #2
 32c:	00070d41 	andeq	r0, r7, r1, asr #26
 330:	0000001c 	andeq	r0, r0, ip, lsl r0
 334:	000002a4 	andeq	r0, r0, r4, lsr #5
 338:	20000d22 	andcs	r0, r0, r2, lsr #26
 33c:	0000005c 	andeq	r0, r0, ip, asr r0
 340:	40080e41 	andmi	r0, r8, r1, asr #28
 344:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 348:	180e4101 	stmdane	lr, {r0, r8, lr}
 34c:	00070d41 	andeq	r0, r7, r1, asr #26
 350:	0000001c 	andeq	r0, r0, ip, lsl r0
 354:	000002a4 	andeq	r0, r0, r4, lsr #5
 358:	20000d7e 	andcs	r0, r0, lr, ror sp
 35c:	0000006a 	andeq	r0, r0, sl, rrx
 360:	40080e41 	andmi	r0, r8, r1, asr #28
 364:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 368:	100e4101 	andne	r4, lr, r1, lsl #2
 36c:	00070d41 	andeq	r0, r7, r1, asr #26
 370:	0000001c 	andeq	r0, r0, ip, lsl r0
 374:	000002a4 	andeq	r0, r0, r4, lsr #5
 378:	20000de8 	andcs	r0, r0, r8, ror #27
 37c:	00000068 	andeq	r0, r0, r8, rrx
 380:	40080e41 	andmi	r0, r8, r1, asr #28
 384:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 388:	180e4101 	stmdane	lr, {r0, r8, lr}
 38c:	00070d41 	andeq	r0, r7, r1, asr #26
 390:	0000000c 	andeq	r0, r0, ip
 394:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 398:	7c020001 	stcvc	0, cr0, [r2], {1}
 39c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a4:	00000390 	muleq	r0, r0, r3
 3a8:	20000e50 	andcs	r0, r0, r0, asr lr
 3ac:	00000044 	andeq	r0, r0, r4, asr #32
 3b0:	40080e41 	andmi	r0, r8, r1, asr #28
 3b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3b8:	180e4101 	stmdane	lr, {r0, r8, lr}
 3bc:	00070d41 	andeq	r0, r7, r1, asr #26
 3c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c4:	00000390 	muleq	r0, r0, r3
 3c8:	20000e94 	mulcs	r0, r4, lr
 3cc:	00000048 	andeq	r0, r0, r8, asr #32
 3d0:	40080e41 	andmi	r0, r8, r1, asr #28
 3d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3d8:	180e4101 	stmdane	lr, {r0, r8, lr}
 3dc:	00070d41 	andeq	r0, r7, r1, asr #26
 3e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e4:	00000390 	muleq	r0, r0, r3
 3e8:	20000edc 	ldrdcs	r0, [r0], -ip
 3ec:	00000030 	andeq	r0, r0, r0, lsr r0
 3f0:	40080e41 	andmi	r0, r8, r1, asr #28
 3f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3f8:	100e4101 	andne	r4, lr, r1, lsl #2
 3fc:	00070d41 	andeq	r0, r7, r1, asr #26
 400:	0000001c 	andeq	r0, r0, ip, lsl r0
 404:	00000390 	muleq	r0, r0, r3
 408:	20000f0c 	andcs	r0, r0, ip, lsl #30
 40c:	0000002c 	andeq	r0, r0, ip, lsr #32
 410:	40080e41 	andmi	r0, r8, r1, asr #28
 414:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 418:	100e4101 	andne	r4, lr, r1, lsl #2
 41c:	00070d41 	andeq	r0, r7, r1, asr #26
 420:	0000001c 	andeq	r0, r0, ip, lsl r0
 424:	00000390 	muleq	r0, r0, r3
 428:	20000f38 	andcs	r0, r0, r8, lsr pc
 42c:	0000002a 	andeq	r0, r0, sl, lsr #32
 430:	40080e41 	andmi	r0, r8, r1, asr #28
 434:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 438:	100e4101 	andne	r4, lr, r1, lsl #2
 43c:	00070d41 	andeq	r0, r7, r1, asr #26
 440:	0000001c 	andeq	r0, r0, ip, lsl r0
 444:	00000390 	muleq	r0, r0, r3
 448:	20000f62 	andcs	r0, r0, r2, ror #30
 44c:	0000002a 	andeq	r0, r0, sl, lsr #32
 450:	40080e41 	andmi	r0, r8, r1, asr #28
 454:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 458:	100e4101 	andne	r4, lr, r1, lsl #2
 45c:	00070d41 	andeq	r0, r7, r1, asr #26
 460:	0000001c 	andeq	r0, r0, ip, lsl r0
 464:	00000390 	muleq	r0, r0, r3
 468:	20000f8c 	andcs	r0, r0, ip, lsl #31
 46c:	00000040 	andeq	r0, r0, r0, asr #32
 470:	40080e41 	andmi	r0, r8, r1, asr #28
 474:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 478:	100e4101 	andne	r4, lr, r1, lsl #2
 47c:	00070d41 	andeq	r0, r7, r1, asr #26
 480:	00000020 	andeq	r0, r0, r0, lsr #32
 484:	00000390 	muleq	r0, r0, r3
 488:	20000fcc 	andcs	r0, r0, ip, asr #31
 48c:	00000048 	andeq	r0, r0, r8, asr #32
 490:	400c0e41 	andmi	r0, ip, r1, asr #28
 494:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 498:	018e4002 	orreq	r4, lr, r2
 49c:	41180e41 	tstmi	r8, r1, asr #28
 4a0:	0000070d 	andeq	r0, r0, sp, lsl #14
 4a4:	00000018 	andeq	r0, r0, r8, lsl r0
 4a8:	00000390 	muleq	r0, r0, r3
 4ac:	20001014 	andcs	r1, r0, r4, lsl r0
 4b0:	00000046 	andeq	r0, r0, r6, asr #32
 4b4:	40080e41 	andmi	r0, r8, r1, asr #28
 4b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4bc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 4c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4c4:	00000390 	muleq	r0, r0, r3
 4c8:	2000105a 	andcs	r1, r0, sl, asr r0
 4cc:	0000003c 	andeq	r0, r0, ip, lsr r0
 4d0:	40080e41 	andmi	r0, r8, r1, asr #28
 4d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4d8:	100e4101 	andne	r4, lr, r1, lsl #2
 4dc:	00070d41 	andeq	r0, r7, r1, asr #26
 4e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4e4:	00000390 	muleq	r0, r0, r3
 4e8:	20001096 	mulcs	r0, r6, r0
 4ec:	00000034 	andeq	r0, r0, r4, lsr r0
 4f0:	40080e41 	andmi	r0, r8, r1, asr #28
 4f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4f8:	180e4101 	stmdane	lr, {r0, r8, lr}
 4fc:	00070d41 	andeq	r0, r7, r1, asr #26
 500:	00000018 	andeq	r0, r0, r8, lsl r0
 504:	00000390 	muleq	r0, r0, r3
 508:	200010ca 	andcs	r1, r0, sl, asr #1
 50c:	0000002e 	andeq	r0, r0, lr, lsr #32
 510:	40080e41 	andmi	r0, r8, r1, asr #28
 514:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 518:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 51c:	0000000c 	andeq	r0, r0, ip
 520:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 524:	7c020001 	stcvc	0, cr0, [r2], {1}
 528:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 52c:	00000018 	andeq	r0, r0, r8, lsl r0
 530:	0000051c 	andeq	r0, r0, ip, lsl r5
 534:	200010f8 	strdcs	r1, [r0], -r8
 538:	00000038 	andeq	r0, r0, r8, lsr r0
 53c:	40080e41 	andmi	r0, r8, r1, asr #28
 540:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 544:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 548:	00000020 	andeq	r0, r0, r0, lsr #32
 54c:	0000051c 	andeq	r0, r0, ip, lsl r5
 550:	20001130 	andcs	r1, r0, r0, lsr r1
 554:	000000bc 	strheq	r0, [r0], -ip
 558:	400c0e41 	andmi	r0, ip, r1, asr #28
 55c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 560:	018e4002 	orreq	r4, lr, r2
 564:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 568:	0000070d 	andeq	r0, r0, sp, lsl #14
 56c:	00000024 	andeq	r0, r0, r4, lsr #32
 570:	0000051c 	andeq	r0, r0, ip, lsl r5
 574:	200011ec 	andcs	r1, r0, ip, ror #3
 578:	00000034 	andeq	r0, r0, r4, lsr r0
 57c:	40100e41 	andsmi	r0, r0, r1, asr #28
 580:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 584:	02874003 	addeq	r4, r7, #3
 588:	41018e40 	tstmi	r1, r0, asr #28
 58c:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 590:	00000007 	andeq	r0, r0, r7
 594:	0000001c 	andeq	r0, r0, ip, lsl r0
 598:	0000051c 	andeq	r0, r0, ip, lsl r5
 59c:	20001220 	andcs	r1, r0, r0, lsr #4
 5a0:	00000088 	andeq	r0, r0, r8, lsl #1
 5a4:	40080e41 	andmi	r0, r8, r1, asr #28
 5a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5ac:	100e4101 	andne	r4, lr, r1, lsl #2
 5b0:	00070d41 	andeq	r0, r7, r1, asr #26
