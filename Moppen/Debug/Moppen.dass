
./Debug/Moppen.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 */
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f804 	bl	20000010 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <main>:
	move_object,
	set_object_speed,
	pong_set_position
	};

void main(int argc, char **argv){
20000010:	b590      	push	{r4, r7, lr}
20000012:	b08f      	sub	sp, #60	; 0x3c
20000014:	af00      	add	r7, sp, #0
20000016:	6078      	str	r0, [r7, #4]
20000018:	6039      	str	r1, [r7, #0]
	#ifdef USBDM
		*((unsigned long *)0x40023830) = 0x18;
		__asm volatile(" LDR R0,=0x08000209\n BLX R0 \n");
	#endif
	#ifdef ascii
		ascii_init_app();
2000001a:	f000 ff64 	bl	20000ee6 <ascii_init_app>
		ascii_init();
2000001e:	f000 ff07 	bl	20000e30 <ascii_init>
		ascii_gotoxy(1,1);
20000022:	2101      	movs	r1, #1
20000024:	2001      	movs	r0, #1
20000026:	f000 ff44 	bl	20000eb2 <ascii_gotoxy>
		char *s;
		char string1[] = "Player 1: ";
2000002a:	2018      	movs	r0, #24
2000002c:	183b      	adds	r3, r7, r0
2000002e:	4a4a      	ldr	r2, [pc, #296]	; (20000158 <main+0x148>)
20000030:	ca12      	ldmia	r2!, {r1, r4}
20000032:	c312      	stmia	r3!, {r1, r4}
20000034:	8811      	ldrh	r1, [r2, #0]
20000036:	8019      	strh	r1, [r3, #0]
20000038:	7892      	ldrb	r2, [r2, #2]
2000003a:	709a      	strb	r2, [r3, #2]
		s = string1;
2000003c:	183b      	adds	r3, r7, r0
2000003e:	637b      	str	r3, [r7, #52]	; 0x34
	while (*s)
20000040:	e006      	b.n	20000050 <main+0x40>
		ascii_write_char(*s++);
20000042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000044:	1c5a      	adds	r2, r3, #1
20000046:	637a      	str	r2, [r7, #52]	; 0x34
20000048:	781b      	ldrb	r3, [r3, #0]
2000004a:	0018      	movs	r0, r3
2000004c:	f000 ff13 	bl	20000e76 <ascii_write_char>
	while (*s)
20000050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000052:	781b      	ldrb	r3, [r3, #0]
20000054:	2b00      	cmp	r3, #0
20000056:	d1f4      	bne.n	20000042 <main+0x32>
	ascii_gotoxy(11,2);
20000058:	2102      	movs	r1, #2
2000005a:	200b      	movs	r0, #11
2000005c:	f000 ff29 	bl	20000eb2 <ascii_gotoxy>
	char string2[] = "Player 2: ";
20000060:	200c      	movs	r0, #12
20000062:	183b      	adds	r3, r7, r0
20000064:	4a3d      	ldr	r2, [pc, #244]	; (2000015c <main+0x14c>)
20000066:	ca12      	ldmia	r2!, {r1, r4}
20000068:	c312      	stmia	r3!, {r1, r4}
2000006a:	8811      	ldrh	r1, [r2, #0]
2000006c:	8019      	strh	r1, [r3, #0]
2000006e:	7892      	ldrb	r2, [r2, #2]
20000070:	709a      	strb	r2, [r3, #2]
	s = string2;
20000072:	183b      	adds	r3, r7, r0
20000074:	637b      	str	r3, [r7, #52]	; 0x34
	while (*s)
20000076:	e006      	b.n	20000086 <main+0x76>
	ascii_write_char(*s++);
20000078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000007a:	1c5a      	adds	r2, r3, #1
2000007c:	637a      	str	r2, [r7, #52]	; 0x34
2000007e:	781b      	ldrb	r3, [r3, #0]
20000080:	0018      	movs	r0, r3
20000082:	f000 fef8 	bl	20000e76 <ascii_write_char>
	while (*s)
20000086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000088:	781b      	ldrb	r3, [r3, #0]
2000008a:	2b00      	cmp	r3, #0
2000008c:	d1f4      	bne.n	20000078 <main+0x68>
	#endif
	
	#ifdef lcd
		init_lcd();
2000008e:	f000 fa66 	bl	2000055e <init_lcd>
		graphic_initialize();
20000092:	f000 fa71 	bl	20000578 <graphic_initialize>
	#endif
	#ifdef keypad
		init_keypad();
20000096:	f000 ff3d 	bl	20000f14 <init_keypad>
	#endif
	#ifndef SIMULATOR
		graphic_clean_screen();
	#endif
	
	unsigned char playerScore[2] = {0,0};
2000009a:	2108      	movs	r1, #8
2000009c:	187b      	adds	r3, r7, r1
2000009e:	2200      	movs	r2, #0
200000a0:	701a      	strb	r2, [r3, #0]
200000a2:	187b      	adds	r3, r7, r1
200000a4:	2200      	movs	r2, #0
200000a6:	705a      	strb	r2, [r3, #1]
	unsigned char *pScore;
	
	pScore = playerScore;
200000a8:	187b      	adds	r3, r7, r1
200000aa:	633b      	str	r3, [r7, #48]	; 0x30
	pong_inc_playerScore(pScore,1);
200000ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200000ae:	2101      	movs	r1, #1
200000b0:	0018      	movs	r0, r3
200000b2:	f000 fda6 	bl	20000c02 <pong_inc_playerScore>
	pong_inc_playerScore(pScore,2);
200000b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200000b8:	2102      	movs	r1, #2
200000ba:	0018      	movs	r0, r3
200000bc:	f000 fda1 	bl	20000c02 <pong_inc_playerScore>
	pobject p = &ball;
200000c0:	4b27      	ldr	r3, [pc, #156]	; (20000160 <main+0x150>)
200000c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	pobject player1 = &paddle;
200000c4:	4b27      	ldr	r3, [pc, #156]	; (20000164 <main+0x154>)
200000c6:	62bb      	str	r3, [r7, #40]	; 0x28
	pobject player2 = &paddle;
200000c8:	4b26      	ldr	r3, [pc, #152]	; (20000164 <main+0x154>)
200000ca:	627b      	str	r3, [r7, #36]	; 0x24
	pong_set_position(player1,120,28);
200000cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
200000ce:	221c      	movs	r2, #28
200000d0:	2178      	movs	r1, #120	; 0x78
200000d2:	0018      	movs	r0, r3
200000d4:	f000 fcd9 	bl	20000a8a <pong_set_position>
	pong_set_position(player2,127,28);
200000d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200000da:	221c      	movs	r2, #28
200000dc:	217f      	movs	r1, #127	; 0x7f
200000de:	0018      	movs	r0, r3
200000e0:	f000 fcd3 	bl	20000a8a <pong_set_position>
	pong_set_position(p,64-(p->geo->sizex)/2,32-(p->geo->sizey)/2);
200000e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200000e6:	681b      	ldr	r3, [r3, #0]
200000e8:	685b      	ldr	r3, [r3, #4]
200000ea:	2b00      	cmp	r3, #0
200000ec:	da00      	bge.n	200000f0 <main+0xe0>
200000ee:	3301      	adds	r3, #1
200000f0:	105b      	asrs	r3, r3, #1
200000f2:	425b      	negs	r3, r3
200000f4:	3340      	adds	r3, #64	; 0x40
200000f6:	0019      	movs	r1, r3
200000f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200000fa:	681b      	ldr	r3, [r3, #0]
200000fc:	689b      	ldr	r3, [r3, #8]
200000fe:	2b00      	cmp	r3, #0
20000100:	da00      	bge.n	20000104 <main+0xf4>
20000102:	3301      	adds	r3, #1
20000104:	105b      	asrs	r3, r3, #1
20000106:	425b      	negs	r3, r3
20000108:	3320      	adds	r3, #32
2000010a:	001a      	movs	r2, r3
2000010c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000010e:	0018      	movs	r0, r3
20000110:	f000 fcbb 	bl	20000a8a <pong_set_position>

	set_object_speed(player2,0,2);
20000114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000116:	2202      	movs	r2, #2
20000118:	2100      	movs	r1, #0
2000011a:	0018      	movs	r0, r3
2000011c:	f000 fca5 	bl	20000a6a <set_object_speed>
	p->set_speed(p,4,1);
20000120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000122:	6a1b      	ldr	r3, [r3, #32]
20000124:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20000126:	2201      	movs	r2, #1
20000128:	2104      	movs	r1, #4
2000012a:	4798      	blx	r3
	while(1){
		move_object(p);
2000012c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000012e:	0018      	movs	r0, r3
20000130:	f000 fd1b 	bl	20000b6a <move_object>
		move_object(player1);
20000134:	6abb      	ldr	r3, [r7, #40]	; 0x28
20000136:	0018      	movs	r0, r3
20000138:	f000 fd17 	bl	20000b6a <move_object>
		move_object(player2); 
2000013c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000013e:	0018      	movs	r0, r3
20000140:	f000 fd13 	bl	20000b6a <move_object>
		pong_inc_playerScore(pScore,1);
20000144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20000146:	2101      	movs	r1, #1
20000148:	0018      	movs	r0, r3
2000014a:	f000 fd5a 	bl	20000c02 <pong_inc_playerScore>
		delay_milli(40);
2000014e:	2028      	movs	r0, #40	; 0x28
20000150:	f000 f839 	bl	200001c6 <delay_milli>
		move_object(p);
20000154:	e7ea      	b.n	2000012c <main+0x11c>
20000156:	46c0      	nop			; (mov r8, r8)
20000158:	20001f14 	andcs	r1, r0, r4, lsl pc
2000015c:	20001f20 	andcs	r1, r0, r0, lsr #30
20000160:	20001e90 	mulcs	r0, r0, lr
20000164:	20001eec 	andcs	r1, r0, ip, ror #29

20000168 <delay_40ns>:

#include "delay.h"
#include "portDeclare.h"

void delay_40ns(void){
20000168:	b580      	push	{r7, lr}
2000016a:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
2000016c:	4b0c      	ldr	r3, [pc, #48]	; (200001a0 <delay_40ns+0x38>)
2000016e:	2200      	movs	r2, #0
20000170:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 6;
20000172:	4b0c      	ldr	r3, [pc, #48]	; (200001a4 <delay_40ns+0x3c>)
20000174:	2206      	movs	r2, #6
20000176:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000178:	4b0b      	ldr	r3, [pc, #44]	; (200001a8 <delay_40ns+0x40>)
2000017a:	2200      	movs	r2, #0
2000017c:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
2000017e:	4b08      	ldr	r3, [pc, #32]	; (200001a0 <delay_40ns+0x38>)
20000180:	2205      	movs	r2, #5
20000182:	601a      	str	r2, [r3, #0]
	while ((*STK_CTRL & 0x10000) == 0){
20000184:	46c0      	nop			; (mov r8, r8)
20000186:	4b06      	ldr	r3, [pc, #24]	; (200001a0 <delay_40ns+0x38>)
20000188:	681a      	ldr	r2, [r3, #0]
2000018a:	2380      	movs	r3, #128	; 0x80
2000018c:	025b      	lsls	r3, r3, #9
2000018e:	4013      	ands	r3, r2
20000190:	d0f9      	beq.n	20000186 <delay_40ns+0x1e>
	}
	*STK_CTRL = 0;
20000192:	4b03      	ldr	r3, [pc, #12]	; (200001a0 <delay_40ns+0x38>)
20000194:	2200      	movs	r2, #0
20000196:	601a      	str	r2, [r3, #0]
}
20000198:	46c0      	nop			; (mov r8, r8)
2000019a:	46bd      	mov	sp, r7
2000019c:	bd80      	pop	{r7, pc}
2000019e:	46c0      	nop			; (mov r8, r8)
200001a0:	e000e010 	and	lr, r0, r0, lsl r0
200001a4:	e000e014 	and	lr, r0, r4, lsl r0
200001a8:	e000e018 	and	lr, r0, r8, lsl r0

200001ac <delay_250ns>:

void delay_250ns(void){
200001ac:	b580      	push	{r7, lr}
200001ae:	af00      	add	r7, sp, #0
	*STK_CTRL = 5;
	while (!(*STK_CTRL & 0x10000) == 0){
	}
	*STK_CTRL = 0;
	#endif
}
200001b0:	46c0      	nop			; (mov r8, r8)
200001b2:	46bd      	mov	sp, r7
200001b4:	bd80      	pop	{r7, pc}

200001b6 <delay_mikro>:

void delay_mikro(unsigned int us){
200001b6:	b580      	push	{r7, lr}
200001b8:	b082      	sub	sp, #8
200001ba:	af00      	add	r7, sp, #0
200001bc:	6078      	str	r0, [r7, #4]
		us = us*4;
	for(int i = 0; i < us; i++){
		delay_250ns();
	}
	#endif
}
200001be:	46c0      	nop			; (mov r8, r8)
200001c0:	46bd      	mov	sp, r7
200001c2:	b002      	add	sp, #8
200001c4:	bd80      	pop	{r7, pc}

200001c6 <delay_milli>:

void delay_milli(unsigned int ms){
200001c6:	b580      	push	{r7, lr}
200001c8:	b082      	sub	sp, #8
200001ca:	af00      	add	r7, sp, #0
200001cc:	6078      	str	r0, [r7, #4]
	#ifndef SIMULATOR
	ms = ms*1000;
	delay_mikro(ms);
	#endif
200001ce:	46c0      	nop			; (mov r8, r8)
200001d0:	46bd      	mov	sp, r7
200001d2:	b002      	add	sp, #8
200001d4:	bd80      	pop	{r7, pc}
200001d6:	46c0      	nop			; (mov r8, r8)

200001d8 <select_controller>:
#include "portDeclare.h"

#define adress 0x40
#define page 0xB8

void select_controller(char c){
200001d8:	b580      	push	{r7, lr}
200001da:	b082      	sub	sp, #8
200001dc:	af00      	add	r7, sp, #0
200001de:	0002      	movs	r2, r0
200001e0:	1dfb      	adds	r3, r7, #7
200001e2:	701a      	strb	r2, [r3, #0]
	switch(c){
200001e4:	1dfb      	adds	r3, r7, #7
200001e6:	781b      	ldrb	r3, [r3, #0]
200001e8:	2b08      	cmp	r3, #8
200001ea:	d011      	beq.n	20000210 <select_controller+0x38>
200001ec:	dc02      	bgt.n	200001f4 <select_controller+0x1c>
200001ee:	2b00      	cmp	r3, #0
200001f0:	d005      	beq.n	200001fe <select_controller+0x26>
		case 0: *portOdrLowE = *portOdrLowE &~ 0x18; break;
		case 0x8: *portOdrLowE = (*portOdrLowE &~ 0x10)|0x8; break;
		case 0x10: *portOdrLowE = (*portOdrLowE &~ 0x8)|0x10; break;
		case 0x18: *portOdrLowE = *portOdrLowE | 0x18; break;
	}
}
200001f2:	e032      	b.n	2000025a <select_controller+0x82>
	switch(c){
200001f4:	2b10      	cmp	r3, #16
200001f6:	d019      	beq.n	2000022c <select_controller+0x54>
200001f8:	2b18      	cmp	r3, #24
200001fa:	d025      	beq.n	20000248 <select_controller+0x70>
}
200001fc:	e02d      	b.n	2000025a <select_controller+0x82>
		case 0: *portOdrLowE = *portOdrLowE &~ 0x18; break;
200001fe:	4b19      	ldr	r3, [pc, #100]	; (20000264 <select_controller+0x8c>)
20000200:	781b      	ldrb	r3, [r3, #0]
20000202:	b2db      	uxtb	r3, r3
20000204:	4a17      	ldr	r2, [pc, #92]	; (20000264 <select_controller+0x8c>)
20000206:	2118      	movs	r1, #24
20000208:	438b      	bics	r3, r1
2000020a:	b2db      	uxtb	r3, r3
2000020c:	7013      	strb	r3, [r2, #0]
2000020e:	e024      	b.n	2000025a <select_controller+0x82>
		case 0x8: *portOdrLowE = (*portOdrLowE &~ 0x10)|0x8; break;
20000210:	4b14      	ldr	r3, [pc, #80]	; (20000264 <select_controller+0x8c>)
20000212:	781b      	ldrb	r3, [r3, #0]
20000214:	b2db      	uxtb	r3, r3
20000216:	b25b      	sxtb	r3, r3
20000218:	2218      	movs	r2, #24
2000021a:	4393      	bics	r3, r2
2000021c:	b25b      	sxtb	r3, r3
2000021e:	2208      	movs	r2, #8
20000220:	4313      	orrs	r3, r2
20000222:	b25a      	sxtb	r2, r3
20000224:	4b0f      	ldr	r3, [pc, #60]	; (20000264 <select_controller+0x8c>)
20000226:	b2d2      	uxtb	r2, r2
20000228:	701a      	strb	r2, [r3, #0]
2000022a:	e016      	b.n	2000025a <select_controller+0x82>
		case 0x10: *portOdrLowE = (*portOdrLowE &~ 0x8)|0x10; break;
2000022c:	4b0d      	ldr	r3, [pc, #52]	; (20000264 <select_controller+0x8c>)
2000022e:	781b      	ldrb	r3, [r3, #0]
20000230:	b2db      	uxtb	r3, r3
20000232:	b25b      	sxtb	r3, r3
20000234:	2218      	movs	r2, #24
20000236:	4393      	bics	r3, r2
20000238:	b25b      	sxtb	r3, r3
2000023a:	2210      	movs	r2, #16
2000023c:	4313      	orrs	r3, r2
2000023e:	b25a      	sxtb	r2, r3
20000240:	4b08      	ldr	r3, [pc, #32]	; (20000264 <select_controller+0x8c>)
20000242:	b2d2      	uxtb	r2, r2
20000244:	701a      	strb	r2, [r3, #0]
20000246:	e008      	b.n	2000025a <select_controller+0x82>
		case 0x18: *portOdrLowE = *portOdrLowE | 0x18; break;
20000248:	4b06      	ldr	r3, [pc, #24]	; (20000264 <select_controller+0x8c>)
2000024a:	781b      	ldrb	r3, [r3, #0]
2000024c:	b2db      	uxtb	r3, r3
2000024e:	4a05      	ldr	r2, [pc, #20]	; (20000264 <select_controller+0x8c>)
20000250:	2118      	movs	r1, #24
20000252:	430b      	orrs	r3, r1
20000254:	b2db      	uxtb	r3, r3
20000256:	7013      	strb	r3, [r2, #0]
20000258:	46c0      	nop			; (mov r8, r8)
}
2000025a:	46c0      	nop			; (mov r8, r8)
2000025c:	46bd      	mov	sp, r7
2000025e:	b002      	add	sp, #8
20000260:	bd80      	pop	{r7, pc}
20000262:	46c0      	nop			; (mov r8, r8)
20000264:	40021014 	andmi	r1, r2, r4, lsl r0

20000268 <graphic_wait_ready>:

void graphic_wait_ready(){
20000268:	b580      	push	{r7, lr}
2000026a:	af00      	add	r7, sp, #0
	*portOdrLowE = (*portOdrLowE &~ B_E);
2000026c:	4b23      	ldr	r3, [pc, #140]	; (200002fc <graphic_wait_ready+0x94>)
2000026e:	781b      	ldrb	r3, [r3, #0]
20000270:	b2db      	uxtb	r3, r3
20000272:	4a22      	ldr	r2, [pc, #136]	; (200002fc <graphic_wait_ready+0x94>)
20000274:	2140      	movs	r1, #64	; 0x40
20000276:	438b      	bics	r3, r1
20000278:	b2db      	uxtb	r3, r3
2000027a:	7013      	strb	r3, [r2, #0]
	*portModerE = 0x5555;
2000027c:	4b20      	ldr	r3, [pc, #128]	; (20000300 <graphic_wait_ready+0x98>)
2000027e:	4a21      	ldr	r2, [pc, #132]	; (20000304 <graphic_wait_ready+0x9c>)
20000280:	601a      	str	r2, [r3, #0]
	*portOdrLowE = ((*portOdrLowE | B_RW) &~B_RS);
20000282:	4b1e      	ldr	r3, [pc, #120]	; (200002fc <graphic_wait_ready+0x94>)
20000284:	781b      	ldrb	r3, [r3, #0]
20000286:	b2db      	uxtb	r3, r3
20000288:	2202      	movs	r2, #2
2000028a:	4313      	orrs	r3, r2
2000028c:	b2db      	uxtb	r3, r3
2000028e:	4a1b      	ldr	r2, [pc, #108]	; (200002fc <graphic_wait_ready+0x94>)
20000290:	2101      	movs	r1, #1
20000292:	438b      	bics	r3, r1
20000294:	b2db      	uxtb	r3, r3
20000296:	7013      	strb	r3, [r2, #0]
	delay_250ns();
20000298:	f7ff ff88 	bl	200001ac <delay_250ns>
	delay_250ns();
2000029c:	f7ff ff86 	bl	200001ac <delay_250ns>
	while(*portOdrLowE & 0x80){
200002a0:	e017      	b.n	200002d2 <graphic_wait_ready+0x6a>
		*portOdrLowE = (*portOdrLowE | B_E);
200002a2:	4b16      	ldr	r3, [pc, #88]	; (200002fc <graphic_wait_ready+0x94>)
200002a4:	781b      	ldrb	r3, [r3, #0]
200002a6:	b2db      	uxtb	r3, r3
200002a8:	4a14      	ldr	r2, [pc, #80]	; (200002fc <graphic_wait_ready+0x94>)
200002aa:	2140      	movs	r1, #64	; 0x40
200002ac:	430b      	orrs	r3, r1
200002ae:	b2db      	uxtb	r3, r3
200002b0:	7013      	strb	r3, [r2, #0]
		delay_250ns();
200002b2:	f7ff ff7b 	bl	200001ac <delay_250ns>
		delay_250ns();
200002b6:	f7ff ff79 	bl	200001ac <delay_250ns>
		*portOdrLowE = (*portOdrLowE &~ B_E);
200002ba:	4b10      	ldr	r3, [pc, #64]	; (200002fc <graphic_wait_ready+0x94>)
200002bc:	781b      	ldrb	r3, [r3, #0]
200002be:	b2db      	uxtb	r3, r3
200002c0:	4a0e      	ldr	r2, [pc, #56]	; (200002fc <graphic_wait_ready+0x94>)
200002c2:	2140      	movs	r1, #64	; 0x40
200002c4:	438b      	bics	r3, r1
200002c6:	b2db      	uxtb	r3, r3
200002c8:	7013      	strb	r3, [r2, #0]
		delay_250ns();
200002ca:	f7ff ff6f 	bl	200001ac <delay_250ns>
		delay_250ns();
200002ce:	f7ff ff6d 	bl	200001ac <delay_250ns>
	while(*portOdrLowE & 0x80){
200002d2:	4b0a      	ldr	r3, [pc, #40]	; (200002fc <graphic_wait_ready+0x94>)
200002d4:	781b      	ldrb	r3, [r3, #0]
200002d6:	b2db      	uxtb	r3, r3
200002d8:	b25b      	sxtb	r3, r3
200002da:	2b00      	cmp	r3, #0
200002dc:	dbe1      	blt.n	200002a2 <graphic_wait_ready+0x3a>
	}
	*portOdrLowE = (*portOdrLowE | B_E);
200002de:	4b07      	ldr	r3, [pc, #28]	; (200002fc <graphic_wait_ready+0x94>)
200002e0:	781b      	ldrb	r3, [r3, #0]
200002e2:	b2db      	uxtb	r3, r3
200002e4:	4a05      	ldr	r2, [pc, #20]	; (200002fc <graphic_wait_ready+0x94>)
200002e6:	2140      	movs	r1, #64	; 0x40
200002e8:	430b      	orrs	r3, r1
200002ea:	b2db      	uxtb	r3, r3
200002ec:	7013      	strb	r3, [r2, #0]
	*portModerE = 0x55555555;
200002ee:	4b04      	ldr	r3, [pc, #16]	; (20000300 <graphic_wait_ready+0x98>)
200002f0:	4a05      	ldr	r2, [pc, #20]	; (20000308 <graphic_wait_ready+0xa0>)
200002f2:	601a      	str	r2, [r3, #0]
}
200002f4:	46c0      	nop			; (mov r8, r8)
200002f6:	46bd      	mov	sp, r7
200002f8:	bd80      	pop	{r7, pc}
200002fa:	46c0      	nop			; (mov r8, r8)
200002fc:	40021014 	andmi	r1, r2, r4, lsl r0
20000300:	40021000 	andmi	r1, r2, r0
20000304:	00005555 	andeq	r5, r0, r5, asr r5
20000308:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000030c <graphic_read>:

char graphic_read(unsigned char c){
2000030c:	b580      	push	{r7, lr}
2000030e:	b084      	sub	sp, #16
20000310:	af00      	add	r7, sp, #0
20000312:	0002      	movs	r2, r0
20000314:	1dfb      	adds	r3, r7, #7
20000316:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE &~B_E);
20000318:	4b29      	ldr	r3, [pc, #164]	; (200003c0 <graphic_read+0xb4>)
2000031a:	781b      	ldrb	r3, [r3, #0]
2000031c:	b2db      	uxtb	r3, r3
2000031e:	4a28      	ldr	r2, [pc, #160]	; (200003c0 <graphic_read+0xb4>)
20000320:	2140      	movs	r1, #64	; 0x40
20000322:	438b      	bics	r3, r1
20000324:	b2db      	uxtb	r3, r3
20000326:	7013      	strb	r3, [r2, #0]
	*portModerE = 0x00005555;
20000328:	4b26      	ldr	r3, [pc, #152]	; (200003c4 <graphic_read+0xb8>)
2000032a:	4a27      	ldr	r2, [pc, #156]	; (200003c8 <graphic_read+0xbc>)
2000032c:	601a      	str	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE | B_RW | B_RS);
2000032e:	4b24      	ldr	r3, [pc, #144]	; (200003c0 <graphic_read+0xb4>)
20000330:	781b      	ldrb	r3, [r3, #0]
20000332:	b2db      	uxtb	r3, r3
20000334:	4a22      	ldr	r2, [pc, #136]	; (200003c0 <graphic_read+0xb4>)
20000336:	2103      	movs	r1, #3
20000338:	430b      	orrs	r3, r1
2000033a:	b2db      	uxtb	r3, r3
2000033c:	7013      	strb	r3, [r2, #0]
	select_controller(c);
2000033e:	1dfb      	adds	r3, r7, #7
20000340:	781b      	ldrb	r3, [r3, #0]
20000342:	0018      	movs	r0, r3
20000344:	f7ff ff48 	bl	200001d8 <select_controller>
	delay_250ns();
20000348:	f7ff ff30 	bl	200001ac <delay_250ns>
	delay_250ns();
2000034c:	f7ff ff2e 	bl	200001ac <delay_250ns>
	*portOdrLowE = (*portOdrLowE | B_E);
20000350:	4b1b      	ldr	r3, [pc, #108]	; (200003c0 <graphic_read+0xb4>)
20000352:	781b      	ldrb	r3, [r3, #0]
20000354:	b2db      	uxtb	r3, r3
20000356:	4a1a      	ldr	r2, [pc, #104]	; (200003c0 <graphic_read+0xb4>)
20000358:	2140      	movs	r1, #64	; 0x40
2000035a:	430b      	orrs	r3, r1
2000035c:	b2db      	uxtb	r3, r3
2000035e:	7013      	strb	r3, [r2, #0]
	delay_250ns();
20000360:	f7ff ff24 	bl	200001ac <delay_250ns>
	delay_250ns();
20000364:	f7ff ff22 	bl	200001ac <delay_250ns>
	unsigned char RV = *portIdrHighE;
20000368:	4a18      	ldr	r2, [pc, #96]	; (200003cc <graphic_read+0xc0>)
2000036a:	230f      	movs	r3, #15
2000036c:	18fb      	adds	r3, r7, r3
2000036e:	7812      	ldrb	r2, [r2, #0]
20000370:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE &~ B_E);
20000372:	4b13      	ldr	r3, [pc, #76]	; (200003c0 <graphic_read+0xb4>)
20000374:	781b      	ldrb	r3, [r3, #0]
20000376:	b2db      	uxtb	r3, r3
20000378:	4a11      	ldr	r2, [pc, #68]	; (200003c0 <graphic_read+0xb4>)
2000037a:	2140      	movs	r1, #64	; 0x40
2000037c:	438b      	bics	r3, r1
2000037e:	b2db      	uxtb	r3, r3
20000380:	7013      	strb	r3, [r2, #0]
	*portModerE = 0x55555555;
20000382:	4b10      	ldr	r3, [pc, #64]	; (200003c4 <graphic_read+0xb8>)
20000384:	4a12      	ldr	r2, [pc, #72]	; (200003d0 <graphic_read+0xc4>)
20000386:	601a      	str	r2, [r3, #0]
	if(c & B_CS1){
20000388:	1dfb      	adds	r3, r7, #7
2000038a:	781b      	ldrb	r3, [r3, #0]
2000038c:	2208      	movs	r2, #8
2000038e:	4013      	ands	r3, r2
20000390:	d004      	beq.n	2000039c <graphic_read+0x90>
	select_controller(B_CS1);
20000392:	2008      	movs	r0, #8
20000394:	f7ff ff20 	bl	200001d8 <select_controller>
	graphic_wait_ready();
20000398:	f7ff ff66 	bl	20000268 <graphic_wait_ready>
	}
	if(c & B_CS2){
2000039c:	1dfb      	adds	r3, r7, #7
2000039e:	781b      	ldrb	r3, [r3, #0]
200003a0:	2210      	movs	r2, #16
200003a2:	4013      	ands	r3, r2
200003a4:	d004      	beq.n	200003b0 <graphic_read+0xa4>
	select_controller(B_CS2);
200003a6:	2010      	movs	r0, #16
200003a8:	f7ff ff16 	bl	200001d8 <select_controller>
	graphic_wait_ready();
200003ac:	f7ff ff5c 	bl	20000268 <graphic_wait_ready>
	}

	return RV;
200003b0:	230f      	movs	r3, #15
200003b2:	18fb      	adds	r3, r7, r3
200003b4:	781b      	ldrb	r3, [r3, #0]
}
200003b6:	0018      	movs	r0, r3
200003b8:	46bd      	mov	sp, r7
200003ba:	b004      	add	sp, #16
200003bc:	bd80      	pop	{r7, pc}
200003be:	46c0      	nop			; (mov r8, r8)
200003c0:	40021014 	andmi	r1, r2, r4, lsl r0
200003c4:	40021000 	andmi	r1, r2, r0
200003c8:	00005555 	andeq	r5, r0, r5, asr r5
200003cc:	40021011 	andmi	r1, r2, r1, lsl r0
200003d0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200003d4 <graphic_write>:

void graphic_write(unsigned char val, unsigned char c){
200003d4:	b580      	push	{r7, lr}
200003d6:	b082      	sub	sp, #8
200003d8:	af00      	add	r7, sp, #0
200003da:	0002      	movs	r2, r0
200003dc:	1dfb      	adds	r3, r7, #7
200003de:	701a      	strb	r2, [r3, #0]
200003e0:	1dbb      	adds	r3, r7, #6
200003e2:	1c0a      	adds	r2, r1, #0
200003e4:	701a      	strb	r2, [r3, #0]
	*portOdrHighE = val;
200003e6:	4a23      	ldr	r2, [pc, #140]	; (20000474 <graphic_write+0xa0>)
200003e8:	1dfb      	adds	r3, r7, #7
200003ea:	781b      	ldrb	r3, [r3, #0]
200003ec:	7013      	strb	r3, [r2, #0]
	select_controller(c);
200003ee:	1dbb      	adds	r3, r7, #6
200003f0:	781b      	ldrb	r3, [r3, #0]
200003f2:	0018      	movs	r0, r3
200003f4:	f7ff fef0 	bl	200001d8 <select_controller>
	delay_250ns();
200003f8:	f7ff fed8 	bl	200001ac <delay_250ns>
	delay_250ns();
200003fc:	f7ff fed6 	bl	200001ac <delay_250ns>
	*portOdrLowE = (*portOdrLowE | B_E);
20000400:	4b1d      	ldr	r3, [pc, #116]	; (20000478 <graphic_write+0xa4>)
20000402:	781b      	ldrb	r3, [r3, #0]
20000404:	b2db      	uxtb	r3, r3
20000406:	4a1c      	ldr	r2, [pc, #112]	; (20000478 <graphic_write+0xa4>)
20000408:	2140      	movs	r1, #64	; 0x40
2000040a:	430b      	orrs	r3, r1
2000040c:	b2db      	uxtb	r3, r3
2000040e:	7013      	strb	r3, [r2, #0]
	delay_250ns();
20000410:	f7ff fecc 	bl	200001ac <delay_250ns>
	delay_250ns();
20000414:	f7ff feca 	bl	200001ac <delay_250ns>
	*portOdrLowE = (*portOdrLowE &~ B_E);
20000418:	4b17      	ldr	r3, [pc, #92]	; (20000478 <graphic_write+0xa4>)
2000041a:	781b      	ldrb	r3, [r3, #0]
2000041c:	b2db      	uxtb	r3, r3
2000041e:	4a16      	ldr	r2, [pc, #88]	; (20000478 <graphic_write+0xa4>)
20000420:	2140      	movs	r1, #64	; 0x40
20000422:	438b      	bics	r3, r1
20000424:	b2db      	uxtb	r3, r3
20000426:	7013      	strb	r3, [r2, #0]
	if(c & B_CS1){
20000428:	1dbb      	adds	r3, r7, #6
2000042a:	781b      	ldrb	r3, [r3, #0]
2000042c:	2208      	movs	r2, #8
2000042e:	4013      	ands	r3, r2
20000430:	d004      	beq.n	2000043c <graphic_write+0x68>
		select_controller(B_CS1);
20000432:	2008      	movs	r0, #8
20000434:	f7ff fed0 	bl	200001d8 <select_controller>
		graphic_wait_ready();
20000438:	f7ff ff16 	bl	20000268 <graphic_wait_ready>
	}
	if(c & B_CS2){
2000043c:	1dbb      	adds	r3, r7, #6
2000043e:	781b      	ldrb	r3, [r3, #0]
20000440:	2210      	movs	r2, #16
20000442:	4013      	ands	r3, r2
20000444:	d004      	beq.n	20000450 <graphic_write+0x7c>
		select_controller(B_CS2);
20000446:	2010      	movs	r0, #16
20000448:	f7ff fec6 	bl	200001d8 <select_controller>
		graphic_wait_ready();
2000044c:	f7ff ff0c 	bl	20000268 <graphic_wait_ready>
	}
	*portOdrHighE = 0;
20000450:	4b08      	ldr	r3, [pc, #32]	; (20000474 <graphic_write+0xa0>)
20000452:	2200      	movs	r2, #0
20000454:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE | B_E);
20000456:	4b08      	ldr	r3, [pc, #32]	; (20000478 <graphic_write+0xa4>)
20000458:	781b      	ldrb	r3, [r3, #0]
2000045a:	b2db      	uxtb	r3, r3
2000045c:	4a06      	ldr	r2, [pc, #24]	; (20000478 <graphic_write+0xa4>)
2000045e:	2140      	movs	r1, #64	; 0x40
20000460:	430b      	orrs	r3, r1
20000462:	b2db      	uxtb	r3, r3
20000464:	7013      	strb	r3, [r2, #0]
	select_controller(0);
20000466:	2000      	movs	r0, #0
20000468:	f7ff feb6 	bl	200001d8 <select_controller>
}
2000046c:	46c0      	nop			; (mov r8, r8)
2000046e:	46bd      	mov	sp, r7
20000470:	b002      	add	sp, #8
20000472:	bd80      	pop	{r7, pc}
20000474:	40021015 	andmi	r1, r2, r5, lsl r0
20000478:	40021014 	andmi	r1, r2, r4, lsl r0

2000047c <graphic_write_command>:

void graphic_write_command(unsigned char cmd, unsigned char c){
2000047c:	b580      	push	{r7, lr}
2000047e:	b082      	sub	sp, #8
20000480:	af00      	add	r7, sp, #0
20000482:	0002      	movs	r2, r0
20000484:	1dfb      	adds	r3, r7, #7
20000486:	701a      	strb	r2, [r3, #0]
20000488:	1dbb      	adds	r3, r7, #6
2000048a:	1c0a      	adds	r2, r1, #0
2000048c:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE &~ B_E);
2000048e:	4b10      	ldr	r3, [pc, #64]	; (200004d0 <graphic_write_command+0x54>)
20000490:	781b      	ldrb	r3, [r3, #0]
20000492:	b2db      	uxtb	r3, r3
20000494:	4a0e      	ldr	r2, [pc, #56]	; (200004d0 <graphic_write_command+0x54>)
20000496:	2140      	movs	r1, #64	; 0x40
20000498:	438b      	bics	r3, r1
2000049a:	b2db      	uxtb	r3, r3
2000049c:	7013      	strb	r3, [r2, #0]
	select_controller(c);
2000049e:	1dbb      	adds	r3, r7, #6
200004a0:	781b      	ldrb	r3, [r3, #0]
200004a2:	0018      	movs	r0, r3
200004a4:	f7ff fe98 	bl	200001d8 <select_controller>
	*portOdrLowE = (*portOdrLowE &~B_RS &~B_RW);
200004a8:	4b09      	ldr	r3, [pc, #36]	; (200004d0 <graphic_write_command+0x54>)
200004aa:	781b      	ldrb	r3, [r3, #0]
200004ac:	b2db      	uxtb	r3, r3
200004ae:	4a08      	ldr	r2, [pc, #32]	; (200004d0 <graphic_write_command+0x54>)
200004b0:	2103      	movs	r1, #3
200004b2:	438b      	bics	r3, r1
200004b4:	b2db      	uxtb	r3, r3
200004b6:	7013      	strb	r3, [r2, #0]
	graphic_write(cmd, c);
200004b8:	1dbb      	adds	r3, r7, #6
200004ba:	781a      	ldrb	r2, [r3, #0]
200004bc:	1dfb      	adds	r3, r7, #7
200004be:	781b      	ldrb	r3, [r3, #0]
200004c0:	0011      	movs	r1, r2
200004c2:	0018      	movs	r0, r3
200004c4:	f7ff ff86 	bl	200003d4 <graphic_write>
}
200004c8:	46c0      	nop			; (mov r8, r8)
200004ca:	46bd      	mov	sp, r7
200004cc:	b002      	add	sp, #8
200004ce:	bd80      	pop	{r7, pc}
200004d0:	40021014 	andmi	r1, r2, r4, lsl r0

200004d4 <graphic_write_data>:

void graphic_write_data(unsigned char data, unsigned char c){
200004d4:	b580      	push	{r7, lr}
200004d6:	b082      	sub	sp, #8
200004d8:	af00      	add	r7, sp, #0
200004da:	0002      	movs	r2, r0
200004dc:	1dfb      	adds	r3, r7, #7
200004de:	701a      	strb	r2, [r3, #0]
200004e0:	1dbb      	adds	r3, r7, #6
200004e2:	1c0a      	adds	r2, r1, #0
200004e4:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE &~ B_E);
200004e6:	4b12      	ldr	r3, [pc, #72]	; (20000530 <graphic_write_data+0x5c>)
200004e8:	781b      	ldrb	r3, [r3, #0]
200004ea:	b2db      	uxtb	r3, r3
200004ec:	4a10      	ldr	r2, [pc, #64]	; (20000530 <graphic_write_data+0x5c>)
200004ee:	2140      	movs	r1, #64	; 0x40
200004f0:	438b      	bics	r3, r1
200004f2:	b2db      	uxtb	r3, r3
200004f4:	7013      	strb	r3, [r2, #0]
	select_controller(c);
200004f6:	1dbb      	adds	r3, r7, #6
200004f8:	781b      	ldrb	r3, [r3, #0]
200004fa:	0018      	movs	r0, r3
200004fc:	f7ff fe6c 	bl	200001d8 <select_controller>
	*portOdrLowE = ((*portOdrLowE | B_RS) &~B_RW);
20000500:	4b0b      	ldr	r3, [pc, #44]	; (20000530 <graphic_write_data+0x5c>)
20000502:	781b      	ldrb	r3, [r3, #0]
20000504:	b2db      	uxtb	r3, r3
20000506:	2201      	movs	r2, #1
20000508:	4313      	orrs	r3, r2
2000050a:	b2db      	uxtb	r3, r3
2000050c:	4a08      	ldr	r2, [pc, #32]	; (20000530 <graphic_write_data+0x5c>)
2000050e:	2102      	movs	r1, #2
20000510:	438b      	bics	r3, r1
20000512:	b2db      	uxtb	r3, r3
20000514:	7013      	strb	r3, [r2, #0]
	graphic_write(data, c);
20000516:	1dbb      	adds	r3, r7, #6
20000518:	781a      	ldrb	r2, [r3, #0]
2000051a:	1dfb      	adds	r3, r7, #7
2000051c:	781b      	ldrb	r3, [r3, #0]
2000051e:	0011      	movs	r1, r2
20000520:	0018      	movs	r0, r3
20000522:	f7ff ff57 	bl	200003d4 <graphic_write>
}
20000526:	46c0      	nop			; (mov r8, r8)
20000528:	46bd      	mov	sp, r7
2000052a:	b002      	add	sp, #8
2000052c:	bd80      	pop	{r7, pc}
2000052e:	46c0      	nop			; (mov r8, r8)
20000530:	40021014 	andmi	r1, r2, r4, lsl r0

20000534 <graphic_read_data>:

unsigned char graphic_read_data(unsigned char c){
20000534:	b580      	push	{r7, lr}
20000536:	b082      	sub	sp, #8
20000538:	af00      	add	r7, sp, #0
2000053a:	0002      	movs	r2, r0
2000053c:	1dfb      	adds	r3, r7, #7
2000053e:	701a      	strb	r2, [r3, #0]
	graphic_read(c);
20000540:	1dfb      	adds	r3, r7, #7
20000542:	781b      	ldrb	r3, [r3, #0]
20000544:	0018      	movs	r0, r3
20000546:	f7ff fee1 	bl	2000030c <graphic_read>
	return graphic_read(c);
2000054a:	1dfb      	adds	r3, r7, #7
2000054c:	781b      	ldrb	r3, [r3, #0]
2000054e:	0018      	movs	r0, r3
20000550:	f7ff fedc 	bl	2000030c <graphic_read>
20000554:	0003      	movs	r3, r0
}
20000556:	0018      	movs	r0, r3
20000558:	46bd      	mov	sp, r7
2000055a:	b002      	add	sp, #8
2000055c:	bd80      	pop	{r7, pc}

2000055e <init_lcd>:

void init_lcd(void){
2000055e:	b580      	push	{r7, lr}
20000560:	af00      	add	r7, sp, #0
	*portModerE = 0x55555555;
20000562:	4b03      	ldr	r3, [pc, #12]	; (20000570 <init_lcd+0x12>)
20000564:	4a03      	ldr	r2, [pc, #12]	; (20000574 <init_lcd+0x16>)
20000566:	601a      	str	r2, [r3, #0]
}
20000568:	46c0      	nop			; (mov r8, r8)
2000056a:	46bd      	mov	sp, r7
2000056c:	bd80      	pop	{r7, pc}
2000056e:	46c0      	nop			; (mov r8, r8)
20000570:	40021000 	andmi	r1, r2, r0
20000574:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000578 <graphic_initialize>:

void graphic_initialize(void){
20000578:	b580      	push	{r7, lr}
2000057a:	af00      	add	r7, sp, #0
	*portOdrLowE = (*portOdrLowE | B_E);
2000057c:	4b1e      	ldr	r3, [pc, #120]	; (200005f8 <graphic_initialize+0x80>)
2000057e:	781b      	ldrb	r3, [r3, #0]
20000580:	b2db      	uxtb	r3, r3
20000582:	4a1d      	ldr	r2, [pc, #116]	; (200005f8 <graphic_initialize+0x80>)
20000584:	2140      	movs	r1, #64	; 0x40
20000586:	430b      	orrs	r3, r1
20000588:	b2db      	uxtb	r3, r3
2000058a:	7013      	strb	r3, [r2, #0]
	*portOdrLowE = (*portOdrLowE &~ B_SELECT );
2000058c:	4b1a      	ldr	r3, [pc, #104]	; (200005f8 <graphic_initialize+0x80>)
2000058e:	781b      	ldrb	r3, [r3, #0]
20000590:	b2db      	uxtb	r3, r3
20000592:	4a19      	ldr	r2, [pc, #100]	; (200005f8 <graphic_initialize+0x80>)
20000594:	2104      	movs	r1, #4
20000596:	438b      	bics	r3, r1
20000598:	b2db      	uxtb	r3, r3
2000059a:	7013      	strb	r3, [r2, #0]
	#ifdef SIMULATOR
		delay_mikro(10);
2000059c:	200a      	movs	r0, #10
2000059e:	f7ff fe0a 	bl	200001b6 <delay_mikro>
	#endif
	*portOdrLowE = (*portOdrLowE &~(B_RST | B_CS1 | B_CS2 | B_E));
200005a2:	4b15      	ldr	r3, [pc, #84]	; (200005f8 <graphic_initialize+0x80>)
200005a4:	781b      	ldrb	r3, [r3, #0]
200005a6:	b2db      	uxtb	r3, r3
200005a8:	4a13      	ldr	r2, [pc, #76]	; (200005f8 <graphic_initialize+0x80>)
200005aa:	2178      	movs	r1, #120	; 0x78
200005ac:	438b      	bics	r3, r1
200005ae:	b2db      	uxtb	r3, r3
200005b0:	7013      	strb	r3, [r2, #0]
	#ifndef SIMULATOR
		delay_milli(30);
	#endif
	*portOdrLowE = (*portOdrLowE | B_RST);
200005b2:	4b11      	ldr	r3, [pc, #68]	; (200005f8 <graphic_initialize+0x80>)
200005b4:	781b      	ldrb	r3, [r3, #0]
200005b6:	b2db      	uxtb	r3, r3
200005b8:	4a0f      	ldr	r2, [pc, #60]	; (200005f8 <graphic_initialize+0x80>)
200005ba:	2120      	movs	r1, #32
200005bc:	430b      	orrs	r3, r1
200005be:	b2db      	uxtb	r3, r3
200005c0:	7013      	strb	r3, [r2, #0]
	graphic_write_command(0x3E, B_CS1|B_CS2);
200005c2:	2118      	movs	r1, #24
200005c4:	203e      	movs	r0, #62	; 0x3e
200005c6:	f7ff ff59 	bl	2000047c <graphic_write_command>
	graphic_write_command(0x3F, B_CS1|B_CS2);
200005ca:	2118      	movs	r1, #24
200005cc:	203f      	movs	r0, #63	; 0x3f
200005ce:	f7ff ff55 	bl	2000047c <graphic_write_command>
	graphic_write_command(0xC0, B_CS1|B_CS2);
200005d2:	2118      	movs	r1, #24
200005d4:	20c0      	movs	r0, #192	; 0xc0
200005d6:	f7ff ff51 	bl	2000047c <graphic_write_command>
	graphic_write_command(0x40, B_CS1|B_CS2);
200005da:	2118      	movs	r1, #24
200005dc:	2040      	movs	r0, #64	; 0x40
200005de:	f7ff ff4d 	bl	2000047c <graphic_write_command>
	graphic_write_command(0xB8, B_CS1|B_CS2);
200005e2:	2118      	movs	r1, #24
200005e4:	20b8      	movs	r0, #184	; 0xb8
200005e6:	f7ff ff49 	bl	2000047c <graphic_write_command>
	select_controller(0);
200005ea:	2000      	movs	r0, #0
200005ec:	f7ff fdf4 	bl	200001d8 <select_controller>
}
200005f0:	46c0      	nop			; (mov r8, r8)
200005f2:	46bd      	mov	sp, r7
200005f4:	bd80      	pop	{r7, pc}
200005f6:	46c0      	nop			; (mov r8, r8)
200005f8:	40021014 	andmi	r1, r2, r4, lsl r0

200005fc <graphic_clean_screen>:

void graphic_clean_screen(void){
200005fc:	b580      	push	{r7, lr}
200005fe:	b082      	sub	sp, #8
20000600:	af00      	add	r7, sp, #0
	for(int i=0; i < 8; i++){
20000602:	2300      	movs	r3, #0
20000604:	607b      	str	r3, [r7, #4]
20000606:	e01e      	b.n	20000646 <graphic_clean_screen+0x4a>
		graphic_write_command(0xB8|i, B_CS1|B_CS2);
20000608:	687b      	ldr	r3, [r7, #4]
2000060a:	b25b      	sxtb	r3, r3
2000060c:	2248      	movs	r2, #72	; 0x48
2000060e:	4252      	negs	r2, r2
20000610:	4313      	orrs	r3, r2
20000612:	b25b      	sxtb	r3, r3
20000614:	b2db      	uxtb	r3, r3
20000616:	2118      	movs	r1, #24
20000618:	0018      	movs	r0, r3
2000061a:	f7ff ff2f 	bl	2000047c <graphic_write_command>
		graphic_write_command(0x40, B_CS1|B_CS2);
2000061e:	2118      	movs	r1, #24
20000620:	2040      	movs	r0, #64	; 0x40
20000622:	f7ff ff2b 	bl	2000047c <graphic_write_command>
		for(int j=0; j<64; j++){
20000626:	2300      	movs	r3, #0
20000628:	603b      	str	r3, [r7, #0]
2000062a:	e006      	b.n	2000063a <graphic_clean_screen+0x3e>
			graphic_write_data(0,B_CS1|B_CS2);
2000062c:	2118      	movs	r1, #24
2000062e:	2000      	movs	r0, #0
20000630:	f7ff ff50 	bl	200004d4 <graphic_write_data>
		for(int j=0; j<64; j++){
20000634:	683b      	ldr	r3, [r7, #0]
20000636:	3301      	adds	r3, #1
20000638:	603b      	str	r3, [r7, #0]
2000063a:	683b      	ldr	r3, [r7, #0]
2000063c:	2b3f      	cmp	r3, #63	; 0x3f
2000063e:	ddf5      	ble.n	2000062c <graphic_clean_screen+0x30>
	for(int i=0; i < 8; i++){
20000640:	687b      	ldr	r3, [r7, #4]
20000642:	3301      	adds	r3, #1
20000644:	607b      	str	r3, [r7, #4]
20000646:	687b      	ldr	r3, [r7, #4]
20000648:	2b07      	cmp	r3, #7
2000064a:	dddd      	ble.n	20000608 <graphic_clean_screen+0xc>
		}
	}
}
2000064c:	46c0      	nop			; (mov r8, r8)
2000064e:	46bd      	mov	sp, r7
20000650:	b002      	add	sp, #8
20000652:	bd80      	pop	{r7, pc}

20000654 <graphic_pixel>:

void graphic_pixel(unsigned char x, unsigned char y, unsigned char set){
20000654:	b5b0      	push	{r4, r5, r7, lr}
20000656:	b084      	sub	sp, #16
20000658:	af00      	add	r7, sp, #0
2000065a:	0004      	movs	r4, r0
2000065c:	0008      	movs	r0, r1
2000065e:	0011      	movs	r1, r2
20000660:	1dfb      	adds	r3, r7, #7
20000662:	1c22      	adds	r2, r4, #0
20000664:	701a      	strb	r2, [r3, #0]
20000666:	1dbb      	adds	r3, r7, #6
20000668:	1c02      	adds	r2, r0, #0
2000066a:	701a      	strb	r2, [r3, #0]
2000066c:	1d7b      	adds	r3, r7, #5
2000066e:	1c0a      	adds	r2, r1, #0
20000670:	701a      	strb	r2, [r3, #0]
	x -= 1;
20000672:	1dfb      	adds	r3, r7, #7
20000674:	1dfa      	adds	r2, r7, #7
20000676:	7812      	ldrb	r2, [r2, #0]
20000678:	3a01      	subs	r2, #1
2000067a:	701a      	strb	r2, [r3, #0]
	y -= 1;
2000067c:	1dbb      	adds	r3, r7, #6
2000067e:	1dba      	adds	r2, r7, #6
20000680:	7812      	ldrb	r2, [r2, #0]
20000682:	3a01      	subs	r2, #1
20000684:	701a      	strb	r2, [r3, #0]
	char controller;
	if (x > 127 | y > 63)
20000686:	1dfb      	adds	r3, r7, #7
20000688:	781b      	ldrb	r3, [r3, #0]
2000068a:	b25b      	sxtb	r3, r3
2000068c:	b2db      	uxtb	r3, r3
2000068e:	09db      	lsrs	r3, r3, #7
20000690:	b2da      	uxtb	r2, r3
20000692:	1dbb      	adds	r3, r7, #6
20000694:	781b      	ldrb	r3, [r3, #0]
20000696:	213f      	movs	r1, #63	; 0x3f
20000698:	4299      	cmp	r1, r3
2000069a:	419b      	sbcs	r3, r3
2000069c:	425b      	negs	r3, r3
2000069e:	b2db      	uxtb	r3, r3
200006a0:	4313      	orrs	r3, r2
200006a2:	b2db      	uxtb	r3, r3
200006a4:	2b00      	cmp	r3, #0
200006a6:	d16f      	bne.n	20000788 <graphic_pixel+0x134>
		{return;}
	char index = (1<<(y%8));
200006a8:	1dbb      	adds	r3, r7, #6
200006aa:	781b      	ldrb	r3, [r3, #0]
200006ac:	2207      	movs	r2, #7
200006ae:	4013      	ands	r3, r2
200006b0:	2201      	movs	r2, #1
200006b2:	409a      	lsls	r2, r3
200006b4:	230d      	movs	r3, #13
200006b6:	18fb      	adds	r3, r7, r3
200006b8:	701a      	strb	r2, [r3, #0]
	if (x<64){
200006ba:	1dfb      	adds	r3, r7, #7
200006bc:	781b      	ldrb	r3, [r3, #0]
200006be:	2b3f      	cmp	r3, #63	; 0x3f
200006c0:	d804      	bhi.n	200006cc <graphic_pixel+0x78>
		controller = B_CS1;
200006c2:	230f      	movs	r3, #15
200006c4:	18fb      	adds	r3, r7, r3
200006c6:	2208      	movs	r2, #8
200006c8:	701a      	strb	r2, [r3, #0]
200006ca:	e008      	b.n	200006de <graphic_pixel+0x8a>
	}
	else{
		controller = B_CS2;
200006cc:	230f      	movs	r3, #15
200006ce:	18fb      	adds	r3, r7, r3
200006d0:	2210      	movs	r2, #16
200006d2:	701a      	strb	r2, [r3, #0]
		x -= 64;
200006d4:	1dfb      	adds	r3, r7, #7
200006d6:	1dfa      	adds	r2, r7, #7
200006d8:	7812      	ldrb	r2, [r2, #0]
200006da:	3a40      	subs	r2, #64	; 0x40
200006dc:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_command(0x40 | x, controller);
200006de:	1dfb      	adds	r3, r7, #7
200006e0:	781b      	ldrb	r3, [r3, #0]
200006e2:	2240      	movs	r2, #64	; 0x40
200006e4:	4313      	orrs	r3, r2
200006e6:	b2da      	uxtb	r2, r3
200006e8:	250f      	movs	r5, #15
200006ea:	197b      	adds	r3, r7, r5
200006ec:	781b      	ldrb	r3, [r3, #0]
200006ee:	0019      	movs	r1, r3
200006f0:	0010      	movs	r0, r2
200006f2:	f7ff fec3 	bl	2000047c <graphic_write_command>
	graphic_write_command(0xB8 | (y/8), controller);
200006f6:	1dbb      	adds	r3, r7, #6
200006f8:	781b      	ldrb	r3, [r3, #0]
200006fa:	08db      	lsrs	r3, r3, #3
200006fc:	b2db      	uxtb	r3, r3
200006fe:	2248      	movs	r2, #72	; 0x48
20000700:	4252      	negs	r2, r2
20000702:	4313      	orrs	r3, r2
20000704:	b2da      	uxtb	r2, r3
20000706:	197b      	adds	r3, r7, r5
20000708:	781b      	ldrb	r3, [r3, #0]
2000070a:	0019      	movs	r1, r3
2000070c:	0010      	movs	r0, r2
2000070e:	f7ff feb5 	bl	2000047c <graphic_write_command>
	unsigned char temp = graphic_read_data(controller);
20000712:	230e      	movs	r3, #14
20000714:	18fc      	adds	r4, r7, r3
20000716:	197b      	adds	r3, r7, r5
20000718:	781b      	ldrb	r3, [r3, #0]
2000071a:	0018      	movs	r0, r3
2000071c:	f7ff ff0a 	bl	20000534 <graphic_read_data>
20000720:	0003      	movs	r3, r0
20000722:	7023      	strb	r3, [r4, #0]
	graphic_write_command(0x40 | x, controller);
20000724:	1dfb      	adds	r3, r7, #7
20000726:	781b      	ldrb	r3, [r3, #0]
20000728:	2240      	movs	r2, #64	; 0x40
2000072a:	4313      	orrs	r3, r2
2000072c:	b2da      	uxtb	r2, r3
2000072e:	197b      	adds	r3, r7, r5
20000730:	781b      	ldrb	r3, [r3, #0]
20000732:	0019      	movs	r1, r3
20000734:	0010      	movs	r0, r2
20000736:	f7ff fea1 	bl	2000047c <graphic_write_command>
	if(set){
2000073a:	1d7b      	adds	r3, r7, #5
2000073c:	781b      	ldrb	r3, [r3, #0]
2000073e:	2b00      	cmp	r3, #0
20000740:	d009      	beq.n	20000756 <graphic_pixel+0x102>
		temp = temp | index;
20000742:	220e      	movs	r2, #14
20000744:	18bb      	adds	r3, r7, r2
20000746:	18b9      	adds	r1, r7, r2
20000748:	220d      	movs	r2, #13
2000074a:	18ba      	adds	r2, r7, r2
2000074c:	7809      	ldrb	r1, [r1, #0]
2000074e:	7812      	ldrb	r2, [r2, #0]
20000750:	430a      	orrs	r2, r1
20000752:	701a      	strb	r2, [r3, #0]
20000754:	e00d      	b.n	20000772 <graphic_pixel+0x11e>
	}
	else{
		temp = temp &~index;
20000756:	230d      	movs	r3, #13
20000758:	18fb      	adds	r3, r7, r3
2000075a:	781b      	ldrb	r3, [r3, #0]
2000075c:	b25b      	sxtb	r3, r3
2000075e:	43db      	mvns	r3, r3
20000760:	b25b      	sxtb	r3, r3
20000762:	210e      	movs	r1, #14
20000764:	187a      	adds	r2, r7, r1
20000766:	7812      	ldrb	r2, [r2, #0]
20000768:	b252      	sxtb	r2, r2
2000076a:	4013      	ands	r3, r2
2000076c:	b25a      	sxtb	r2, r3
2000076e:	187b      	adds	r3, r7, r1
20000770:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_data(temp, controller);
20000772:	230f      	movs	r3, #15
20000774:	18fb      	adds	r3, r7, r3
20000776:	781a      	ldrb	r2, [r3, #0]
20000778:	230e      	movs	r3, #14
2000077a:	18fb      	adds	r3, r7, r3
2000077c:	781b      	ldrb	r3, [r3, #0]
2000077e:	0011      	movs	r1, r2
20000780:	0018      	movs	r0, r3
20000782:	f7ff fea7 	bl	200004d4 <graphic_write_data>
20000786:	e000      	b.n	2000078a <graphic_pixel+0x136>
		{return;}
20000788:	46c0      	nop			; (mov r8, r8)
}
2000078a:	46bd      	mov	sp, r7
2000078c:	b004      	add	sp, #16
2000078e:	bdb0      	pop	{r4, r5, r7, pc}

20000790 <lcdBufferDraw>:

void lcdBufferDraw(plcdBuffer toDraw){
20000790:	b5f0      	push	{r4, r5, r6, r7, lr}
20000792:	b085      	sub	sp, #20
20000794:	af00      	add	r7, sp, #0
20000796:	6078      	str	r0, [r7, #4]
	//char (*display)[8] = (char(*)[8])toDraw->display;
	
	unsigned char x,i,j;
	unsigned char controller, data;
	for(i=0; i<128; i++){
20000798:	230e      	movs	r3, #14
2000079a:	18fb      	adds	r3, r7, r3
2000079c:	2200      	movs	r2, #0
2000079e:	701a      	strb	r2, [r3, #0]
200007a0:	e097      	b.n	200008d2 <lcdBufferDraw+0x142>
		for(j=0; j<8; j++){
200007a2:	230d      	movs	r3, #13
200007a4:	18fb      	adds	r3, r7, r3
200007a6:	2200      	movs	r2, #0
200007a8:	701a      	strb	r2, [r3, #0]
200007aa:	e086      	b.n	200008ba <lcdBufferDraw+0x12a>
			char updated = (toDraw->changeLog[i] &~ (1<<j));
200007ac:	230e      	movs	r3, #14
200007ae:	18fb      	adds	r3, r7, r3
200007b0:	781a      	ldrb	r2, [r3, #0]
200007b2:	6879      	ldr	r1, [r7, #4]
200007b4:	2380      	movs	r3, #128	; 0x80
200007b6:	00db      	lsls	r3, r3, #3
200007b8:	188a      	adds	r2, r1, r2
200007ba:	18d3      	adds	r3, r2, r3
200007bc:	781b      	ldrb	r3, [r3, #0]
200007be:	b25b      	sxtb	r3, r3
200007c0:	220d      	movs	r2, #13
200007c2:	18ba      	adds	r2, r7, r2
200007c4:	7812      	ldrb	r2, [r2, #0]
200007c6:	2101      	movs	r1, #1
200007c8:	4091      	lsls	r1, r2
200007ca:	000a      	movs	r2, r1
200007cc:	b252      	sxtb	r2, r2
200007ce:	43d2      	mvns	r2, r2
200007d0:	b252      	sxtb	r2, r2
200007d2:	4013      	ands	r3, r2
200007d4:	b25a      	sxtb	r2, r3
200007d6:	210b      	movs	r1, #11
200007d8:	187b      	adds	r3, r7, r1
200007da:	701a      	strb	r2, [r3, #0]
			if(updated){
200007dc:	187b      	adds	r3, r7, r1
200007de:	781b      	ldrb	r3, [r3, #0]
200007e0:	2b00      	cmp	r3, #0
200007e2:	d064      	beq.n	200008ae <lcdBufferDraw+0x11e>
				if(i<64){
200007e4:	230e      	movs	r3, #14
200007e6:	18fb      	adds	r3, r7, r3
200007e8:	781b      	ldrb	r3, [r3, #0]
200007ea:	2b3f      	cmp	r3, #63	; 0x3f
200007ec:	d80a      	bhi.n	20000804 <lcdBufferDraw+0x74>
					controller = B_CS1;
200007ee:	230c      	movs	r3, #12
200007f0:	18fb      	adds	r3, r7, r3
200007f2:	2208      	movs	r2, #8
200007f4:	701a      	strb	r2, [r3, #0]
					x=i;
200007f6:	230f      	movs	r3, #15
200007f8:	18fb      	adds	r3, r7, r3
200007fa:	220e      	movs	r2, #14
200007fc:	18ba      	adds	r2, r7, r2
200007fe:	7812      	ldrb	r2, [r2, #0]
20000800:	701a      	strb	r2, [r3, #0]
20000802:	e00a      	b.n	2000081a <lcdBufferDraw+0x8a>
				}
				else{
					controller = B_CS2;
20000804:	230c      	movs	r3, #12
20000806:	18fb      	adds	r3, r7, r3
20000808:	2210      	movs	r2, #16
2000080a:	701a      	strb	r2, [r3, #0]
					x = i-64;
2000080c:	230f      	movs	r3, #15
2000080e:	18fb      	adds	r3, r7, r3
20000810:	220e      	movs	r2, #14
20000812:	18ba      	adds	r2, r7, r2
20000814:	7812      	ldrb	r2, [r2, #0]
20000816:	3a40      	subs	r2, #64	; 0x40
20000818:	701a      	strb	r2, [r3, #0]
				}
				data = toDraw->display[i][j];
2000081a:	240e      	movs	r4, #14
2000081c:	193b      	adds	r3, r7, r4
2000081e:	7819      	ldrb	r1, [r3, #0]
20000820:	250d      	movs	r5, #13
20000822:	197b      	adds	r3, r7, r5
20000824:	781a      	ldrb	r2, [r3, #0]
20000826:	230a      	movs	r3, #10
20000828:	18fb      	adds	r3, r7, r3
2000082a:	6878      	ldr	r0, [r7, #4]
2000082c:	00c9      	lsls	r1, r1, #3
2000082e:	1841      	adds	r1, r0, r1
20000830:	5c8a      	ldrb	r2, [r1, r2]
20000832:	701a      	strb	r2, [r3, #0]
				graphic_write_command(adress | x, controller);
20000834:	220f      	movs	r2, #15
20000836:	18bb      	adds	r3, r7, r2
20000838:	781b      	ldrb	r3, [r3, #0]
2000083a:	2240      	movs	r2, #64	; 0x40
2000083c:	4313      	orrs	r3, r2
2000083e:	b2da      	uxtb	r2, r3
20000840:	260c      	movs	r6, #12
20000842:	19bb      	adds	r3, r7, r6
20000844:	781b      	ldrb	r3, [r3, #0]
20000846:	0019      	movs	r1, r3
20000848:	0010      	movs	r0, r2
2000084a:	f7ff fe17 	bl	2000047c <graphic_write_command>
				graphic_write_command(page | j, controller);
2000084e:	197b      	adds	r3, r7, r5
20000850:	781b      	ldrb	r3, [r3, #0]
20000852:	2248      	movs	r2, #72	; 0x48
20000854:	4252      	negs	r2, r2
20000856:	4313      	orrs	r3, r2
20000858:	b2da      	uxtb	r2, r3
2000085a:	19bb      	adds	r3, r7, r6
2000085c:	781b      	ldrb	r3, [r3, #0]
2000085e:	0019      	movs	r1, r3
20000860:	0010      	movs	r0, r2
20000862:	f7ff fe0b 	bl	2000047c <graphic_write_command>
				graphic_write_data(data, controller);
20000866:	19bb      	adds	r3, r7, r6
20000868:	781a      	ldrb	r2, [r3, #0]
2000086a:	230a      	movs	r3, #10
2000086c:	18fb      	adds	r3, r7, r3
2000086e:	781b      	ldrb	r3, [r3, #0]
20000870:	0011      	movs	r1, r2
20000872:	0018      	movs	r0, r3
20000874:	f7ff fe2e 	bl	200004d4 <graphic_write_data>
				toDraw->changeLog[i] = (toDraw->changeLog[i] | (1<<j));
20000878:	193b      	adds	r3, r7, r4
2000087a:	781a      	ldrb	r2, [r3, #0]
2000087c:	6879      	ldr	r1, [r7, #4]
2000087e:	2380      	movs	r3, #128	; 0x80
20000880:	00db      	lsls	r3, r3, #3
20000882:	188a      	adds	r2, r1, r2
20000884:	18d3      	adds	r3, r2, r3
20000886:	781b      	ldrb	r3, [r3, #0]
20000888:	b25a      	sxtb	r2, r3
2000088a:	197b      	adds	r3, r7, r5
2000088c:	781b      	ldrb	r3, [r3, #0]
2000088e:	2101      	movs	r1, #1
20000890:	4099      	lsls	r1, r3
20000892:	000b      	movs	r3, r1
20000894:	b25b      	sxtb	r3, r3
20000896:	4313      	orrs	r3, r2
20000898:	b259      	sxtb	r1, r3
2000089a:	193b      	adds	r3, r7, r4
2000089c:	781a      	ldrb	r2, [r3, #0]
2000089e:	b2c8      	uxtb	r0, r1
200008a0:	6879      	ldr	r1, [r7, #4]
200008a2:	2380      	movs	r3, #128	; 0x80
200008a4:	00db      	lsls	r3, r3, #3
200008a6:	188a      	adds	r2, r1, r2
200008a8:	18d3      	adds	r3, r2, r3
200008aa:	1c02      	adds	r2, r0, #0
200008ac:	701a      	strb	r2, [r3, #0]
		for(j=0; j<8; j++){
200008ae:	210d      	movs	r1, #13
200008b0:	187b      	adds	r3, r7, r1
200008b2:	781a      	ldrb	r2, [r3, #0]
200008b4:	187b      	adds	r3, r7, r1
200008b6:	3201      	adds	r2, #1
200008b8:	701a      	strb	r2, [r3, #0]
200008ba:	230d      	movs	r3, #13
200008bc:	18fb      	adds	r3, r7, r3
200008be:	781b      	ldrb	r3, [r3, #0]
200008c0:	2b07      	cmp	r3, #7
200008c2:	d800      	bhi.n	200008c6 <lcdBufferDraw+0x136>
200008c4:	e772      	b.n	200007ac <lcdBufferDraw+0x1c>
	for(i=0; i<128; i++){
200008c6:	210e      	movs	r1, #14
200008c8:	187b      	adds	r3, r7, r1
200008ca:	781a      	ldrb	r2, [r3, #0]
200008cc:	187b      	adds	r3, r7, r1
200008ce:	3201      	adds	r2, #1
200008d0:	701a      	strb	r2, [r3, #0]
200008d2:	230e      	movs	r3, #14
200008d4:	18fb      	adds	r3, r7, r3
200008d6:	781b      	ldrb	r3, [r3, #0]
200008d8:	b25b      	sxtb	r3, r3
200008da:	2b00      	cmp	r3, #0
200008dc:	db00      	blt.n	200008e0 <lcdBufferDraw+0x150>
200008de:	e760      	b.n	200007a2 <lcdBufferDraw+0x12>
			}
		}
	}
	
}
200008e0:	46c0      	nop			; (mov r8, r8)
200008e2:	46bd      	mov	sp, r7
200008e4:	b005      	add	sp, #20
200008e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

200008e8 <lcdBufferWritePixel>:

void lcdBufferWritePixel(plcdBuffer lcdBuff, unsigned char x, unsigned char y, unsigned char set){
200008e8:	b590      	push	{r4, r7, lr}
200008ea:	b085      	sub	sp, #20
200008ec:	af00      	add	r7, sp, #0
200008ee:	6078      	str	r0, [r7, #4]
200008f0:	000c      	movs	r4, r1
200008f2:	0010      	movs	r0, r2
200008f4:	0019      	movs	r1, r3
200008f6:	1cfb      	adds	r3, r7, #3
200008f8:	1c22      	adds	r2, r4, #0
200008fa:	701a      	strb	r2, [r3, #0]
200008fc:	1cbb      	adds	r3, r7, #2
200008fe:	1c02      	adds	r2, r0, #0
20000900:	701a      	strb	r2, [r3, #0]
20000902:	1c7b      	adds	r3, r7, #1
20000904:	1c0a      	adds	r2, r1, #0
20000906:	701a      	strb	r2, [r3, #0]
	char controller;
	if (x > 127 | y > 63)
20000908:	1cfb      	adds	r3, r7, #3
2000090a:	781b      	ldrb	r3, [r3, #0]
2000090c:	b25b      	sxtb	r3, r3
2000090e:	b2db      	uxtb	r3, r3
20000910:	09db      	lsrs	r3, r3, #7
20000912:	b2da      	uxtb	r2, r3
20000914:	1cbb      	adds	r3, r7, #2
20000916:	781b      	ldrb	r3, [r3, #0]
20000918:	213f      	movs	r1, #63	; 0x3f
2000091a:	4299      	cmp	r1, r3
2000091c:	419b      	sbcs	r3, r3
2000091e:	425b      	negs	r3, r3
20000920:	b2db      	uxtb	r3, r3
20000922:	4313      	orrs	r3, r2
20000924:	b2db      	uxtb	r3, r3
20000926:	2b00      	cmp	r3, #0
20000928:	d16c      	bne.n	20000a04 <lcdBufferWritePixel+0x11c>
		{return;}
	if (x<64){
2000092a:	1cfb      	adds	r3, r7, #3
2000092c:	781b      	ldrb	r3, [r3, #0]
2000092e:	2b3f      	cmp	r3, #63	; 0x3f
20000930:	d804      	bhi.n	2000093c <lcdBufferWritePixel+0x54>
		controller = B_CS1;
20000932:	230f      	movs	r3, #15
20000934:	18fb      	adds	r3, r7, r3
20000936:	2208      	movs	r2, #8
20000938:	701a      	strb	r2, [r3, #0]
2000093a:	e003      	b.n	20000944 <lcdBufferWritePixel+0x5c>
	}
	else{
		controller = B_CS2;
2000093c:	230f      	movs	r3, #15
2000093e:	18fb      	adds	r3, r7, r3
20000940:	2210      	movs	r2, #16
20000942:	701a      	strb	r2, [r3, #0]
	}
	char index = (1<<(y%8));
20000944:	1cbb      	adds	r3, r7, #2
20000946:	781b      	ldrb	r3, [r3, #0]
20000948:	2207      	movs	r2, #7
2000094a:	4013      	ands	r3, r2
2000094c:	2201      	movs	r2, #1
2000094e:	409a      	lsls	r2, r3
20000950:	230e      	movs	r3, #14
20000952:	18fb      	adds	r3, r7, r3
20000954:	701a      	strb	r2, [r3, #0]
	if(set){
20000956:	1c7b      	adds	r3, r7, #1
20000958:	781b      	ldrb	r3, [r3, #0]
2000095a:	2b00      	cmp	r3, #0
2000095c:	d016      	beq.n	2000098c <lcdBufferWritePixel+0xa4>
		lcdBuff->display[x][y/8] |= index;
2000095e:	1cfb      	adds	r3, r7, #3
20000960:	781b      	ldrb	r3, [r3, #0]
20000962:	1cba      	adds	r2, r7, #2
20000964:	7812      	ldrb	r2, [r2, #0]
20000966:	08d2      	lsrs	r2, r2, #3
20000968:	b2d0      	uxtb	r0, r2
2000096a:	0001      	movs	r1, r0
2000096c:	687a      	ldr	r2, [r7, #4]
2000096e:	00db      	lsls	r3, r3, #3
20000970:	18d3      	adds	r3, r2, r3
20000972:	5c59      	ldrb	r1, [r3, r1]
20000974:	1cfb      	adds	r3, r7, #3
20000976:	781b      	ldrb	r3, [r3, #0]
20000978:	220e      	movs	r2, #14
2000097a:	18ba      	adds	r2, r7, r2
2000097c:	7812      	ldrb	r2, [r2, #0]
2000097e:	430a      	orrs	r2, r1
20000980:	b2d1      	uxtb	r1, r2
20000982:	687a      	ldr	r2, [r7, #4]
20000984:	00db      	lsls	r3, r3, #3
20000986:	18d3      	adds	r3, r2, r3
20000988:	1c0a      	adds	r2, r1, #0
2000098a:	541a      	strb	r2, [r3, r0]
	}
	if(!set){
2000098c:	1c7b      	adds	r3, r7, #1
2000098e:	781b      	ldrb	r3, [r3, #0]
20000990:	2b00      	cmp	r3, #0
20000992:	d11b      	bne.n	200009cc <lcdBufferWritePixel+0xe4>
		lcdBuff->display[x][y/8] &= ~index;
20000994:	1cfb      	adds	r3, r7, #3
20000996:	781b      	ldrb	r3, [r3, #0]
20000998:	1cba      	adds	r2, r7, #2
2000099a:	7812      	ldrb	r2, [r2, #0]
2000099c:	08d2      	lsrs	r2, r2, #3
2000099e:	b2d1      	uxtb	r1, r2
200009a0:	0008      	movs	r0, r1
200009a2:	687a      	ldr	r2, [r7, #4]
200009a4:	00db      	lsls	r3, r3, #3
200009a6:	18d3      	adds	r3, r2, r3
200009a8:	5c1b      	ldrb	r3, [r3, r0]
200009aa:	b25b      	sxtb	r3, r3
200009ac:	220e      	movs	r2, #14
200009ae:	18ba      	adds	r2, r7, r2
200009b0:	7812      	ldrb	r2, [r2, #0]
200009b2:	b252      	sxtb	r2, r2
200009b4:	43d2      	mvns	r2, r2
200009b6:	b252      	sxtb	r2, r2
200009b8:	4013      	ands	r3, r2
200009ba:	b25a      	sxtb	r2, r3
200009bc:	1cfb      	adds	r3, r7, #3
200009be:	781b      	ldrb	r3, [r3, #0]
200009c0:	b2d0      	uxtb	r0, r2
200009c2:	687a      	ldr	r2, [r7, #4]
200009c4:	00db      	lsls	r3, r3, #3
200009c6:	18d3      	adds	r3, r2, r3
200009c8:	1c02      	adds	r2, r0, #0
200009ca:	545a      	strb	r2, [r3, r1]
	}
	lcdBuff->changeLog[x] |= (1<<y);
200009cc:	1cfb      	adds	r3, r7, #3
200009ce:	781a      	ldrb	r2, [r3, #0]
200009d0:	6879      	ldr	r1, [r7, #4]
200009d2:	2380      	movs	r3, #128	; 0x80
200009d4:	00db      	lsls	r3, r3, #3
200009d6:	188a      	adds	r2, r1, r2
200009d8:	18d3      	adds	r3, r2, r3
200009da:	781b      	ldrb	r3, [r3, #0]
200009dc:	b25a      	sxtb	r2, r3
200009de:	1cbb      	adds	r3, r7, #2
200009e0:	781b      	ldrb	r3, [r3, #0]
200009e2:	2101      	movs	r1, #1
200009e4:	4099      	lsls	r1, r3
200009e6:	000b      	movs	r3, r1
200009e8:	b25b      	sxtb	r3, r3
200009ea:	4313      	orrs	r3, r2
200009ec:	b259      	sxtb	r1, r3
200009ee:	1cfb      	adds	r3, r7, #3
200009f0:	781a      	ldrb	r2, [r3, #0]
200009f2:	b2c8      	uxtb	r0, r1
200009f4:	6879      	ldr	r1, [r7, #4]
200009f6:	2380      	movs	r3, #128	; 0x80
200009f8:	00db      	lsls	r3, r3, #3
200009fa:	188a      	adds	r2, r1, r2
200009fc:	18d3      	adds	r3, r2, r3
200009fe:	1c02      	adds	r2, r0, #0
20000a00:	701a      	strb	r2, [r3, #0]
20000a02:	e000      	b.n	20000a06 <lcdBufferWritePixel+0x11e>
		{return;}
20000a04:	46c0      	nop			; (mov r8, r8)
}
20000a06:	46bd      	mov	sp, r7
20000a08:	b005      	add	sp, #20
20000a0a:	bd90      	pop	{r4, r7, pc}

20000a0c <buffer_clear>:
	buffer_display,
	buffer_changeLog,
	lcdBufferDraw
};*/

void buffer_clear(plcdBuffer plcdBuff){
20000a0c:	b580      	push	{r7, lr}
20000a0e:	b084      	sub	sp, #16
20000a10:	af00      	add	r7, sp, #0
20000a12:	6078      	str	r0, [r7, #4]
	for(int i=0; i<128; i++){
20000a14:	2300      	movs	r3, #0
20000a16:	60fb      	str	r3, [r7, #12]
20000a18:	e01b      	b.n	20000a52 <buffer_clear+0x46>
		plcdBuff->changeLog[i] = 0;
20000a1a:	6879      	ldr	r1, [r7, #4]
20000a1c:	2380      	movs	r3, #128	; 0x80
20000a1e:	00db      	lsls	r3, r3, #3
20000a20:	68fa      	ldr	r2, [r7, #12]
20000a22:	188a      	adds	r2, r1, r2
20000a24:	18d3      	adds	r3, r2, r3
20000a26:	2200      	movs	r2, #0
20000a28:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<8; j++){
20000a2a:	2300      	movs	r3, #0
20000a2c:	60bb      	str	r3, [r7, #8]
20000a2e:	e00a      	b.n	20000a46 <buffer_clear+0x3a>
			plcdBuff->display[i][j] = 0;
20000a30:	687a      	ldr	r2, [r7, #4]
20000a32:	68fb      	ldr	r3, [r7, #12]
20000a34:	00db      	lsls	r3, r3, #3
20000a36:	18d2      	adds	r2, r2, r3
20000a38:	68bb      	ldr	r3, [r7, #8]
20000a3a:	18d3      	adds	r3, r2, r3
20000a3c:	2200      	movs	r2, #0
20000a3e:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<8; j++){
20000a40:	68bb      	ldr	r3, [r7, #8]
20000a42:	3301      	adds	r3, #1
20000a44:	60bb      	str	r3, [r7, #8]
20000a46:	68bb      	ldr	r3, [r7, #8]
20000a48:	2b07      	cmp	r3, #7
20000a4a:	ddf1      	ble.n	20000a30 <buffer_clear+0x24>
	for(int i=0; i<128; i++){
20000a4c:	68fb      	ldr	r3, [r7, #12]
20000a4e:	3301      	adds	r3, #1
20000a50:	60fb      	str	r3, [r7, #12]
20000a52:	68fb      	ldr	r3, [r7, #12]
20000a54:	2b7f      	cmp	r3, #127	; 0x7f
20000a56:	dde0      	ble.n	20000a1a <buffer_clear+0xe>
		}
	}
}
20000a58:	46c0      	nop			; (mov r8, r8)
20000a5a:	46bd      	mov	sp, r7
20000a5c:	b004      	add	sp, #16
20000a5e:	bd80      	pop	{r7, pc}

20000a60 <pong_init>:
#include "ponglogic.h"
#include "portDeclare.h"



void pong_init(){
20000a60:	b580      	push	{r7, lr}
20000a62:	af00      	add	r7, sp, #0
	
}
20000a64:	46c0      	nop			; (mov r8, r8)
20000a66:	46bd      	mov	sp, r7
20000a68:	bd80      	pop	{r7, pc}

20000a6a <set_object_speed>:

void set_object_speed(pobject o, int speedx, int speedy){
20000a6a:	b580      	push	{r7, lr}
20000a6c:	b084      	sub	sp, #16
20000a6e:	af00      	add	r7, sp, #0
20000a70:	60f8      	str	r0, [r7, #12]
20000a72:	60b9      	str	r1, [r7, #8]
20000a74:	607a      	str	r2, [r7, #4]
	o->dirx = speedx;
20000a76:	68fb      	ldr	r3, [r7, #12]
20000a78:	68ba      	ldr	r2, [r7, #8]
20000a7a:	605a      	str	r2, [r3, #4]
	o->diry = speedy;
20000a7c:	68fb      	ldr	r3, [r7, #12]
20000a7e:	687a      	ldr	r2, [r7, #4]
20000a80:	609a      	str	r2, [r3, #8]
}
20000a82:	46c0      	nop			; (mov r8, r8)
20000a84:	46bd      	mov	sp, r7
20000a86:	b004      	add	sp, #16
20000a88:	bd80      	pop	{r7, pc}

20000a8a <pong_set_position>:

void pong_set_position(pobject o, int posx, int posy){
20000a8a:	b580      	push	{r7, lr}
20000a8c:	b084      	sub	sp, #16
20000a8e:	af00      	add	r7, sp, #0
20000a90:	60f8      	str	r0, [r7, #12]
20000a92:	60b9      	str	r1, [r7, #8]
20000a94:	607a      	str	r2, [r7, #4]
	o->posx = posx;
20000a96:	68fb      	ldr	r3, [r7, #12]
20000a98:	68ba      	ldr	r2, [r7, #8]
20000a9a:	60da      	str	r2, [r3, #12]
	o->posy = posy;
20000a9c:	68fb      	ldr	r3, [r7, #12]
20000a9e:	687a      	ldr	r2, [r7, #4]
20000aa0:	611a      	str	r2, [r3, #16]
}
20000aa2:	46c0      	nop			; (mov r8, r8)
20000aa4:	46bd      	mov	sp, r7
20000aa6:	b004      	add	sp, #16
20000aa8:	bd80      	pop	{r7, pc}

20000aaa <draw_object>:

void draw_object(object* o){
20000aaa:	b580      	push	{r7, lr}
20000aac:	b086      	sub	sp, #24
20000aae:	af00      	add	r7, sp, #0
20000ab0:	6078      	str	r0, [r7, #4]
	for (int i=0; i < o->geo->numpoints; i++){
20000ab2:	2300      	movs	r3, #0
20000ab4:	617b      	str	r3, [r7, #20]
20000ab6:	e020      	b.n	20000afa <draw_object+0x50>
		int drawx = o->posx + o->geo->px[i].x;
20000ab8:	687b      	ldr	r3, [r7, #4]
20000aba:	68da      	ldr	r2, [r3, #12]
20000abc:	687b      	ldr	r3, [r7, #4]
20000abe:	6819      	ldr	r1, [r3, #0]
20000ac0:	697b      	ldr	r3, [r7, #20]
20000ac2:	3304      	adds	r3, #4
20000ac4:	005b      	lsls	r3, r3, #1
20000ac6:	18cb      	adds	r3, r1, r3
20000ac8:	3304      	adds	r3, #4
20000aca:	781b      	ldrb	r3, [r3, #0]
20000acc:	18d3      	adds	r3, r2, r3
20000ace:	613b      	str	r3, [r7, #16]
		int drawy = o->posy + o->geo->px[i].y;
20000ad0:	687b      	ldr	r3, [r7, #4]
20000ad2:	691a      	ldr	r2, [r3, #16]
20000ad4:	687b      	ldr	r3, [r7, #4]
20000ad6:	6819      	ldr	r1, [r3, #0]
20000ad8:	697b      	ldr	r3, [r7, #20]
20000ada:	3304      	adds	r3, #4
20000adc:	005b      	lsls	r3, r3, #1
20000ade:	18cb      	adds	r3, r1, r3
20000ae0:	3305      	adds	r3, #5
20000ae2:	781b      	ldrb	r3, [r3, #0]
20000ae4:	18d3      	adds	r3, r2, r3
20000ae6:	60fb      	str	r3, [r7, #12]
		graphic_pixel(drawx, drawy,1);
20000ae8:	68f9      	ldr	r1, [r7, #12]
20000aea:	693b      	ldr	r3, [r7, #16]
20000aec:	2201      	movs	r2, #1
20000aee:	0018      	movs	r0, r3
20000af0:	f7ff fdb0 	bl	20000654 <graphic_pixel>
	for (int i=0; i < o->geo->numpoints; i++){
20000af4:	697b      	ldr	r3, [r7, #20]
20000af6:	3301      	adds	r3, #1
20000af8:	617b      	str	r3, [r7, #20]
20000afa:	687b      	ldr	r3, [r7, #4]
20000afc:	681b      	ldr	r3, [r3, #0]
20000afe:	681b      	ldr	r3, [r3, #0]
20000b00:	697a      	ldr	r2, [r7, #20]
20000b02:	429a      	cmp	r2, r3
20000b04:	dbd8      	blt.n	20000ab8 <draw_object+0xe>
	}
}
20000b06:	46c0      	nop			; (mov r8, r8)
20000b08:	46bd      	mov	sp, r7
20000b0a:	b006      	add	sp, #24
20000b0c:	bd80      	pop	{r7, pc}

20000b0e <clear_object>:

void clear_object(object* o){
20000b0e:	b580      	push	{r7, lr}
20000b10:	b084      	sub	sp, #16
20000b12:	af00      	add	r7, sp, #0
20000b14:	6078      	str	r0, [r7, #4]
	for (int i=0; i < o->geo->numpoints; i++){
20000b16:	2300      	movs	r3, #0
20000b18:	60fb      	str	r3, [r7, #12]
20000b1a:	e01c      	b.n	20000b56 <clear_object+0x48>
		graphic_pixel(o->posx + o->geo->px[i].x, o->posy + o->geo->px[i].y,0);
20000b1c:	687b      	ldr	r3, [r7, #4]
20000b1e:	68da      	ldr	r2, [r3, #12]
20000b20:	687b      	ldr	r3, [r7, #4]
20000b22:	6819      	ldr	r1, [r3, #0]
20000b24:	68fb      	ldr	r3, [r7, #12]
20000b26:	3304      	adds	r3, #4
20000b28:	005b      	lsls	r3, r3, #1
20000b2a:	18cb      	adds	r3, r1, r3
20000b2c:	3304      	adds	r3, #4
20000b2e:	781b      	ldrb	r3, [r3, #0]
20000b30:	18d0      	adds	r0, r2, r3
20000b32:	687b      	ldr	r3, [r7, #4]
20000b34:	691a      	ldr	r2, [r3, #16]
20000b36:	687b      	ldr	r3, [r7, #4]
20000b38:	6819      	ldr	r1, [r3, #0]
20000b3a:	68fb      	ldr	r3, [r7, #12]
20000b3c:	3304      	adds	r3, #4
20000b3e:	005b      	lsls	r3, r3, #1
20000b40:	18cb      	adds	r3, r1, r3
20000b42:	3305      	adds	r3, #5
20000b44:	781b      	ldrb	r3, [r3, #0]
20000b46:	18d3      	adds	r3, r2, r3
20000b48:	2200      	movs	r2, #0
20000b4a:	0019      	movs	r1, r3
20000b4c:	f7ff fd82 	bl	20000654 <graphic_pixel>
	for (int i=0; i < o->geo->numpoints; i++){
20000b50:	68fb      	ldr	r3, [r7, #12]
20000b52:	3301      	adds	r3, #1
20000b54:	60fb      	str	r3, [r7, #12]
20000b56:	687b      	ldr	r3, [r7, #4]
20000b58:	681b      	ldr	r3, [r3, #0]
20000b5a:	681b      	ldr	r3, [r3, #0]
20000b5c:	68fa      	ldr	r2, [r7, #12]
20000b5e:	429a      	cmp	r2, r3
20000b60:	dbdc      	blt.n	20000b1c <clear_object+0xe>
	}
}
20000b62:	46c0      	nop			; (mov r8, r8)
20000b64:	46bd      	mov	sp, r7
20000b66:	b004      	add	sp, #16
20000b68:	bd80      	pop	{r7, pc}

20000b6a <move_object>:

void move_object(object* o){
20000b6a:	b580      	push	{r7, lr}
20000b6c:	b082      	sub	sp, #8
20000b6e:	af00      	add	r7, sp, #0
20000b70:	6078      	str	r0, [r7, #4]
	clear_object(o);
20000b72:	687b      	ldr	r3, [r7, #4]
20000b74:	0018      	movs	r0, r3
20000b76:	f7ff ffca 	bl	20000b0e <clear_object>
	o->posx = o->posx + o->dirx;
20000b7a:	687b      	ldr	r3, [r7, #4]
20000b7c:	68da      	ldr	r2, [r3, #12]
20000b7e:	687b      	ldr	r3, [r7, #4]
20000b80:	685b      	ldr	r3, [r3, #4]
20000b82:	18d2      	adds	r2, r2, r3
20000b84:	687b      	ldr	r3, [r7, #4]
20000b86:	60da      	str	r2, [r3, #12]
	o->posy = o->posy + o->diry;
20000b88:	687b      	ldr	r3, [r7, #4]
20000b8a:	691a      	ldr	r2, [r3, #16]
20000b8c:	687b      	ldr	r3, [r7, #4]
20000b8e:	689b      	ldr	r3, [r3, #8]
20000b90:	18d2      	adds	r2, r2, r3
20000b92:	687b      	ldr	r3, [r7, #4]
20000b94:	611a      	str	r2, [r3, #16]
	if(o->posx <= 0 | o->posx >= 124){
20000b96:	687b      	ldr	r3, [r7, #4]
20000b98:	68db      	ldr	r3, [r3, #12]
20000b9a:	1e5a      	subs	r2, r3, #1
20000b9c:	4313      	orrs	r3, r2
20000b9e:	0fdb      	lsrs	r3, r3, #31
20000ba0:	b2da      	uxtb	r2, r3
20000ba2:	687b      	ldr	r3, [r7, #4]
20000ba4:	68db      	ldr	r3, [r3, #12]
20000ba6:	2101      	movs	r1, #1
20000ba8:	2b7b      	cmp	r3, #123	; 0x7b
20000baa:	dc01      	bgt.n	20000bb0 <move_object+0x46>
20000bac:	2300      	movs	r3, #0
20000bae:	1c19      	adds	r1, r3, #0
20000bb0:	b2cb      	uxtb	r3, r1
20000bb2:	4313      	orrs	r3, r2
20000bb4:	b2db      	uxtb	r3, r3
20000bb6:	2b00      	cmp	r3, #0
20000bb8:	d004      	beq.n	20000bc4 <move_object+0x5a>
			o->dirx = -o->dirx;
20000bba:	687b      	ldr	r3, [r7, #4]
20000bbc:	685b      	ldr	r3, [r3, #4]
20000bbe:	425a      	negs	r2, r3
20000bc0:	687b      	ldr	r3, [r7, #4]
20000bc2:	605a      	str	r2, [r3, #4]
	}
	if(o->posy <= 0 | o->posy >= 60){
20000bc4:	687b      	ldr	r3, [r7, #4]
20000bc6:	691b      	ldr	r3, [r3, #16]
20000bc8:	1e5a      	subs	r2, r3, #1
20000bca:	4313      	orrs	r3, r2
20000bcc:	0fdb      	lsrs	r3, r3, #31
20000bce:	b2da      	uxtb	r2, r3
20000bd0:	687b      	ldr	r3, [r7, #4]
20000bd2:	691b      	ldr	r3, [r3, #16]
20000bd4:	2101      	movs	r1, #1
20000bd6:	2b3b      	cmp	r3, #59	; 0x3b
20000bd8:	dc01      	bgt.n	20000bde <move_object+0x74>
20000bda:	2300      	movs	r3, #0
20000bdc:	1c19      	adds	r1, r3, #0
20000bde:	b2cb      	uxtb	r3, r1
20000be0:	4313      	orrs	r3, r2
20000be2:	b2db      	uxtb	r3, r3
20000be4:	2b00      	cmp	r3, #0
20000be6:	d004      	beq.n	20000bf2 <move_object+0x88>
		o->diry = -o->diry;
20000be8:	687b      	ldr	r3, [r7, #4]
20000bea:	689b      	ldr	r3, [r3, #8]
20000bec:	425a      	negs	r2, r3
20000bee:	687b      	ldr	r3, [r7, #4]
20000bf0:	609a      	str	r2, [r3, #8]
	}
	draw_object(o);
20000bf2:	687b      	ldr	r3, [r7, #4]
20000bf4:	0018      	movs	r0, r3
20000bf6:	f7ff ff58 	bl	20000aaa <draw_object>
}
20000bfa:	46c0      	nop			; (mov r8, r8)
20000bfc:	46bd      	mov	sp, r7
20000bfe:	b002      	add	sp, #8
20000c00:	bd80      	pop	{r7, pc}

20000c02 <pong_inc_playerScore>:

void pong_inc_playerScore(char* playerScore, char player){
20000c02:	b580      	push	{r7, lr}
20000c04:	b084      	sub	sp, #16
20000c06:	af00      	add	r7, sp, #0
20000c08:	6078      	str	r0, [r7, #4]
20000c0a:	000a      	movs	r2, r1
20000c0c:	1cfb      	adds	r3, r7, #3
20000c0e:	701a      	strb	r2, [r3, #0]
	ascii_init();
20000c10:	f000 f90e 	bl	20000e30 <ascii_init>
	playerScore[player-1]++;
20000c14:	1cfb      	adds	r3, r7, #3
20000c16:	781b      	ldrb	r3, [r3, #0]
20000c18:	3b01      	subs	r3, #1
20000c1a:	687a      	ldr	r2, [r7, #4]
20000c1c:	18d3      	adds	r3, r2, r3
20000c1e:	781a      	ldrb	r2, [r3, #0]
20000c20:	3201      	adds	r2, #1
20000c22:	b2d2      	uxtb	r2, r2
20000c24:	701a      	strb	r2, [r3, #0]
	ascii_gotoxy(10*player,1*player);
20000c26:	1cfb      	adds	r3, r7, #3
20000c28:	781a      	ldrb	r2, [r3, #0]
20000c2a:	0013      	movs	r3, r2
20000c2c:	009b      	lsls	r3, r3, #2
20000c2e:	189b      	adds	r3, r3, r2
20000c30:	005b      	lsls	r3, r3, #1
20000c32:	001a      	movs	r2, r3
20000c34:	1cfb      	adds	r3, r7, #3
20000c36:	781b      	ldrb	r3, [r3, #0]
20000c38:	0019      	movs	r1, r3
20000c3a:	0010      	movs	r0, r2
20000c3c:	f000 f939 	bl	20000eb2 <ascii_gotoxy>
	char newScore = playerScore[player-1]+47;
20000c40:	1cfb      	adds	r3, r7, #3
20000c42:	781b      	ldrb	r3, [r3, #0]
20000c44:	3b01      	subs	r3, #1
20000c46:	687a      	ldr	r2, [r7, #4]
20000c48:	18d3      	adds	r3, r2, r3
20000c4a:	781a      	ldrb	r2, [r3, #0]
20000c4c:	210f      	movs	r1, #15
20000c4e:	187b      	adds	r3, r7, r1
20000c50:	322f      	adds	r2, #47	; 0x2f
20000c52:	701a      	strb	r2, [r3, #0]
	ascii_write_char(newScore);
20000c54:	187b      	adds	r3, r7, r1
20000c56:	781b      	ldrb	r3, [r3, #0]
20000c58:	0018      	movs	r0, r3
20000c5a:	f000 f90c 	bl	20000e76 <ascii_write_char>
	graphic_initialize();
20000c5e:	f7ff fc8b 	bl	20000578 <graphic_initialize>
}
20000c62:	46c0      	nop			; (mov r8, r8)
20000c64:	46bd      	mov	sp, r7
20000c66:	b004      	add	sp, #16
20000c68:	bd80      	pop	{r7, pc}
	...

20000c6c <ascii_ctrl_bit_set>:

#include "delay.h"
#include "ascii_drivers.h"
#include "portDeclare.h"

void ascii_ctrl_bit_set(unsigned short x){
20000c6c:	b580      	push	{r7, lr}
20000c6e:	b084      	sub	sp, #16
20000c70:	af00      	add	r7, sp, #0
20000c72:	0002      	movs	r2, r0
20000c74:	1dbb      	adds	r3, r7, #6
20000c76:	801a      	strh	r2, [r3, #0]
	
	unsigned char c;
	c = *portOdrLowE;
20000c78:	4a0c      	ldr	r2, [pc, #48]	; (20000cac <ascii_ctrl_bit_set+0x40>)
20000c7a:	210f      	movs	r1, #15
20000c7c:	187b      	adds	r3, r7, r1
20000c7e:	7812      	ldrb	r2, [r2, #0]
20000c80:	701a      	strb	r2, [r3, #0]
	c |= ( B_SELECT | x );
20000c82:	1dbb      	adds	r3, r7, #6
20000c84:	881b      	ldrh	r3, [r3, #0]
20000c86:	b2da      	uxtb	r2, r3
20000c88:	187b      	adds	r3, r7, r1
20000c8a:	781b      	ldrb	r3, [r3, #0]
20000c8c:	4313      	orrs	r3, r2
20000c8e:	b2da      	uxtb	r2, r3
20000c90:	0008      	movs	r0, r1
20000c92:	187b      	adds	r3, r7, r1
20000c94:	2104      	movs	r1, #4
20000c96:	430a      	orrs	r2, r1
20000c98:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = c; 
20000c9a:	4a04      	ldr	r2, [pc, #16]	; (20000cac <ascii_ctrl_bit_set+0x40>)
20000c9c:	0001      	movs	r1, r0
20000c9e:	187b      	adds	r3, r7, r1
20000ca0:	781b      	ldrb	r3, [r3, #0]
20000ca2:	7013      	strb	r3, [r2, #0]
}
20000ca4:	46c0      	nop			; (mov r8, r8)
20000ca6:	46bd      	mov	sp, r7
20000ca8:	b004      	add	sp, #16
20000caa:	bd80      	pop	{r7, pc}
20000cac:	40021014 	andmi	r1, r2, r4, lsl r0

20000cb0 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned short x){
20000cb0:	b580      	push	{r7, lr}
20000cb2:	b084      	sub	sp, #16
20000cb4:	af00      	add	r7, sp, #0
20000cb6:	0002      	movs	r2, r0
20000cb8:	1dbb      	adds	r3, r7, #6
20000cba:	801a      	strh	r2, [r3, #0]
	unsigned char c;
	c = *portOdrLowE;
20000cbc:	4a0d      	ldr	r2, [pc, #52]	; (20000cf4 <ascii_ctrl_bit_clear+0x44>)
20000cbe:	210f      	movs	r1, #15
20000cc0:	187b      	adds	r3, r7, r1
20000cc2:	7812      	ldrb	r2, [r2, #0]
20000cc4:	701a      	strb	r2, [r3, #0]
	c = B_SELECT | ( c & ~x );
20000cc6:	1dbb      	adds	r3, r7, #6
20000cc8:	881b      	ldrh	r3, [r3, #0]
20000cca:	b25b      	sxtb	r3, r3
20000ccc:	43db      	mvns	r3, r3
20000cce:	b25b      	sxtb	r3, r3
20000cd0:	187a      	adds	r2, r7, r1
20000cd2:	7812      	ldrb	r2, [r2, #0]
20000cd4:	b252      	sxtb	r2, r2
20000cd6:	4013      	ands	r3, r2
20000cd8:	b25b      	sxtb	r3, r3
20000cda:	2204      	movs	r2, #4
20000cdc:	4313      	orrs	r3, r2
20000cde:	b25a      	sxtb	r2, r3
20000ce0:	187b      	adds	r3, r7, r1
20000ce2:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = c;
20000ce4:	4a03      	ldr	r2, [pc, #12]	; (20000cf4 <ascii_ctrl_bit_clear+0x44>)
20000ce6:	187b      	adds	r3, r7, r1
20000ce8:	781b      	ldrb	r3, [r3, #0]
20000cea:	7013      	strb	r3, [r2, #0]
}
20000cec:	46c0      	nop			; (mov r8, r8)
20000cee:	46bd      	mov	sp, r7
20000cf0:	b004      	add	sp, #16
20000cf2:	bd80      	pop	{r7, pc}
20000cf4:	40021014 	andmi	r1, r2, r4, lsl r0

20000cf8 <ascii_write_controller>:

void ascii_write_controller(unsigned char c){
20000cf8:	b580      	push	{r7, lr}
20000cfa:	b082      	sub	sp, #8
20000cfc:	af00      	add	r7, sp, #0
20000cfe:	0002      	movs	r2, r0
20000d00:	1dfb      	adds	r3, r7, #7
20000d02:	701a      	strb	r2, [r3, #0]
	delay_40ns();
20000d04:	f7ff fa30 	bl	20000168 <delay_40ns>
	ascii_ctrl_bit_set(B_E);
20000d08:	2040      	movs	r0, #64	; 0x40
20000d0a:	f7ff ffaf 	bl	20000c6c <ascii_ctrl_bit_set>
	*portOdrHighE = c;
20000d0e:	4a05      	ldr	r2, [pc, #20]	; (20000d24 <ascii_write_controller+0x2c>)
20000d10:	1dfb      	adds	r3, r7, #7
20000d12:	781b      	ldrb	r3, [r3, #0]
20000d14:	7013      	strb	r3, [r2, #0]
	delay_250ns;
	ascii_ctrl_bit_clear(B_E);
20000d16:	2040      	movs	r0, #64	; 0x40
20000d18:	f7ff ffca 	bl	20000cb0 <ascii_ctrl_bit_clear>
}
20000d1c:	46c0      	nop			; (mov r8, r8)
20000d1e:	46bd      	mov	sp, r7
20000d20:	b002      	add	sp, #8
20000d22:	bd80      	pop	{r7, pc}
20000d24:	40021015 	andmi	r1, r2, r5, lsl r0

20000d28 <ascii_read_controller>:
unsigned char ascii_read_controller(void){
20000d28:	b580      	push	{r7, lr}
20000d2a:	b082      	sub	sp, #8
20000d2c:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_set(B_E);
20000d2e:	2040      	movs	r0, #64	; 0x40
20000d30:	f7ff ff9c 	bl	20000c6c <ascii_ctrl_bit_set>
	delay_250ns;
	delay_250ns;
	unsigned char rv = *portIdrHighE;
20000d34:	4a06      	ldr	r2, [pc, #24]	; (20000d50 <ascii_read_controller+0x28>)
20000d36:	1dfb      	adds	r3, r7, #7
20000d38:	7812      	ldrb	r2, [r2, #0]
20000d3a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20000d3c:	2040      	movs	r0, #64	; 0x40
20000d3e:	f7ff ffb7 	bl	20000cb0 <ascii_ctrl_bit_clear>
	return rv;
20000d42:	1dfb      	adds	r3, r7, #7
20000d44:	781b      	ldrb	r3, [r3, #0]
}
20000d46:	0018      	movs	r0, r3
20000d48:	46bd      	mov	sp, r7
20000d4a:	b002      	add	sp, #8
20000d4c:	bd80      	pop	{r7, pc}
20000d4e:	46c0      	nop			; (mov r8, r8)
20000d50:	40021011 	andmi	r1, r2, r1, lsl r0

20000d54 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20000d54:	b580      	push	{r7, lr}
20000d56:	b082      	sub	sp, #8
20000d58:	af00      	add	r7, sp, #0
20000d5a:	0002      	movs	r2, r0
20000d5c:	1dfb      	adds	r3, r7, #7
20000d5e:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000d60:	2001      	movs	r0, #1
20000d62:	f7ff ffa5 	bl	20000cb0 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000d66:	2002      	movs	r0, #2
20000d68:	f7ff ffa2 	bl	20000cb0 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20000d6c:	1dfb      	adds	r3, r7, #7
20000d6e:	781b      	ldrb	r3, [r3, #0]
20000d70:	0018      	movs	r0, r3
20000d72:	f7ff ffc1 	bl	20000cf8 <ascii_write_controller>
}
20000d76:	46c0      	nop			; (mov r8, r8)
20000d78:	46bd      	mov	sp, r7
20000d7a:	b002      	add	sp, #8
20000d7c:	bd80      	pop	{r7, pc}

20000d7e <ascii_write_data>:

void ascii_write_data(unsigned char data){
20000d7e:	b580      	push	{r7, lr}
20000d80:	b082      	sub	sp, #8
20000d82:	af00      	add	r7, sp, #0
20000d84:	0002      	movs	r2, r0
20000d86:	1dfb      	adds	r3, r7, #7
20000d88:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000d8a:	2001      	movs	r0, #1
20000d8c:	f7ff ff6e 	bl	20000c6c <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20000d90:	2002      	movs	r0, #2
20000d92:	f7ff ff8d 	bl	20000cb0 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20000d96:	1dfb      	adds	r3, r7, #7
20000d98:	781b      	ldrb	r3, [r3, #0]
20000d9a:	0018      	movs	r0, r3
20000d9c:	f7ff ffac 	bl	20000cf8 <ascii_write_controller>
}
20000da0:	46c0      	nop			; (mov r8, r8)
20000da2:	46bd      	mov	sp, r7
20000da4:	b002      	add	sp, #8
20000da6:	bd80      	pop	{r7, pc}

20000da8 <ascii_read_status>:

unsigned char ascii_read_status(void){
20000da8:	b580      	push	{r7, lr}
20000daa:	b082      	sub	sp, #8
20000dac:	af00      	add	r7, sp, #0
	*portModerE = (*portModerE & 0x0000FFFF);
20000dae:	4b0c      	ldr	r3, [pc, #48]	; (20000de0 <ascii_read_status+0x38>)
20000db0:	681a      	ldr	r2, [r3, #0]
20000db2:	4b0b      	ldr	r3, [pc, #44]	; (20000de0 <ascii_read_status+0x38>)
20000db4:	0412      	lsls	r2, r2, #16
20000db6:	0c12      	lsrs	r2, r2, #16
20000db8:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000dba:	2001      	movs	r0, #1
20000dbc:	f7ff ff78 	bl	20000cb0 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
20000dc0:	2002      	movs	r0, #2
20000dc2:	f7ff ff53 	bl	20000c6c <ascii_ctrl_bit_set>
	unsigned char rv; 
	#ifndef SIMULATOR
		rv = ascii_read_controller();
	#endif
	*portModerE = (*portModerE | 0x55550000);
20000dc6:	4b06      	ldr	r3, [pc, #24]	; (20000de0 <ascii_read_status+0x38>)
20000dc8:	681a      	ldr	r2, [r3, #0]
20000dca:	4b05      	ldr	r3, [pc, #20]	; (20000de0 <ascii_read_status+0x38>)
20000dcc:	4905      	ldr	r1, [pc, #20]	; (20000de4 <ascii_read_status+0x3c>)
20000dce:	430a      	orrs	r2, r1
20000dd0:	601a      	str	r2, [r3, #0]
	return rv;
20000dd2:	1dfb      	adds	r3, r7, #7
20000dd4:	781b      	ldrb	r3, [r3, #0]
}
20000dd6:	0018      	movs	r0, r3
20000dd8:	46bd      	mov	sp, r7
20000dda:	b002      	add	sp, #8
20000ddc:	bd80      	pop	{r7, pc}
20000dde:	46c0      	nop			; (mov r8, r8)
20000de0:	40021000 	andmi	r1, r2, r0
20000de4:	55550000 	ldrbpl	r0, [r5, #-0]

20000de8 <ascii_read_data>:

unsigned char ascii_read_data(void){
20000de8:	b590      	push	{r4, r7, lr}
20000dea:	b083      	sub	sp, #12
20000dec:	af00      	add	r7, sp, #0
	*portModerE = (*portModerE & 0x0000FFFF);
20000dee:	4b0e      	ldr	r3, [pc, #56]	; (20000e28 <ascii_read_data+0x40>)
20000df0:	681a      	ldr	r2, [r3, #0]
20000df2:	4b0d      	ldr	r3, [pc, #52]	; (20000e28 <ascii_read_data+0x40>)
20000df4:	0412      	lsls	r2, r2, #16
20000df6:	0c12      	lsrs	r2, r2, #16
20000df8:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000dfa:	2001      	movs	r0, #1
20000dfc:	f7ff ff36 	bl	20000c6c <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20000e00:	2002      	movs	r0, #2
20000e02:	f7ff ff33 	bl	20000c6c <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20000e06:	1dfc      	adds	r4, r7, #7
20000e08:	f7ff ff8e 	bl	20000d28 <ascii_read_controller>
20000e0c:	0003      	movs	r3, r0
20000e0e:	7023      	strb	r3, [r4, #0]
	*portModerE = (*portModerE | 0x55550000);
20000e10:	4b05      	ldr	r3, [pc, #20]	; (20000e28 <ascii_read_data+0x40>)
20000e12:	681a      	ldr	r2, [r3, #0]
20000e14:	4b04      	ldr	r3, [pc, #16]	; (20000e28 <ascii_read_data+0x40>)
20000e16:	4905      	ldr	r1, [pc, #20]	; (20000e2c <ascii_read_data+0x44>)
20000e18:	430a      	orrs	r2, r1
20000e1a:	601a      	str	r2, [r3, #0]
	return rv;
20000e1c:	1dfb      	adds	r3, r7, #7
20000e1e:	781b      	ldrb	r3, [r3, #0]
}
20000e20:	0018      	movs	r0, r3
20000e22:	46bd      	mov	sp, r7
20000e24:	b003      	add	sp, #12
20000e26:	bd90      	pop	{r4, r7, pc}
20000e28:	40021000 	andmi	r1, r2, r0
20000e2c:	55550000 	ldrbpl	r0, [r5, #-0]

20000e30 <ascii_init>:

void ascii_init(void){
20000e30:	b580      	push	{r7, lr}
20000e32:	af00      	add	r7, sp, #0
	while((ascii_read_status() & 0x80) == 0x80){}
20000e34:	46c0      	nop			; (mov r8, r8)
20000e36:	f7ff ffb7 	bl	20000da8 <ascii_read_status>
20000e3a:	0003      	movs	r3, r0
20000e3c:	001a      	movs	r2, r3
20000e3e:	2380      	movs	r3, #128	; 0x80
20000e40:	4013      	ands	r3, r2
20000e42:	2b80      	cmp	r3, #128	; 0x80
20000e44:	d0f7      	beq.n	20000e36 <ascii_init+0x6>
	//ascii_read_status();
	delay_mikro(8);
20000e46:	2008      	movs	r0, #8
20000e48:	f7ff f9b5 	bl	200001b6 <delay_mikro>
	ascii_write_cmd(0x38);
20000e4c:	2038      	movs	r0, #56	; 0x38
20000e4e:	f7ff ff81 	bl	20000d54 <ascii_write_cmd>
	delay_mikro(40);
20000e52:	2028      	movs	r0, #40	; 0x28
20000e54:	f7ff f9af 	bl	200001b6 <delay_mikro>
	ascii_write_cmd(0xE);
20000e58:	200e      	movs	r0, #14
20000e5a:	f7ff ff7b 	bl	20000d54 <ascii_write_cmd>
	delay_mikro(40);
20000e5e:	2028      	movs	r0, #40	; 0x28
20000e60:	f7ff f9a9 	bl	200001b6 <delay_mikro>
	ascii_write_cmd(0x4);
20000e64:	2004      	movs	r0, #4
20000e66:	f7ff ff75 	bl	20000d54 <ascii_write_cmd>
	delay_mikro(40);
20000e6a:	2028      	movs	r0, #40	; 0x28
20000e6c:	f7ff f9a3 	bl	200001b6 <delay_mikro>
}
20000e70:	46c0      	nop			; (mov r8, r8)
20000e72:	46bd      	mov	sp, r7
20000e74:	bd80      	pop	{r7, pc}

20000e76 <ascii_write_char>:

void ascii_write_char(char c){
20000e76:	b580      	push	{r7, lr}
20000e78:	b082      	sub	sp, #8
20000e7a:	af00      	add	r7, sp, #0
20000e7c:	0002      	movs	r2, r0
20000e7e:	1dfb      	adds	r3, r7, #7
20000e80:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80){}
20000e82:	46c0      	nop			; (mov r8, r8)
20000e84:	f7ff ff90 	bl	20000da8 <ascii_read_status>
20000e88:	0003      	movs	r3, r0
20000e8a:	001a      	movs	r2, r3
20000e8c:	2380      	movs	r3, #128	; 0x80
20000e8e:	4013      	ands	r3, r2
20000e90:	2b80      	cmp	r3, #128	; 0x80
20000e92:	d0f7      	beq.n	20000e84 <ascii_write_char+0xe>
	delay_mikro(8);
20000e94:	2008      	movs	r0, #8
20000e96:	f7ff f98e 	bl	200001b6 <delay_mikro>
	ascii_write_data(c);
20000e9a:	1dfb      	adds	r3, r7, #7
20000e9c:	781b      	ldrb	r3, [r3, #0]
20000e9e:	0018      	movs	r0, r3
20000ea0:	f7ff ff6d 	bl	20000d7e <ascii_write_data>
	delay_mikro(43);
20000ea4:	202b      	movs	r0, #43	; 0x2b
20000ea6:	f7ff f986 	bl	200001b6 <delay_mikro>
}
20000eaa:	46c0      	nop			; (mov r8, r8)
20000eac:	46bd      	mov	sp, r7
20000eae:	b002      	add	sp, #8
20000eb0:	bd80      	pop	{r7, pc}

20000eb2 <ascii_gotoxy>:

void ascii_gotoxy(int x, int y){
20000eb2:	b580      	push	{r7, lr}
20000eb4:	b084      	sub	sp, #16
20000eb6:	af00      	add	r7, sp, #0
20000eb8:	6078      	str	r0, [r7, #4]
20000eba:	6039      	str	r1, [r7, #0]
	int adress = (x - 1 + (y-1)*64);
20000ebc:	687b      	ldr	r3, [r7, #4]
20000ebe:	1e5a      	subs	r2, r3, #1
20000ec0:	683b      	ldr	r3, [r7, #0]
20000ec2:	3b01      	subs	r3, #1
20000ec4:	019b      	lsls	r3, r3, #6
20000ec6:	18d3      	adds	r3, r2, r3
20000ec8:	60fb      	str	r3, [r7, #12]
	ascii_write_cmd(0x80 | adress);
20000eca:	68fb      	ldr	r3, [r7, #12]
20000ecc:	b25b      	sxtb	r3, r3
20000ece:	2280      	movs	r2, #128	; 0x80
20000ed0:	4252      	negs	r2, r2
20000ed2:	4313      	orrs	r3, r2
20000ed4:	b25b      	sxtb	r3, r3
20000ed6:	b2db      	uxtb	r3, r3
20000ed8:	0018      	movs	r0, r3
20000eda:	f7ff ff3b 	bl	20000d54 <ascii_write_cmd>
}
20000ede:	46c0      	nop			; (mov r8, r8)
20000ee0:	46bd      	mov	sp, r7
20000ee2:	b004      	add	sp, #16
20000ee4:	bd80      	pop	{r7, pc}

20000ee6 <ascii_init_app>:

void ascii_init_app(void){
20000ee6:	b580      	push	{r7, lr}
20000ee8:	af00      	add	r7, sp, #0
	*portModerE = 0x55555555;
20000eea:	4b06      	ldr	r3, [pc, #24]	; (20000f04 <ascii_init_app+0x1e>)
20000eec:	4a06      	ldr	r2, [pc, #24]	; (20000f08 <ascii_init_app+0x22>)
20000eee:	601a      	str	r2, [r3, #0]
	*portOtyperE = 0x0000;
20000ef0:	4b06      	ldr	r3, [pc, #24]	; (20000f0c <ascii_init_app+0x26>)
20000ef2:	2200      	movs	r2, #0
20000ef4:	801a      	strh	r2, [r3, #0]
	*portOspeedrE = 0x0000;
20000ef6:	4b06      	ldr	r3, [pc, #24]	; (20000f10 <ascii_init_app+0x2a>)
20000ef8:	2200      	movs	r2, #0
20000efa:	601a      	str	r2, [r3, #0]

20000efc:	46c0      	nop			; (mov r8, r8)
20000efe:	46bd      	mov	sp, r7
20000f00:	bd80      	pop	{r7, pc}
20000f02:	46c0      	nop			; (mov r8, r8)
20000f04:	40021000 	andmi	r1, r2, r0
20000f08:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000f0c:	40021004 	andmi	r1, r2, r4
20000f10:	40021008 	andmi	r1, r2, r8

20000f14 <init_keypad>:

#include "delay.h"
#include "keypad_drivers.h"
#include "portDeclare.h"

void init_keypad(void){
20000f14:	b580      	push	{r7, lr}
20000f16:	af00      	add	r7, sp, #0
	#ifdef bargraph
		*((unsigned long *)(0x40021000)) = 0x5555;
	#endif
	*portModerD = 0x55005555;
20000f18:	4b07      	ldr	r3, [pc, #28]	; (20000f38 <init_keypad+0x24>)
20000f1a:	4a08      	ldr	r2, [pc, #32]	; (20000f3c <init_keypad+0x28>)
20000f1c:	601a      	str	r2, [r3, #0]
	*portOtyperD = 0x0000;
20000f1e:	4b08      	ldr	r3, [pc, #32]	; (20000f40 <init_keypad+0x2c>)
20000f20:	2200      	movs	r2, #0
20000f22:	801a      	strh	r2, [r3, #0]
	*portOspeedrD = 0x0000;
20000f24:	4b07      	ldr	r3, [pc, #28]	; (20000f44 <init_keypad+0x30>)
20000f26:	2200      	movs	r2, #0
20000f28:	601a      	str	r2, [r3, #0]
	*portPupdrD = 0x00AA0000;
20000f2a:	4b07      	ldr	r3, [pc, #28]	; (20000f48 <init_keypad+0x34>)
20000f2c:	22aa      	movs	r2, #170	; 0xaa
20000f2e:	0412      	lsls	r2, r2, #16
20000f30:	601a      	str	r2, [r3, #0]
	

}
20000f32:	46c0      	nop			; (mov r8, r8)
20000f34:	46bd      	mov	sp, r7
20000f36:	bd80      	pop	{r7, pc}
20000f38:	40020c00 	andmi	r0, r2, r0, lsl #24
20000f3c:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000f40:	40020c04 	andmi	r0, r2, r4, lsl #24
20000f44:	40020c08 	andmi	r0, r2, r8, lsl #24
20000f48:	40020c0c 	andmi	r0, r2, ip, lsl #24

20000f4c <keyb>:

unsigned char keyb(void){
20000f4c:	b590      	push	{r4, r7, lr}
20000f4e:	b087      	sub	sp, #28
20000f50:	af00      	add	r7, sp, #0
	
	unsigned char count = 0;
20000f52:	2317      	movs	r3, #23
20000f54:	18fb      	adds	r3, r7, r3
20000f56:	2200      	movs	r2, #0
20000f58:	701a      	strb	r2, [r3, #0]
	unsigned char numpad[] = {0x1,0x2,0x3,0xA,0x4,0x5,0x6,0xB,0x7,0x8,0x9,0xC,0xE,0x0,0xF,0xD};
20000f5a:	1d3b      	adds	r3, r7, #4
20000f5c:	4a27      	ldr	r2, [pc, #156]	; (20000ffc <keyb+0xb0>)
20000f5e:	ca13      	ldmia	r2!, {r0, r1, r4}
20000f60:	c313      	stmia	r3!, {r0, r1, r4}
20000f62:	6812      	ldr	r2, [r2, #0]
20000f64:	601a      	str	r2, [r3, #0]
	
	for (char i=0; i < 4; i++){
20000f66:	2316      	movs	r3, #22
20000f68:	18fb      	adds	r3, r7, r3
20000f6a:	2200      	movs	r2, #0
20000f6c:	701a      	strb	r2, [r3, #0]
20000f6e:	e03b      	b.n	20000fe8 <keyb+0x9c>
		char activeRow = 0x10 << i;
20000f70:	2316      	movs	r3, #22
20000f72:	18fb      	adds	r3, r7, r3
20000f74:	781b      	ldrb	r3, [r3, #0]
20000f76:	2210      	movs	r2, #16
20000f78:	409a      	lsls	r2, r3
20000f7a:	2114      	movs	r1, #20
20000f7c:	187b      	adds	r3, r7, r1
20000f7e:	701a      	strb	r2, [r3, #0]
		*portOdrHighD = activeRow;
20000f80:	4a1f      	ldr	r2, [pc, #124]	; (20001000 <keyb+0xb4>)
20000f82:	187b      	adds	r3, r7, r1
20000f84:	781b      	ldrb	r3, [r3, #0]
20000f86:	7013      	strb	r3, [r2, #0]
		char keys = *portIdrHighD & 0x0f;
20000f88:	4b1e      	ldr	r3, [pc, #120]	; (20001004 <keyb+0xb8>)
20000f8a:	781b      	ldrb	r3, [r3, #0]
20000f8c:	b2da      	uxtb	r2, r3
20000f8e:	2015      	movs	r0, #21
20000f90:	183b      	adds	r3, r7, r0
20000f92:	210f      	movs	r1, #15
20000f94:	400a      	ands	r2, r1
20000f96:	701a      	strb	r2, [r3, #0]
		
		if (keys != 0){
20000f98:	183b      	adds	r3, r7, r0
20000f9a:	781b      	ldrb	r3, [r3, #0]
20000f9c:	2b00      	cmp	r3, #0
20000f9e:	d01d      	beq.n	20000fdc <keyb+0x90>
		
			while((keys & 0x1) == 0){
20000fa0:	e00b      	b.n	20000fba <keyb+0x6e>
				keys = keys >> 1;
20000fa2:	2215      	movs	r2, #21
20000fa4:	18bb      	adds	r3, r7, r2
20000fa6:	18ba      	adds	r2, r7, r2
20000fa8:	7812      	ldrb	r2, [r2, #0]
20000faa:	0852      	lsrs	r2, r2, #1
20000fac:	701a      	strb	r2, [r3, #0]
				count++;
20000fae:	2117      	movs	r1, #23
20000fb0:	187b      	adds	r3, r7, r1
20000fb2:	781a      	ldrb	r2, [r3, #0]
20000fb4:	187b      	adds	r3, r7, r1
20000fb6:	3201      	adds	r2, #1
20000fb8:	701a      	strb	r2, [r3, #0]
			while((keys & 0x1) == 0){
20000fba:	2315      	movs	r3, #21
20000fbc:	18fb      	adds	r3, r7, r3
20000fbe:	781b      	ldrb	r3, [r3, #0]
20000fc0:	2201      	movs	r2, #1
20000fc2:	4013      	ands	r3, r2
20000fc4:	d0ed      	beq.n	20000fa2 <keyb+0x56>
			}
			return numpad[i*4+count];
20000fc6:	2316      	movs	r3, #22
20000fc8:	18fb      	adds	r3, r7, r3
20000fca:	781b      	ldrb	r3, [r3, #0]
20000fcc:	009a      	lsls	r2, r3, #2
20000fce:	2317      	movs	r3, #23
20000fd0:	18fb      	adds	r3, r7, r3
20000fd2:	781b      	ldrb	r3, [r3, #0]
20000fd4:	18d3      	adds	r3, r2, r3
20000fd6:	1d3a      	adds	r2, r7, #4
20000fd8:	5cd3      	ldrb	r3, [r2, r3]
20000fda:	e00b      	b.n	20000ff4 <keyb+0xa8>
	for (char i=0; i < 4; i++){
20000fdc:	2116      	movs	r1, #22
20000fde:	187b      	adds	r3, r7, r1
20000fe0:	781a      	ldrb	r2, [r3, #0]
20000fe2:	187b      	adds	r3, r7, r1
20000fe4:	3201      	adds	r2, #1
20000fe6:	701a      	strb	r2, [r3, #0]
20000fe8:	2316      	movs	r3, #22
20000fea:	18fb      	adds	r3, r7, r3
20000fec:	781b      	ldrb	r3, [r3, #0]
20000fee:	2b03      	cmp	r3, #3
20000ff0:	d9be      	bls.n	20000f70 <keyb+0x24>
		}
			
	}
	return 0xff;
20000ff2:	23ff      	movs	r3, #255	; 0xff
}
20000ff4:	0018      	movs	r0, r3
20000ff6:	46bd      	mov	sp, r7
20000ff8:	b007      	add	sp, #28
20000ffa:	bd90      	pop	{r4, r7, pc}
20000ffc:	20001f2c 	andcs	r1, r0, ip, lsr #30
20001000:	40020c15 	andmi	r0, r2, r5, lsl ip
20001004:	40020c11 	andmi	r0, r2, r1, lsl ip

20001008 <out7seg>:

void out7seg(unsigned char num){
20001008:	b5b0      	push	{r4, r5, r7, lr}
2000100a:	b086      	sub	sp, #24
2000100c:	af00      	add	r7, sp, #0
2000100e:	0002      	movs	r2, r0
20001010:	1dfb      	adds	r3, r7, #7
20001012:	701a      	strb	r2, [r3, #0]
	unsigned char segCodes[] = {0x3f,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71};
20001014:	2008      	movs	r0, #8
20001016:	183b      	adds	r3, r7, r0
20001018:	4a06      	ldr	r2, [pc, #24]	; (20001034 <out7seg+0x2c>)
2000101a:	ca32      	ldmia	r2!, {r1, r4, r5}
2000101c:	c332      	stmia	r3!, {r1, r4, r5}
2000101e:	6812      	ldr	r2, [r2, #0]
20001020:	601a      	str	r2, [r3, #0]
	if (num & 0xf0 == 0){
		*portOdrLowE = 0;
		return;
	}
	*portOdrLowD = segCodes[num];
20001022:	1dfb      	adds	r3, r7, #7
20001024:	781b      	ldrb	r3, [r3, #0]
20001026:	4904      	ldr	r1, [pc, #16]	; (20001038 <out7seg+0x30>)
20001028:	183a      	adds	r2, r7, r0
2000102a:	5cd3      	ldrb	r3, [r2, r3]
2000102c:	700b      	strb	r3, [r1, #0]
}
2000102e:	46bd      	mov	sp, r7
20001030:	b006      	add	sp, #24
20001032:	bdb0      	pop	{r4, r5, r7, pc}
20001034:	20001f3c 	andcs	r1, r0, ip, lsr pc
20001038:	40020c14 	andmi	r0, r2, r4, lsl ip

2000103c <keyRead>:

unsigned short keyRead(void){
2000103c:	b580      	push	{r7, lr}
2000103e:	b082      	sub	sp, #8
20001040:	af00      	add	r7, sp, #0
	
	unsigned char count = 0;
20001042:	1d3b      	adds	r3, r7, #4
20001044:	2200      	movs	r2, #0
20001046:	701a      	strb	r2, [r3, #0]
	unsigned short read = 0;
20001048:	1dbb      	adds	r3, r7, #6
2000104a:	2200      	movs	r2, #0
2000104c:	801a      	strh	r2, [r3, #0]
	for (char i=0; i < 4; i++){
2000104e:	1d7b      	adds	r3, r7, #5
20001050:	2200      	movs	r2, #0
20001052:	701a      	strb	r2, [r3, #0]
20001054:	e027      	b.n	200010a6 <keyRead+0x6a>
		char activeRow = 0x10 << i;
20001056:	1d7b      	adds	r3, r7, #5
20001058:	781b      	ldrb	r3, [r3, #0]
2000105a:	2210      	movs	r2, #16
2000105c:	409a      	lsls	r2, r3
2000105e:	1cfb      	adds	r3, r7, #3
20001060:	701a      	strb	r2, [r3, #0]
		*portOdrHighD = activeRow;
20001062:	4a16      	ldr	r2, [pc, #88]	; (200010bc <keyRead+0x80>)
20001064:	1cfb      	adds	r3, r7, #3
20001066:	781b      	ldrb	r3, [r3, #0]
20001068:	7013      	strb	r3, [r2, #0]
		unsigned volatile char keys = *portIdrHighD & 0x0f;
2000106a:	4b15      	ldr	r3, [pc, #84]	; (200010c0 <keyRead+0x84>)
2000106c:	781b      	ldrb	r3, [r3, #0]
2000106e:	b2db      	uxtb	r3, r3
20001070:	220f      	movs	r2, #15
20001072:	4013      	ands	r3, r2
20001074:	b2da      	uxtb	r2, r3
20001076:	1cbb      	adds	r3, r7, #2
20001078:	701a      	strb	r2, [r3, #0]
		read |= (keys<<(i*4));
2000107a:	1cbb      	adds	r3, r7, #2
2000107c:	781b      	ldrb	r3, [r3, #0]
2000107e:	b2db      	uxtb	r3, r3
20001080:	001a      	movs	r2, r3
20001082:	1d7b      	adds	r3, r7, #5
20001084:	781b      	ldrb	r3, [r3, #0]
20001086:	009b      	lsls	r3, r3, #2
20001088:	409a      	lsls	r2, r3
2000108a:	0013      	movs	r3, r2
2000108c:	b21a      	sxth	r2, r3
2000108e:	1dbb      	adds	r3, r7, #6
20001090:	2100      	movs	r1, #0
20001092:	5e5b      	ldrsh	r3, [r3, r1]
20001094:	4313      	orrs	r3, r2
20001096:	b21a      	sxth	r2, r3
20001098:	1dbb      	adds	r3, r7, #6
2000109a:	801a      	strh	r2, [r3, #0]
	for (char i=0; i < 4; i++){
2000109c:	1d7b      	adds	r3, r7, #5
2000109e:	781a      	ldrb	r2, [r3, #0]
200010a0:	1d7b      	adds	r3, r7, #5
200010a2:	3201      	adds	r2, #1
200010a4:	701a      	strb	r2, [r3, #0]
200010a6:	1d7b      	adds	r3, r7, #5
200010a8:	781b      	ldrb	r3, [r3, #0]
200010aa:	2b03      	cmp	r3, #3
200010ac:	d9d3      	bls.n	20001056 <keyRead+0x1a>
			}
			return numpad[i*4+count];
		}*/
			
	}
	return read;
200010ae:	1dbb      	adds	r3, r7, #6
200010b0:	881b      	ldrh	r3, [r3, #0]
200010b2:	0018      	movs	r0, r3
200010b4:	46bd      	mov	sp, r7
200010b6:	b002      	add	sp, #8
200010b8:	bd80      	pop	{r7, pc}
200010ba:	46c0      	nop			; (mov r8, r8)
200010bc:	40020c15 	andmi	r0, r2, r5, lsl ip
200010c0:	40020c11 	andmi	r0, r2, r1, lsl ip

200010c4 <buffer>:
	...

20001550 <buffer>:
	...

200019dc <buffer_changeLog>:
	...

20001a5c <buffer_display>:
	...

20001e5c <ball_geometry>:
20001e5c:	0000000c 	andeq	r0, r0, ip
20001e60:	00000004 	andeq	r0, r0, r4
20001e64:	00000004 	andeq	r0, r0, r4
20001e68:	02000100 	andeq	r0, r0, #0, 2
20001e6c:	01010001 	tsteq	r1, r1
20001e70:	03010201 	movweq	r0, #4609	; 0x1201
20001e74:	01020002 	tsteq	r2, r2
20001e78:	03020202 	movweq	r0, #8706	; 0x2202
20001e7c:	01030103 	tsteq	r3, r3, lsl #2
	...

20001e90 <ball>:
20001e90:	20001e5c 	andcs	r1, r0, ip, asr lr
	...
20001e9c:	00000001 	andeq	r0, r0, r1
20001ea0:	00000001 	andeq	r0, r0, r1
20001ea4:	20000aab 	andcs	r0, r0, fp, lsr #21
20001ea8:	20000b0f 	andcs	r0, r0, pc, lsl #22
20001eac:	20000b6b 	andcs	r0, r0, fp, ror #22
20001eb0:	20000a6b 	andcs	r0, r0, fp, ror #20
20001eb4:	20000a8b 	andcs	r0, r0, fp, lsl #21

20001eb8 <paddle_geometry>:
20001eb8:	00000008 	andeq	r0, r0, r8
20001ebc:	00000001 	andeq	r0, r0, r1
20001ec0:	00000008 	andeq	r0, r0, r8
20001ec4:	01000000 	mrseq	r0, (UNDEF: 0)
20001ec8:	03000200 	movweq	r0, #512	; 0x200
20001ecc:	05000400 	streq	r0, [r0, #-1024]	; 0xfffffc00
20001ed0:	07000600 	streq	r0, [r0, -r0, lsl #12]
	...

20001eec <paddle>:
20001eec:	20001eb8 			; <UNDEFINED> instruction: 0x20001eb8
	...
20001ef8:	00000002 	andeq	r0, r0, r2
20001efc:	0000001c 	andeq	r0, r0, ip, lsl r0
20001f00:	20000aab 	andcs	r0, r0, fp, lsr #21
20001f04:	20000b0f 	andcs	r0, r0, pc, lsl #22
20001f08:	20000b6b 	andcs	r0, r0, fp, ror #22
20001f0c:	20000a6b 	andcs	r0, r0, fp, ror #20
20001f10:	20000a8b 	andcs	r0, r0, fp, lsl #21
20001f14:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
20001f18:	31207265 			; <UNDEFINED> instruction: 0x31207265
20001f1c:	0000203a 	andeq	r2, r0, sl, lsr r0
20001f20:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
20001f24:	32207265 	eorcc	r7, r0, #1342177286	; 0x50000006
20001f28:	0000203a 	andeq	r2, r0, sl, lsr r0
20001f2c:	0a030201 	beq	200c2738 <paddle+0xc084c>
20001f30:	0b060504 	bleq	20183348 <paddle+0x18145c>
20001f34:	0c090807 	stceq	8, cr0, [r9], {7}
20001f38:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20001f08 <paddle+0x1c>
20001f3c:	4f5b063f 	svcmi	0x005b063f
20001f40:	077d6d66 	ldrbeq	r6, [sp, -r6, ror #26]!
20001f44:	7c776f7f 	ldclvc	15, cr6, [r7], #-508	; 0xfffffe04
20001f48:	71795e39 	cmnvc	r9, r9, lsr lr

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000039b 	muleq	r0, fp, r3
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000032 	andeq	r0, r0, r2, lsr r0
      10:	00015e0c 	andeq	r5, r1, ip, lsl #28
      14:	0000d800 	andeq	sp, r0, r0, lsl #16
	...
      24:	014f0200 	mrseq	r0, (UNDEF: 111)
      28:	048c0000 	streq	r0, [ip], #0
      2c:	00730b02 	rsbseq	r0, r3, r2, lsl #22
      30:	6e030000 	cdpvs	0, 0, cr0, cr3, cr0, {0}
      34:	02000002 	andeq	r0, r0, #2
      38:	0000730c 	andeq	r7, r0, ip, lsl #6
      3c:	43040000 	movwmi	r0, #16384	; 0x4000
      40:	02000002 	andeq	r0, r0, #2
      44:	0000970d 	andeq	r9, r0, sp, lsl #14
      48:	04040000 	streq	r0, [r4], #-0
      4c:	00000159 	andeq	r0, r0, r9, asr r1
      50:	00b80e02 	adcseq	r0, r8, r2, lsl #28
      54:	04800000 	streq	r0, [r0], #0
      58:	00031804 	andeq	r1, r3, r4, lsl #16
      5c:	df0f0200 	svcle	0x000f0200
      60:	84000000 	strhi	r0, [r0], #-0
      64:	02360404 	eorseq	r0, r6, #4, 8	; 0x4000000
      68:	10020000 	andne	r0, r2, r0
      6c:	000000b8 	strheq	r0, [r0], -r8
      70:	05000488 	streq	r0, [r0, #-1160]	; 0xfffffb78
      74:	00000090 	muleq	r0, r0, r0
      78:	00000089 	andeq	r0, r0, r9, lsl #1
      7c:	00008906 	andeq	r8, r0, r6, lsl #18
      80:	89067f00 	stmdbhi	r6, {r8, r9, sl, fp, ip, sp, lr}
      84:	07000000 	streq	r0, [r0, -r0]
      88:	07040700 	streq	r0, [r4, -r0, lsl #14]
      8c:	000004ec 	andeq	r0, r0, ip, ror #9
      90:	d3080107 	movwle	r0, #33031	; 0x8107
      94:	05000000 	streq	r0, [r0, #-0]
      98:	00000090 	muleq	r0, r0, r0
      9c:	000000a7 	andeq	r0, r0, r7, lsr #1
      a0:	00008906 	andeq	r8, r0, r6, lsl #18
      a4:	08007f00 	stmdaeq	r0, {r8, r9, sl, fp, ip, sp, lr}
      a8:	000000b2 	strheq	r0, [r0], -r2
      ac:	0000b209 	andeq	fp, r0, r9, lsl #4
      b0:	040a0000 	streq	r0, [sl], #-0
      b4:	00000025 	andeq	r0, r0, r5, lsr #32
      b8:	00a7040a 	adceq	r0, r7, sl, lsl #8
      bc:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
      c0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
      c4:	000000b2 	strheq	r0, [r0], -r2
      c8:	0000d809 	andeq	sp, r0, r9, lsl #16
      cc:	00d80900 	sbcseq	r0, r8, r0, lsl #18
      d0:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
      d4:	00000000 	andeq	r0, r0, r0
      d8:	ca080107 	bgt	2004fc <startup-0x1fdffb04>
      dc:	0a000000 	beq	e4 <startup-0x1fffff1c>
      e0:	0000be04 	andeq	fp, r0, r4, lsl #28
      e4:	03240b00 			; <UNDEFINED> instruction: 0x03240b00
      e8:	12020000 	andne	r0, r2, #0
      ec:	00000025 	andeq	r0, r0, r5, lsr #32
      f0:	0001520c 	andeq	r5, r1, ip, lsl #4
      f4:	e51e0200 	ldr	r0, [lr, #-512]	; 0xfffffe00
      f8:	05000000 	streq	r0, [r0, #-0]
      fc:	0010c403 	andseq	ip, r0, r3, lsl #8
     100:	03020d20 	movweq	r0, #11552	; 0x2d20
     104:	00011e05 	andeq	r1, r1, r5, lsl #28
     108:	00780e00 	rsbseq	r0, r8, r0, lsl #28
     10c:	00d80603 	sbcseq	r0, r8, r3, lsl #12
     110:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     114:	07030079 	smlsdxeq	r3, r9, r0, r0
     118:	000000d8 	ldrdeq	r0, [r0], -r8
     11c:	180b0001 	stmdane	fp, {r0}
     120:	03000000 	movweq	r0, #0
     124:	00010108 	andeq	r0, r1, r8, lsl #2
     128:	03340d00 	teqeq	r4, #0, 26
     12c:	00016119 	andeq	r6, r1, r9, lsl r1
     130:	01b70300 			; <UNDEFINED> instruction: 0x01b70300
     134:	1a030000 	bne	c013c <startup-0x1ff3fec4>
     138:	00000161 	andeq	r0, r0, r1, ror #2
     13c:	013e0300 	teqeq	lr, r0, lsl #6
     140:	1b030000 	blne	c0148 <startup-0x1ff3feb8>
     144:	00000161 	andeq	r0, r0, r1, ror #2
     148:	01440304 	cmpeq	r4, r4, lsl #6
     14c:	1c030000 	stcne	0, cr0, [r3], {-0}
     150:	00000161 	andeq	r0, r0, r1, ror #2
     154:	78700e08 	ldmdavc	r0!, {r3, r9, sl, fp}^
     158:	681d0300 	ldmdavs	sp, {r8, r9}
     15c:	0c000001 	stceq	0, cr0, [r0], {1}
     160:	05040f00 	streq	r0, [r4, #-3840]	; 0xfffff100
     164:	00746e69 	rsbseq	r6, r4, r9, ror #28
     168:	00011e05 	andeq	r1, r1, r5, lsl #28
     16c:	00017800 	andeq	r7, r1, r0, lsl #16
     170:	00890600 	addeq	r0, r9, r0, lsl #12
     174:	00130000 	andseq	r0, r3, r0
     178:	0001280b 	andeq	r2, r1, fp, lsl #16
     17c:	291e0300 	ldmdbcs	lr, {r8, r9}
     180:	0b000001 	bleq	18c <startup-0x1ffffe74>
     184:	000001c1 	andeq	r0, r0, r1, asr #3
     188:	018e1e03 	orreq	r1, lr, r3, lsl #28
     18c:	040a0000 	streq	r0, [sl], #-0
     190:	00000129 	andeq	r0, r0, r9, lsr #2
     194:	0001b210 	andeq	fp, r1, r0, lsl r2
     198:	22032800 	andcs	r2, r3, #0, 16
     19c:	00000219 	andeq	r0, r0, r9, lsl r2
     1a0:	6f65670e 	svcvs	0x0065670e
     1a4:	83230300 			; <UNDEFINED> instruction: 0x83230300
     1a8:	00000001 	andeq	r0, r0, r1
     1ac:	00002303 	andeq	r2, r0, r3, lsl #6
     1b0:	61240300 			; <UNDEFINED> instruction: 0x61240300
     1b4:	04000001 	streq	r0, [r0], #-1
     1b8:	00002803 	andeq	r2, r0, r3, lsl #16
     1bc:	61240300 			; <UNDEFINED> instruction: 0x61240300
     1c0:	08000001 	stmdaeq	r0, {r0}
     1c4:	00010903 	andeq	r0, r1, r3, lsl #18
     1c8:	61250300 			; <UNDEFINED> instruction: 0x61250300
     1cc:	0c000001 	stceq	0, cr0, [r0], {1}
     1d0:	00010e03 	andeq	r0, r1, r3, lsl #28
     1d4:	61250300 			; <UNDEFINED> instruction: 0x61250300
     1d8:	10000001 	andne	r0, r0, r1
     1dc:	00015903 	andeq	r5, r1, r3, lsl #18
     1e0:	2a260300 	bcs	980de8 <startup-0x1f67f218>
     1e4:	14000002 	strne	r0, [r0], #-2
     1e8:	00023603 	andeq	r3, r2, r3, lsl #12
     1ec:	2a270300 	bcs	9c0df4 <startup-0x1f63f20c>
     1f0:	18000002 	stmdane	r0, {r1}
     1f4:	00018f03 	andeq	r8, r1, r3, lsl #30
     1f8:	2a280300 	bcs	a00e00 <startup-0x1f5ff200>
     1fc:	1c000002 	stcne	0, cr0, [r0], {2}
     200:	0000ff03 	andeq	pc, r0, r3, lsl #30
     204:	45290300 	strmi	r0, [r9, #-768]!	; 0xfffffd00
     208:	20000002 	andcs	r0, r0, r2
     20c:	0003d403 	andeq	sp, r3, r3, lsl #8
     210:	5b2a0300 	blpl	a80e18 <startup-0x1f57f1e8>
     214:	24000002 	strcs	r0, [r0], #-2
     218:	02240800 	eoreq	r0, r4, #0, 16
     21c:	24090000 	strcs	r0, [r9], #-0
     220:	00000002 	andeq	r0, r0, r2
     224:	0194040a 	orrseq	r0, r4, sl, lsl #8
     228:	040a0000 	streq	r0, [sl], #-0
     22c:	00000219 	andeq	r0, r0, r9, lsl r2
     230:	00024508 	andeq	r4, r2, r8, lsl #10
     234:	02240900 	eoreq	r0, r4, #0, 18
     238:	61090000 	mrsvs	r0, (UNDEF: 9)
     23c:	09000001 	stmdbeq	r0, {r0}
     240:	00000161 	andeq	r0, r0, r1, ror #2
     244:	30040a00 	andcc	r0, r4, r0, lsl #20
     248:	08000002 	stmdaeq	r0, {r1}
     24c:	0000025b 	andeq	r0, r0, fp, asr r2
     250:	00022409 	andeq	r2, r2, r9, lsl #8
     254:	011e0900 	tsteq	lr, r0, lsl #18
     258:	0a000000 	beq	260 <startup-0x1ffffda0>
     25c:	00024b04 	andeq	r4, r2, r4, lsl #22
     260:	047f0b00 	ldrbteq	r0, [pc], #-2816	; 268 <startup-0x1ffffd98>
     264:	2b030000 	blcs	c026c <startup-0x1ff3fd94>
     268:	00000194 	muleq	r0, r4, r1
     26c:	0000080b 	andeq	r0, r0, fp, lsl #16
     270:	242b0300 	strtcs	r0, [fp], #-768	; 0xfffffd00
     274:	11000002 	tstne	r0, r2
     278:	00000113 	andeq	r0, r0, r3, lsl r1
     27c:	01781d01 	cmneq	r8, r1, lsl #26
     280:	03050000 	movweq	r0, #20480	; 0x5000
     284:	20001e5c 	andcs	r1, r0, ip, asr lr
     288:	00002d0c 	andeq	r2, r0, ip, lsl #26
     28c:	61240100 			; <UNDEFINED> instruction: 0x61240100
     290:	05000002 	streq	r0, [r0, #-2]
     294:	001e9003 	andseq	r9, lr, r3
     298:	01211120 			; <UNDEFINED> instruction: 0x01211120
     29c:	2f010000 	svccs	0x00010000
     2a0:	00000178 	andeq	r0, r0, r8, ror r1
     2a4:	1eb80305 	cdpne	3, 11, cr0, cr8, cr5, {0}
     2a8:	ab0c2000 	blge	3082b0 <startup-0x1fcf7d50>
     2ac:	01000001 	tsteq	r0, r1
     2b0:	00026133 	andeq	r6, r2, r3, lsr r1
     2b4:	ec030500 	cfstr32	mvfx0, [r3], {-0}
     2b8:	1220001e 	eorne	r0, r0, #30
     2bc:	00000131 	andeq	r0, r0, r1, lsr r1
     2c0:	00103e01 	andseq	r3, r0, r1, lsl #28
     2c4:	01582000 	cmpeq	r8, r0
     2c8:	9c010000 	stcls	0, cr0, [r1], {-0}
     2cc:	0000035b 	andeq	r0, r0, fp, asr r3
     2d0:	00014a13 	andeq	r4, r1, r3, lsl sl
     2d4:	613e0100 	teqvs	lr, r0, lsl #2
     2d8:	03000001 	movweq	r0, #1
     2dc:	137fbc91 	cmnne	pc, #37120	; 0x9100
     2e0:	0000001e 	andeq	r0, r0, lr, lsl r0
     2e4:	035b3e01 	cmpeq	fp, #1, 28
     2e8:	91030000 	mrsls	r0, (UNDEF: 3)
     2ec:	73147fb8 	tstvc	r4, #184, 30	; 0x2e0
     2f0:	61470100 	mrsvs	r0, (UNDEF: 87)
     2f4:	02000003 	andeq	r0, r0, #3
     2f8:	9b0c6c91 	blls	31b544 <startup-0x1fce4abc>
     2fc:	01000001 	tsteq	r0, r1
     300:	00036748 	andeq	r6, r3, r8, asr #14
     304:	50910200 	addspl	r0, r1, r0, lsl #4
     308:	0001a30c 	andeq	sl, r1, ip, lsl #6
     30c:	674d0100 	strbvs	r0, [sp, -r0, lsl #2]
     310:	02000003 	andeq	r0, r0, #3
     314:	c30c4491 	movwgt	r4, #50321	; 0xc491
     318:	01000003 	tsteq	r0, r3
     31c:	0003775e 	andeq	r7, r3, lr, asr r7
     320:	40910200 	addsmi	r0, r1, r0, lsl #4
     324:	0001940c 	andeq	r9, r1, ip, lsl #8
     328:	875f0100 	ldrbhi	r0, [pc, -r0, lsl #2]
     32c:	02000003 	andeq	r0, r0, #3
     330:	70146891 	mulsvc	r4, r1, r8
     334:	6c640100 	stfvse	f0, [r4], #-0
     338:	02000002 	andeq	r0, r0, #2
     33c:	100c6491 	mulne	ip, r1, r4
     340:	01000000 	mrseq	r0, (UNDEF: 0)
     344:	00026c65 	andeq	r6, r2, r5, ror #24
     348:	60910200 	addsvs	r0, r1, r0, lsl #4
     34c:	0001360c 	andeq	r3, r1, ip, lsl #12
     350:	6c660100 	stfvse	f0, [r6], #-0
     354:	02000002 	andeq	r0, r0, #2
     358:	0a005c91 	beq	175a4 <startup-0x1ffe8a5c>
     35c:	00036104 	andeq	r6, r3, r4, lsl #2
     360:	90040a00 	andls	r0, r4, r0, lsl #20
     364:	05000000 	streq	r0, [r0, #-0]
     368:	00000090 	muleq	r0, r0, r0
     36c:	00000377 	andeq	r0, r0, r7, ror r3
     370:	00008906 	andeq	r8, r0, r6, lsl #18
     374:	05000a00 	streq	r0, [r0, #-2560]	; 0xfffff600
     378:	000000d8 	ldrdeq	r0, [r0], -r8
     37c:	00000387 	andeq	r0, r0, r7, lsl #7
     380:	00008906 	andeq	r8, r0, r6, lsl #18
     384:	0a000100 	beq	78c <startup-0x1ffff874>
     388:	0000d804 	andeq	sp, r0, r4, lsl #16
     38c:	00001500 	andeq	r1, r0, r0, lsl #10
     390:	07010000 	streq	r0, [r1, -r0]
     394:	20000000 	andcs	r0, r0, r0
     398:	0000000c 	andeq	r0, r0, ip
     39c:	98009c01 	stmdals	r0, {r0, sl, fp, ip, pc}
     3a0:	04000000 	streq	r0, [r0], #-0
     3a4:	00012a00 	andeq	r2, r1, r0, lsl #20
     3a8:	32010400 	andcc	r0, r1, #0, 8
     3ac:	0c000000 	stceq	0, cr0, [r0], {-0}
     3b0:	000001cb 	andeq	r0, r0, fp, asr #3
     3b4:	000000d8 	ldrdeq	r0, [r0], -r8
     3b8:	20000168 	andcs	r0, r0, r8, ror #2
     3bc:	0000006e 	andeq	r0, r0, lr, rrx
     3c0:	000000cb 	andeq	r0, r0, fp, asr #1
     3c4:	ca080102 	bgt	2007d4 <startup-0x1fdff82c>
     3c8:	03000000 	movweq	r0, #0
     3cc:	00000211 	andeq	r0, r0, r1, lsl r2
     3d0:	01c62401 	biceq	r2, r6, r1, lsl #8
     3d4:	00102000 	andseq	r2, r0, r0
     3d8:	9c010000 	stcls	0, cr0, [r1], {-0}
     3dc:	0000004f 	andeq	r0, r0, pc, asr #32
     3e0:	00736d04 	rsbseq	r6, r3, r4, lsl #26
     3e4:	004f2401 	subeq	r2, pc, r1, lsl #8
     3e8:	91020000 	mrsls	r0, (UNDEF: 2)
     3ec:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
     3f0:	0004ec07 	andeq	lr, r4, r7, lsl #24
     3f4:	01fa0300 	mvnseq	r0, r0, lsl #6
     3f8:	1b010000 	blne	40400 <startup-0x1ffbfc00>
     3fc:	200001b6 			; <UNDEFINED> instruction: 0x200001b6
     400:	00000010 	andeq	r0, r0, r0, lsl r0
     404:	00799c01 	rsbseq	r9, r9, r1, lsl #24
     408:	75040000 	strvc	r0, [r4, #-0]
     40c:	1b010073 	blne	405e0 <startup-0x1ffbfa20>
     410:	0000004f 	andeq	r0, r0, pc, asr #32
     414:	00749102 	rsbseq	r9, r4, r2, lsl #2
     418:	00021d05 	andeq	r1, r2, r5, lsl #26
     41c:	ac0f0100 	stfges	f0, [pc], {-0}
     420:	0a200001 	beq	80042c <startup-0x1f7ffbd4>
     424:	01000000 	mrseq	r0, (UNDEF: 0)
     428:	0206059c 	andeq	r0, r6, #156, 10	; 0x27000000
     42c:	05010000 	streq	r0, [r1, #-0]
     430:	20000168 	andcs	r0, r0, r8, ror #2
     434:	00000044 	andeq	r0, r0, r4, asr #32
     438:	7e009c01 	cdpvc	12, 0, cr9, cr0, cr1, {0}
     43c:	04000004 	streq	r0, [r0], #-4
     440:	00018a00 	andeq	r8, r1, r0, lsl #20
     444:	32010400 	andcc	r0, r1, #0, 8
     448:	0c000000 	stceq	0, cr0, [r0], {-0}
     44c:	000002be 			; <UNDEFINED> instruction: 0x000002be
     450:	000000d8 	ldrdeq	r0, [r0], -r8
     454:	200001d8 	ldrdcs	r0, [r0], -r8
     458:	00000888 	andeq	r0, r0, r8, lsl #17
     45c:	0000013d 	andeq	r0, r0, sp, lsr r1
     460:	00014f02 	andeq	r4, r1, r2, lsl #30
     464:	02048c00 	andeq	r8, r4, #0, 24
     468:	0000730b 	andeq	r7, r0, fp, lsl #6
     46c:	026e0300 	rsbeq	r0, lr, #0, 6
     470:	0c020000 	stceq	0, cr0, [r2], {-0}
     474:	00000073 	andeq	r0, r0, r3, ror r0
     478:	02430400 	subeq	r0, r3, #0, 8
     47c:	0d020000 	stceq	0, cr0, [r2, #-0]
     480:	00000097 	muleq	r0, r7, r0
     484:	59040400 	stmdbpl	r4, {sl}
     488:	02000001 	andeq	r0, r0, #1
     48c:	0000b80e 	andeq	fp, r0, lr, lsl #16
     490:	04048000 	streq	r8, [r4], #-0
     494:	00000318 	andeq	r0, r0, r8, lsl r3
     498:	00df0f02 	sbcseq	r0, pc, r2, lsl #30
     49c:	04840000 	streq	r0, [r4], #0
     4a0:	00023604 	andeq	r3, r2, r4, lsl #12
     4a4:	b8100200 	ldmdalt	r0, {r9}
     4a8:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
     4ac:	90050004 	andls	r0, r5, r4
     4b0:	89000000 	stmdbhi	r0, {}	; <UNPREDICTABLE>
     4b4:	06000000 	streq	r0, [r0], -r0
     4b8:	00000089 	andeq	r0, r0, r9, lsl #1
     4bc:	0089067f 	addeq	r0, r9, pc, ror r6
     4c0:	00070000 	andeq	r0, r7, r0
     4c4:	ec070407 	cfstrs	mvf0, [r7], {7}
     4c8:	07000004 	streq	r0, [r0, -r4]
     4cc:	00d30801 	sbcseq	r0, r3, r1, lsl #16
     4d0:	90050000 	andls	r0, r5, r0
     4d4:	a7000000 	strge	r0, [r0, -r0]
     4d8:	06000000 	streq	r0, [r0], -r0
     4dc:	00000089 	andeq	r0, r0, r9, lsl #1
     4e0:	b208007f 	andlt	r0, r8, #127	; 0x7f
     4e4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     4e8:	000000b2 	strheq	r0, [r0], -r2
     4ec:	25040a00 	strcs	r0, [r4, #-2560]	; 0xfffff600
     4f0:	0a000000 	beq	4f8 <startup-0x1ffffb08>
     4f4:	0000a704 	andeq	sl, r0, r4, lsl #14
     4f8:	00d80800 	sbcseq	r0, r8, r0, lsl #16
     4fc:	b2090000 	andlt	r0, r9, #0
     500:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     504:	000000d8 	ldrdeq	r0, [r0], -r8
     508:	0000d809 	andeq	sp, r0, r9, lsl #16
     50c:	00d80900 	sbcseq	r0, r8, r0, lsl #18
     510:	07000000 	streq	r0, [r0, -r0]
     514:	00ca0801 	sbceq	r0, sl, r1, lsl #16
     518:	040a0000 	streq	r0, [sl], #-0
     51c:	000000be 	strheq	r0, [r0], -lr
     520:	0003240b 	andeq	r2, r3, fp, lsl #8
     524:	25120200 	ldrcs	r0, [r2, #-512]	; 0xfffffe00
     528:	0b000000 	bleq	530 <startup-0x1ffffad0>
     52c:	00000323 	andeq	r0, r0, r3, lsr #6
     530:	00b21202 	adcseq	r1, r2, r2, lsl #4
     534:	520c0000 	andpl	r0, ip, #0
     538:	02000001 	andeq	r0, r0, #1
     53c:	0000e51e 	andeq	lr, r0, lr, lsl r5
     540:	50030500 	andpl	r0, r3, r0, lsl #10
     544:	0d200015 	stceq	0, cr0, [r0, #-84]!	; 0xffffffac
     548:	00d80107 	sbcseq	r0, r8, r7, lsl #2
     54c:	1d030000 	stcne	0, cr0, [r3, #-0]
     550:	00000144 	andeq	r0, r0, r4, asr #2
     554:	00031e0e 	andeq	r1, r3, lr, lsl #28
     558:	940e0100 	strls	r0, [lr], #-256	; 0xffffff00
     55c:	02000002 	andeq	r0, r0, #2
     560:	0003340e 	andeq	r3, r3, lr, lsl #8
     564:	2e0e0400 	cfcpyscs	mvf0, mvf14
     568:	08000003 	stmdaeq	r0, {r0, r1}
     56c:	0002290e 	andeq	r2, r2, lr, lsl #18
     570:	f30e1000 	vhadd.u8	d1, d14, d0
     574:	20000002 	andcs	r0, r0, r2
     578:	455f420f 	ldrbmi	r4, [pc, #-527]	; 371 <startup-0x1ffffc8f>
     57c:	10004000 	andne	r4, r0, r0
     580:	00000267 	andeq	r0, r0, r7, ror #4
     584:	0073d201 	rsbseq	sp, r3, r1, lsl #4
     588:	03050000 	movweq	r0, #20480	; 0x5000
     58c:	20001a5c 	andcs	r1, r0, ip, asr sl
     590:	00023c10 	andeq	r3, r2, r0, lsl ip
     594:	97d30100 	ldrbls	r0, [r3, r0, lsl #2]
     598:	05000000 	streq	r0, [r0, #-0]
     59c:	0019dc03 	andseq	sp, r9, r3, lsl #24
     5a0:	022f1120 	eoreq	r1, pc, #32, 2
     5a4:	db010000 	blle	405ac <startup-0x1ffbfa54>
     5a8:	20000a0c 	andcs	r0, r0, ip, lsl #20
     5ac:	00000054 	andeq	r0, r0, r4, asr r0
     5b0:	01b69c01 			; <UNDEFINED> instruction: 0x01b69c01
     5b4:	76120000 	ldrvc	r0, [r2], -r0
     5b8:	01000002 	tsteq	r0, r2
     5bc:	0000f0db 	ldrdeq	pc, [r0], -fp
     5c0:	6c910200 	lfmvs	f0, 4, [r1], {0}
     5c4:	000a1413 	andeq	r1, sl, r3, lsl r4
     5c8:	00004420 	andeq	r4, r0, r0, lsr #8
     5cc:	00691400 	rsbeq	r1, r9, r0, lsl #8
     5d0:	01b6dc01 			; <UNDEFINED> instruction: 0x01b6dc01
     5d4:	91020000 	mrsls	r0, (UNDEF: 2)
     5d8:	0a2a1374 	beq	a853b0 <startup-0x1f57ac50>
     5dc:	00222000 	eoreq	r2, r2, r0
     5e0:	6a140000 	bvs	5005e8 <startup-0x1faffa18>
     5e4:	b6de0100 	ldrblt	r0, [lr], r0, lsl #2
     5e8:	02000001 	andeq	r0, r0, #1
     5ec:	00007091 	muleq	r0, r1, r0
     5f0:	05041500 	streq	r1, [r4, #-1280]	; 0xfffffb00
     5f4:	00746e69 	rsbseq	r6, r4, r9, ror #28
     5f8:	00035611 	andeq	r5, r3, r1, lsl r6
     5fc:	e8be0100 	ldm	lr!, {r8}
     600:	24200008 	strtcs	r0, [r0], #-8
     604:	01000001 	tsteq	r0, r1
     608:	0002239c 	muleq	r2, ip, r3
     60c:	02771200 	rsbseq	r1, r7, #0, 4
     610:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
     614:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     618:	16649102 	strbtne	r9, [r4], -r2, lsl #2
     61c:	be010078 	mcrlt	0, 0, r0, cr1, cr8, {3}
     620:	000000d8 	ldrdeq	r0, [r0], -r8
     624:	16639102 	strbtne	r9, [r3], -r2, lsl #2
     628:	be010079 	mcrlt	0, 0, r0, cr1, cr9, {3}
     62c:	000000d8 	ldrdeq	r0, [r0], -r8
     630:	16629102 	strbtne	r9, [r2], -r2, lsl #2
     634:	00746573 	rsbseq	r6, r4, r3, ror r5
     638:	00d8be01 	sbcseq	fp, r8, r1, lsl #28
     63c:	91020000 	mrsls	r0, (UNDEF: 2)
     640:	05270c61 	streq	r0, [r7, #-3169]!	; 0xfffff39f
     644:	bf010000 	svclt	0x00010000
     648:	00000090 	muleq	r0, r0, r0
     64c:	0c6f9102 	stfeqp	f1, [pc], #-8	; 64c <startup-0x1ffff9b4>
     650:	0000033d 	andeq	r0, r0, sp, lsr r3
     654:	0090c801 	addseq	ip, r0, r1, lsl #16
     658:	91020000 	mrsls	r0, (UNDEF: 2)
     65c:	0217006e 	andseq	r0, r7, #110	; 0x6e
     660:	01000003 	tsteq	r0, r3
     664:	000790a2 	andeq	r9, r7, r2, lsr #1
     668:	00015820 	andeq	r5, r1, r0, lsr #16
     66c:	9f9c0100 	svcls	0x009c0100
     670:	12000002 	andne	r0, r0, #2
     674:	000003a0 	andeq	r0, r0, r0, lsr #7
     678:	00f0a201 	rscseq	sl, r0, r1, lsl #4
     67c:	91020000 	mrsls	r0, (UNDEF: 2)
     680:	0078145c 	rsbseq	r1, r8, ip, asr r4
     684:	00d8a501 	sbcseq	sl, r8, r1, lsl #10
     688:	91020000 	mrsls	r0, (UNDEF: 2)
     68c:	00691467 	rsbeq	r1, r9, r7, ror #8
     690:	00d8a501 	sbcseq	sl, r8, r1, lsl #10
     694:	91020000 	mrsls	r0, (UNDEF: 2)
     698:	006a1466 	rsbeq	r1, sl, r6, ror #8
     69c:	00d8a501 	sbcseq	sl, r8, r1, lsl #10
     6a0:	91020000 	mrsls	r0, (UNDEF: 2)
     6a4:	05270c65 	streq	r0, [r7, #-3173]!	; 0xfffff39b
     6a8:	a6010000 	strge	r0, [r1], -r0
     6ac:	000000d8 	ldrdeq	r0, [r0], -r8
     6b0:	0c649102 	stfeqp	f1, [r4], #-8
     6b4:	00000262 	andeq	r0, r0, r2, ror #4
     6b8:	00d8a601 	sbcseq	sl, r8, r1, lsl #12
     6bc:	91020000 	mrsls	r0, (UNDEF: 2)
     6c0:	07ac1362 	streq	r1, [ip, r2, ror #6]!
     6c4:	01022000 	mrseq	r2, (UNDEF: 2)
     6c8:	4d0c0000 	stcmi	0, cr0, [ip, #-0]
     6cc:	01000002 	tsteq	r0, r2
     6d0:	000090a9 	andeq	r9, r0, r9, lsr #1
     6d4:	63910200 	orrsvs	r0, r1, #0, 4
     6d8:	10170000 	andsne	r0, r7, r0
     6dc:	01000003 	tsteq	r0, r3
     6e0:	00065487 	andeq	r5, r6, r7, lsl #9
     6e4:	00013c20 	andeq	r3, r1, r0, lsr #24
     6e8:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
     6ec:	16000003 	strne	r0, [r0], -r3
     6f0:	87010078 	smlsdxhi	r1, r8, r0, r0
     6f4:	000000d8 	ldrdeq	r0, [r0], -r8
     6f8:	16679102 	strbtne	r9, [r7], -r2, lsl #2
     6fc:	87010079 	smlsdxhi	r1, r9, r0, r0
     700:	000000d8 	ldrdeq	r0, [r0], -r8
     704:	16669102 	strbtne	r9, [r6], -r2, lsl #2
     708:	00746573 	rsbseq	r6, r4, r3, ror r5
     70c:	00d88701 	sbcseq	r8, r8, r1, lsl #14
     710:	91020000 	mrsls	r0, (UNDEF: 2)
     714:	05270c65 	streq	r0, [r7, #-3173]!	; 0xfffff39b
     718:	8a010000 	bhi	40720 <startup-0x1ffbf8e0>
     71c:	00000090 	muleq	r0, r0, r0
     720:	0c6f9102 	stfeqp	f1, [pc], #-8	; 720 <startup-0x1ffff8e0>
     724:	0000033d 	andeq	r0, r0, sp, lsr r3
     728:	00908d01 	addseq	r8, r0, r1, lsl #26
     72c:	91020000 	mrsls	r0, (UNDEF: 2)
     730:	02a70c6d 	adceq	r0, r7, #27904	; 0x6d00
     734:	97010000 	strls	r0, [r1, -r0]
     738:	000000d8 	ldrdeq	r0, [r0], -r8
     73c:	006e9102 	rsbeq	r9, lr, r2, lsl #2
     740:	00027f17 	andeq	r7, r2, r7, lsl pc
     744:	fc7d0100 	ldc2l	1, cr0, [sp], #-0
     748:	58200005 	stmdapl	r0!, {r0, r2}
     74c:	01000000 	mrseq	r0, (UNDEF: 0)
     750:	0003479c 	muleq	r3, ip, r7
     754:	06021300 	streq	r1, [r2], -r0, lsl #6
     758:	004a2000 	subeq	r2, sl, r0
     75c:	69140000 	ldmdbvs	r4, {}	; <UNPREDICTABLE>
     760:	b67e0100 	ldrbtlt	r0, [lr], -r0, lsl #2
     764:	02000001 	andeq	r0, r0, #1
     768:	26137491 			; <UNDEFINED> instruction: 0x26137491
     76c:	1a200006 	bne	80078c <startup-0x1f7ff874>
     770:	14000000 	strne	r0, [r0], #-0
     774:	8101006a 	tsthi	r1, sl, rrx
     778:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
     77c:	00709102 	rsbseq	r9, r0, r2, lsl #2
     780:	a7180000 	ldrge	r0, [r8, -r0]
     784:	01000003 	tsteq	r0, r3
     788:	0005786a 	andeq	r7, r5, sl, ror #16
     78c:	00008420 	andeq	r8, r0, r0, lsr #8
     790:	199c0100 	ldmibne	ip, {r8}
     794:	000002f9 	strdeq	r0, [r0], -r9
     798:	055e6601 	ldrbeq	r6, [lr, #-1537]	; 0xfffff9ff
     79c:	001a2000 	andseq	r2, sl, r0
     7a0:	9c010000 	stcls	0, cr0, [r1], {-0}
     7a4:	0002551a 	andeq	r5, r2, sl, lsl r5
     7a8:	d8610100 	stmdale	r1!, {r8}^
     7ac:	34000000 	strcc	r0, [r0], #-0
     7b0:	2a200005 	bcs	8007cc <startup-0x1f7ff834>
     7b4:	01000000 	mrseq	r0, (UNDEF: 0)
     7b8:	00038f9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
     7bc:	00631600 	rsbeq	r1, r3, r0, lsl #12
     7c0:	00d86101 	sbcseq	r6, r8, r1, lsl #2
     7c4:	91020000 	mrsls	r0, (UNDEF: 2)
     7c8:	43170077 	tstmi	r7, #119	; 0x77
     7cc:	01000003 	tsteq	r0, r3
     7d0:	0004d45a 	andeq	sp, r4, sl, asr r4
     7d4:	00006020 	andeq	r6, r0, r0, lsr #32
     7d8:	bf9c0100 	svclt	0x009c0100
     7dc:	12000003 	andne	r0, r0, #3
     7e0:	00000262 	andeq	r0, r0, r2, ror #4
     7e4:	00d85a01 	sbcseq	r5, r8, r1, lsl #20
     7e8:	91020000 	mrsls	r0, (UNDEF: 2)
     7ec:	00631677 	rsbeq	r1, r3, r7, ror r6
     7f0:	00d85a01 	sbcseq	r5, r8, r1, lsl #20
     7f4:	91020000 	mrsls	r0, (UNDEF: 2)
     7f8:	8a170076 	bhi	5c09d8 <startup-0x1fa3f628>
     7fc:	01000003 	tsteq	r0, r3
     800:	00047c53 	andeq	r7, r4, r3, asr ip
     804:	00005820 	andeq	r5, r0, r0, lsr #16
     808:	ef9c0100 	svc	0x009c0100
     80c:	16000003 	strne	r0, [r0], -r3
     810:	00646d63 	rsbeq	r6, r4, r3, ror #26
     814:	00d85301 	sbcseq	r5, r8, r1, lsl #6
     818:	91020000 	mrsls	r0, (UNDEF: 2)
     81c:	00631677 	rsbeq	r1, r3, r7, ror r6
     820:	00d85301 	sbcseq	r5, r8, r1, lsl #6
     824:	91020000 	mrsls	r0, (UNDEF: 2)
     828:	99170076 	ldmdbls	r7, {r1, r2, r4, r5, r6}
     82c:	01000002 	tsteq	r0, r2
     830:	0003d43d 	andeq	sp, r3, sp, lsr r4
     834:	0000a820 	andeq	sl, r0, r0, lsr #16
     838:	1f9c0100 	svcne	0x009c0100
     83c:	16000004 	strne	r0, [r0], -r4
     840:	006c6176 	rsbeq	r6, ip, r6, ror r1
     844:	00d83d01 	sbcseq	r3, r8, r1, lsl #26
     848:	91020000 	mrsls	r0, (UNDEF: 2)
     84c:	00631677 	rsbeq	r1, r3, r7, ror r6
     850:	00d83d01 	sbcseq	r3, r8, r1, lsl #26
     854:	91020000 	mrsls	r0, (UNDEF: 2)
     858:	6a1a0076 	bvs	680a38 <startup-0x1f97f5c8>
     85c:	01000003 	tsteq	r0, r3
     860:	00009024 	andeq	r9, r0, r4, lsr #32
     864:	00030c00 	andeq	r0, r3, r0, lsl #24
     868:	0000c820 	andeq	ip, r0, r0, lsr #16
     86c:	529c0100 	addspl	r0, ip, #0, 2
     870:	16000004 	strne	r0, [r0], -r4
     874:	24010063 	strcs	r0, [r1], #-99	; 0xffffff9d
     878:	000000d8 	ldrdeq	r0, [r0], -r8
     87c:	146f9102 	strbtne	r9, [pc], #-258	; 884 <startup-0x1ffff77c>
     880:	01005652 	tsteq	r0, r2, asr r6
     884:	0000d82e 	andeq	sp, r0, lr, lsr #16
     888:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     88c:	03771b00 	cmneq	r7, #0, 22
     890:	12010000 	andne	r0, r1, #0
     894:	20000268 	andcs	r0, r0, r8, ror #4
     898:	000000a4 	andeq	r0, r0, r4, lsr #1
     89c:	ac1c9c01 	ldcge	12, cr9, [ip], {1}
     8a0:	01000002 	tsteq	r0, r2
     8a4:	0001d809 	andeq	sp, r1, r9, lsl #16
     8a8:	00009020 	andeq	r9, r0, r0, lsr #32
     8ac:	169c0100 	ldrne	r0, [ip], r0, lsl #2
     8b0:	09010063 	stmdbeq	r1, {r0, r1, r5, r6}
     8b4:	00000090 	muleq	r0, r0, r0
     8b8:	00779102 	rsbseq	r9, r7, r2, lsl #2
     8bc:	00039700 	andeq	r9, r3, r0, lsl #14
     8c0:	40000400 	andmi	r0, r0, r0, lsl #8
     8c4:	04000003 	streq	r0, [r0], #-3
     8c8:	00003201 	andeq	r3, r0, r1, lsl #4
     8cc:	04030c00 	streq	r0, [r3], #-3072	; 0xfffff400
     8d0:	00d80000 	sbcseq	r0, r8, r0
     8d4:	0a600000 	beq	18008dc <startup-0x1e7ff724>
     8d8:	020a2000 	andeq	r2, sl, #0
     8dc:	02c90000 	sbceq	r0, r9, #0
     8e0:	02020000 	andeq	r0, r2, #0
     8e4:	00420502 	subeq	r0, r2, r2, lsl #10
     8e8:	78030000 	stmdavc	r3, {}	; <UNPREDICTABLE>
     8ec:	42060200 	andmi	r0, r6, #0, 4
     8f0:	00000000 	andeq	r0, r0, r0
     8f4:	02007903 	andeq	r7, r0, #49152	; 0xc000
     8f8:	00004207 	andeq	r4, r0, r7, lsl #4
     8fc:	04000100 	streq	r0, [r0], #-256	; 0xffffff00
     900:	00ca0801 	sbceq	r0, sl, r1, lsl #16
     904:	18050000 	stmdane	r5, {}	; <UNPREDICTABLE>
     908:	02000000 	andeq	r0, r0, #0
     90c:	00002508 	andeq	r2, r0, r8, lsl #10
     910:	02340200 	eorseq	r0, r4, #0, 4
     914:	00008c19 	andeq	r8, r0, r9, lsl ip
     918:	01b70600 			; <UNDEFINED> instruction: 0x01b70600
     91c:	1a020000 	bne	80924 <startup-0x1ff7f6dc>
     920:	0000008c 	andeq	r0, r0, ip, lsl #1
     924:	013e0600 	teqeq	lr, r0, lsl #12
     928:	1b020000 	blne	80930 <startup-0x1ff7f6d0>
     92c:	0000008c 	andeq	r0, r0, ip, lsl #1
     930:	01440604 	cmpeq	r4, r4, lsl #12
     934:	1c020000 	stcne	0, cr0, [r2], {-0}
     938:	0000008c 	andeq	r0, r0, ip, lsl #1
     93c:	78700308 	ldmdavc	r0!, {r3, r8, r9}^
     940:	931d0200 	tstls	sp, #0, 4
     944:	0c000000 	stceq	0, cr0, [r0], {-0}
     948:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
     94c:	00746e69 	rsbseq	r6, r4, r9, ror #28
     950:	00004908 	andeq	r4, r0, r8, lsl #18
     954:	0000a300 	andeq	sl, r0, r0, lsl #6
     958:	00a30900 	adceq	r0, r3, r0, lsl #18
     95c:	00130000 	andseq	r0, r3, r0
     960:	ec070404 	cfstrs	mvf0, [r7], {4}
     964:	05000004 	streq	r0, [r0, #-4]
     968:	000001c1 	andeq	r0, r0, r1, asr #3
     96c:	00b51e02 	adcseq	r1, r5, r2, lsl #28
     970:	040a0000 	streq	r0, [sl], #-0
     974:	00000054 	andeq	r0, r0, r4, asr r0
     978:	0001b20b 	andeq	fp, r1, fp, lsl #4
     97c:	22022800 	andcs	r2, r2, #0, 16
     980:	00000140 	andeq	r0, r0, r0, asr #2
     984:	6f656703 	svcvs	0x00656703
     988:	aa230200 	bge	8c1190 <startup-0x1f73ee70>
     98c:	00000000 	andeq	r0, r0, r0
     990:	00002306 	andeq	r2, r0, r6, lsl #6
     994:	8c240200 	sfmhi	f0, 4, [r4], #-0
     998:	04000000 	streq	r0, [r0], #-0
     99c:	00002806 	andeq	r2, r0, r6, lsl #16
     9a0:	8c240200 	sfmhi	f0, 4, [r4], #-0
     9a4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     9a8:	00010906 	andeq	r0, r1, r6, lsl #18
     9ac:	8c250200 	sfmhi	f0, 4, [r5], #-0
     9b0:	0c000000 	stceq	0, cr0, [r0], {-0}
     9b4:	00010e06 	andeq	r0, r1, r6, lsl #28
     9b8:	8c250200 	sfmhi	f0, 4, [r5], #-0
     9bc:	10000000 	andne	r0, r0, r0
     9c0:	00015906 	andeq	r5, r1, r6, lsl #18
     9c4:	51260200 			; <UNDEFINED> instruction: 0x51260200
     9c8:	14000001 	strne	r0, [r0], #-1
     9cc:	00023606 	andeq	r3, r2, r6, lsl #12
     9d0:	51270200 			; <UNDEFINED> instruction: 0x51270200
     9d4:	18000001 	stmdane	r0, {r0}
     9d8:	00018f06 	andeq	r8, r1, r6, lsl #30
     9dc:	51280200 			; <UNDEFINED> instruction: 0x51280200
     9e0:	1c000001 	stcne	0, cr0, [r0], {1}
     9e4:	0000ff06 	andeq	pc, r0, r6, lsl #30
     9e8:	6c290200 	sfmvs	f0, 4, [r9], #-0
     9ec:	20000001 	andcs	r0, r0, r1
     9f0:	0003d406 	andeq	sp, r3, r6, lsl #8
     9f4:	822a0200 	eorhi	r0, sl, #0, 4
     9f8:	24000001 	strcs	r0, [r0], #-1
     9fc:	014b0c00 	cmpeq	fp, r0, lsl #24
     a00:	4b0d0000 	blmi	340a08 <startup-0x1fcbf5f8>
     a04:	00000001 	andeq	r0, r0, r1
     a08:	00bb040a 	adcseq	r0, fp, sl, lsl #8
     a0c:	040a0000 	streq	r0, [sl], #-0
     a10:	00000140 	andeq	r0, r0, r0, asr #2
     a14:	00016c0c 	andeq	r6, r1, ip, lsl #24
     a18:	014b0d00 	cmpeq	fp, r0, lsl #26
     a1c:	8c0d0000 	stchi	0, cr0, [sp], {-0}
     a20:	0d000000 	stceq	0, cr0, [r0, #-0]
     a24:	0000008c 	andeq	r0, r0, ip, lsl #1
     a28:	57040a00 	strpl	r0, [r4, -r0, lsl #20]
     a2c:	0c000001 	stceq	0, cr0, [r0], {1}
     a30:	00000182 	andeq	r0, r0, r2, lsl #3
     a34:	00014b0d 	andeq	r4, r1, sp, lsl #22
     a38:	00490d00 	subeq	r0, r9, r0, lsl #26
     a3c:	0a000000 	beq	a44 <startup-0x1ffff5bc>
     a40:	00017204 	andeq	r7, r1, r4, lsl #4
     a44:	047f0500 	ldrbteq	r0, [pc], #-1280	; a4c <startup-0x1ffff5b4>
     a48:	2b020000 	blcs	80a50 <startup-0x1ff7f5b0>
     a4c:	000000bb 	strheq	r0, [r0], -fp
     a50:	00000805 	andeq	r0, r0, r5, lsl #16
     a54:	4b2b0200 	blmi	ac125c <startup-0x1f53eda4>
     a58:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     a5c:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
     a60:	0c023101 	stfeqs	f3, [r2], {1}
     a64:	00682000 	rsbeq	r2, r8, r0
     a68:	9c010000 	stcls	0, cr0, [r1], {-0}
     a6c:	0000021e 	andeq	r0, r0, lr, lsl r2
     a70:	0003c30f 	andeq	ip, r3, pc, lsl #6
     a74:	1e310100 	rsfnes	f0, f1, f0
     a78:	02000002 	andeq	r0, r0, #2
     a7c:	3d0f6c91 	stccc	12, cr6, [pc, #-580]	; 840 <startup-0x1ffff7c0>
     a80:	01000004 	tsteq	r0, r4
     a84:	00022431 	andeq	r2, r2, r1, lsr r4
     a88:	6b910200 	blvs	fe441290 <paddle+0xde43f3a4>
     a8c:	0003e110 	andeq	lr, r3, r0, lsl r1
     a90:	8c320100 	ldfhis	f0, [r2], #-0
     a94:	e0000000 	and	r0, r0, r0
     a98:	11000001 	tstne	r0, r1
     a9c:	03ec1000 	mvneq	r1, #0
     aa0:	34010000 	strcc	r0, [r1], #-0
     aa4:	0000008c 	andeq	r0, r0, ip, lsl #1
     aa8:	000001f1 	strdeq	r0, [r0], -r1
     aac:	86120011 			; <UNDEFINED> instruction: 0x86120011
     ab0:	01000004 	tsteq	r0, r4
     ab4:	00022435 	andeq	r2, r2, r5, lsr r4
     ab8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     abc:	00049610 	andeq	r9, r4, r0, lsl r6
     ac0:	8c360100 	ldfhis	f0, [r6], #-0
     ac4:	10000000 	andne	r0, r0, r0
     ac8:	11000002 	tstne	r0, r2
     acc:	03a71300 			; <UNDEFINED> instruction: 0x03a71300
     ad0:	37010000 	strcc	r0, [r1, -r0]
     ad4:	0000008c 	andeq	r0, r0, ip, lsl #1
     ad8:	0a000011 	beq	b24 <startup-0x1ffff4dc>
     adc:	00022404 	andeq	r2, r2, r4, lsl #8
     ae0:	08010400 	stmdaeq	r1, {sl}
     ae4:	000000d3 	ldrdeq	r0, [r0], -r3
     ae8:	00047a0e 	andeq	r7, r4, lr, lsl #20
     aec:	6a240100 	bvs	900ef4 <startup-0x1f6ff10c>
     af0:	9820000b 	stmdals	r0!, {r0, r1, r3}
     af4:	01000000 	mrseq	r0, (UNDEF: 0)
     af8:	00024d9c 	muleq	r2, ip, sp
     afc:	006f1400 	rsbeq	r1, pc, r0, lsl #8
     b00:	024d2401 	subeq	r2, sp, #16777216	; 0x1000000
     b04:	91020000 	mrsls	r0, (UNDEF: 2)
     b08:	040a0074 	streq	r0, [sl], #-116	; 0xffffff8c
     b0c:	00000188 	andeq	r0, r0, r8, lsl #3
     b10:	0004610e 	andeq	r6, r4, lr, lsl #2
     b14:	0e1e0100 	mufeqe	f0, f6, f0
     b18:	5c20000b 	stcpl	0, cr0, [r0], #-44	; 0xffffffd4
     b1c:	01000000 	mrseq	r0, (UNDEF: 0)
     b20:	0002a29c 	muleq	r2, ip, r2
     b24:	006f1400 	rsbeq	r1, pc, r0, lsl #8
     b28:	024d1e01 	subeq	r1, sp, #1, 28
     b2c:	91020000 	mrsls	r0, (UNDEF: 2)
     b30:	0b16156c 	bleq	5860e8 <startup-0x1fa79f18>
     b34:	004c2000 	subeq	r2, ip, r0
     b38:	69160000 	ldmdbvs	r6, {}	; <UNPREDICTABLE>
     b3c:	8c1f0100 	ldfhis	f0, [pc], {-0}
     b40:	02000000 	andeq	r0, r0, #0
     b44:	1c157491 	cfldrsne	mvf7, [r5], {145}	; 0x91
     b48:	3420000b 	strtcc	r0, [r0], #-11
     b4c:	13000000 	movwne	r0, #0
     b50:	00000310 	andeq	r0, r0, r0, lsl r3
     b54:	008c1a01 	addeq	r1, ip, r1, lsl #20
     b58:	00110000 	andseq	r0, r1, r0
     b5c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     b60:	0000046e 	andeq	r0, r0, lr, ror #8
     b64:	0aaa1601 	beq	fea86370 <paddle+0xdea84484>
     b68:	00642000 	rsbeq	r2, r4, r0
     b6c:	9c010000 	stcls	0, cr0, [r1], {-0}
     b70:	0000030d 	andeq	r0, r0, sp, lsl #6
     b74:	01006f14 	tsteq	r0, r4, lsl pc
     b78:	00024d16 	andeq	r4, r2, r6, lsl sp
     b7c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     b80:	000ab215 	andeq	fp, sl, r5, lsl r2
     b84:	00005420 	andeq	r5, r0, r0, lsr #8
     b88:	00691600 	rsbeq	r1, r9, r0, lsl #12
     b8c:	008c1701 	addeq	r1, ip, r1, lsl #14
     b90:	91020000 	mrsls	r0, (UNDEF: 2)
     b94:	0ab81574 	beq	fee0616c <paddle+0xdee04280>
     b98:	003c2000 	eorseq	r2, ip, r0
     b9c:	55120000 	ldrpl	r0, [r2, #-0]
     ba0:	01000004 	tsteq	r0, r4
     ba4:	00008c18 	andeq	r8, r0, r8, lsl ip
     ba8:	70910200 	addsvc	r0, r1, r0, lsl #4
     bac:	00045b12 	andeq	r5, r4, r2, lsl fp
     bb0:	8c190100 	ldfhis	f0, [r9], {-0}
     bb4:	02000000 	andeq	r0, r0, #0
     bb8:	10136c91 	mulsne	r3, r1, ip
     bbc:	01000003 	tsteq	r0, r3
     bc0:	00008c1a 	andeq	r8, r0, sl, lsl ip
     bc4:	00001100 	andeq	r1, r0, r0, lsl #2
     bc8:	cf170000 	svcgt	0x00170000
     bcc:	01000003 	tsteq	r0, r3
     bd0:	000a8a11 	andeq	r8, sl, r1, lsl sl
     bd4:	00002020 	andeq	r2, r0, r0, lsr #32
     bd8:	4b9c0100 	blmi	fe700fe0 <paddle+0xde6ff0f4>
     bdc:	14000003 	strne	r0, [r0], #-3
     be0:	1101006f 	tstne	r1, pc, rrx
     be4:	00000193 	muleq	r0, r3, r1
     be8:	0f749102 	svceq	0x00749102
     bec:	00000109 	andeq	r0, r0, r9, lsl #2
     bf0:	008c1101 	addeq	r1, ip, r1, lsl #2
     bf4:	91020000 	mrsls	r0, (UNDEF: 2)
     bf8:	010e0f70 	tsteq	lr, r0, ror pc
     bfc:	11010000 	mrsne	r0, (UNDEF: 1)
     c00:	0000008c 	andeq	r0, r0, ip, lsl #1
     c04:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     c08:	00044417 	andeq	r4, r4, r7, lsl r4
     c0c:	6a0c0100 	bvs	301014 <startup-0x1fcfefec>
     c10:	2020000a 	eorcs	r0, r0, sl
     c14:	01000000 	mrseq	r0, (UNDEF: 0)
     c18:	0003899c 	muleq	r3, ip, r9
     c1c:	006f1400 	rsbeq	r1, pc, r0, lsl #8
     c20:	01930c01 	orrseq	r0, r3, r1, lsl #24
     c24:	91020000 	mrsls	r0, (UNDEF: 2)
     c28:	04360f74 	ldrteq	r0, [r6], #-3956	; 0xfffff08c
     c2c:	0c010000 	stceq	0, cr0, [r1], {-0}
     c30:	0000008c 	andeq	r0, r0, ip, lsl #1
     c34:	0f709102 	svceq	0x00709102
     c38:	0000048f 	andeq	r0, r0, pc, lsl #9
     c3c:	008c0c01 	addeq	r0, ip, r1, lsl #24
     c40:	91020000 	mrsls	r0, (UNDEF: 2)
     c44:	f918006c 			; <UNDEFINED> instruction: 0xf918006c
     c48:	01000003 	tsteq	r0, r3
     c4c:	000a6008 	andeq	r6, sl, r8
     c50:	00000a20 	andeq	r0, r0, r0, lsr #20
     c54:	009c0100 	addseq	r0, ip, r0, lsl #2
     c58:	0000022d 	andeq	r0, r0, sp, lsr #4
     c5c:	04940004 	ldreq	r0, [r4], #4
     c60:	01040000 	mrseq	r0, (UNDEF: 4)
     c64:	00000032 	andeq	r0, r0, r2, lsr r0
     c68:	0005320c 	andeq	r3, r5, ip, lsl #4
     c6c:	0000d800 	andeq	sp, r0, r0, lsl #16
     c70:	000c6c00 	andeq	r6, ip, r0, lsl #24
     c74:	0002a820 	andeq	sl, r2, r0, lsr #16
     c78:	00038800 	andeq	r8, r3, r0, lsl #16
     c7c:	01070200 	mrseq	r0, (UNDEF: 39)
     c80:	0000005d 	andeq	r0, r0, sp, asr r0
     c84:	005d1d02 	subseq	r1, sp, r2, lsl #26
     c88:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
     c8c:	01000003 	tsteq	r0, r3
     c90:	00029403 	andeq	r9, r2, r3, lsl #8
     c94:	34030200 	strcc	r0, [r3], #-512	; 0xfffffe00
     c98:	04000003 	streq	r0, [r0], #-3
     c9c:	00032e03 	andeq	r2, r3, r3, lsl #28
     ca0:	29030800 	stmdbcs	r3, {fp}
     ca4:	10000002 	andne	r0, r0, r2
     ca8:	0002f303 	andeq	pc, r2, r3, lsl #6
     cac:	42042000 	andmi	r2, r4, #0
     cb0:	4000455f 	andmi	r4, r0, pc, asr r5
     cb4:	08010500 	stmdaeq	r1, {r8, sl}
     cb8:	000000ca 	andeq	r0, r0, sl, asr #1
     cbc:	00058906 	andeq	r8, r5, r6, lsl #18
     cc0:	e65e0100 	ldrb	r0, [lr], -r0, lsl #2
     cc4:	2e20000e 	cdpcs	0, 2, cr0, cr0, cr14, {0}
     cc8:	01000000 	mrseq	r0, (UNDEF: 0)
     ccc:	03ec079c 	mvneq	r0, #156, 14	; 0x2700000
     cd0:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
     cd4:	20000eb2 			; <UNDEFINED> instruction: 0x20000eb2
     cd8:	00000034 	andeq	r0, r0, r4, lsr r0
     cdc:	00b19c01 	adcseq	r9, r1, r1, lsl #24
     ce0:	78080000 	stmdavc	r8, {}	; <UNPREDICTABLE>
     ce4:	b1590100 	cmplt	r9, r0, lsl #2
     ce8:	02000000 	andeq	r0, r0, #0
     cec:	79086c91 	stmdbvc	r8, {r0, r4, r7, sl, fp, sp, lr}
     cf0:	b1590100 	cmplt	r9, r0, lsl #2
     cf4:	02000000 	andeq	r0, r0, #0
     cf8:	98096891 	stmdals	r9, {r0, r4, r7, fp, sp, lr}
     cfc:	01000005 	tsteq	r0, r5
     d00:	0000b15a 	andeq	fp, r0, sl, asr r1
     d04:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     d08:	05040a00 	streq	r0, [r4, #-2560]	; 0xfffff600
     d0c:	00746e69 	rsbseq	r6, r4, r9, ror #28
     d10:	00049607 	andeq	r9, r4, r7, lsl #12
     d14:	76520100 	ldrbvc	r0, [r2], -r0, lsl #2
     d18:	3c20000e 	stccc	0, cr0, [r0], #-56	; 0xffffffc8
     d1c:	01000000 	mrseq	r0, (UNDEF: 0)
     d20:	0000da9c 	muleq	r0, ip, sl
     d24:	00630800 	rsbeq	r0, r3, r0, lsl #16
     d28:	00da5201 	sbcseq	r5, sl, r1, lsl #4
     d2c:	91020000 	mrsls	r0, (UNDEF: 2)
     d30:	01050077 	tsteq	r5, r7, ror r0
     d34:	0000d308 	andeq	sp, r0, r8, lsl #6
     d38:	03e10b00 	mvneq	r0, #0, 22
     d3c:	46010000 	strmi	r0, [r1], -r0
     d40:	20000e30 	andcs	r0, r0, r0, lsr lr
     d44:	00000046 	andeq	r0, r0, r6, asr #32
     d48:	690c9c01 	stmdbvs	ip, {r0, sl, fp, ip, pc}
     d4c:	01000005 	tsteq	r0, r5
     d50:	00005d3d 	andeq	r5, r0, sp, lsr sp
     d54:	000de800 	andeq	lr, sp, r0, lsl #16
     d58:	00004820 	andeq	r4, r0, r0, lsr #16
     d5c:	199c0100 	ldmibne	ip, {r8}
     d60:	0d000001 	stceq	0, cr0, [r0, #-4]
     d64:	01007672 	tsteq	r0, r2, ror r6
     d68:	00005d41 	andeq	r5, r0, r1, asr #26
     d6c:	6f910200 	svcvs	0x00910200
     d70:	050a0c00 	streq	r0, [sl, #-3072]	; 0xfffff400
     d74:	31010000 	mrscc	r0, (UNDEF: 1)
     d78:	0000005d 	andeq	r0, r0, sp, asr r0
     d7c:	20000da8 	andcs	r0, r0, r8, lsr #27
     d80:	00000040 	andeq	r0, r0, r0, asr #32
     d84:	01409c01 	cmpeq	r0, r1, lsl #24
     d88:	720d0000 	andvc	r0, sp, #0
     d8c:	35010076 	strcc	r0, [r1, #-118]	; 0xffffff8a
     d90:	0000005d 	andeq	r0, r0, sp, asr r0
     d94:	00779102 	rsbseq	r9, r7, r2, lsl #2
     d98:	0004f907 	andeq	pc, r4, r7, lsl #18
     d9c:	7e2b0100 	sufvce	f0, f3, f0
     da0:	2a20000d 	bcs	800ddc <startup-0x1f7ff224>
     da4:	01000000 	mrseq	r0, (UNDEF: 0)
     da8:	0001649c 	muleq	r1, ip, r4
     dac:	02620e00 	rsbeq	r0, r2, #0, 28
     db0:	2b010000 	blcs	40db8 <startup-0x1ffbf248>
     db4:	0000005d 	andeq	r0, r0, sp, asr r0
     db8:	00779102 	rsbseq	r9, r7, r2, lsl #2
     dbc:	00057907 	andeq	r7, r5, r7, lsl #18
     dc0:	54250100 	strtpl	r0, [r5], #-256	; 0xffffff00
     dc4:	2a20000d 	bcs	800e00 <startup-0x1f7ff200>
     dc8:	01000000 	mrseq	r0, (UNDEF: 0)
     dcc:	0001889c 	muleq	r1, ip, r8
     dd0:	03980e00 	orrseq	r0, r8, #0, 28
     dd4:	25010000 	strcs	r0, [r1, #-0]
     dd8:	0000005d 	andeq	r0, r0, sp, asr r0
     ddc:	00779102 	rsbseq	r9, r7, r2, lsl #2
     de0:	00051c0c 	andeq	r1, r5, ip, lsl #24
     de4:	5d1c0100 	ldfpls	f0, [ip, #-0]
     de8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     dec:	2c20000d 	stccs	0, cr0, [r0], #-52	; 0xffffffcc
     df0:	01000000 	mrseq	r0, (UNDEF: 0)
     df4:	0001af9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
     df8:	76720d00 	ldrbtvc	r0, [r2], -r0, lsl #26
     dfc:	5d200100 	stfpls	f0, [r0, #-0]
     e00:	02000000 	andeq	r0, r0, #0
     e04:	07007791 			; <UNDEFINED> instruction: 0x07007791
     e08:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
     e0c:	0cf81501 	cfldr64eq	mvdx1, [r8], #4
     e10:	00302000 	eorseq	r2, r0, r0
     e14:	9c010000 	stcls	0, cr0, [r1], {-0}
     e18:	000001d1 	ldrdeq	r0, [r0], -r1
     e1c:	01006308 	tsteq	r0, r8, lsl #6
     e20:	00005d15 	andeq	r5, r0, r5, lsl sp
     e24:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     e28:	04a70f00 	strteq	r0, [r7], #3840	; 0xf00
     e2c:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
     e30:	20000cb0 			; <UNDEFINED> instruction: 0x20000cb0
     e34:	00000048 	andeq	r0, r0, r8, asr #32
     e38:	01ff9c01 	mvnseq	r9, r1, lsl #24
     e3c:	78080000 	stmdavc	r8, {}	; <UNPREDICTABLE>
     e40:	ff0e0100 			; <UNDEFINED> instruction: 0xff0e0100
     e44:	02000001 	andeq	r0, r0, #1
     e48:	630d6e91 	movwvs	r6, #56977	; 0xde91
     e4c:	5d0f0100 	stfpls	f0, [pc, #-0]	; e54 <startup-0x1ffff1ac>
     e50:	02000000 	andeq	r0, r0, #0
     e54:	05007791 	streq	r7, [r0, #-1937]	; 0xfffff86f
     e58:	04e60702 	strbteq	r0, [r6], #1794	; 0x702
     e5c:	d3100000 	tstle	r0, #0
     e60:	01000004 	tsteq	r0, r4
     e64:	000c6c06 	andeq	r6, ip, r6, lsl #24
     e68:	00004420 	andeq	r4, r0, r0, lsr #8
     e6c:	089c0100 	ldmeq	ip, {r8}
     e70:	06010078 			; <UNDEFINED> instruction: 0x06010078
     e74:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     e78:	0d6e9102 	stfeqp	f1, [lr, #-8]!
     e7c:	08010063 	stmdaeq	r1, {r0, r1, r5, r6}
     e80:	0000005d 	andeq	r0, r0, sp, asr r0
     e84:	00779102 	rsbseq	r9, r7, r2, lsl #2
     e88:	00017a00 	andeq	r7, r1, r0, lsl #20
     e8c:	b5000400 	strlt	r0, [r0, #-1024]	; 0xfffffc00
     e90:	04000005 	streq	r0, [r0], #-5
     e94:	00003201 	andeq	r3, r0, r1, lsl #4
     e98:	05a40c00 	streq	r0, [r4, #3072]!	; 0xc00
     e9c:	00d80000 	sbcseq	r0, r8, r0
     ea0:	0f140000 	svceq	0x00140000
     ea4:	01b02000 	movseq	r2, r0
     ea8:	04520000 	ldrbeq	r0, [r2], #-0
     eac:	01020000 	mrseq	r0, (UNDEF: 2)
     eb0:	0000ca08 	andeq	ip, r0, r8, lsl #20
     eb4:	00250300 	eoreq	r0, r5, r0, lsl #6
     eb8:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
     ebc:	01000006 	tsteq	r0, r6
     ec0:	0000a332 	andeq	sl, r0, r2, lsr r3
     ec4:	00103c00 	andseq	r3, r0, r0, lsl #24
     ec8:	00008820 	andeq	r8, r0, r0, lsr #16
     ecc:	a39c0100 	orrsge	r0, ip, #0, 2
     ed0:	05000000 	streq	r0, [r0, #-0]
     ed4:	00000600 	andeq	r0, r0, r0, lsl #12
     ed8:	00253401 	eoreq	r3, r5, r1, lsl #8
     edc:	91020000 	mrsls	r0, (UNDEF: 2)
     ee0:	03720574 	cmneq	r2, #116, 10	; 0x1d000000
     ee4:	35010000 	strcc	r0, [r1, #-0]
     ee8:	000000a3 	andeq	r0, r0, r3, lsr #1
     eec:	06769102 	ldrbteq	r9, [r6], -r2, lsl #2
     ef0:	2000104e 	andcs	r1, r0, lr, asr #32
     ef4:	00000060 	andeq	r0, r0, r0, rrx
     ef8:	01006907 	tsteq	r0, r7, lsl #18
     efc:	0000aa36 	andeq	sl, r0, r6, lsr sl
     f00:	75910200 	ldrvc	r0, [r1, #512]	; 0x200
     f04:	00105606 	andseq	r5, r0, r6, lsl #12
     f08:	00004620 	andeq	r4, r0, r0, lsr #12
     f0c:	05dc0500 	ldrbeq	r0, [ip, #1280]	; 0x500
     f10:	37010000 	strcc	r0, [r1, -r0]
     f14:	000000aa 	andeq	r0, r0, sl, lsr #1
     f18:	05739102 	ldrbeq	r9, [r3, #-258]!	; 0xfffffefe
     f1c:	000005ef 	andeq	r0, r0, pc, ror #11
     f20:	002c3901 	eoreq	r3, ip, r1, lsl #18
     f24:	91020000 	mrsls	r0, (UNDEF: 2)
     f28:	00000072 	andeq	r0, r0, r2, ror r0
     f2c:	e6070202 	str	r0, [r7], -r2, lsl #4
     f30:	02000004 	andeq	r0, r0, #4
     f34:	00d30801 	sbcseq	r0, r3, r1, lsl #16
     f38:	06080000 	streq	r0, [r8], -r0
     f3c:	01000006 	tsteq	r0, r6
     f40:	00100829 	andseq	r0, r0, r9, lsr #16
     f44:	00003420 	andeq	r3, r0, r0, lsr #8
     f48:	e39c0100 	orrs	r0, ip, #0, 2
     f4c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     f50:	006d756e 	rsbeq	r7, sp, lr, ror #10
     f54:	00252901 	eoreq	r2, r5, r1, lsl #18
     f58:	91020000 	mrsls	r0, (UNDEF: 2)
     f5c:	05e6055f 	strbeq	r0, [r6, #1375]!	; 0x55f
     f60:	2a010000 	bcs	40f68 <startup-0x1ffbf098>
     f64:	000000e3 	andeq	r0, r0, r3, ror #1
     f68:	00609102 	rsbeq	r9, r0, r2, lsl #2
     f6c:	0000250a 	andeq	r2, r0, sl, lsl #10
     f70:	0000f300 	andeq	pc, r0, r0, lsl #6
     f74:	00f30b00 	rscseq	r0, r3, r0, lsl #22
     f78:	000f0000 	andeq	r0, pc, r0
     f7c:	ec070402 	cfstrs	mvf0, [r7], {2}
     f80:	04000004 	streq	r0, [r0], #-4
     f84:	0000059f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
     f88:	00251201 	eoreq	r1, r5, r1, lsl #4
     f8c:	0f4c0000 	svceq	0x004c0000
     f90:	00bc2000 	adcseq	r2, ip, r0
     f94:	9c010000 	stcls	0, cr0, [r1], {-0}
     f98:	0000016c 	andeq	r0, r0, ip, ror #2
     f9c:	00060005 	andeq	r0, r6, r5
     fa0:	25140100 	ldrcs	r0, [r4, #-256]	; 0xffffff00
     fa4:	02000000 	andeq	r0, r0, #0
     fa8:	16056f91 			; <UNDEFINED> instruction: 0x16056f91
     fac:	01000006 	tsteq	r0, r6
     fb0:	0000e315 	andeq	lr, r0, r5, lsl r3
     fb4:	5c910200 	lfmpl	f0, 4, [r1], {0}
     fb8:	000f6606 	andeq	r6, pc, r6, lsl #12
     fbc:	00008c20 	andeq	r8, r0, r0, lsr #24
     fc0:	00690700 	rsbeq	r0, r9, r0, lsl #14
     fc4:	00aa1701 	adceq	r1, sl, r1, lsl #14
     fc8:	91020000 	mrsls	r0, (UNDEF: 2)
     fcc:	0f70066e 	svceq	0x0070066e
     fd0:	006c2000 	rsbeq	r2, ip, r0
     fd4:	dc050000 	stcle	0, cr0, [r5], {-0}
     fd8:	01000005 	tsteq	r0, r5
     fdc:	0000aa18 	andeq	sl, r0, r8, lsl sl
     fe0:	6c910200 	lfmvs	f0, 4, [r1], {0}
     fe4:	0005ef05 	andeq	lr, r5, r5, lsl #30
     fe8:	aa1a0100 	bge	6813f0 <startup-0x1f97ec10>
     fec:	02000000 	andeq	r0, r0, #0
     ff0:	00006d91 	muleq	r0, r1, sp
     ff4:	05f40c00 	ldrbeq	r0, [r4, #3072]!	; 0xc00
     ff8:	06010000 	streq	r0, [r1], -r0
     ffc:	20000f14 	andcs	r0, r0, r4, lsl pc
    1000:	00000038 	andeq	r0, r0, r8, lsr r0
    1004:	Address 0x00001004 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
  18:	0b3a050b 	bleq	e8144c <startup-0x1f17ebb4>
  1c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  20:	0d030000 	stceq	0, cr0, [r3, #-0]
  24:	3a0e0300 	bcc	380c2c <startup-0x1fc7f3d4>
  28:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  2c:	000b3813 	andeq	r3, fp, r3, lsl r8
  30:	000d0400 	andeq	r0, sp, r0, lsl #8
  34:	0b3a0e03 	bleq	e83848 <startup-0x1f17c7b8>
  38:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  3c:	00000538 	andeq	r0, r0, r8, lsr r5
  40:	49010105 	stmdbmi	r1, {r0, r2, r8}
  44:	00130113 	andseq	r0, r3, r3, lsl r1
  48:	00210600 	eoreq	r0, r1, r0, lsl #12
  4c:	0b2f1349 	bleq	bc4d78 <startup-0x1f43b288>
  50:	24070000 	strcs	r0, [r7], #-0
  54:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  58:	000e030b 	andeq	r0, lr, fp, lsl #6
  5c:	01150800 	tsteq	r5, r0, lsl #16
  60:	13011927 	movwne	r1, #6439	; 0x1927
  64:	05090000 	streq	r0, [r9, #-0]
  68:	00134900 	andseq	r4, r3, r0, lsl #18
  6c:	000f0a00 	andeq	r0, pc, r0, lsl #20
  70:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  74:	160b0000 	strne	r0, [fp], -r0
  78:	3a0e0300 	bcc	380c80 <startup-0x1fc7f380>
  7c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  80:	0c000013 	stceq	0, cr0, [r0], {19}
  84:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  88:	0b3b0b3a 	bleq	ec2d78 <startup-0x1f13d288>
  8c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  90:	130d0000 	movwne	r0, #53248	; 0xd000
  94:	3a0b0b01 	bcc	2c2ca0 <startup-0x1fd3d360>
  98:	010b3b0b 	tsteq	fp, fp, lsl #22
  9c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  a0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  a4:	0b3b0b3a 	bleq	ec2d94 <startup-0x1f13d26c>
  a8:	0b381349 	bleq	e04dd4 <startup-0x1f1fb22c>
  ac:	240f0000 	strcs	r0, [pc], #-0	; b4 <startup-0x1fffff4c>
  b0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  b4:	0008030b 	andeq	r0, r8, fp, lsl #6
  b8:	01131000 	tsteq	r3, r0
  bc:	0b0b0e03 	bleq	2c38d0 <startup-0x1fd3c730>
  c0:	0b3b0b3a 	bleq	ec2db0 <startup-0x1f13d250>
  c4:	00001301 	andeq	r1, r0, r1, lsl #6
  c8:	03003411 	movweq	r3, #1041	; 0x411
  cc:	3b0b3a0e 	blcc	2ce90c <startup-0x1fd316f4>
  d0:	3f13490b 	svccc	0x0013490b
  d4:	00180219 	andseq	r0, r8, r9, lsl r2
  d8:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
  dc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  e0:	0b3b0b3a 	bleq	ec2dd0 <startup-0x1f13d230>
  e4:	01111927 	tsteq	r1, r7, lsr #18
  e8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  ec:	01194296 			; <UNDEFINED> instruction: 0x01194296
  f0:	13000013 	movwne	r0, #19
  f4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
  f8:	0b3b0b3a 	bleq	ec2de8 <startup-0x1f13d218>
  fc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 100:	34140000 	ldrcc	r0, [r4], #-0
 104:	3a080300 	bcc	200d0c <startup-0x1fdff2f4>
 108:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 10c:	00180213 	andseq	r0, r8, r3, lsl r2
 110:	002e1500 	eoreq	r1, lr, r0, lsl #10
 114:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 118:	0b3b0b3a 	bleq	ec2e08 <startup-0x1f13d1f8>
 11c:	01111927 	tsteq	r1, r7, lsr #18
 120:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 124:	00194297 	mulseq	r9, r7, r2
 128:	11010000 	mrsne	r0, (UNDEF: 1)
 12c:	130e2501 	movwne	r2, #58625	; 0xe501
 130:	1b0e030b 	blne	380d64 <startup-0x1fc7f29c>
 134:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 138:	00171006 	andseq	r1, r7, r6
 13c:	00240200 	eoreq	r0, r4, r0, lsl #4
 140:	0b3e0b0b 	bleq	f82d74 <startup-0x1f07d28c>
 144:	00000e03 	andeq	r0, r0, r3, lsl #28
 148:	3f012e03 	svccc	0x00012e03
 14c:	3a0e0319 	bcc	380db8 <startup-0x1fc7f248>
 150:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 154:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 158:	97184006 	ldrls	r4, [r8, -r6]
 15c:	13011942 	movwne	r1, #6466	; 0x1942
 160:	05040000 	streq	r0, [r4, #-0]
 164:	3a080300 	bcc	200d6c <startup-0x1fdff294>
 168:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 16c:	00180213 	andseq	r0, r8, r3, lsl r2
 170:	002e0500 	eoreq	r0, lr, r0, lsl #10
 174:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 178:	0b3b0b3a 	bleq	ec2e68 <startup-0x1f13d198>
 17c:	01111927 	tsteq	r1, r7, lsr #18
 180:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 184:	00194297 	mulseq	r9, r7, r2
 188:	11010000 	mrsne	r0, (UNDEF: 1)
 18c:	130e2501 	movwne	r2, #58625	; 0xe501
 190:	1b0e030b 	blne	380dc4 <startup-0x1fc7f23c>
 194:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 198:	00171006 	andseq	r1, r7, r6
 19c:	01130200 	tsteq	r3, r0, lsl #4
 1a0:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
 1a4:	0b3b0b3a 	bleq	ec2e94 <startup-0x1f13d16c>
 1a8:	00001301 	andeq	r1, r0, r1, lsl #6
 1ac:	03000d03 	movweq	r0, #3331	; 0xd03
 1b0:	3b0b3a0e 	blcc	2ce9f0 <startup-0x1fd31610>
 1b4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 1b8:	0400000b 	streq	r0, [r0], #-11
 1bc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 1c0:	0b3b0b3a 	bleq	ec2eb0 <startup-0x1f13d150>
 1c4:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 1c8:	01050000 	mrseq	r0, (UNDEF: 5)
 1cc:	01134901 	tsteq	r3, r1, lsl #18
 1d0:	06000013 			; <UNDEFINED> instruction: 0x06000013
 1d4:	13490021 	movtne	r0, #36897	; 0x9021
 1d8:	00000b2f 	andeq	r0, r0, pc, lsr #22
 1dc:	0b002407 	bleq	9200 <startup-0x1fff6e00>
 1e0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 1e4:	0800000e 	stmdaeq	r0, {r1, r2, r3}
 1e8:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 1ec:	00001301 	andeq	r1, r0, r1, lsl #6
 1f0:	49000509 	stmdbmi	r0, {r0, r3, r8, sl}
 1f4:	0a000013 	beq	248 <startup-0x1ffffdb8>
 1f8:	0b0b000f 	bleq	2c023c <startup-0x1fd3fdc4>
 1fc:	00001349 	andeq	r1, r0, r9, asr #6
 200:	0300160b 	movweq	r1, #1547	; 0x60b
 204:	3b0b3a0e 	blcc	2cea44 <startup-0x1fd315bc>
 208:	0013490b 	andseq	r4, r3, fp, lsl #18
 20c:	00340c00 	eorseq	r0, r4, r0, lsl #24
 210:	0b3a0e03 	bleq	e83a24 <startup-0x1f17c5dc>
 214:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 218:	00001802 	andeq	r1, r0, r2, lsl #16
 21c:	3e01040d 	cdpcc	4, 0, cr0, cr1, cr13, {0}
 220:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 224:	3b0b3a13 	blcc	2cea78 <startup-0x1fd31588>
 228:	0013010b 	andseq	r0, r3, fp, lsl #2
 22c:	00280e00 	eoreq	r0, r8, r0, lsl #28
 230:	0b1c0e03 	bleq	703a44 <startup-0x1f8fc5bc>
 234:	280f0000 	stmdacs	pc, {}	; <UNPREDICTABLE>
 238:	1c080300 	stcne	3, cr0, [r8], {-0}
 23c:	1000000b 	andne	r0, r0, fp
 240:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 244:	0b3b0b3a 	bleq	ec2f34 <startup-0x1f13d0cc>
 248:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 24c:	00001802 	andeq	r1, r0, r2, lsl #16
 250:	3f012e11 	svccc	0x00012e11
 254:	3a0e0319 	bcc	380ec0 <startup-0x1fc7f140>
 258:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 25c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 260:	97184006 	ldrls	r4, [r8, -r6]
 264:	13011942 	movwne	r1, #6466	; 0x1942
 268:	05120000 	ldreq	r0, [r2, #-0]
 26c:	3a0e0300 	bcc	380e74 <startup-0x1fc7f18c>
 270:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 274:	00180213 	andseq	r0, r8, r3, lsl r2
 278:	010b1300 	mrseq	r1, (UNDEF: 59)
 27c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 280:	34140000 	ldrcc	r0, [r4], #-0
 284:	3a080300 	bcc	200e8c <startup-0x1fdff174>
 288:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 28c:	00180213 	andseq	r0, r8, r3, lsl r2
 290:	00241500 	eoreq	r1, r4, r0, lsl #10
 294:	0b3e0b0b 	bleq	f82ec8 <startup-0x1f07d138>
 298:	00000803 	andeq	r0, r0, r3, lsl #16
 29c:	03000516 	movweq	r0, #1302	; 0x516
 2a0:	3b0b3a08 	blcc	2ceac8 <startup-0x1fd31538>
 2a4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 2a8:	17000018 	smladne	r0, r8, r0, r0
 2ac:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2b0:	0b3a0e03 	bleq	e83ac4 <startup-0x1f17c53c>
 2b4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2b8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2bc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 2c0:	00130119 	andseq	r0, r3, r9, lsl r1
 2c4:	002e1800 	eoreq	r1, lr, r0, lsl #16
 2c8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2cc:	0b3b0b3a 	bleq	ec2fbc <startup-0x1f13d044>
 2d0:	01111927 	tsteq	r1, r7, lsr #18
 2d4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2d8:	00194296 	mulseq	r9, r6, r2
 2dc:	002e1900 	eoreq	r1, lr, r0, lsl #18
 2e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2e4:	0b3b0b3a 	bleq	ec2fd4 <startup-0x1f13d02c>
 2e8:	01111927 	tsteq	r1, r7, lsr #18
 2ec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2f0:	00194297 	mulseq	r9, r7, r2
 2f4:	012e1a00 			; <UNDEFINED> instruction: 0x012e1a00
 2f8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2fc:	0b3b0b3a 	bleq	ec2fec <startup-0x1f13d014>
 300:	13491927 	movtne	r1, #39207	; 0x9927
 304:	06120111 			; <UNDEFINED> instruction: 0x06120111
 308:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 30c:	00130119 	andseq	r0, r3, r9, lsl r1
 310:	002e1b00 	eoreq	r1, lr, r0, lsl #22
 314:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 318:	0b3b0b3a 	bleq	ec3008 <startup-0x1f13cff8>
 31c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 320:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 324:	1c000019 	stcne	0, cr0, [r0], {25}
 328:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 32c:	0b3a0e03 	bleq	e83b40 <startup-0x1f17c4c0>
 330:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 334:	06120111 			; <UNDEFINED> instruction: 0x06120111
 338:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 33c:	00000019 	andeq	r0, r0, r9, lsl r0
 340:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 344:	030b130e 	movweq	r1, #45838	; 0xb30e
 348:	110e1b0e 	tstne	lr, lr, lsl #22
 34c:	10061201 	andne	r1, r6, r1, lsl #4
 350:	02000017 	andeq	r0, r0, #23
 354:	0b0b0113 	bleq	2c07a8 <startup-0x1fd3f858>
 358:	0b3b0b3a 	bleq	ec3048 <startup-0x1f13cfb8>
 35c:	00001301 	andeq	r1, r0, r1, lsl #6
 360:	03000d03 	movweq	r0, #3331	; 0xd03
 364:	3b0b3a08 	blcc	2ceb8c <startup-0x1fd31474>
 368:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 36c:	0400000b 	streq	r0, [r0], #-11
 370:	0b0b0024 	bleq	2c0408 <startup-0x1fd3fbf8>
 374:	0e030b3e 	vmoveq.16	d3[0], r0
 378:	16050000 	strne	r0, [r5], -r0
 37c:	3a0e0300 	bcc	380f84 <startup-0x1fc7f07c>
 380:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 384:	06000013 			; <UNDEFINED> instruction: 0x06000013
 388:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 38c:	0b3b0b3a 	bleq	ec307c <startup-0x1f13cf84>
 390:	0b381349 	bleq	e050bc <startup-0x1f1faf44>
 394:	24070000 	strcs	r0, [r7], #-0
 398:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 39c:	0008030b 	andeq	r0, r8, fp, lsl #6
 3a0:	01010800 	tsteq	r1, r0, lsl #16
 3a4:	13011349 	movwne	r1, #4937	; 0x1349
 3a8:	21090000 	mrscs	r0, (UNDEF: 9)
 3ac:	2f134900 	svccs	0x00134900
 3b0:	0a00000b 	beq	3e4 <startup-0x1ffffc1c>
 3b4:	0b0b000f 	bleq	2c03f8 <startup-0x1fd3fc08>
 3b8:	00001349 	andeq	r1, r0, r9, asr #6
 3bc:	0301130b 	movweq	r1, #4875	; 0x130b
 3c0:	3a0b0b0e 	bcc	2c3000 <startup-0x1fd3d000>
 3c4:	010b3b0b 	tsteq	fp, fp, lsl #22
 3c8:	0c000013 	stceq	0, cr0, [r0], {19}
 3cc:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 3d0:	00001301 	andeq	r1, r0, r1, lsl #6
 3d4:	4900050d 	stmdbmi	r0, {r0, r2, r3, r8, sl}
 3d8:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 3dc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 3e0:	0b3a0e03 	bleq	e83bf4 <startup-0x1f17c40c>
 3e4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 3e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3ec:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 3f0:	00130119 	andseq	r0, r3, r9, lsl r1
 3f4:	00050f00 	andeq	r0, r5, r0, lsl #30
 3f8:	0b3a0e03 	bleq	e83c0c <startup-0x1f17c3f4>
 3fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 400:	00001802 	andeq	r1, r0, r2, lsl #16
 404:	3f012e10 	svccc	0x00012e10
 408:	3a0e0319 	bcc	381074 <startup-0x1fc7ef8c>
 40c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 410:	01193c13 	tsteq	r9, r3, lsl ip
 414:	11000013 	tstne	r0, r3, lsl r0
 418:	00000018 	andeq	r0, r0, r8, lsl r0
 41c:	03003412 	movweq	r3, #1042	; 0x412
 420:	3b0b3a0e 	blcc	2cec60 <startup-0x1fd313a0>
 424:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 428:	13000018 	movwne	r0, #24
 42c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 430:	0b3a0e03 	bleq	e83c44 <startup-0x1f17c3bc>
 434:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 438:	0000193c 	andeq	r1, r0, ip, lsr r9
 43c:	03000514 	movweq	r0, #1300	; 0x514
 440:	3b0b3a08 	blcc	2cec68 <startup-0x1fd31398>
 444:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 448:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 44c:	0111010b 	tsteq	r1, fp, lsl #2
 450:	00000612 	andeq	r0, r0, r2, lsl r6
 454:	03003416 	movweq	r3, #1046	; 0x416
 458:	3b0b3a08 	blcc	2cec80 <startup-0x1fd31380>
 45c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 460:	17000018 	smladne	r0, r8, r0, r0
 464:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 468:	0b3a0e03 	bleq	e83c7c <startup-0x1f17c384>
 46c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 470:	06120111 			; <UNDEFINED> instruction: 0x06120111
 474:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 478:	00130119 	andseq	r0, r3, r9, lsl r1
 47c:	002e1800 	eoreq	r1, lr, r0, lsl #16
 480:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 484:	0b3b0b3a 	bleq	ec3174 <startup-0x1f13ce8c>
 488:	06120111 			; <UNDEFINED> instruction: 0x06120111
 48c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 490:	00000019 	andeq	r0, r0, r9, lsl r0
 494:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 498:	030b130e 	movweq	r1, #45838	; 0xb30e
 49c:	110e1b0e 	tstne	lr, lr, lsl #22
 4a0:	10061201 	andne	r1, r6, r1, lsl #4
 4a4:	02000017 	andeq	r0, r0, #23
 4a8:	0b3e0104 	bleq	f808c0 <startup-0x1f07f740>
 4ac:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 4b0:	0b3b0b3a 	bleq	ec31a0 <startup-0x1f13ce60>
 4b4:	00001301 	andeq	r1, r0, r1, lsl #6
 4b8:	03002803 	movweq	r2, #2051	; 0x803
 4bc:	000b1c0e 	andeq	r1, fp, lr, lsl #24
 4c0:	00280400 	eoreq	r0, r8, r0, lsl #8
 4c4:	0b1c0803 	bleq	7024d8 <startup-0x1f8fdb28>
 4c8:	24050000 	strcs	r0, [r5], #-0
 4cc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 4d0:	000e030b 	andeq	r0, lr, fp, lsl #6
 4d4:	002e0600 	eoreq	r0, lr, r0, lsl #12
 4d8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4dc:	0b3b0b3a 	bleq	ec31cc <startup-0x1f13ce34>
 4e0:	01111927 	tsteq	r1, r7, lsr #18
 4e4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4e8:	00194297 	mulseq	r9, r7, r2
 4ec:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
 4f0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4f4:	0b3b0b3a 	bleq	ec31e4 <startup-0x1f13ce1c>
 4f8:	01111927 	tsteq	r1, r7, lsr #18
 4fc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 500:	01194296 			; <UNDEFINED> instruction: 0x01194296
 504:	08000013 	stmdaeq	r0, {r0, r1, r4}
 508:	08030005 	stmdaeq	r3, {r0, r2}
 50c:	0b3b0b3a 	bleq	ec31fc <startup-0x1f13ce04>
 510:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 514:	34090000 	strcc	r0, [r9], #-0
 518:	3a0e0300 	bcc	381120 <startup-0x1fc7eee0>
 51c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 520:	00180213 	andseq	r0, r8, r3, lsl r2
 524:	00240a00 	eoreq	r0, r4, r0, lsl #20
 528:	0b3e0b0b 	bleq	f8315c <startup-0x1f07cea4>
 52c:	00000803 	andeq	r0, r0, r3, lsl #16
 530:	3f002e0b 	svccc	0x00002e0b
 534:	3a0e0319 	bcc	3811a0 <startup-0x1fc7ee60>
 538:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 53c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 540:	96184006 	ldrls	r4, [r8], -r6
 544:	00001942 	andeq	r1, r0, r2, asr #18
 548:	3f012e0c 	svccc	0x00012e0c
 54c:	3a0e0319 	bcc	3811b8 <startup-0x1fc7ee48>
 550:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 554:	11134919 	tstne	r3, r9, lsl r9
 558:	40061201 	andmi	r1, r6, r1, lsl #4
 55c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 560:	00001301 	andeq	r1, r0, r1, lsl #6
 564:	0300340d 	movweq	r3, #1037	; 0x40d
 568:	3b0b3a08 	blcc	2ced90 <startup-0x1fd31270>
 56c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 570:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
 574:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 578:	0b3b0b3a 	bleq	ec3268 <startup-0x1f13cd98>
 57c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 580:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 584:	03193f01 	tsteq	r9, #1, 30
 588:	3b0b3a0e 	blcc	2cedc8 <startup-0x1fd31238>
 58c:	1119270b 	tstne	r9, fp, lsl #14
 590:	40061201 	andmi	r1, r6, r1, lsl #4
 594:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 598:	00001301 	andeq	r1, r0, r1, lsl #6
 59c:	3f012e10 	svccc	0x00012e10
 5a0:	3a0e0319 	bcc	38120c <startup-0x1fc7edf4>
 5a4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 5a8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 5ac:	97184006 	ldrls	r4, [r8, -r6]
 5b0:	00001942 	andeq	r1, r0, r2, asr #18
 5b4:	01110100 	tsteq	r1, r0, lsl #2
 5b8:	0b130e25 	bleq	4c3e54 <startup-0x1fb3c1ac>
 5bc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 5c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5c4:	00001710 	andeq	r1, r0, r0, lsl r7
 5c8:	0b002402 	bleq	95d8 <startup-0x1fff6a28>
 5cc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 5d0:	0300000e 	movweq	r0, #14
 5d4:	13490035 	movtne	r0, #36917	; 0x9035
 5d8:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
 5dc:	03193f01 	tsteq	r9, #1, 30
 5e0:	3b0b3a0e 	blcc	2cee20 <startup-0x1fd311e0>
 5e4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 5e8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 5ec:	97184006 	ldrls	r4, [r8, -r6]
 5f0:	13011942 	movwne	r1, #6466	; 0x1942
 5f4:	34050000 	strcc	r0, [r5], #-0
 5f8:	3a0e0300 	bcc	381200 <startup-0x1fc7ee00>
 5fc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 600:	00180213 	andseq	r0, r8, r3, lsl r2
 604:	010b0600 	tsteq	fp, r0, lsl #12
 608:	06120111 			; <UNDEFINED> instruction: 0x06120111
 60c:	34070000 	strcc	r0, [r7], #-0
 610:	3a080300 	bcc	201218 <startup-0x1fdfede8>
 614:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 618:	00180213 	andseq	r0, r8, r3, lsl r2
 61c:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
 620:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 624:	0b3b0b3a 	bleq	ec3314 <startup-0x1f13ccec>
 628:	01111927 	tsteq	r1, r7, lsr #18
 62c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 630:	01194297 			; <UNDEFINED> instruction: 0x01194297
 634:	09000013 	stmdbeq	r0, {r0, r1, r4}
 638:	08030005 	stmdaeq	r3, {r0, r2}
 63c:	0b3b0b3a 	bleq	ec332c <startup-0x1f13ccd4>
 640:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 644:	010a0000 	mrseq	r0, (UNDEF: 10)
 648:	01134901 	tsteq	r3, r1, lsl #18
 64c:	0b000013 	bleq	6a0 <startup-0x1ffff960>
 650:	13490021 	movtne	r0, #36897	; 0x9021
 654:	00000b2f 	andeq	r0, r0, pc, lsr #22
 658:	3f002e0c 	svccc	0x00002e0c
 65c:	3a0e0319 	bcc	3812c8 <startup-0x1fc7ed38>
 660:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 664:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 668:	97184006 	ldrls	r4, [r8, -r6]
 66c:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000158 	andeq	r0, r0, r8, asr r1
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	039f0002 	orrseq	r0, pc, #2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000168 	andcs	r0, r0, r8, ror #2
  3c:	0000006e 	andeq	r0, r0, lr, rrx
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	043b0002 	ldrteq	r0, [fp], #-2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200001d8 	ldrdcs	r0, [r0], -r8
  5c:	00000888 	andeq	r0, r0, r8, lsl #17
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	08bd0002 	ldmfdeq	sp!, {r1}
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000a60 	andcs	r0, r0, r0, ror #20
  7c:	0000020a 	andeq	r0, r0, sl, lsl #4
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	0c580002 	mrrceq	0, 0, r0, r8, cr2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000c6c 	andcs	r0, r0, ip, ror #24
  9c:	000002a8 	andeq	r0, r0, r8, lsr #5
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	0e890002 	cdpeq	0, 8, cr0, cr9, cr2, {0}
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000f14 	andcs	r0, r0, r4, lsl pc
  bc:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000168 	andcs	r0, r0, r8, ror #2
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000c7 	andeq	r0, r0, r7, asr #1
   4:	00670002 	rsbeq	r0, r7, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	756d6173 	strbvc	r6, [sp, #-371]!	; 0xfffffe8d
  28:	6f442f65 	svcvs	0x00442f65
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	4c706f4d 	ldclmi	15, cr6, [r0], #-308	; 0xfffffecc
  38:	4d2f6261 	sfmmi	f6, 4, [pc, #-388]!	; fffffebc <paddle+0xdfffdfd0>
  3c:	6570706f 	ldrbvs	r7, [r0, #-111]!	; 0xffffff91
  40:	7300006e 	movwvc	r0, #110	; 0x6e
  44:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  48:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  4c:	00000100 	andeq	r0, r0, r0, lsl #2
  50:	5f64636c 	svcpl	0x0064636c
  54:	76697264 	strbtvc	r7, [r9], -r4, ror #4
  58:	2e737265 	cdpcs	2, 7, cr7, cr3, cr5, {3}
  5c:	00010068 	andeq	r0, r1, r8, rrx
  60:	6e6f7000 	cdpvs	0, 6, cr7, cr15, cr0, {0}
  64:	676f6c67 	strbvs	r6, [pc, -r7, ror #24]!
  68:	682e6369 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sp, lr}
  6c:	00000100 	andeq	r0, r0, r0, lsl #2
  70:	02050000 	andeq	r0, r5, #0
  74:	20000000 	andcs	r0, r0, r0
  78:	025e1319 	subseq	r1, lr, #1677721600	; 0x64000000
  7c:	01010003 	tsteq	r1, r3
  80:	10020500 	andne	r0, r2, r0, lsl #10
  84:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  88:	2f5e013d 	svccs	0x005e013d
  8c:	2f914c2f 	svccs	0x00914c2f
  90:	4b4c7321 	blmi	131cd1c <startup-0x1ece32e4>
  94:	73212f91 			; <UNDEFINED> instruction: 0x73212f91
  98:	34312f4f 	ldrtcc	r2, [r1], #-3919	; 0xfffff0b1
  9c:	59592f77 	ldmdbpl	r9, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, sp}^
  a0:	672f2f2f 	strvs	r2, [pc, -pc, lsr #30]!
  a4:	67760867 	ldrbvs	r0, [r6, -r7, ror #16]!
  a8:	01040200 	mrseq	r0, R12_usr
  ac:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
  b0:	02004b01 	andeq	r4, r0, #1024	; 0x400
  b4:	004b0104 	subeq	r0, fp, r4, lsl #2
  b8:	4b010402 	blmi	410c8 <startup-0x1ffbef38>
  bc:	01040200 	mrseq	r0, R12_usr
  c0:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
  c4:	0a023801 	beq	8e0d0 <startup-0x1ff71f30>
  c8:	6e010100 	adfvss	f0, f1, f0
  cc:	02000000 	andeq	r0, r0, #0
  d0:	00004500 	andeq	r4, r0, r0, lsl #10
  d4:	fb010200 	blx	408de <startup-0x1ffbf722>
  d8:	01000d0e 	tsteq	r0, lr, lsl #26
  dc:	00010101 	andeq	r0, r1, r1, lsl #2
  e0:	00010000 	andeq	r0, r1, r0
  e4:	3a430100 	bcc	10c04ec <startup-0x1ef3fb14>
  e8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
  ec:	732f7372 			; <UNDEFINED> instruction: 0x732f7372
  f0:	65756d61 	ldrbvs	r6, [r5, #-3425]!	; 0xfffff29f
  f4:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
  f8:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
  fc:	4d2f7374 	stcmi	3, cr7, [pc, #-464]!	; ffffff34 <paddle+0xdfffe048>
 100:	614c706f 	cmpvs	ip, pc, rrx
 104:	6f4d2f62 	svcvs	0x004d2f62
 108:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
 10c:	65640000 	strbvs	r0, [r4, #-0]!
 110:	2e79616c 	rpwcsez	f6, f1, #4.0
 114:	00010063 	andeq	r0, r1, r3, rrx
 118:	05000000 	streq	r0, [r0, #-0]
 11c:	00016802 	andeq	r6, r1, r2, lsl #16
 120:	3d2f1620 	stccc	6, cr1, [pc, #-128]!	; a8 <startup-0x1fffff58>
 124:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
 128:	06010402 	streq	r0, [r1], -r2, lsl #8
 12c:	3d680620 	stclcc	6, cr0, [r8, #-128]!	; 0xffffff80
 130:	2e0a03a0 	cdpcs	3, 0, cr0, cr10, cr0, {5}
 134:	4f4c513e 	svcmi	0x004c513e
 138:	01000402 	tsteq	r0, r2, lsl #8
 13c:	00018801 	andeq	r8, r1, r1, lsl #16
 140:	6d000200 	sfmvs	f0, 4, [r0, #-0]
 144:	02000000 	andeq	r0, r0, #0
 148:	0d0efb01 	vstreq	d15, [lr, #-4]
 14c:	01010100 	mrseq	r0, (UNDEF: 17)
 150:	00000001 	andeq	r0, r0, r1
 154:	01000001 	tsteq	r0, r1
 158:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff71d <paddle+0xdfffd831>
 15c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 160:	6d61732f 	stclvs	3, cr7, [r1, #-188]!	; 0xffffff44
 164:	442f6575 	strtmi	r6, [pc], #-1397	; 16c <startup-0x1ffffe94>
 168:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 16c:	73746e65 	cmnvc	r4, #1616	; 0x650
 170:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 174:	2f62614c 	svccs	0x0062614c
 178:	70706f4d 	rsbsvc	r6, r0, sp, asr #30
 17c:	00006e65 	andeq	r6, r0, r5, ror #28
 180:	5f64636c 	svcpl	0x0064636c
 184:	76697264 	strbtvc	r7, [r9], -r4, ror #4
 188:	2e737265 	cdpcs	2, 7, cr7, cr3, cr5, {3}
 18c:	00010063 	andeq	r0, r1, r3, rrx
 190:	64636c00 	strbtvs	r6, [r3], #-3072	; 0xfffff400
 194:	6972645f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, sp, lr}^
 198:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 19c:	0100682e 	tsteq	r0, lr, lsr #16
 1a0:	6f700000 	svcvs	0x00700000
 1a4:	65447472 	strbvs	r7, [r4, #-1138]	; 0xfffffb8e
 1a8:	72616c63 	rsbvc	r6, r1, #25344	; 0x6300
 1ac:	00682e65 	rsbeq	r2, r8, r5, ror #28
 1b0:	00000001 	andeq	r0, r0, r1
 1b4:	d8020500 	stmdale	r2, {r8, sl}
 1b8:	1a200001 	bne	8001c4 <startup-0x1f7ffe3c>
 1bc:	7a037a67 	bvc	deb60 <startup-0x1ff214a0>
 1c0:	911b5020 	tstls	fp, r0, lsr #32
 1c4:	7692d7d7 			; <UNDEFINED> instruction: 0x7692d7d7
 1c8:	ad3d832f 	ldcge	3, cr8, [sp, #-188]!	; 0xffffff44
 1cc:	83212f2f 			; <UNDEFINED> instruction: 0x83212f2f
 1d0:	2f832f2f 	svccs	0x00832f2f
 1d4:	6e2e7a03 	vmulvs.f32	s14, s28, s6
 1d8:	67bc3d83 	ldrvs	r3, [ip, r3, lsl #27]!
 1dc:	59833d83 	stmibpl	r3, {r0, r1, r7, r8, sl, fp, ip, sp}
 1e0:	2f832f2f 	svccs	0x00832f2f
 1e4:	3d83592f 	vstrcc.16	s10, [r3, #94]	; 0x5e	; <UNPREDICTABLE>
 1e8:	59303d59 	ldmdbpl	r0!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
 1ec:	e63d313d 			; <UNDEFINED> instruction: 0xe63d313d
 1f0:	2f594b91 	svccs	0x00594b91
 1f4:	2f2f832f 	svccs	0x002f832f
 1f8:	303d5983 	eorscc	r5, sp, r3, lsl #19
 1fc:	3d303d59 	ldccc	13, cr3, [r0, #-356]!	; 0xfffffe9c
 200:	91843d83 	orrls	r3, r4, r3, lsl #27
 204:	83835983 	orrhi	r5, r3, #2146304	; 0x20c000
 208:	59839168 	stmibpl	r3, {r3, r5, r6, r8, ip, pc}
 20c:	677683ad 	ldrbvs	r8, [r6, -sp, lsr #7]!
 210:	2f4c6759 	svccs	0x004c6759
 214:	832f843d 			; <UNDEFINED> instruction: 0x832f843d
 218:	83863e84 	orrhi	r3, r6, #132, 28	; 0x840
 21c:	4b4b4b4b 	blmi	12d2f50 <startup-0x1ed2d0b0>
 220:	3d683d4b 	stclcc	13, cr3, [r8, #-300]!	; 0xfffffed4
 224:	004bad3d 	subeq	sl, fp, sp, lsr sp
 228:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 22c:	03040200 	movweq	r0, #16896	; 0x4200
 230:	04020049 	streq	r0, [r2], #-73	; 0xffffffb7
 234:	003c0601 	eorseq	r0, ip, r1, lsl #12
 238:	06020402 	streq	r0, [r2], -r2, lsl #8
 23c:	04020039 	streq	r0, [r2], #-57	; 0xffffffc7
 240:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 244:	59e54c43 	stmibpl	r5!, {r0, r1, r6, sl, fp, lr}^
 248:	9114085a 	tstls	r4, sl, asr r8
 24c:	5a4b5b4b 	bpl	12d6f80 <startup-0x1ed29080>
 250:	ad91d7bb 	ldcge	7, cr13, [r1, #748]	; 0x2ec
 254:	03d8a14b 	bicseq	sl, r8, #-1073741806	; 0xc0000012
 258:	1403ac6d 	strne	sl, [r3], #-3181	; 0xfffff393
 25c:	594f3e20 	stmdbpl	pc, {r5, r9, sl, fp, ip, sp}^	; <UNPREDICTABLE>
 260:	4b750859 	blmi	1d423cc <startup-0x1e2bdc34>
 264:	4b774b59 	blmi	1dd2fd0 <startup-0x1e22d030>
 268:	bbc9c976 	bllt	ff272848 <paddle+0xdf27095c>
 26c:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
 270:	08710302 	ldmdaeq	r1!, {r1, r8, r9}^
 274:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
 278:	00660601 	rsbeq	r0, r6, r1, lsl #12
 27c:	06020402 	streq	r0, [r2], -r2, lsl #8
 280:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
 284:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 288:	4c741503 	cfldr64mi	mvdx1, [r4], #-12
 28c:	4b1408f4 	blmi	502664 <startup-0x1fafd99c>
 290:	4b914c5b 	blmi	fe453404 <paddle+0xde451518>
 294:	084b6808 	stmdaeq	fp, {r3, fp, sp, lr}^
 298:	087203ae 	ldmdaeq	r2!, {r1, r2, r3, r5, r7, r8, r9}^
 29c:	200f03ac 	andcs	r0, pc, ip, lsr #7
 2a0:	4b3c0b03 	blmi	f02eb4 <startup-0x1f0fd14c>
 2a4:	0200833d 	andeq	r8, r0, #-201326592	; 0xf4000000
 2a8:	003d0304 	eorseq	r0, sp, r4, lsl #6
 2ac:	81030402 	tsthi	r3, r2, lsl #8
 2b0:	01040200 	mrseq	r0, R12_usr
 2b4:	02003c06 	andeq	r3, r0, #1536	; 0x600
 2b8:	3a060204 	bcc	180ad0 <startup-0x1fe7f530>
 2bc:	01040200 	mrseq	r0, R12_usr
 2c0:	42063c06 	andmi	r3, r6, #1536	; 0x600
 2c4:	01000402 	tsteq	r0, r2, lsl #8
 2c8:	0000bb01 	andeq	fp, r0, r1, lsl #22
 2cc:	58000200 	stmdapl	r0, {r9}
 2d0:	02000000 	andeq	r0, r0, #0
 2d4:	0d0efb01 	vstreq	d15, [lr, #-4]
 2d8:	01010100 	mrseq	r0, (UNDEF: 17)
 2dc:	00000001 	andeq	r0, r0, r1
 2e0:	01000001 	tsteq	r0, r1
 2e4:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff8a9 <paddle+0xdfffd9bd>
 2e8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 2ec:	6d61732f 	stclvs	3, cr7, [r1, #-188]!	; 0xffffff44
 2f0:	442f6575 	strtmi	r6, [pc], #-1397	; 2f8 <startup-0x1ffffd08>
 2f4:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 2f8:	73746e65 	cmnvc	r4, #1616	; 0x650
 2fc:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 300:	2f62614c 	svccs	0x0062614c
 304:	70706f4d 	rsbsvc	r6, r0, sp, asr #30
 308:	00006e65 	andeq	r6, r0, r5, ror #28
 30c:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 310:	69676f6c 	stmdbvs	r7!, {r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 314:	00632e63 	rsbeq	r2, r3, r3, ror #28
 318:	70000001 	andvc	r0, r0, r1
 31c:	6c676e6f 	stclvs	14, cr6, [r7], #-444	; 0xfffffe44
 320:	6369676f 	cmnvs	r9, #29097984	; 0x1bc0000
 324:	0100682e 	tsteq	r0, lr, lsr #16
 328:	00000000 	andeq	r0, r0, r0
 32c:	0a600205 	beq	1800b48 <startup-0x1e7ff4b8>
 330:	30192000 	andscc	r2, r9, r0
 334:	3d3d673e 	ldccc	7, cr6, [sp, #-248]!	; 0xffffff08
 338:	3d3d674c 	ldccc	7, cr6, [sp, #-304]!	; 0xfffffed0
 33c:	02004b4c 	andeq	r4, r0, #76, 22	; 0x13000
 340:	003d0304 	eorseq	r0, sp, r4, lsl #6
 344:	bb030402 	bllt	c1354 <startup-0x1ff3ecac>
 348:	03040200 	movweq	r0, #16896	; 0x4200
 34c:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
 350:	02006303 	andeq	r6, r0, #201326592	; 0xc000000
 354:	3c060104 	stfccs	f0, [r6], {4}
 358:	4b4c6b06 	blmi	131af78 <startup-0x1ece5088>
 35c:	03040200 	movweq	r0, #16896	; 0x4200
 360:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 364:	008f0803 	addeq	r0, pc, r3, lsl #16
 368:	06010402 	streq	r0, [r1], -r2, lsl #8
 36c:	4c69063c 	stclmi	6, cr0, [r9], #-240	; 0xffffff10
 370:	75754b4b 	ldrbvc	r4, [r5, #-2891]!	; 0xfffff4b5
 374:	085a2108 	ldmdaeq	sl, {r3, r8, sp}^
 378:	4c4b5a21 	mcrrmi	10, 2, r5, fp, cr1
 37c:	c9912f75 	ldmibgt	r1, {r0, r2, r4, r5, r6, r8, r9, sl, fp, sp}
 380:	022f599f 	eoreq	r5, pc, #2605056	; 0x27c000
 384:	01010004 	tsteq	r1, r4
 388:	000000c6 	andeq	r0, r0, r6, asr #1
 38c:	005e0002 	subseq	r0, lr, r2
 390:	01020000 	mrseq	r0, (UNDEF: 2)
 394:	000d0efb 	strdeq	r0, [sp], -fp
 398:	01010101 	tsteq	r1, r1, lsl #2
 39c:	01000000 	mrseq	r0, (UNDEF: 0)
 3a0:	43010000 	movwmi	r0, #4096	; 0x1000
 3a4:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 3a8:	2f737265 	svccs	0x00737265
 3ac:	756d6173 	strbvc	r6, [sp, #-371]!	; 0xfffffe8d
 3b0:	6f442f65 	svcvs	0x00442f65
 3b4:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 3b8:	2f73746e 	svccs	0x0073746e
 3bc:	4c706f4d 	ldclmi	15, cr6, [r0], #-308	; 0xfffffecc
 3c0:	4d2f6261 	sfmmi	f6, 4, [pc, #-388]!	; 244 <startup-0x1ffffdbc>
 3c4:	6570706f 	ldrbvs	r7, [r0, #-111]!	; 0xffffff91
 3c8:	6100006e 	tstvs	r0, lr, rrx
 3cc:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 3d0:	6972645f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, sp, lr}^
 3d4:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 3d8:	0100632e 	tsteq	r0, lr, lsr #6
 3dc:	6f700000 	svcvs	0x00700000
 3e0:	65447472 	strbvs	r7, [r4, #-1138]	; 0xfffffb8e
 3e4:	72616c63 	rsbvc	r6, r1, #25344	; 0x6300
 3e8:	00682e65 	rsbeq	r2, r8, r5, ror #28
 3ec:	00000001 	andeq	r0, r0, r1
 3f0:	6c020500 	cfstr32vs	mvfx0, [r2], {-0}
 3f4:	1720000c 	strne	r0, [r0, -ip]!
 3f8:	59bb5969 	ldmibpl	fp!, {r0, r3, r5, r6, r8, fp, ip, lr}
 3fc:	e5596868 	ldrb	r6, [r9, #-2152]	; 0xfffff798
 400:	2f67684b 	svccs	0x0067684b
 404:	673d4c3d 			; <UNDEFINED> instruction: 0x673d4c3d
 408:	3d4b3f3d 	stclcc	15, cr3, [fp, #-244]	; 0xffffff0c
 40c:	3d67762f 	stclcc	6, cr7, [r7, #-188]!	; 0xffffff44
 410:	674c593d 	smlaldxvs	r5, ip, sp, r9
 414:	4c593d3d 	mrrcmi	13, 3, r3, r9, cr13
 418:	413d673d 	teqmi	sp, sp, lsr r7
 41c:	3d922f67 	ldccc	15, cr2, [r2, #412]	; 0x19c
 420:	593d3d67 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}
 424:	2f842f67 	svccs	0x00842f67
 428:	01040200 	mrseq	r0, R12_usr
 42c:	84062006 	strhi	r2, [r6], #-6
 430:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 434:	3e3d3d3d 	mrccc	13, 1, r3, cr13, cr13, {1}
 438:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 43c:	06200601 	strteq	r0, [r0], -r1, lsl #12
 440:	3d593d83 	ldclcc	13, cr3, [r9, #-524]	; 0xfffffdf4
 444:	9f75594c 	svcls	0x0075594c
 448:	3d3d2f4c 	ldccc	15, cr2, [sp, #-304]!	; 0xfffffed0
 44c:	000c023e 	andeq	r0, ip, lr, lsr r2
 450:	00b50101 	adcseq	r0, r5, r1, lsl #2
 454:	00020000 	andeq	r0, r2, r0
 458:	0000004e 	andeq	r0, r0, lr, asr #32
 45c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 460:	0101000d 	tsteq	r1, sp
 464:	00000101 	andeq	r0, r0, r1, lsl #2
 468:	00000100 	andeq	r0, r0, r0, lsl #2
 46c:	2f3a4301 	svccs	0x003a4301
 470:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 474:	61732f73 	cmnvs	r3, r3, ror pc
 478:	2f65756d 	svccs	0x0065756d
 47c:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 480:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 484:	6f4d2f73 	svcvs	0x004d2f73
 488:	62614c70 	rsbvs	r4, r1, #112, 24	; 0x7000
 48c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 490:	006e6570 	rsbeq	r6, lr, r0, ror r5
 494:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 498:	5f646170 	svcpl	0x00646170
 49c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
 4a0:	2e737265 	cdpcs	2, 7, cr7, cr3, cr5, {3}
 4a4:	00010063 	andeq	r0, r1, r3, rrx
 4a8:	05000000 	streq	r0, [r0, #-0]
 4ac:	000f1402 	andeq	r1, pc, r2, lsl #8
 4b0:	3d321720 	ldccc	7, cr1, [r2, #-128]!	; 0xffffff80
 4b4:	ca4d3d3d 	bgt	134f9b0 <startup-0x1ecb0650>
 4b8:	59684b3e 	stmdbpl	r8!, {r1, r2, r3, r4, r5, r8, r9, fp, lr}^
 4bc:	4c844b83 	fstmiaxmi	r4, {d4-d68}	;@ Deprecated
 4c0:	6a646721 	bvs	191a14c <startup-0x1e6e5eb4>
 4c4:	02040200 	andeq	r0, r4, #0, 4
 4c8:	00ac7503 	adceq	r7, ip, r3, lsl #10
 4cc:	06010402 	streq	r0, [r1], -r2, lsl #8
 4d0:	0f030666 	svceq	0x00030666
 4d4:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 4d8:	67a02101 	strvs	r2, [r0, r1, lsl #2]!
 4dc:	3e766779 	mrccc	7, 3, r6, cr6, cr9, {3}
 4e0:	02003d3d 	andeq	r3, r0, #3904	; 0xf40
 4e4:	004b0304 	subeq	r0, fp, r4, lsl #6
 4e8:	67030402 	strvs	r0, [r3, -r2, lsl #8]
 4ec:	03040200 	movweq	r0, #16896	; 0x4200
 4f0:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 4f4:	02008303 	andeq	r8, r0, #201326592	; 0xc000000
 4f8:	00fc0304 	rscseq	r0, ip, r4, lsl #6
 4fc:	06010402 	streq	r0, [r1], -r2, lsl #8
 500:	10030658 	andne	r0, r3, r8, asr r6
 504:	09022f4a 	stmdbeq	r2, {r1, r3, r6, r8, r9, sl, fp, sp}
 508:	Address 0x00000508 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
   4:	00707574 	rsbseq	r7, r0, r4, ror r5
   8:	6a626f70 	bvs	189bdd0 <startup-0x1e764230>
   c:	00746365 	rsbseq	r6, r4, r5, ror #6
  10:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  14:	00317265 	eorseq	r7, r1, r5, ror #4
  18:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
  1c:	72610074 	rsbvc	r0, r1, #116	; 0x74
  20:	64007667 	strvs	r7, [r0], #-1639	; 0xfffff999
  24:	00787269 	rsbseq	r7, r8, r9, ror #4
  28:	79726964 	ldmdbvc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
  2c:	6c616200 	sfmvs	f6, 2, [r1], #-0
  30:	4e47006c 	cdpmi	0, 4, cr0, cr7, cr12, {3}
  34:	39432055 	stmdbcc	r3, {r0, r2, r4, r6, sp}^
  38:	2e372039 	mrccs	0, 1, r2, cr7, cr9, {1}
  3c:	20312e32 	eorscs	r2, r1, r2, lsr lr
  40:	37313032 			; <UNDEFINED> instruction: 0x37313032
  44:	34303930 	ldrtcc	r3, [r0], #-2352	; 0xfffff6d0
  48:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  4c:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  50:	5b202965 	blpl	80a5ec <startup-0x1f7f5a14>
  54:	2f4d5241 	svccs	0x004d5241
  58:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  5c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  60:	622d372d 	eorvs	r3, sp, #11796480	; 0xb40000
  64:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  68:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  6c:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  70:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  74:	30323535 	eorscc	r3, r2, r5, lsr r5
  78:	2d205d34 	stccs	13, cr5, [r0, #-208]!	; 0xffffff30
  7c:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
  80:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
  84:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
  88:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
  8c:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
  90:	6d2d206d 	stcvs	0, cr2, [sp, #-436]!	; 0xfffffe4c
  94:	616f6c66 	cmnvs	pc, r6, ror #24
  98:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
  9c:	6f733d69 	svcvs	0x00733d69
  a0:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
  a4:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
  a8:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
  ac:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
  b0:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
  b4:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
  b8:	672d206d 	strvs	r2, [sp, -sp, rrx]!
  bc:	304f2d20 	subcc	r2, pc, r0, lsr #26
  c0:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
  c4:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
  c8:	6e750039 	mrcvs	0, 3, r0, cr5, cr9, {1}
  cc:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
  d0:	63206465 			; <UNDEFINED> instruction: 0x63206465
  d4:	00726168 	rsbseq	r6, r2, r8, ror #2
  d8:	555c3a43 	ldrbpl	r3, [ip, #-2627]	; 0xfffff5bd
  dc:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
  e0:	6d61735c 	stclvs	3, cr7, [r1, #-368]!	; 0xfffffe90
  e4:	445c6575 	ldrbmi	r6, [ip], #-1397	; 0xfffffa8b
  e8:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
  ec:	73746e65 	cmnvc	r4, #1616	; 0x650
  f0:	706f4d5c 	rsbvc	r4, pc, ip, asr sp	; <UNPREDICTABLE>
  f4:	5c62614c 	stfple	f6, [r2], #-304	; 0xfffffed0
  f8:	70706f4d 	rsbsvc	r6, r0, sp, asr #30
  fc:	73006e65 	movwvc	r6, #3685	; 0xe65
 100:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
 104:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 108:	736f7000 	cmnvc	pc, #0
 10c:	6f700078 	svcvs	0x00700078
 110:	62007973 	andvs	r7, r0, #1884160	; 0x1cc000
 114:	5f6c6c61 	svcpl	0x006c6c61
 118:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; ffffff84 <paddle+0xdfffe098>
 11c:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 120:	64617000 	strbtvs	r7, [r1], #-0
 124:	5f656c64 	svcpl	0x00656c64
 128:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; ffffff94 <paddle+0xdfffe0a8>
 12c:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 130:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 134:	6c70006e 	ldclvs	0, cr0, [r0], #-440	; 0xfffffe48
 138:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
 13c:	69730032 	ldmdbvs	r3!, {r1, r4, r5}^
 140:	0078657a 	rsbseq	r6, r8, sl, ror r5
 144:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 148:	72610079 	rsbvc	r0, r1, #121	; 0x79
 14c:	74006367 	strvc	r6, [r0], #-871	; 0xfffffc99
 150:	7562706d 	strbvc	r7, [r2, #-109]!	; 0xffffff93
 154:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 158:	61726400 	cmnvs	r2, r0, lsl #8
 15c:	3a430077 	bcc	10c0340 <startup-0x1ef3fcc0>
 160:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 164:	732f7372 			; <UNDEFINED> instruction: 0x732f7372
 168:	65756d61 	ldrbvs	r6, [r5, #-3425]!	; 0xfffff29f
 16c:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 170:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 174:	4d2f7374 	stcmi	3, cr7, [pc, #-464]!	; ffffffac <paddle+0xdfffe0c0>
 178:	614c706f 	cmpvs	ip, pc, rrx
 17c:	6f4d2f62 	svcvs	0x004d2f62
 180:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
 184:	6174732f 	cmnvs	r4, pc, lsr #6
 188:	70757472 	rsbsvc	r7, r5, r2, ror r4
 18c:	6d00632e 	stcvs	3, cr6, [r0, #-184]	; 0xffffff48
 190:	0065766f 	rsbeq	r7, r5, pc, ror #12
 194:	6f635370 	svcvs	0x00635370
 198:	73006572 	movwvc	r6, #1394	; 0x572
 19c:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
 1a0:	73003167 	movwvc	r3, #359	; 0x167
 1a4:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
 1a8:	70003267 	andvc	r3, r0, r7, ror #4
 1ac:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 1b0:	4f740065 	svcmi	0x00740065
 1b4:	6e006a62 	vmlsvs.f32	s12, s0, s5
 1b8:	6f706d75 	svcvs	0x00706d75
 1bc:	73746e69 	cmnvc	r4, #1680	; 0x690
 1c0:	65677000 	strbvs	r7, [r7, #-0]!
 1c4:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 1c8:	43007972 	movwmi	r7, #2418	; 0x972
 1cc:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 1d0:	2f737265 	svccs	0x00737265
 1d4:	756d6173 	strbvc	r6, [sp, #-371]!	; 0xfffffe8d
 1d8:	6f442f65 	svcvs	0x00442f65
 1dc:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 1e0:	2f73746e 	svccs	0x0073746e
 1e4:	4c706f4d 	ldclmi	15, cr6, [r0], #-308	; 0xfffffecc
 1e8:	4d2f6261 	sfmmi	f6, 4, [pc, #-388]!	; 6c <startup-0x1fffff94>
 1ec:	6570706f 	ldrbvs	r7, [r0, #-111]!	; 0xffffff91
 1f0:	65642f6e 	strbvs	r2, [r4, #-3950]!	; 0xfffff092
 1f4:	2e79616c 	rpwcsez	f6, f1, #4.0
 1f8:	65640063 	strbvs	r0, [r4, #-99]!	; 0xffffff9d
 1fc:	5f79616c 	svcpl	0x0079616c
 200:	726b696d 	rsbvc	r6, fp, #1785856	; 0x1b4000
 204:	6564006f 	strbvs	r0, [r4, #-111]!	; 0xffffff91
 208:	5f79616c 	svcpl	0x0079616c
 20c:	736e3034 	cmnvc	lr, #52	; 0x34
 210:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 214:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 15a <startup-0x1ffffea6>	; <UNPREDICTABLE>
 218:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 21c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 220:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 224:	736e3035 	cmnvc	lr, #53	; 0x35
 228:	435f4200 	cmpmi	pc, #0, 4
 22c:	62003253 	andvs	r3, r0, #805306373	; 0x30000005
 230:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 234:	6c635f72 	stclvs	15, cr5, [r3], #-456	; 0xfffffe38
 238:	00726165 	rsbseq	r6, r2, r5, ror #2
 23c:	66667562 	strbtvs	r7, [r6], -r2, ror #10
 240:	635f7265 	cmpvs	pc, #1342177286	; 0x50000006
 244:	676e6168 	strbvs	r6, [lr, -r8, ror #2]!
 248:	676f4c65 	strbvs	r4, [pc, -r5, ror #24]!
 24c:	64707500 	ldrbtvs	r7, [r0], #-1280	; 0xfffffb00
 250:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
 254:	61726700 	cmnvs	r2, r0, lsl #14
 258:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 25c:	6165725f 	cmnvs	r5, pc, asr r2
 260:	61645f64 	cmnvs	r4, r4, ror #30
 264:	62006174 	andvs	r6, r0, #116, 2
 268:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 26c:	69645f72 	stmdbvs	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 270:	616c7073 	smcvs	50947	; 0xc703
 274:	6c700079 	ldclvs	0, cr0, [r0], #-484	; 0xfffffe1c
 278:	75426463 	strbvc	r6, [r2, #-1123]	; 0xfffffb9d
 27c:	67006666 	strvs	r6, [r0, -r6, ror #12]
 280:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 284:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 288:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
 28c:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 290:	006e6565 	rsbeq	r6, lr, r5, ror #10
 294:	57525f42 	ldrbpl	r5, [r2, -r2, asr #30]
 298:	61726700 	cmnvs	r2, r0, lsl #14
 29c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2a0:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 2a4:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
 2a8:	00706d65 	rsbseq	r6, r0, r5, ror #26
 2ac:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 2b0:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
 2b4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 2b8:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 2bc:	3a430072 	bcc	10c048c <startup-0x1ef3fb74>
 2c0:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 2c4:	732f7372 			; <UNDEFINED> instruction: 0x732f7372
 2c8:	65756d61 	ldrbvs	r6, [r5, #-3425]!	; 0xfffff29f
 2cc:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 2d0:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 2d4:	4d2f7374 	stcmi	3, cr7, [pc, #-464]!	; 10c <startup-0x1ffffef4>
 2d8:	614c706f 	cmpvs	ip, pc, rrx
 2dc:	6f4d2f62 	svcvs	0x004d2f62
 2e0:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
 2e4:	64636c2f 	strbtvs	r6, [r3], #-3119	; 0xfffff3d1
 2e8:	6972645f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, sp, lr}^
 2ec:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 2f0:	4200632e 	andmi	r6, r0, #-1207959552	; 0xb8000000
 2f4:	5453525f 	ldrbpl	r5, [r3], #-607	; 0xfffffda1
 2f8:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 2fc:	636c5f74 	cmnvs	ip, #116, 30	; 0x1d0
 300:	636c0064 	cmnvs	ip, #100	; 0x64
 304:	66754264 	ldrbtvs	r4, [r5], -r4, ror #4
 308:	44726566 	ldrbtmi	r6, [r2], #-1382	; 0xfffffa9a
 30c:	00776172 	rsbseq	r6, r7, r2, ror r1
 310:	70617267 	rsbvc	r7, r1, r7, ror #4
 314:	5f636968 	svcpl	0x00636968
 318:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
 31c:	5f42006c 	svcpl	0x0042006c
 320:	70005352 	andvc	r5, r0, r2, asr r3
 324:	4264636c 	rsbmi	r6, r4, #108, 6	; 0xb0000001
 328:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 32c:	5f420072 	svcpl	0x00420072
 330:	00315343 	eorseq	r5, r1, r3, asr #6
 334:	45535f42 	ldrbmi	r5, [r3, #-3906]	; 0xfffff0be
 338:	5443454c 	strbpl	r4, [r3], #-1356	; 0xfffffab4
 33c:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 340:	67007865 	strvs	r7, [r0, -r5, ror #16]
 344:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 348:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 34c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 350:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 354:	636c0061 	cmnvs	ip, #97	; 0x61
 358:	66754264 	ldrbtvs	r4, [r5], -r4, ror #4
 35c:	57726566 	ldrbpl	r6, [r2, -r6, ror #10]!
 360:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 364:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 368:	7267006c 	rsbvc	r0, r7, #108	; 0x6c
 36c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 370:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 374:	67006461 	strvs	r6, [r0, -r1, ror #8]
 378:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 37c:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 380:	5f746961 	svcpl	0x00746961
 384:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 388:	72670079 	rsbvc	r0, r7, #121	; 0x79
 38c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 390:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 394:	5f657469 	svcpl	0x00657469
 398:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 39c:	00646e61 	rsbeq	r6, r4, r1, ror #28
 3a0:	72446f74 	subvc	r6, r4, #116, 30	; 0x1d0
 3a4:	67007761 	strvs	r7, [r0, -r1, ror #14]
 3a8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 3ac:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 3b0:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 3b4:	7a696c61 	bvc	1a5b540 <startup-0x1e5a4ac0>
 3b8:	6f700065 	svcvs	0x00700065
 3bc:	695f676e 	ldmdbvs	pc, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^	; <UNPREDICTABLE>
 3c0:	705f636e 	subsvc	r6, pc, lr, ror #6
 3c4:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
 3c8:	6f635372 	svcvs	0x00635372
 3cc:	70006572 	andvc	r6, r0, r2, ror r5
 3d0:	5f676e6f 	svcpl	0x00676e6f
 3d4:	5f746573 	svcpl	0x00746573
 3d8:	69736f70 	ldmdbvs	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 3dc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 3e0:	63736100 	cmnvs	r3, #0, 2
 3e4:	695f6969 	ldmdbvs	pc, {r0, r3, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
 3e8:	0074696e 	rsbseq	r6, r4, lr, ror #18
 3ec:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 3f0:	6f675f69 	svcvs	0x00675f69
 3f4:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 3f8:	6e6f7000 	cdpvs	0, 6, cr7, cr15, cr0, {0}
 3fc:	6e695f67 	cdpvs	15, 6, cr5, cr9, cr7, {3}
 400:	43007469 	movwmi	r7, #1129	; 0x469
 404:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 408:	2f737265 	svccs	0x00737265
 40c:	756d6173 	strbvc	r6, [sp, #-371]!	; 0xfffffe8d
 410:	6f442f65 	svcvs	0x00442f65
 414:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 418:	2f73746e 	svccs	0x0073746e
 41c:	4c706f4d 	ldclmi	15, cr6, [r0], #-308	; 0xfffffecc
 420:	4d2f6261 	sfmmi	f6, 4, [pc, #-388]!	; 2a4 <startup-0x1ffffd5c>
 424:	6570706f 	ldrbvs	r7, [r0, #-111]!	; 0xffffff91
 428:	6f702f6e 	svcvs	0x00702f6e
 42c:	6f6c676e 	svcvs	0x006c676e
 430:	2e636967 	vnmulcs.f16	s13, s6, s15	; <UNPREDICTABLE>
 434:	70730063 	rsbsvc	r0, r3, r3, rrx
 438:	78646565 	stmdavc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 43c:	616c7000 	cmnvs	ip, r0
 440:	00726579 	rsbseq	r6, r2, r9, ror r5
 444:	5f746573 	svcpl	0x00746573
 448:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 44c:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 450:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 454:	61726400 	cmnvs	r2, r0, lsl #8
 458:	64007877 	strvs	r7, [r0], #-2167	; 0xfffff789
 45c:	79776172 	ldmdbvc	r7!, {r1, r4, r5, r6, r8, sp, lr}^
 460:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 464:	6f5f7261 	svcvs	0x005f7261
 468:	63656a62 	cmnvs	r5, #401408	; 0x62000
 46c:	72640074 	rsbvc	r0, r4, #116	; 0x74
 470:	6f5f7761 	svcvs	0x005f7761
 474:	63656a62 	cmnvs	r5, #401408	; 0x62000
 478:	6f6d0074 	svcvs	0x006d0074
 47c:	6f5f6576 	svcvs	0x005f6576
 480:	63656a62 	cmnvs	r5, #401408	; 0x62000
 484:	656e0074 	strbvs	r0, [lr, #-116]!	; 0xffffff8c
 488:	6f635377 	svcvs	0x00635377
 48c:	73006572 	movwvc	r6, #1394	; 0x572
 490:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 494:	73610079 	cmnvc	r1, #121	; 0x79
 498:	5f696963 	svcpl	0x00696963
 49c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 4a0:	68635f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 4a4:	61007261 	tstvs	r0, r1, ror #4
 4a8:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 4ac:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 4b0:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 4b4:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 4b8:	00726165 	rsbseq	r6, r2, r5, ror #2
 4bc:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 4c0:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 4c4:	5f657469 	svcpl	0x00657469
 4c8:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 4cc:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 4d0:	61007265 	tstvs	r0, r5, ror #4
 4d4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 4d8:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 4dc:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 4e0:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 4e4:	68730074 	ldmdavs	r3!, {r2, r4, r5, r6}^
 4e8:	2074726f 	rsbscs	r7, r4, pc, ror #4
 4ec:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 4f0:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 4f4:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 4f8:	63736100 	cmnvs	r3, #0, 2
 4fc:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 500:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 504:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 508:	73610061 	cmnvc	r1, #97	; 0x61
 50c:	5f696963 	svcpl	0x00696963
 510:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 514:	6174735f 	cmnvs	r4, pc, asr r3
 518:	00737574 	rsbseq	r7, r3, r4, ror r5
 51c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 520:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 524:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
 528:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 52c:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 530:	3a430072 	bcc	10c0700 <startup-0x1ef3f900>
 534:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 538:	732f7372 			; <UNDEFINED> instruction: 0x732f7372
 53c:	65756d61 	ldrbvs	r6, [r5, #-3425]!	; 0xfffff29f
 540:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 544:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 548:	4d2f7374 	stcmi	3, cr7, [pc, #-464]!	; 380 <startup-0x1ffffc80>
 54c:	614c706f 	cmpvs	ip, pc, rrx
 550:	6f4d2f62 	svcvs	0x004d2f62
 554:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
 558:	6373612f 	cmnvs	r3, #-1073741813	; 0xc000000b
 55c:	645f6969 	ldrbvs	r6, [pc], #-2409	; 564 <startup-0x1ffffa9c>
 560:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 564:	632e7372 			; <UNDEFINED> instruction: 0x632e7372
 568:	63736100 	cmnvs	r3, #0, 2
 56c:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 570:	5f646165 	svcpl	0x00646165
 574:	61746164 	cmnvs	r4, r4, ror #2
 578:	63736100 	cmnvs	r3, #0, 2
 57c:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 580:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 584:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
 588:	63736100 	cmnvs	r3, #0, 2
 58c:	695f6969 	ldmdbvs	pc, {r0, r3, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
 590:	5f74696e 	svcpl	0x0074696e
 594:	00707061 	rsbseq	r7, r0, r1, rrx
 598:	65726461 	ldrbvs	r6, [r2, #-1121]!	; 0xfffffb9f
 59c:	6b007373 	blvs	1d370 <startup-0x1ffe2c90>
 5a0:	00627965 	rsbeq	r7, r2, r5, ror #18
 5a4:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffb69 <paddle+0xdfffdc7d>
 5a8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 5ac:	6d61732f 	stclvs	3, cr7, [r1, #-188]!	; 0xffffff44
 5b0:	442f6575 	strtmi	r6, [pc], #-1397	; 5b8 <startup-0x1ffffa48>
 5b4:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 5b8:	73746e65 	cmnvc	r4, #1616	; 0x650
 5bc:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 5c0:	2f62614c 	svccs	0x0062614c
 5c4:	70706f4d 	rsbsvc	r6, r0, sp, asr #30
 5c8:	6b2f6e65 	blvs	bdbf64 <startup-0x1f42409c>
 5cc:	61707965 	cmnvs	r0, r5, ror #18
 5d0:	72645f64 	rsbvc	r5, r4, #100, 30	; 0x190
 5d4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 5d8:	00632e73 	rsbeq	r2, r3, r3, ror lr
 5dc:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 5e0:	6f526576 	svcvs	0x00526576
 5e4:	65730077 	ldrbvs	r0, [r3, #-119]!	; 0xffffff89
 5e8:	646f4367 	strbtvs	r4, [pc], #-871	; 5f0 <startup-0x1ffffa10>
 5ec:	6b007365 	blvs	1d388 <startup-0x1ffe2c78>
 5f0:	00737965 	rsbseq	r7, r3, r5, ror #18
 5f4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 5f8:	79656b5f 	stmdbvc	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, fp, sp, lr}^
 5fc:	00646170 	rsbeq	r6, r4, r0, ror r1
 600:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 604:	756f0074 	strbvc	r0, [pc, #-116]!	; 598 <startup-0x1ffffa68>
 608:	65733774 	ldrbvs	r3, [r3, #-1908]!	; 0xfffff88c
 60c:	656b0067 	strbvs	r0, [fp, #-103]!	; 0xffffff99
 610:	61655279 	smcvs	21801	; 0x5529
 614:	756e0064 	strbvc	r0, [lr, #-100]!	; 0xffffff9c
 618:	6461706d 	strbtvs	r7, [r1], #-109	; 0xffffff93
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <paddle+0xdfffd422>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000020 	andeq	r0, r0, r0, lsr #32
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000158 	andeq	r0, r0, r8, asr r1
  30:	400c0e41 	andmi	r0, ip, r1, asr #28
  34:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  38:	018e4002 	orreq	r4, lr, r2
  3c:	41480e41 	cmpmi	r8, r1, asr #28
  40:	0000070d 	andeq	r0, r0, sp, lsl #14
  44:	0000000c 	andeq	r0, r0, ip
  48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  4c:	7c020001 	stcvc	0, cr0, [r2], {1}
  50:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  54:	00000018 	andeq	r0, r0, r8, lsl r0
  58:	00000044 	andeq	r0, r0, r4, asr #32
  5c:	20000168 	andcs	r0, r0, r8, ror #2
  60:	00000044 	andeq	r0, r0, r4, asr #32
  64:	40080e41 	andmi	r0, r8, r1, asr #28
  68:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  6c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  70:	00000018 	andeq	r0, r0, r8, lsl r0
  74:	00000044 	andeq	r0, r0, r4, asr #32
  78:	200001ac 	andcs	r0, r0, ip, lsr #3
  7c:	0000000a 	andeq	r0, r0, sl
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  8c:	0000001c 	andeq	r0, r0, ip, lsl r0
  90:	00000044 	andeq	r0, r0, r4, asr #32
  94:	200001b6 			; <UNDEFINED> instruction: 0x200001b6
  98:	00000010 	andeq	r0, r0, r0, lsl r0
  9c:	40080e41 	andmi	r0, r8, r1, asr #28
  a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a4:	100e4101 	andne	r4, lr, r1, lsl #2
  a8:	00070d41 	andeq	r0, r7, r1, asr #26
  ac:	0000001c 	andeq	r0, r0, ip, lsl r0
  b0:	00000044 	andeq	r0, r0, r4, asr #32
  b4:	200001c6 	andcs	r0, r0, r6, asr #3
  b8:	00000010 	andeq	r0, r0, r0, lsl r0
  bc:	40080e41 	andmi	r0, r8, r1, asr #28
  c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c4:	100e4101 	andne	r4, lr, r1, lsl #2
  c8:	00070d41 	andeq	r0, r7, r1, asr #26
  cc:	0000000c 	andeq	r0, r0, ip
  d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  d4:	7c020001 	stcvc	0, cr0, [r2], {1}
  d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  dc:	0000001c 	andeq	r0, r0, ip, lsl r0
  e0:	000000cc 	andeq	r0, r0, ip, asr #1
  e4:	200001d8 	ldrdcs	r0, [r0], -r8
  e8:	00000090 	muleq	r0, r0, r0
  ec:	40080e41 	andmi	r0, r8, r1, asr #28
  f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f4:	100e4101 	andne	r4, lr, r1, lsl #2
  f8:	00070d41 	andeq	r0, r7, r1, asr #26
  fc:	00000018 	andeq	r0, r0, r8, lsl r0
 100:	000000cc 	andeq	r0, r0, ip, asr #1
 104:	20000268 	andcs	r0, r0, r8, ror #4
 108:	000000a4 	andeq	r0, r0, r4, lsr #1
 10c:	40080e41 	andmi	r0, r8, r1, asr #28
 110:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 114:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	000000cc 	andeq	r0, r0, ip, asr #1
 120:	2000030c 	andcs	r0, r0, ip, lsl #6
 124:	000000c8 	andeq	r0, r0, r8, asr #1
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	180e4101 	stmdane	lr, {r0, r8, lr}
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	000000cc 	andeq	r0, r0, ip, asr #1
 140:	200003d4 	ldrdcs	r0, [r0], -r4
 144:	000000a8 	andeq	r0, r0, r8, lsr #1
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	100e4101 	andne	r4, lr, r1, lsl #2
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	000000cc 	andeq	r0, r0, ip, asr #1
 160:	2000047c 	andcs	r0, r0, ip, ror r4
 164:	00000058 	andeq	r0, r0, r8, asr r0
 168:	40080e41 	andmi	r0, r8, r1, asr #28
 16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 170:	100e4101 	andne	r4, lr, r1, lsl #2
 174:	00070d41 	andeq	r0, r7, r1, asr #26
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	000000cc 	andeq	r0, r0, ip, asr #1
 180:	200004d4 	ldrdcs	r0, [r0], -r4
 184:	00000060 	andeq	r0, r0, r0, rrx
 188:	40080e41 	andmi	r0, r8, r1, asr #28
 18c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 190:	100e4101 	andne	r4, lr, r1, lsl #2
 194:	00070d41 	andeq	r0, r7, r1, asr #26
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	000000cc 	andeq	r0, r0, ip, asr #1
 1a0:	20000534 	andcs	r0, r0, r4, lsr r5
 1a4:	0000002a 	andeq	r0, r0, sl, lsr #32
 1a8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b0:	100e4101 	andne	r4, lr, r1, lsl #2
 1b4:	00070d41 	andeq	r0, r7, r1, asr #26
 1b8:	00000018 	andeq	r0, r0, r8, lsl r0
 1bc:	000000cc 	andeq	r0, r0, ip, asr #1
 1c0:	2000055e 	andcs	r0, r0, lr, asr r5
 1c4:	0000001a 	andeq	r0, r0, sl, lsl r0
 1c8:	40080e41 	andmi	r0, r8, r1, asr #28
 1cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1d4:	00000018 	andeq	r0, r0, r8, lsl r0
 1d8:	000000cc 	andeq	r0, r0, ip, asr #1
 1dc:	20000578 	andcs	r0, r0, r8, ror r5
 1e0:	00000084 	andeq	r0, r0, r4, lsl #1
 1e4:	40080e41 	andmi	r0, r8, r1, asr #28
 1e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ec:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	000000cc 	andeq	r0, r0, ip, asr #1
 1f8:	200005fc 	strdcs	r0, [r0], -ip
 1fc:	00000058 	andeq	r0, r0, r8, asr r0
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	100e4101 	andne	r4, lr, r1, lsl #2
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	00000024 	andeq	r0, r0, r4, lsr #32
 214:	000000cc 	andeq	r0, r0, ip, asr #1
 218:	20000654 	andcs	r0, r0, r4, asr r6
 21c:	0000013c 	andeq	r0, r0, ip, lsr r1
 220:	40100e41 	andsmi	r0, r0, r1, asr #28
 224:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 228:	02874003 	addeq	r4, r7, #3
 22c:	41018e40 	tstmi	r1, r0, asr #28
 230:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 234:	00000007 	andeq	r0, r0, r7
 238:	00000024 	andeq	r0, r0, r4, lsr #32
 23c:	000000cc 	andeq	r0, r0, ip, asr #1
 240:	20000790 	mulcs	r0, r0, r7
 244:	00000158 	andeq	r0, r0, r8, asr r1
 248:	40140e41 	andsmi	r0, r4, r1, asr #28
 24c:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
 250:	03864004 	orreq	r4, r6, #4
 254:	40028740 	andmi	r8, r2, r0, asr #14
 258:	0e41018e 	dvfeqd	f0, f1, #0.5
 25c:	070d4128 	streq	r4, [sp, -r8, lsr #2]
 260:	00000020 	andeq	r0, r0, r0, lsr #32
 264:	000000cc 	andeq	r0, r0, ip, asr #1
 268:	200008e8 	andcs	r0, r0, r8, ror #17
 26c:	00000124 	andeq	r0, r0, r4, lsr #2
 270:	400c0e41 	andmi	r0, ip, r1, asr #28
 274:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 278:	018e4002 	orreq	r4, lr, r2
 27c:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 280:	0000070d 	andeq	r0, r0, sp, lsl #14
 284:	0000001c 	andeq	r0, r0, ip, lsl r0
 288:	000000cc 	andeq	r0, r0, ip, asr #1
 28c:	20000a0c 	andcs	r0, r0, ip, lsl #20
 290:	00000054 	andeq	r0, r0, r4, asr r0
 294:	40080e41 	andmi	r0, r8, r1, asr #28
 298:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 29c:	180e4101 	stmdane	lr, {r0, r8, lr}
 2a0:	00070d41 	andeq	r0, r7, r1, asr #26
 2a4:	0000000c 	andeq	r0, r0, ip
 2a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2ac:	7c020001 	stcvc	0, cr0, [r2], {1}
 2b0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2b4:	00000018 	andeq	r0, r0, r8, lsl r0
 2b8:	000002a4 	andeq	r0, r0, r4, lsr #5
 2bc:	20000a60 	andcs	r0, r0, r0, ror #20
 2c0:	0000000a 	andeq	r0, r0, sl
 2c4:	40080e41 	andmi	r0, r8, r1, asr #28
 2c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2cc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d4:	000002a4 	andeq	r0, r0, r4, lsr #5
 2d8:	20000a6a 	andcs	r0, r0, sl, ror #20
 2dc:	00000020 	andeq	r0, r0, r0, lsr #32
 2e0:	40080e41 	andmi	r0, r8, r1, asr #28
 2e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e8:	180e4101 	stmdane	lr, {r0, r8, lr}
 2ec:	00070d41 	andeq	r0, r7, r1, asr #26
 2f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f4:	000002a4 	andeq	r0, r0, r4, lsr #5
 2f8:	20000a8a 	andcs	r0, r0, sl, lsl #21
 2fc:	00000020 	andeq	r0, r0, r0, lsr #32
 300:	40080e41 	andmi	r0, r8, r1, asr #28
 304:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 308:	180e4101 	stmdane	lr, {r0, r8, lr}
 30c:	00070d41 	andeq	r0, r7, r1, asr #26
 310:	0000001c 	andeq	r0, r0, ip, lsl r0
 314:	000002a4 	andeq	r0, r0, r4, lsr #5
 318:	20000aaa 	andcs	r0, r0, sl, lsr #21
 31c:	00000064 	andeq	r0, r0, r4, rrx
 320:	40080e41 	andmi	r0, r8, r1, asr #28
 324:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 328:	200e4101 	andcs	r4, lr, r1, lsl #2
 32c:	00070d41 	andeq	r0, r7, r1, asr #26
 330:	0000001c 	andeq	r0, r0, ip, lsl r0
 334:	000002a4 	andeq	r0, r0, r4, lsr #5
 338:	20000b0e 	andcs	r0, r0, lr, lsl #22
 33c:	0000005c 	andeq	r0, r0, ip, asr r0
 340:	40080e41 	andmi	r0, r8, r1, asr #28
 344:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 348:	180e4101 	stmdane	lr, {r0, r8, lr}
 34c:	00070d41 	andeq	r0, r7, r1, asr #26
 350:	0000001c 	andeq	r0, r0, ip, lsl r0
 354:	000002a4 	andeq	r0, r0, r4, lsr #5
 358:	20000b6a 	andcs	r0, r0, sl, ror #22
 35c:	00000098 	muleq	r0, r8, r0
 360:	40080e41 	andmi	r0, r8, r1, asr #28
 364:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 368:	100e4101 	andne	r4, lr, r1, lsl #2
 36c:	00070d41 	andeq	r0, r7, r1, asr #26
 370:	0000001c 	andeq	r0, r0, ip, lsl r0
 374:	000002a4 	andeq	r0, r0, r4, lsr #5
 378:	20000c02 	andcs	r0, r0, r2, lsl #24
 37c:	00000068 	andeq	r0, r0, r8, rrx
 380:	40080e41 	andmi	r0, r8, r1, asr #28
 384:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 388:	180e4101 	stmdane	lr, {r0, r8, lr}
 38c:	00070d41 	andeq	r0, r7, r1, asr #26
 390:	0000000c 	andeq	r0, r0, ip
 394:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 398:	7c020001 	stcvc	0, cr0, [r2], {1}
 39c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a4:	00000390 	muleq	r0, r0, r3
 3a8:	20000c6c 	andcs	r0, r0, ip, ror #24
 3ac:	00000044 	andeq	r0, r0, r4, asr #32
 3b0:	40080e41 	andmi	r0, r8, r1, asr #28
 3b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3b8:	180e4101 	stmdane	lr, {r0, r8, lr}
 3bc:	00070d41 	andeq	r0, r7, r1, asr #26
 3c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c4:	00000390 	muleq	r0, r0, r3
 3c8:	20000cb0 			; <UNDEFINED> instruction: 0x20000cb0
 3cc:	00000048 	andeq	r0, r0, r8, asr #32
 3d0:	40080e41 	andmi	r0, r8, r1, asr #28
 3d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3d8:	180e4101 	stmdane	lr, {r0, r8, lr}
 3dc:	00070d41 	andeq	r0, r7, r1, asr #26
 3e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e4:	00000390 	muleq	r0, r0, r3
 3e8:	20000cf8 	strdcs	r0, [r0], -r8
 3ec:	00000030 	andeq	r0, r0, r0, lsr r0
 3f0:	40080e41 	andmi	r0, r8, r1, asr #28
 3f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3f8:	100e4101 	andne	r4, lr, r1, lsl #2
 3fc:	00070d41 	andeq	r0, r7, r1, asr #26
 400:	0000001c 	andeq	r0, r0, ip, lsl r0
 404:	00000390 	muleq	r0, r0, r3
 408:	20000d28 	andcs	r0, r0, r8, lsr #26
 40c:	0000002c 	andeq	r0, r0, ip, lsr #32
 410:	40080e41 	andmi	r0, r8, r1, asr #28
 414:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 418:	100e4101 	andne	r4, lr, r1, lsl #2
 41c:	00070d41 	andeq	r0, r7, r1, asr #26
 420:	0000001c 	andeq	r0, r0, ip, lsl r0
 424:	00000390 	muleq	r0, r0, r3
 428:	20000d54 	andcs	r0, r0, r4, asr sp
 42c:	0000002a 	andeq	r0, r0, sl, lsr #32
 430:	40080e41 	andmi	r0, r8, r1, asr #28
 434:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 438:	100e4101 	andne	r4, lr, r1, lsl #2
 43c:	00070d41 	andeq	r0, r7, r1, asr #26
 440:	0000001c 	andeq	r0, r0, ip, lsl r0
 444:	00000390 	muleq	r0, r0, r3
 448:	20000d7e 	andcs	r0, r0, lr, ror sp
 44c:	0000002a 	andeq	r0, r0, sl, lsr #32
 450:	40080e41 	andmi	r0, r8, r1, asr #28
 454:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 458:	100e4101 	andne	r4, lr, r1, lsl #2
 45c:	00070d41 	andeq	r0, r7, r1, asr #26
 460:	0000001c 	andeq	r0, r0, ip, lsl r0
 464:	00000390 	muleq	r0, r0, r3
 468:	20000da8 	andcs	r0, r0, r8, lsr #27
 46c:	00000040 	andeq	r0, r0, r0, asr #32
 470:	40080e41 	andmi	r0, r8, r1, asr #28
 474:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 478:	100e4101 	andne	r4, lr, r1, lsl #2
 47c:	00070d41 	andeq	r0, r7, r1, asr #26
 480:	00000020 	andeq	r0, r0, r0, lsr #32
 484:	00000390 	muleq	r0, r0, r3
 488:	20000de8 	andcs	r0, r0, r8, ror #27
 48c:	00000048 	andeq	r0, r0, r8, asr #32
 490:	400c0e41 	andmi	r0, ip, r1, asr #28
 494:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 498:	018e4002 	orreq	r4, lr, r2
 49c:	41180e41 	tstmi	r8, r1, asr #28
 4a0:	0000070d 	andeq	r0, r0, sp, lsl #14
 4a4:	00000018 	andeq	r0, r0, r8, lsl r0
 4a8:	00000390 	muleq	r0, r0, r3
 4ac:	20000e30 	andcs	r0, r0, r0, lsr lr
 4b0:	00000046 	andeq	r0, r0, r6, asr #32
 4b4:	40080e41 	andmi	r0, r8, r1, asr #28
 4b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4bc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 4c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4c4:	00000390 	muleq	r0, r0, r3
 4c8:	20000e76 	andcs	r0, r0, r6, ror lr
 4cc:	0000003c 	andeq	r0, r0, ip, lsr r0
 4d0:	40080e41 	andmi	r0, r8, r1, asr #28
 4d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4d8:	100e4101 	andne	r4, lr, r1, lsl #2
 4dc:	00070d41 	andeq	r0, r7, r1, asr #26
 4e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4e4:	00000390 	muleq	r0, r0, r3
 4e8:	20000eb2 			; <UNDEFINED> instruction: 0x20000eb2
 4ec:	00000034 	andeq	r0, r0, r4, lsr r0
 4f0:	40080e41 	andmi	r0, r8, r1, asr #28
 4f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4f8:	180e4101 	stmdane	lr, {r0, r8, lr}
 4fc:	00070d41 	andeq	r0, r7, r1, asr #26
 500:	00000018 	andeq	r0, r0, r8, lsl r0
 504:	00000390 	muleq	r0, r0, r3
 508:	20000ee6 	andcs	r0, r0, r6, ror #29
 50c:	0000002e 	andeq	r0, r0, lr, lsr #32
 510:	40080e41 	andmi	r0, r8, r1, asr #28
 514:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 518:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 51c:	0000000c 	andeq	r0, r0, ip
 520:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 524:	7c020001 	stcvc	0, cr0, [r2], {1}
 528:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 52c:	00000018 	andeq	r0, r0, r8, lsl r0
 530:	0000051c 	andeq	r0, r0, ip, lsl r5
 534:	20000f14 	andcs	r0, r0, r4, lsl pc
 538:	00000038 	andeq	r0, r0, r8, lsr r0
 53c:	40080e41 	andmi	r0, r8, r1, asr #28
 540:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 544:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 548:	00000020 	andeq	r0, r0, r0, lsr #32
 54c:	0000051c 	andeq	r0, r0, ip, lsl r5
 550:	20000f4c 	andcs	r0, r0, ip, asr #30
 554:	000000bc 	strheq	r0, [r0], -ip
 558:	400c0e41 	andmi	r0, ip, r1, asr #28
 55c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 560:	018e4002 	orreq	r4, lr, r2
 564:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 568:	0000070d 	andeq	r0, r0, sp, lsl #14
 56c:	00000024 	andeq	r0, r0, r4, lsr #32
 570:	0000051c 	andeq	r0, r0, ip, lsl r5
 574:	20001008 	andcs	r1, r0, r8
 578:	00000034 	andeq	r0, r0, r4, lsr r0
 57c:	40100e41 	andsmi	r0, r0, r1, asr #28
 580:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 584:	02874003 	addeq	r4, r7, #3
 588:	41018e40 	tstmi	r1, r0, asr #28
 58c:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 590:	00000007 	andeq	r0, r0, r7
 594:	0000001c 	andeq	r0, r0, ip, lsl r0
 598:	0000051c 	andeq	r0, r0, ip, lsl r5
 59c:	2000103c 	andcs	r1, r0, ip, lsr r0
 5a0:	00000088 	andeq	r0, r0, r8, lsl #1
 5a4:	40080e41 	andmi	r0, r8, r1, asr #28
 5a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5ac:	100e4101 	andne	r4, lr, r1, lsl #2
 5b0:	00070d41 	andeq	r0, r7, r1, asr #26
