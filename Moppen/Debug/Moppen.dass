
./Debug/Moppen.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 */
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f804 	bl	20000010 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <main>:
	move_object,
	set_object_speed,
	pong_set_position
	};

void main(int argc, char **argv){
20000010:	b590      	push	{r4, r7, lr}
20000012:	b08f      	sub	sp, #60	; 0x3c
20000014:	af00      	add	r7, sp, #0
20000016:	6078      	str	r0, [r7, #4]
20000018:	6039      	str	r1, [r7, #0]
	#ifdef USBDM
		*((unsigned long *)0x40023830) = 0x18;
		__asm volatile(" LDR R0,=0x08000209\n BLX R0 \n");
	#endif
	#ifdef ascii
		ascii_init_app();
2000001a:	f000 ff48 	bl	20000eae <ascii_init_app>
		ascii_init();
2000001e:	f000 feeb 	bl	20000df8 <ascii_init>
		ascii_gotoxy(1,1);
20000022:	2101      	movs	r1, #1
20000024:	2001      	movs	r0, #1
20000026:	f000 ff28 	bl	20000e7a <ascii_gotoxy>
		char *s;
		char string1[] = "Player 1: ";
2000002a:	2020      	movs	r0, #32
2000002c:	183b      	adds	r3, r7, r0
2000002e:	4a3b      	ldr	r2, [pc, #236]	; (2000011c <main+0x10c>)
20000030:	ca12      	ldmia	r2!, {r1, r4}
20000032:	c312      	stmia	r3!, {r1, r4}
20000034:	8811      	ldrh	r1, [r2, #0]
20000036:	8019      	strh	r1, [r3, #0]
20000038:	7892      	ldrb	r2, [r2, #2]
2000003a:	709a      	strb	r2, [r3, #2]
		s = string1;
2000003c:	183b      	adds	r3, r7, r0
2000003e:	637b      	str	r3, [r7, #52]	; 0x34
	while (*s)
20000040:	e006      	b.n	20000050 <main+0x40>
		ascii_write_char(*s++);
20000042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000044:	1c5a      	adds	r2, r3, #1
20000046:	637a      	str	r2, [r7, #52]	; 0x34
20000048:	781b      	ldrb	r3, [r3, #0]
2000004a:	0018      	movs	r0, r3
2000004c:	f000 fef7 	bl	20000e3e <ascii_write_char>
	while (*s)
20000050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000052:	781b      	ldrb	r3, [r3, #0]
20000054:	2b00      	cmp	r3, #0
20000056:	d1f4      	bne.n	20000042 <main+0x32>
	ascii_gotoxy(11,2);
20000058:	2102      	movs	r1, #2
2000005a:	200b      	movs	r0, #11
2000005c:	f000 ff0d 	bl	20000e7a <ascii_gotoxy>
	char string2[] = "Player 2: ";
20000060:	2014      	movs	r0, #20
20000062:	183b      	adds	r3, r7, r0
20000064:	4a2e      	ldr	r2, [pc, #184]	; (20000120 <main+0x110>)
20000066:	ca12      	ldmia	r2!, {r1, r4}
20000068:	c312      	stmia	r3!, {r1, r4}
2000006a:	8811      	ldrh	r1, [r2, #0]
2000006c:	8019      	strh	r1, [r3, #0]
2000006e:	7892      	ldrb	r2, [r2, #2]
20000070:	709a      	strb	r2, [r3, #2]
	s = string2;
20000072:	183b      	adds	r3, r7, r0
20000074:	637b      	str	r3, [r7, #52]	; 0x34
	while (*s)
20000076:	e006      	b.n	20000086 <main+0x76>
	ascii_write_char(*s++);
20000078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000007a:	1c5a      	adds	r2, r3, #1
2000007c:	637a      	str	r2, [r7, #52]	; 0x34
2000007e:	781b      	ldrb	r3, [r3, #0]
20000080:	0018      	movs	r0, r3
20000082:	f000 fedc 	bl	20000e3e <ascii_write_char>
	while (*s)
20000086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000088:	781b      	ldrb	r3, [r3, #0]
2000008a:	2b00      	cmp	r3, #0
2000008c:	d1f4      	bne.n	20000078 <main+0x68>
	#endif
	
	#ifdef lcd
		init_lcd();
2000008e:	f000 fa46 	bl	2000051e <init_lcd>
		graphic_initialize();
20000092:	f000 fa51 	bl	20000538 <graphic_initialize>
	#endif
	#ifdef keypad
		init_keypad();
20000096:	f000 ff21 	bl	20000edc <init_keypad>
	#endif
	#ifndef SIMULATOR
		graphic_clean_screen();
	#endif
	
	unsigned char playerScore[2] = {0,0};
2000009a:	2110      	movs	r1, #16
2000009c:	187b      	adds	r3, r7, r1
2000009e:	2200      	movs	r2, #0
200000a0:	701a      	strb	r2, [r3, #0]
200000a2:	187b      	adds	r3, r7, r1
200000a4:	2200      	movs	r2, #0
200000a6:	705a      	strb	r2, [r3, #1]
	unsigned char *pScore;
	
	pScore = playerScore;
200000a8:	187b      	adds	r3, r7, r1
200000aa:	633b      	str	r3, [r7, #48]	; 0x30
	pong_inc_playerScore(pScore,1);
200000ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200000ae:	2101      	movs	r1, #1
200000b0:	0018      	movs	r0, r3
200000b2:	f000 fd86 	bl	20000bc2 <pong_inc_playerScore>
	pong_inc_playerScore(pScore,2);
200000b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200000b8:	2102      	movs	r1, #2
200000ba:	0018      	movs	r0, r3
200000bc:	f000 fd81 	bl	20000bc2 <pong_inc_playerScore>
	//graphic_pixel(66,33,1);
	pobject p = &ball;
200000c0:	4b18      	ldr	r3, [pc, #96]	; (20000124 <main+0x114>)
200000c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	pong_set_position(p,64-(p->geo->sizex)/2,32-(p->geo->sizey)/2);
200000c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200000c6:	681b      	ldr	r3, [r3, #0]
200000c8:	685b      	ldr	r3, [r3, #4]
200000ca:	2b00      	cmp	r3, #0
200000cc:	da00      	bge.n	200000d0 <main+0xc0>
200000ce:	3301      	adds	r3, #1
200000d0:	105b      	asrs	r3, r3, #1
200000d2:	425b      	negs	r3, r3
200000d4:	3340      	adds	r3, #64	; 0x40
200000d6:	0019      	movs	r1, r3
200000d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200000da:	681b      	ldr	r3, [r3, #0]
200000dc:	689b      	ldr	r3, [r3, #8]
200000de:	2b00      	cmp	r3, #0
200000e0:	da00      	bge.n	200000e4 <main+0xd4>
200000e2:	3301      	adds	r3, #1
200000e4:	105b      	asrs	r3, r3, #1
200000e6:	425b      	negs	r3, r3
200000e8:	3320      	adds	r3, #32
200000ea:	001a      	movs	r2, r3
200000ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200000ee:	0018      	movs	r0, r3
200000f0:	f000 fcab 	bl	20000a4a <pong_set_position>
//	draw_object(p);
	
	p->set_speed(p,4,1);
200000f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200000f6:	6a1b      	ldr	r3, [r3, #32]
200000f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
200000fa:	2201      	movs	r2, #1
200000fc:	2104      	movs	r1, #4
200000fe:	4798      	blx	r3
	while(1){
		move_object(p);
20000100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000102:	0018      	movs	r0, r3
20000104:	f000 fd11 	bl	20000b2a <move_object>
		//playerScore[0] = playerScore[0] +1; 
		pong_inc_playerScore(pScore,1);
20000108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000010a:	2101      	movs	r1, #1
2000010c:	0018      	movs	r0, r3
2000010e:	f000 fd58 	bl	20000bc2 <pong_inc_playerScore>
		delay_milli(40);
20000112:	2028      	movs	r0, #40	; 0x28
20000114:	f000 f837 	bl	20000186 <delay_milli>
		move_object(p);
20000118:	e7f2      	b.n	20000100 <main+0xf0>
2000011a:	46c0      	nop			; (mov r8, r8)
2000011c:	20001e80 	andcs	r1, r0, r0, lsl #29
20000120:	20001e8c 	andcs	r1, r0, ip, lsl #29
20000124:	20001e58 	andcs	r1, r0, r8, asr lr

20000128 <delay_40ns>:

#include "delay.h"
#include "portDeclare.h"

void delay_40ns(void){
20000128:	b580      	push	{r7, lr}
2000012a:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
2000012c:	4b0c      	ldr	r3, [pc, #48]	; (20000160 <delay_40ns+0x38>)
2000012e:	2200      	movs	r2, #0
20000130:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 6;
20000132:	4b0c      	ldr	r3, [pc, #48]	; (20000164 <delay_40ns+0x3c>)
20000134:	2206      	movs	r2, #6
20000136:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000138:	4b0b      	ldr	r3, [pc, #44]	; (20000168 <delay_40ns+0x40>)
2000013a:	2200      	movs	r2, #0
2000013c:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
2000013e:	4b08      	ldr	r3, [pc, #32]	; (20000160 <delay_40ns+0x38>)
20000140:	2205      	movs	r2, #5
20000142:	601a      	str	r2, [r3, #0]
	while ((*STK_CTRL & 0x10000) == 0){
20000144:	46c0      	nop			; (mov r8, r8)
20000146:	4b06      	ldr	r3, [pc, #24]	; (20000160 <delay_40ns+0x38>)
20000148:	681a      	ldr	r2, [r3, #0]
2000014a:	2380      	movs	r3, #128	; 0x80
2000014c:	025b      	lsls	r3, r3, #9
2000014e:	4013      	ands	r3, r2
20000150:	d0f9      	beq.n	20000146 <delay_40ns+0x1e>
	}
	*STK_CTRL = 0;
20000152:	4b03      	ldr	r3, [pc, #12]	; (20000160 <delay_40ns+0x38>)
20000154:	2200      	movs	r2, #0
20000156:	601a      	str	r2, [r3, #0]
}
20000158:	46c0      	nop			; (mov r8, r8)
2000015a:	46bd      	mov	sp, r7
2000015c:	bd80      	pop	{r7, pc}
2000015e:	46c0      	nop			; (mov r8, r8)
20000160:	e000e010 	and	lr, r0, r0, lsl r0
20000164:	e000e014 	and	lr, r0, r4, lsl r0
20000168:	e000e018 	and	lr, r0, r8, lsl r0

2000016c <delay_250ns>:

void delay_250ns(void){
2000016c:	b580      	push	{r7, lr}
2000016e:	af00      	add	r7, sp, #0
	*STK_CTRL = 5;
	while (!(*STK_CTRL & 0x10000) == 0){
	}
	*STK_CTRL = 0;
	#endif
}
20000170:	46c0      	nop			; (mov r8, r8)
20000172:	46bd      	mov	sp, r7
20000174:	bd80      	pop	{r7, pc}

20000176 <delay_mikro>:

void delay_mikro(unsigned int us){
20000176:	b580      	push	{r7, lr}
20000178:	b082      	sub	sp, #8
2000017a:	af00      	add	r7, sp, #0
2000017c:	6078      	str	r0, [r7, #4]
		us = us*4;
	for(int i = 0; i < us; i++){
		delay_250ns();
	}
	#endif
}
2000017e:	46c0      	nop			; (mov r8, r8)
20000180:	46bd      	mov	sp, r7
20000182:	b002      	add	sp, #8
20000184:	bd80      	pop	{r7, pc}

20000186 <delay_milli>:

void delay_milli(unsigned int ms){
20000186:	b580      	push	{r7, lr}
20000188:	b082      	sub	sp, #8
2000018a:	af00      	add	r7, sp, #0
2000018c:	6078      	str	r0, [r7, #4]
	#ifndef SIMULATOR
	ms = ms*1000;
	delay_mikro(ms);
	#endif
2000018e:	46c0      	nop			; (mov r8, r8)
20000190:	46bd      	mov	sp, r7
20000192:	b002      	add	sp, #8
20000194:	bd80      	pop	{r7, pc}
20000196:	46c0      	nop			; (mov r8, r8)

20000198 <select_controller>:
#include "portDeclare.h"

#define adress 0x40
#define page 0xB8

void select_controller(char c){
20000198:	b580      	push	{r7, lr}
2000019a:	b082      	sub	sp, #8
2000019c:	af00      	add	r7, sp, #0
2000019e:	0002      	movs	r2, r0
200001a0:	1dfb      	adds	r3, r7, #7
200001a2:	701a      	strb	r2, [r3, #0]
	switch(c){
200001a4:	1dfb      	adds	r3, r7, #7
200001a6:	781b      	ldrb	r3, [r3, #0]
200001a8:	2b08      	cmp	r3, #8
200001aa:	d011      	beq.n	200001d0 <select_controller+0x38>
200001ac:	dc02      	bgt.n	200001b4 <select_controller+0x1c>
200001ae:	2b00      	cmp	r3, #0
200001b0:	d005      	beq.n	200001be <select_controller+0x26>
		case 0: *portOdrLowE = *portOdrLowE &~ 0x18; break;
		case 0x8: *portOdrLowE = (*portOdrLowE &~ 0x10)|0x8; break;
		case 0x10: *portOdrLowE = (*portOdrLowE &~ 0x8)|0x10; break;
		case 0x18: *portOdrLowE = *portOdrLowE | 0x18; break;
	}
}
200001b2:	e032      	b.n	2000021a <select_controller+0x82>
	switch(c){
200001b4:	2b10      	cmp	r3, #16
200001b6:	d019      	beq.n	200001ec <select_controller+0x54>
200001b8:	2b18      	cmp	r3, #24
200001ba:	d025      	beq.n	20000208 <select_controller+0x70>
}
200001bc:	e02d      	b.n	2000021a <select_controller+0x82>
		case 0: *portOdrLowE = *portOdrLowE &~ 0x18; break;
200001be:	4b19      	ldr	r3, [pc, #100]	; (20000224 <select_controller+0x8c>)
200001c0:	781b      	ldrb	r3, [r3, #0]
200001c2:	b2db      	uxtb	r3, r3
200001c4:	4a17      	ldr	r2, [pc, #92]	; (20000224 <select_controller+0x8c>)
200001c6:	2118      	movs	r1, #24
200001c8:	438b      	bics	r3, r1
200001ca:	b2db      	uxtb	r3, r3
200001cc:	7013      	strb	r3, [r2, #0]
200001ce:	e024      	b.n	2000021a <select_controller+0x82>
		case 0x8: *portOdrLowE = (*portOdrLowE &~ 0x10)|0x8; break;
200001d0:	4b14      	ldr	r3, [pc, #80]	; (20000224 <select_controller+0x8c>)
200001d2:	781b      	ldrb	r3, [r3, #0]
200001d4:	b2db      	uxtb	r3, r3
200001d6:	b25b      	sxtb	r3, r3
200001d8:	2218      	movs	r2, #24
200001da:	4393      	bics	r3, r2
200001dc:	b25b      	sxtb	r3, r3
200001de:	2208      	movs	r2, #8
200001e0:	4313      	orrs	r3, r2
200001e2:	b25a      	sxtb	r2, r3
200001e4:	4b0f      	ldr	r3, [pc, #60]	; (20000224 <select_controller+0x8c>)
200001e6:	b2d2      	uxtb	r2, r2
200001e8:	701a      	strb	r2, [r3, #0]
200001ea:	e016      	b.n	2000021a <select_controller+0x82>
		case 0x10: *portOdrLowE = (*portOdrLowE &~ 0x8)|0x10; break;
200001ec:	4b0d      	ldr	r3, [pc, #52]	; (20000224 <select_controller+0x8c>)
200001ee:	781b      	ldrb	r3, [r3, #0]
200001f0:	b2db      	uxtb	r3, r3
200001f2:	b25b      	sxtb	r3, r3
200001f4:	2218      	movs	r2, #24
200001f6:	4393      	bics	r3, r2
200001f8:	b25b      	sxtb	r3, r3
200001fa:	2210      	movs	r2, #16
200001fc:	4313      	orrs	r3, r2
200001fe:	b25a      	sxtb	r2, r3
20000200:	4b08      	ldr	r3, [pc, #32]	; (20000224 <select_controller+0x8c>)
20000202:	b2d2      	uxtb	r2, r2
20000204:	701a      	strb	r2, [r3, #0]
20000206:	e008      	b.n	2000021a <select_controller+0x82>
		case 0x18: *portOdrLowE = *portOdrLowE | 0x18; break;
20000208:	4b06      	ldr	r3, [pc, #24]	; (20000224 <select_controller+0x8c>)
2000020a:	781b      	ldrb	r3, [r3, #0]
2000020c:	b2db      	uxtb	r3, r3
2000020e:	4a05      	ldr	r2, [pc, #20]	; (20000224 <select_controller+0x8c>)
20000210:	2118      	movs	r1, #24
20000212:	430b      	orrs	r3, r1
20000214:	b2db      	uxtb	r3, r3
20000216:	7013      	strb	r3, [r2, #0]
20000218:	46c0      	nop			; (mov r8, r8)
}
2000021a:	46c0      	nop			; (mov r8, r8)
2000021c:	46bd      	mov	sp, r7
2000021e:	b002      	add	sp, #8
20000220:	bd80      	pop	{r7, pc}
20000222:	46c0      	nop			; (mov r8, r8)
20000224:	40021014 	andmi	r1, r2, r4, lsl r0

20000228 <graphic_wait_ready>:

void graphic_wait_ready(){
20000228:	b580      	push	{r7, lr}
2000022a:	af00      	add	r7, sp, #0
	*portOdrLowE = (*portOdrLowE &~ B_E);
2000022c:	4b23      	ldr	r3, [pc, #140]	; (200002bc <graphic_wait_ready+0x94>)
2000022e:	781b      	ldrb	r3, [r3, #0]
20000230:	b2db      	uxtb	r3, r3
20000232:	4a22      	ldr	r2, [pc, #136]	; (200002bc <graphic_wait_ready+0x94>)
20000234:	2140      	movs	r1, #64	; 0x40
20000236:	438b      	bics	r3, r1
20000238:	b2db      	uxtb	r3, r3
2000023a:	7013      	strb	r3, [r2, #0]
	*portModerE = 0x5555;
2000023c:	4b20      	ldr	r3, [pc, #128]	; (200002c0 <graphic_wait_ready+0x98>)
2000023e:	4a21      	ldr	r2, [pc, #132]	; (200002c4 <graphic_wait_ready+0x9c>)
20000240:	601a      	str	r2, [r3, #0]
	*portOdrLowE = ((*portOdrLowE | B_RW) &~B_RS);
20000242:	4b1e      	ldr	r3, [pc, #120]	; (200002bc <graphic_wait_ready+0x94>)
20000244:	781b      	ldrb	r3, [r3, #0]
20000246:	b2db      	uxtb	r3, r3
20000248:	2202      	movs	r2, #2
2000024a:	4313      	orrs	r3, r2
2000024c:	b2db      	uxtb	r3, r3
2000024e:	4a1b      	ldr	r2, [pc, #108]	; (200002bc <graphic_wait_ready+0x94>)
20000250:	2101      	movs	r1, #1
20000252:	438b      	bics	r3, r1
20000254:	b2db      	uxtb	r3, r3
20000256:	7013      	strb	r3, [r2, #0]
	delay_250ns();
20000258:	f7ff ff88 	bl	2000016c <delay_250ns>
	delay_250ns();
2000025c:	f7ff ff86 	bl	2000016c <delay_250ns>
	while(*portOdrLowE & 0x80){
20000260:	e017      	b.n	20000292 <graphic_wait_ready+0x6a>
		*portOdrLowE = (*portOdrLowE | B_E);
20000262:	4b16      	ldr	r3, [pc, #88]	; (200002bc <graphic_wait_ready+0x94>)
20000264:	781b      	ldrb	r3, [r3, #0]
20000266:	b2db      	uxtb	r3, r3
20000268:	4a14      	ldr	r2, [pc, #80]	; (200002bc <graphic_wait_ready+0x94>)
2000026a:	2140      	movs	r1, #64	; 0x40
2000026c:	430b      	orrs	r3, r1
2000026e:	b2db      	uxtb	r3, r3
20000270:	7013      	strb	r3, [r2, #0]
		delay_250ns();
20000272:	f7ff ff7b 	bl	2000016c <delay_250ns>
		delay_250ns();
20000276:	f7ff ff79 	bl	2000016c <delay_250ns>
		*portOdrLowE = (*portOdrLowE &~ B_E);
2000027a:	4b10      	ldr	r3, [pc, #64]	; (200002bc <graphic_wait_ready+0x94>)
2000027c:	781b      	ldrb	r3, [r3, #0]
2000027e:	b2db      	uxtb	r3, r3
20000280:	4a0e      	ldr	r2, [pc, #56]	; (200002bc <graphic_wait_ready+0x94>)
20000282:	2140      	movs	r1, #64	; 0x40
20000284:	438b      	bics	r3, r1
20000286:	b2db      	uxtb	r3, r3
20000288:	7013      	strb	r3, [r2, #0]
		delay_250ns();
2000028a:	f7ff ff6f 	bl	2000016c <delay_250ns>
		delay_250ns();
2000028e:	f7ff ff6d 	bl	2000016c <delay_250ns>
	while(*portOdrLowE & 0x80){
20000292:	4b0a      	ldr	r3, [pc, #40]	; (200002bc <graphic_wait_ready+0x94>)
20000294:	781b      	ldrb	r3, [r3, #0]
20000296:	b2db      	uxtb	r3, r3
20000298:	b25b      	sxtb	r3, r3
2000029a:	2b00      	cmp	r3, #0
2000029c:	dbe1      	blt.n	20000262 <graphic_wait_ready+0x3a>
	}
	*portOdrLowE = (*portOdrLowE | B_E);
2000029e:	4b07      	ldr	r3, [pc, #28]	; (200002bc <graphic_wait_ready+0x94>)
200002a0:	781b      	ldrb	r3, [r3, #0]
200002a2:	b2db      	uxtb	r3, r3
200002a4:	4a05      	ldr	r2, [pc, #20]	; (200002bc <graphic_wait_ready+0x94>)
200002a6:	2140      	movs	r1, #64	; 0x40
200002a8:	430b      	orrs	r3, r1
200002aa:	b2db      	uxtb	r3, r3
200002ac:	7013      	strb	r3, [r2, #0]
	*portModerE = 0x55555555;
200002ae:	4b04      	ldr	r3, [pc, #16]	; (200002c0 <graphic_wait_ready+0x98>)
200002b0:	4a05      	ldr	r2, [pc, #20]	; (200002c8 <graphic_wait_ready+0xa0>)
200002b2:	601a      	str	r2, [r3, #0]
}
200002b4:	46c0      	nop			; (mov r8, r8)
200002b6:	46bd      	mov	sp, r7
200002b8:	bd80      	pop	{r7, pc}
200002ba:	46c0      	nop			; (mov r8, r8)
200002bc:	40021014 	andmi	r1, r2, r4, lsl r0
200002c0:	40021000 	andmi	r1, r2, r0
200002c4:	00005555 	andeq	r5, r0, r5, asr r5
200002c8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002cc <graphic_read>:

char graphic_read(unsigned char c){
200002cc:	b580      	push	{r7, lr}
200002ce:	b084      	sub	sp, #16
200002d0:	af00      	add	r7, sp, #0
200002d2:	0002      	movs	r2, r0
200002d4:	1dfb      	adds	r3, r7, #7
200002d6:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE &~B_E);
200002d8:	4b29      	ldr	r3, [pc, #164]	; (20000380 <graphic_read+0xb4>)
200002da:	781b      	ldrb	r3, [r3, #0]
200002dc:	b2db      	uxtb	r3, r3
200002de:	4a28      	ldr	r2, [pc, #160]	; (20000380 <graphic_read+0xb4>)
200002e0:	2140      	movs	r1, #64	; 0x40
200002e2:	438b      	bics	r3, r1
200002e4:	b2db      	uxtb	r3, r3
200002e6:	7013      	strb	r3, [r2, #0]
	*portModerE = 0x00005555;
200002e8:	4b26      	ldr	r3, [pc, #152]	; (20000384 <graphic_read+0xb8>)
200002ea:	4a27      	ldr	r2, [pc, #156]	; (20000388 <graphic_read+0xbc>)
200002ec:	601a      	str	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE | B_RW | B_RS);
200002ee:	4b24      	ldr	r3, [pc, #144]	; (20000380 <graphic_read+0xb4>)
200002f0:	781b      	ldrb	r3, [r3, #0]
200002f2:	b2db      	uxtb	r3, r3
200002f4:	4a22      	ldr	r2, [pc, #136]	; (20000380 <graphic_read+0xb4>)
200002f6:	2103      	movs	r1, #3
200002f8:	430b      	orrs	r3, r1
200002fa:	b2db      	uxtb	r3, r3
200002fc:	7013      	strb	r3, [r2, #0]
	select_controller(c);
200002fe:	1dfb      	adds	r3, r7, #7
20000300:	781b      	ldrb	r3, [r3, #0]
20000302:	0018      	movs	r0, r3
20000304:	f7ff ff48 	bl	20000198 <select_controller>
	delay_250ns();
20000308:	f7ff ff30 	bl	2000016c <delay_250ns>
	delay_250ns();
2000030c:	f7ff ff2e 	bl	2000016c <delay_250ns>
	*portOdrLowE = (*portOdrLowE | B_E);
20000310:	4b1b      	ldr	r3, [pc, #108]	; (20000380 <graphic_read+0xb4>)
20000312:	781b      	ldrb	r3, [r3, #0]
20000314:	b2db      	uxtb	r3, r3
20000316:	4a1a      	ldr	r2, [pc, #104]	; (20000380 <graphic_read+0xb4>)
20000318:	2140      	movs	r1, #64	; 0x40
2000031a:	430b      	orrs	r3, r1
2000031c:	b2db      	uxtb	r3, r3
2000031e:	7013      	strb	r3, [r2, #0]
	delay_250ns();
20000320:	f7ff ff24 	bl	2000016c <delay_250ns>
	delay_250ns();
20000324:	f7ff ff22 	bl	2000016c <delay_250ns>
	unsigned char RV = *portIdrHighE;
20000328:	4a18      	ldr	r2, [pc, #96]	; (2000038c <graphic_read+0xc0>)
2000032a:	230f      	movs	r3, #15
2000032c:	18fb      	adds	r3, r7, r3
2000032e:	7812      	ldrb	r2, [r2, #0]
20000330:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE &~ B_E);
20000332:	4b13      	ldr	r3, [pc, #76]	; (20000380 <graphic_read+0xb4>)
20000334:	781b      	ldrb	r3, [r3, #0]
20000336:	b2db      	uxtb	r3, r3
20000338:	4a11      	ldr	r2, [pc, #68]	; (20000380 <graphic_read+0xb4>)
2000033a:	2140      	movs	r1, #64	; 0x40
2000033c:	438b      	bics	r3, r1
2000033e:	b2db      	uxtb	r3, r3
20000340:	7013      	strb	r3, [r2, #0]
	*portModerE = 0x55555555;
20000342:	4b10      	ldr	r3, [pc, #64]	; (20000384 <graphic_read+0xb8>)
20000344:	4a12      	ldr	r2, [pc, #72]	; (20000390 <graphic_read+0xc4>)
20000346:	601a      	str	r2, [r3, #0]
	if(c & B_CS1){
20000348:	1dfb      	adds	r3, r7, #7
2000034a:	781b      	ldrb	r3, [r3, #0]
2000034c:	2208      	movs	r2, #8
2000034e:	4013      	ands	r3, r2
20000350:	d004      	beq.n	2000035c <graphic_read+0x90>
	select_controller(B_CS1);
20000352:	2008      	movs	r0, #8
20000354:	f7ff ff20 	bl	20000198 <select_controller>
	graphic_wait_ready();
20000358:	f7ff ff66 	bl	20000228 <graphic_wait_ready>
	}
	if(c & B_CS2){
2000035c:	1dfb      	adds	r3, r7, #7
2000035e:	781b      	ldrb	r3, [r3, #0]
20000360:	2210      	movs	r2, #16
20000362:	4013      	ands	r3, r2
20000364:	d004      	beq.n	20000370 <graphic_read+0xa4>
	select_controller(B_CS2);
20000366:	2010      	movs	r0, #16
20000368:	f7ff ff16 	bl	20000198 <select_controller>
	graphic_wait_ready();
2000036c:	f7ff ff5c 	bl	20000228 <graphic_wait_ready>
	}

	return RV;
20000370:	230f      	movs	r3, #15
20000372:	18fb      	adds	r3, r7, r3
20000374:	781b      	ldrb	r3, [r3, #0]
}
20000376:	0018      	movs	r0, r3
20000378:	46bd      	mov	sp, r7
2000037a:	b004      	add	sp, #16
2000037c:	bd80      	pop	{r7, pc}
2000037e:	46c0      	nop			; (mov r8, r8)
20000380:	40021014 	andmi	r1, r2, r4, lsl r0
20000384:	40021000 	andmi	r1, r2, r0
20000388:	00005555 	andeq	r5, r0, r5, asr r5
2000038c:	40021011 	andmi	r1, r2, r1, lsl r0
20000390:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000394 <graphic_write>:

void graphic_write(unsigned char val, unsigned char c){
20000394:	b580      	push	{r7, lr}
20000396:	b082      	sub	sp, #8
20000398:	af00      	add	r7, sp, #0
2000039a:	0002      	movs	r2, r0
2000039c:	1dfb      	adds	r3, r7, #7
2000039e:	701a      	strb	r2, [r3, #0]
200003a0:	1dbb      	adds	r3, r7, #6
200003a2:	1c0a      	adds	r2, r1, #0
200003a4:	701a      	strb	r2, [r3, #0]
	*portOdrHighE = val;
200003a6:	4a23      	ldr	r2, [pc, #140]	; (20000434 <graphic_write+0xa0>)
200003a8:	1dfb      	adds	r3, r7, #7
200003aa:	781b      	ldrb	r3, [r3, #0]
200003ac:	7013      	strb	r3, [r2, #0]
	select_controller(c);
200003ae:	1dbb      	adds	r3, r7, #6
200003b0:	781b      	ldrb	r3, [r3, #0]
200003b2:	0018      	movs	r0, r3
200003b4:	f7ff fef0 	bl	20000198 <select_controller>
	delay_250ns();
200003b8:	f7ff fed8 	bl	2000016c <delay_250ns>
	delay_250ns();
200003bc:	f7ff fed6 	bl	2000016c <delay_250ns>
	*portOdrLowE = (*portOdrLowE | B_E);
200003c0:	4b1d      	ldr	r3, [pc, #116]	; (20000438 <graphic_write+0xa4>)
200003c2:	781b      	ldrb	r3, [r3, #0]
200003c4:	b2db      	uxtb	r3, r3
200003c6:	4a1c      	ldr	r2, [pc, #112]	; (20000438 <graphic_write+0xa4>)
200003c8:	2140      	movs	r1, #64	; 0x40
200003ca:	430b      	orrs	r3, r1
200003cc:	b2db      	uxtb	r3, r3
200003ce:	7013      	strb	r3, [r2, #0]
	delay_250ns();
200003d0:	f7ff fecc 	bl	2000016c <delay_250ns>
	delay_250ns();
200003d4:	f7ff feca 	bl	2000016c <delay_250ns>
	*portOdrLowE = (*portOdrLowE &~ B_E);
200003d8:	4b17      	ldr	r3, [pc, #92]	; (20000438 <graphic_write+0xa4>)
200003da:	781b      	ldrb	r3, [r3, #0]
200003dc:	b2db      	uxtb	r3, r3
200003de:	4a16      	ldr	r2, [pc, #88]	; (20000438 <graphic_write+0xa4>)
200003e0:	2140      	movs	r1, #64	; 0x40
200003e2:	438b      	bics	r3, r1
200003e4:	b2db      	uxtb	r3, r3
200003e6:	7013      	strb	r3, [r2, #0]
	if(c & B_CS1){
200003e8:	1dbb      	adds	r3, r7, #6
200003ea:	781b      	ldrb	r3, [r3, #0]
200003ec:	2208      	movs	r2, #8
200003ee:	4013      	ands	r3, r2
200003f0:	d004      	beq.n	200003fc <graphic_write+0x68>
		select_controller(B_CS1);
200003f2:	2008      	movs	r0, #8
200003f4:	f7ff fed0 	bl	20000198 <select_controller>
		graphic_wait_ready();
200003f8:	f7ff ff16 	bl	20000228 <graphic_wait_ready>
	}
	if(c & B_CS2){
200003fc:	1dbb      	adds	r3, r7, #6
200003fe:	781b      	ldrb	r3, [r3, #0]
20000400:	2210      	movs	r2, #16
20000402:	4013      	ands	r3, r2
20000404:	d004      	beq.n	20000410 <graphic_write+0x7c>
		select_controller(B_CS2);
20000406:	2010      	movs	r0, #16
20000408:	f7ff fec6 	bl	20000198 <select_controller>
		graphic_wait_ready();
2000040c:	f7ff ff0c 	bl	20000228 <graphic_wait_ready>
	}
	*portOdrHighE = 0;
20000410:	4b08      	ldr	r3, [pc, #32]	; (20000434 <graphic_write+0xa0>)
20000412:	2200      	movs	r2, #0
20000414:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE | B_E);
20000416:	4b08      	ldr	r3, [pc, #32]	; (20000438 <graphic_write+0xa4>)
20000418:	781b      	ldrb	r3, [r3, #0]
2000041a:	b2db      	uxtb	r3, r3
2000041c:	4a06      	ldr	r2, [pc, #24]	; (20000438 <graphic_write+0xa4>)
2000041e:	2140      	movs	r1, #64	; 0x40
20000420:	430b      	orrs	r3, r1
20000422:	b2db      	uxtb	r3, r3
20000424:	7013      	strb	r3, [r2, #0]
	select_controller(0);
20000426:	2000      	movs	r0, #0
20000428:	f7ff feb6 	bl	20000198 <select_controller>
}
2000042c:	46c0      	nop			; (mov r8, r8)
2000042e:	46bd      	mov	sp, r7
20000430:	b002      	add	sp, #8
20000432:	bd80      	pop	{r7, pc}
20000434:	40021015 	andmi	r1, r2, r5, lsl r0
20000438:	40021014 	andmi	r1, r2, r4, lsl r0

2000043c <graphic_write_command>:

void graphic_write_command(unsigned char cmd, unsigned char c){
2000043c:	b580      	push	{r7, lr}
2000043e:	b082      	sub	sp, #8
20000440:	af00      	add	r7, sp, #0
20000442:	0002      	movs	r2, r0
20000444:	1dfb      	adds	r3, r7, #7
20000446:	701a      	strb	r2, [r3, #0]
20000448:	1dbb      	adds	r3, r7, #6
2000044a:	1c0a      	adds	r2, r1, #0
2000044c:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE &~ B_E);
2000044e:	4b10      	ldr	r3, [pc, #64]	; (20000490 <graphic_write_command+0x54>)
20000450:	781b      	ldrb	r3, [r3, #0]
20000452:	b2db      	uxtb	r3, r3
20000454:	4a0e      	ldr	r2, [pc, #56]	; (20000490 <graphic_write_command+0x54>)
20000456:	2140      	movs	r1, #64	; 0x40
20000458:	438b      	bics	r3, r1
2000045a:	b2db      	uxtb	r3, r3
2000045c:	7013      	strb	r3, [r2, #0]
	select_controller(c);
2000045e:	1dbb      	adds	r3, r7, #6
20000460:	781b      	ldrb	r3, [r3, #0]
20000462:	0018      	movs	r0, r3
20000464:	f7ff fe98 	bl	20000198 <select_controller>
	*portOdrLowE = (*portOdrLowE &~B_RS &~B_RW);
20000468:	4b09      	ldr	r3, [pc, #36]	; (20000490 <graphic_write_command+0x54>)
2000046a:	781b      	ldrb	r3, [r3, #0]
2000046c:	b2db      	uxtb	r3, r3
2000046e:	4a08      	ldr	r2, [pc, #32]	; (20000490 <graphic_write_command+0x54>)
20000470:	2103      	movs	r1, #3
20000472:	438b      	bics	r3, r1
20000474:	b2db      	uxtb	r3, r3
20000476:	7013      	strb	r3, [r2, #0]
	graphic_write(cmd, c);
20000478:	1dbb      	adds	r3, r7, #6
2000047a:	781a      	ldrb	r2, [r3, #0]
2000047c:	1dfb      	adds	r3, r7, #7
2000047e:	781b      	ldrb	r3, [r3, #0]
20000480:	0011      	movs	r1, r2
20000482:	0018      	movs	r0, r3
20000484:	f7ff ff86 	bl	20000394 <graphic_write>
}
20000488:	46c0      	nop			; (mov r8, r8)
2000048a:	46bd      	mov	sp, r7
2000048c:	b002      	add	sp, #8
2000048e:	bd80      	pop	{r7, pc}
20000490:	40021014 	andmi	r1, r2, r4, lsl r0

20000494 <graphic_write_data>:

void graphic_write_data(unsigned char data, unsigned char c){
20000494:	b580      	push	{r7, lr}
20000496:	b082      	sub	sp, #8
20000498:	af00      	add	r7, sp, #0
2000049a:	0002      	movs	r2, r0
2000049c:	1dfb      	adds	r3, r7, #7
2000049e:	701a      	strb	r2, [r3, #0]
200004a0:	1dbb      	adds	r3, r7, #6
200004a2:	1c0a      	adds	r2, r1, #0
200004a4:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = (*portOdrLowE &~ B_E);
200004a6:	4b12      	ldr	r3, [pc, #72]	; (200004f0 <graphic_write_data+0x5c>)
200004a8:	781b      	ldrb	r3, [r3, #0]
200004aa:	b2db      	uxtb	r3, r3
200004ac:	4a10      	ldr	r2, [pc, #64]	; (200004f0 <graphic_write_data+0x5c>)
200004ae:	2140      	movs	r1, #64	; 0x40
200004b0:	438b      	bics	r3, r1
200004b2:	b2db      	uxtb	r3, r3
200004b4:	7013      	strb	r3, [r2, #0]
	select_controller(c);
200004b6:	1dbb      	adds	r3, r7, #6
200004b8:	781b      	ldrb	r3, [r3, #0]
200004ba:	0018      	movs	r0, r3
200004bc:	f7ff fe6c 	bl	20000198 <select_controller>
	*portOdrLowE = ((*portOdrLowE | B_RS) &~B_RW);
200004c0:	4b0b      	ldr	r3, [pc, #44]	; (200004f0 <graphic_write_data+0x5c>)
200004c2:	781b      	ldrb	r3, [r3, #0]
200004c4:	b2db      	uxtb	r3, r3
200004c6:	2201      	movs	r2, #1
200004c8:	4313      	orrs	r3, r2
200004ca:	b2db      	uxtb	r3, r3
200004cc:	4a08      	ldr	r2, [pc, #32]	; (200004f0 <graphic_write_data+0x5c>)
200004ce:	2102      	movs	r1, #2
200004d0:	438b      	bics	r3, r1
200004d2:	b2db      	uxtb	r3, r3
200004d4:	7013      	strb	r3, [r2, #0]
	graphic_write(data, c);
200004d6:	1dbb      	adds	r3, r7, #6
200004d8:	781a      	ldrb	r2, [r3, #0]
200004da:	1dfb      	adds	r3, r7, #7
200004dc:	781b      	ldrb	r3, [r3, #0]
200004de:	0011      	movs	r1, r2
200004e0:	0018      	movs	r0, r3
200004e2:	f7ff ff57 	bl	20000394 <graphic_write>
}
200004e6:	46c0      	nop			; (mov r8, r8)
200004e8:	46bd      	mov	sp, r7
200004ea:	b002      	add	sp, #8
200004ec:	bd80      	pop	{r7, pc}
200004ee:	46c0      	nop			; (mov r8, r8)
200004f0:	40021014 	andmi	r1, r2, r4, lsl r0

200004f4 <graphic_read_data>:

unsigned char graphic_read_data(unsigned char c){
200004f4:	b580      	push	{r7, lr}
200004f6:	b082      	sub	sp, #8
200004f8:	af00      	add	r7, sp, #0
200004fa:	0002      	movs	r2, r0
200004fc:	1dfb      	adds	r3, r7, #7
200004fe:	701a      	strb	r2, [r3, #0]
	graphic_read(c);
20000500:	1dfb      	adds	r3, r7, #7
20000502:	781b      	ldrb	r3, [r3, #0]
20000504:	0018      	movs	r0, r3
20000506:	f7ff fee1 	bl	200002cc <graphic_read>
	return graphic_read(c);
2000050a:	1dfb      	adds	r3, r7, #7
2000050c:	781b      	ldrb	r3, [r3, #0]
2000050e:	0018      	movs	r0, r3
20000510:	f7ff fedc 	bl	200002cc <graphic_read>
20000514:	0003      	movs	r3, r0
}
20000516:	0018      	movs	r0, r3
20000518:	46bd      	mov	sp, r7
2000051a:	b002      	add	sp, #8
2000051c:	bd80      	pop	{r7, pc}

2000051e <init_lcd>:

void init_lcd(void){
2000051e:	b580      	push	{r7, lr}
20000520:	af00      	add	r7, sp, #0
	*portModerE = 0x55555555;
20000522:	4b03      	ldr	r3, [pc, #12]	; (20000530 <init_lcd+0x12>)
20000524:	4a03      	ldr	r2, [pc, #12]	; (20000534 <init_lcd+0x16>)
20000526:	601a      	str	r2, [r3, #0]
}
20000528:	46c0      	nop			; (mov r8, r8)
2000052a:	46bd      	mov	sp, r7
2000052c:	bd80      	pop	{r7, pc}
2000052e:	46c0      	nop			; (mov r8, r8)
20000530:	40021000 	andmi	r1, r2, r0
20000534:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000538 <graphic_initialize>:

void graphic_initialize(void){
20000538:	b580      	push	{r7, lr}
2000053a:	af00      	add	r7, sp, #0
	*portOdrLowE = (*portOdrLowE | B_E);
2000053c:	4b1e      	ldr	r3, [pc, #120]	; (200005b8 <graphic_initialize+0x80>)
2000053e:	781b      	ldrb	r3, [r3, #0]
20000540:	b2db      	uxtb	r3, r3
20000542:	4a1d      	ldr	r2, [pc, #116]	; (200005b8 <graphic_initialize+0x80>)
20000544:	2140      	movs	r1, #64	; 0x40
20000546:	430b      	orrs	r3, r1
20000548:	b2db      	uxtb	r3, r3
2000054a:	7013      	strb	r3, [r2, #0]
	*portOdrLowE = (*portOdrLowE &~ B_SELECT );
2000054c:	4b1a      	ldr	r3, [pc, #104]	; (200005b8 <graphic_initialize+0x80>)
2000054e:	781b      	ldrb	r3, [r3, #0]
20000550:	b2db      	uxtb	r3, r3
20000552:	4a19      	ldr	r2, [pc, #100]	; (200005b8 <graphic_initialize+0x80>)
20000554:	2104      	movs	r1, #4
20000556:	438b      	bics	r3, r1
20000558:	b2db      	uxtb	r3, r3
2000055a:	7013      	strb	r3, [r2, #0]
	#ifdef SIMULATOR
		delay_mikro(10);
2000055c:	200a      	movs	r0, #10
2000055e:	f7ff fe0a 	bl	20000176 <delay_mikro>
	#endif
	*portOdrLowE = (*portOdrLowE &~(B_RST | B_CS1 | B_CS2 | B_E));
20000562:	4b15      	ldr	r3, [pc, #84]	; (200005b8 <graphic_initialize+0x80>)
20000564:	781b      	ldrb	r3, [r3, #0]
20000566:	b2db      	uxtb	r3, r3
20000568:	4a13      	ldr	r2, [pc, #76]	; (200005b8 <graphic_initialize+0x80>)
2000056a:	2178      	movs	r1, #120	; 0x78
2000056c:	438b      	bics	r3, r1
2000056e:	b2db      	uxtb	r3, r3
20000570:	7013      	strb	r3, [r2, #0]
	#ifndef SIMULATOR
		delay_milli(30);
	#endif
	*portOdrLowE = (*portOdrLowE | B_RST);
20000572:	4b11      	ldr	r3, [pc, #68]	; (200005b8 <graphic_initialize+0x80>)
20000574:	781b      	ldrb	r3, [r3, #0]
20000576:	b2db      	uxtb	r3, r3
20000578:	4a0f      	ldr	r2, [pc, #60]	; (200005b8 <graphic_initialize+0x80>)
2000057a:	2120      	movs	r1, #32
2000057c:	430b      	orrs	r3, r1
2000057e:	b2db      	uxtb	r3, r3
20000580:	7013      	strb	r3, [r2, #0]
	graphic_write_command(0x3E, B_CS1|B_CS2);
20000582:	2118      	movs	r1, #24
20000584:	203e      	movs	r0, #62	; 0x3e
20000586:	f7ff ff59 	bl	2000043c <graphic_write_command>
	graphic_write_command(0x3F, B_CS1|B_CS2);
2000058a:	2118      	movs	r1, #24
2000058c:	203f      	movs	r0, #63	; 0x3f
2000058e:	f7ff ff55 	bl	2000043c <graphic_write_command>
	graphic_write_command(0xC0, B_CS1|B_CS2);
20000592:	2118      	movs	r1, #24
20000594:	20c0      	movs	r0, #192	; 0xc0
20000596:	f7ff ff51 	bl	2000043c <graphic_write_command>
	graphic_write_command(0x40, B_CS1|B_CS2);
2000059a:	2118      	movs	r1, #24
2000059c:	2040      	movs	r0, #64	; 0x40
2000059e:	f7ff ff4d 	bl	2000043c <graphic_write_command>
	graphic_write_command(0xB8, B_CS1|B_CS2);
200005a2:	2118      	movs	r1, #24
200005a4:	20b8      	movs	r0, #184	; 0xb8
200005a6:	f7ff ff49 	bl	2000043c <graphic_write_command>
	select_controller(0);
200005aa:	2000      	movs	r0, #0
200005ac:	f7ff fdf4 	bl	20000198 <select_controller>
}
200005b0:	46c0      	nop			; (mov r8, r8)
200005b2:	46bd      	mov	sp, r7
200005b4:	bd80      	pop	{r7, pc}
200005b6:	46c0      	nop			; (mov r8, r8)
200005b8:	40021014 	andmi	r1, r2, r4, lsl r0

200005bc <graphic_clean_screen>:

void graphic_clean_screen(void){
200005bc:	b580      	push	{r7, lr}
200005be:	b082      	sub	sp, #8
200005c0:	af00      	add	r7, sp, #0
	for(int i=0; i < 8; i++){
200005c2:	2300      	movs	r3, #0
200005c4:	607b      	str	r3, [r7, #4]
200005c6:	e01e      	b.n	20000606 <graphic_clean_screen+0x4a>
		graphic_write_command(0xB8|i, B_CS1|B_CS2);
200005c8:	687b      	ldr	r3, [r7, #4]
200005ca:	b25b      	sxtb	r3, r3
200005cc:	2248      	movs	r2, #72	; 0x48
200005ce:	4252      	negs	r2, r2
200005d0:	4313      	orrs	r3, r2
200005d2:	b25b      	sxtb	r3, r3
200005d4:	b2db      	uxtb	r3, r3
200005d6:	2118      	movs	r1, #24
200005d8:	0018      	movs	r0, r3
200005da:	f7ff ff2f 	bl	2000043c <graphic_write_command>
		graphic_write_command(0x40, B_CS1|B_CS2);
200005de:	2118      	movs	r1, #24
200005e0:	2040      	movs	r0, #64	; 0x40
200005e2:	f7ff ff2b 	bl	2000043c <graphic_write_command>
		for(int j=0; j<64; j++){
200005e6:	2300      	movs	r3, #0
200005e8:	603b      	str	r3, [r7, #0]
200005ea:	e006      	b.n	200005fa <graphic_clean_screen+0x3e>
			graphic_write_data(0,B_CS1|B_CS2);
200005ec:	2118      	movs	r1, #24
200005ee:	2000      	movs	r0, #0
200005f0:	f7ff ff50 	bl	20000494 <graphic_write_data>
		for(int j=0; j<64; j++){
200005f4:	683b      	ldr	r3, [r7, #0]
200005f6:	3301      	adds	r3, #1
200005f8:	603b      	str	r3, [r7, #0]
200005fa:	683b      	ldr	r3, [r7, #0]
200005fc:	2b3f      	cmp	r3, #63	; 0x3f
200005fe:	ddf5      	ble.n	200005ec <graphic_clean_screen+0x30>
	for(int i=0; i < 8; i++){
20000600:	687b      	ldr	r3, [r7, #4]
20000602:	3301      	adds	r3, #1
20000604:	607b      	str	r3, [r7, #4]
20000606:	687b      	ldr	r3, [r7, #4]
20000608:	2b07      	cmp	r3, #7
2000060a:	dddd      	ble.n	200005c8 <graphic_clean_screen+0xc>
		}
	}
}
2000060c:	46c0      	nop			; (mov r8, r8)
2000060e:	46bd      	mov	sp, r7
20000610:	b002      	add	sp, #8
20000612:	bd80      	pop	{r7, pc}

20000614 <graphic_pixel>:

void graphic_pixel(unsigned char x, unsigned char y, unsigned char set){
20000614:	b5b0      	push	{r4, r5, r7, lr}
20000616:	b084      	sub	sp, #16
20000618:	af00      	add	r7, sp, #0
2000061a:	0004      	movs	r4, r0
2000061c:	0008      	movs	r0, r1
2000061e:	0011      	movs	r1, r2
20000620:	1dfb      	adds	r3, r7, #7
20000622:	1c22      	adds	r2, r4, #0
20000624:	701a      	strb	r2, [r3, #0]
20000626:	1dbb      	adds	r3, r7, #6
20000628:	1c02      	adds	r2, r0, #0
2000062a:	701a      	strb	r2, [r3, #0]
2000062c:	1d7b      	adds	r3, r7, #5
2000062e:	1c0a      	adds	r2, r1, #0
20000630:	701a      	strb	r2, [r3, #0]
	x -= 1;
20000632:	1dfb      	adds	r3, r7, #7
20000634:	1dfa      	adds	r2, r7, #7
20000636:	7812      	ldrb	r2, [r2, #0]
20000638:	3a01      	subs	r2, #1
2000063a:	701a      	strb	r2, [r3, #0]
	y -= 1;
2000063c:	1dbb      	adds	r3, r7, #6
2000063e:	1dba      	adds	r2, r7, #6
20000640:	7812      	ldrb	r2, [r2, #0]
20000642:	3a01      	subs	r2, #1
20000644:	701a      	strb	r2, [r3, #0]
	char controller;
	if (x > 127 | y > 63)
20000646:	1dfb      	adds	r3, r7, #7
20000648:	781b      	ldrb	r3, [r3, #0]
2000064a:	b25b      	sxtb	r3, r3
2000064c:	b2db      	uxtb	r3, r3
2000064e:	09db      	lsrs	r3, r3, #7
20000650:	b2da      	uxtb	r2, r3
20000652:	1dbb      	adds	r3, r7, #6
20000654:	781b      	ldrb	r3, [r3, #0]
20000656:	213f      	movs	r1, #63	; 0x3f
20000658:	4299      	cmp	r1, r3
2000065a:	419b      	sbcs	r3, r3
2000065c:	425b      	negs	r3, r3
2000065e:	b2db      	uxtb	r3, r3
20000660:	4313      	orrs	r3, r2
20000662:	b2db      	uxtb	r3, r3
20000664:	2b00      	cmp	r3, #0
20000666:	d16f      	bne.n	20000748 <graphic_pixel+0x134>
		{return;}
	char index = (1<<(y%8));
20000668:	1dbb      	adds	r3, r7, #6
2000066a:	781b      	ldrb	r3, [r3, #0]
2000066c:	2207      	movs	r2, #7
2000066e:	4013      	ands	r3, r2
20000670:	2201      	movs	r2, #1
20000672:	409a      	lsls	r2, r3
20000674:	230d      	movs	r3, #13
20000676:	18fb      	adds	r3, r7, r3
20000678:	701a      	strb	r2, [r3, #0]
	if (x<64){
2000067a:	1dfb      	adds	r3, r7, #7
2000067c:	781b      	ldrb	r3, [r3, #0]
2000067e:	2b3f      	cmp	r3, #63	; 0x3f
20000680:	d804      	bhi.n	2000068c <graphic_pixel+0x78>
		controller = B_CS1;
20000682:	230f      	movs	r3, #15
20000684:	18fb      	adds	r3, r7, r3
20000686:	2208      	movs	r2, #8
20000688:	701a      	strb	r2, [r3, #0]
2000068a:	e008      	b.n	2000069e <graphic_pixel+0x8a>
	}
	else{
		controller = B_CS2;
2000068c:	230f      	movs	r3, #15
2000068e:	18fb      	adds	r3, r7, r3
20000690:	2210      	movs	r2, #16
20000692:	701a      	strb	r2, [r3, #0]
		x -= 64;
20000694:	1dfb      	adds	r3, r7, #7
20000696:	1dfa      	adds	r2, r7, #7
20000698:	7812      	ldrb	r2, [r2, #0]
2000069a:	3a40      	subs	r2, #64	; 0x40
2000069c:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_command(0x40 | x, controller);
2000069e:	1dfb      	adds	r3, r7, #7
200006a0:	781b      	ldrb	r3, [r3, #0]
200006a2:	2240      	movs	r2, #64	; 0x40
200006a4:	4313      	orrs	r3, r2
200006a6:	b2da      	uxtb	r2, r3
200006a8:	250f      	movs	r5, #15
200006aa:	197b      	adds	r3, r7, r5
200006ac:	781b      	ldrb	r3, [r3, #0]
200006ae:	0019      	movs	r1, r3
200006b0:	0010      	movs	r0, r2
200006b2:	f7ff fec3 	bl	2000043c <graphic_write_command>
	graphic_write_command(0xB8 | (y/8), controller);
200006b6:	1dbb      	adds	r3, r7, #6
200006b8:	781b      	ldrb	r3, [r3, #0]
200006ba:	08db      	lsrs	r3, r3, #3
200006bc:	b2db      	uxtb	r3, r3
200006be:	2248      	movs	r2, #72	; 0x48
200006c0:	4252      	negs	r2, r2
200006c2:	4313      	orrs	r3, r2
200006c4:	b2da      	uxtb	r2, r3
200006c6:	197b      	adds	r3, r7, r5
200006c8:	781b      	ldrb	r3, [r3, #0]
200006ca:	0019      	movs	r1, r3
200006cc:	0010      	movs	r0, r2
200006ce:	f7ff feb5 	bl	2000043c <graphic_write_command>
	unsigned char temp = graphic_read_data(controller);
200006d2:	230e      	movs	r3, #14
200006d4:	18fc      	adds	r4, r7, r3
200006d6:	197b      	adds	r3, r7, r5
200006d8:	781b      	ldrb	r3, [r3, #0]
200006da:	0018      	movs	r0, r3
200006dc:	f7ff ff0a 	bl	200004f4 <graphic_read_data>
200006e0:	0003      	movs	r3, r0
200006e2:	7023      	strb	r3, [r4, #0]
	graphic_write_command(0x40 | x, controller);
200006e4:	1dfb      	adds	r3, r7, #7
200006e6:	781b      	ldrb	r3, [r3, #0]
200006e8:	2240      	movs	r2, #64	; 0x40
200006ea:	4313      	orrs	r3, r2
200006ec:	b2da      	uxtb	r2, r3
200006ee:	197b      	adds	r3, r7, r5
200006f0:	781b      	ldrb	r3, [r3, #0]
200006f2:	0019      	movs	r1, r3
200006f4:	0010      	movs	r0, r2
200006f6:	f7ff fea1 	bl	2000043c <graphic_write_command>
	if(set){
200006fa:	1d7b      	adds	r3, r7, #5
200006fc:	781b      	ldrb	r3, [r3, #0]
200006fe:	2b00      	cmp	r3, #0
20000700:	d009      	beq.n	20000716 <graphic_pixel+0x102>
		temp = temp | index;
20000702:	220e      	movs	r2, #14
20000704:	18bb      	adds	r3, r7, r2
20000706:	18b9      	adds	r1, r7, r2
20000708:	220d      	movs	r2, #13
2000070a:	18ba      	adds	r2, r7, r2
2000070c:	7809      	ldrb	r1, [r1, #0]
2000070e:	7812      	ldrb	r2, [r2, #0]
20000710:	430a      	orrs	r2, r1
20000712:	701a      	strb	r2, [r3, #0]
20000714:	e00d      	b.n	20000732 <graphic_pixel+0x11e>
	}
	else{
		temp = temp &~index;
20000716:	230d      	movs	r3, #13
20000718:	18fb      	adds	r3, r7, r3
2000071a:	781b      	ldrb	r3, [r3, #0]
2000071c:	b25b      	sxtb	r3, r3
2000071e:	43db      	mvns	r3, r3
20000720:	b25b      	sxtb	r3, r3
20000722:	210e      	movs	r1, #14
20000724:	187a      	adds	r2, r7, r1
20000726:	7812      	ldrb	r2, [r2, #0]
20000728:	b252      	sxtb	r2, r2
2000072a:	4013      	ands	r3, r2
2000072c:	b25a      	sxtb	r2, r3
2000072e:	187b      	adds	r3, r7, r1
20000730:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_data(temp, controller);
20000732:	230f      	movs	r3, #15
20000734:	18fb      	adds	r3, r7, r3
20000736:	781a      	ldrb	r2, [r3, #0]
20000738:	230e      	movs	r3, #14
2000073a:	18fb      	adds	r3, r7, r3
2000073c:	781b      	ldrb	r3, [r3, #0]
2000073e:	0011      	movs	r1, r2
20000740:	0018      	movs	r0, r3
20000742:	f7ff fea7 	bl	20000494 <graphic_write_data>
20000746:	e000      	b.n	2000074a <graphic_pixel+0x136>
		{return;}
20000748:	46c0      	nop			; (mov r8, r8)
}
2000074a:	46bd      	mov	sp, r7
2000074c:	b004      	add	sp, #16
2000074e:	bdb0      	pop	{r4, r5, r7, pc}

20000750 <lcdBufferDraw>:

void lcdBufferDraw(plcdBuffer toDraw){
20000750:	b5f0      	push	{r4, r5, r6, r7, lr}
20000752:	b085      	sub	sp, #20
20000754:	af00      	add	r7, sp, #0
20000756:	6078      	str	r0, [r7, #4]
	//char (*display)[8] = (char(*)[8])toDraw->display;
	
	unsigned char x,i,j;
	unsigned char controller, data;
	for(i=0; i<128; i++){
20000758:	230e      	movs	r3, #14
2000075a:	18fb      	adds	r3, r7, r3
2000075c:	2200      	movs	r2, #0
2000075e:	701a      	strb	r2, [r3, #0]
20000760:	e097      	b.n	20000892 <lcdBufferDraw+0x142>
		for(j=0; j<8; j++){
20000762:	230d      	movs	r3, #13
20000764:	18fb      	adds	r3, r7, r3
20000766:	2200      	movs	r2, #0
20000768:	701a      	strb	r2, [r3, #0]
2000076a:	e086      	b.n	2000087a <lcdBufferDraw+0x12a>
			char updated = (toDraw->changeLog[i] &~ (1<<j));
2000076c:	230e      	movs	r3, #14
2000076e:	18fb      	adds	r3, r7, r3
20000770:	781a      	ldrb	r2, [r3, #0]
20000772:	6879      	ldr	r1, [r7, #4]
20000774:	2380      	movs	r3, #128	; 0x80
20000776:	00db      	lsls	r3, r3, #3
20000778:	188a      	adds	r2, r1, r2
2000077a:	18d3      	adds	r3, r2, r3
2000077c:	781b      	ldrb	r3, [r3, #0]
2000077e:	b25b      	sxtb	r3, r3
20000780:	220d      	movs	r2, #13
20000782:	18ba      	adds	r2, r7, r2
20000784:	7812      	ldrb	r2, [r2, #0]
20000786:	2101      	movs	r1, #1
20000788:	4091      	lsls	r1, r2
2000078a:	000a      	movs	r2, r1
2000078c:	b252      	sxtb	r2, r2
2000078e:	43d2      	mvns	r2, r2
20000790:	b252      	sxtb	r2, r2
20000792:	4013      	ands	r3, r2
20000794:	b25a      	sxtb	r2, r3
20000796:	210b      	movs	r1, #11
20000798:	187b      	adds	r3, r7, r1
2000079a:	701a      	strb	r2, [r3, #0]
			if(updated){
2000079c:	187b      	adds	r3, r7, r1
2000079e:	781b      	ldrb	r3, [r3, #0]
200007a0:	2b00      	cmp	r3, #0
200007a2:	d064      	beq.n	2000086e <lcdBufferDraw+0x11e>
				if(i<64){
200007a4:	230e      	movs	r3, #14
200007a6:	18fb      	adds	r3, r7, r3
200007a8:	781b      	ldrb	r3, [r3, #0]
200007aa:	2b3f      	cmp	r3, #63	; 0x3f
200007ac:	d80a      	bhi.n	200007c4 <lcdBufferDraw+0x74>
					controller = B_CS1;
200007ae:	230c      	movs	r3, #12
200007b0:	18fb      	adds	r3, r7, r3
200007b2:	2208      	movs	r2, #8
200007b4:	701a      	strb	r2, [r3, #0]
					x=i;
200007b6:	230f      	movs	r3, #15
200007b8:	18fb      	adds	r3, r7, r3
200007ba:	220e      	movs	r2, #14
200007bc:	18ba      	adds	r2, r7, r2
200007be:	7812      	ldrb	r2, [r2, #0]
200007c0:	701a      	strb	r2, [r3, #0]
200007c2:	e00a      	b.n	200007da <lcdBufferDraw+0x8a>
				}
				else{
					controller = B_CS2;
200007c4:	230c      	movs	r3, #12
200007c6:	18fb      	adds	r3, r7, r3
200007c8:	2210      	movs	r2, #16
200007ca:	701a      	strb	r2, [r3, #0]
					x = i-64;
200007cc:	230f      	movs	r3, #15
200007ce:	18fb      	adds	r3, r7, r3
200007d0:	220e      	movs	r2, #14
200007d2:	18ba      	adds	r2, r7, r2
200007d4:	7812      	ldrb	r2, [r2, #0]
200007d6:	3a40      	subs	r2, #64	; 0x40
200007d8:	701a      	strb	r2, [r3, #0]
				}
				data = toDraw->display[i][j];
200007da:	240e      	movs	r4, #14
200007dc:	193b      	adds	r3, r7, r4
200007de:	7819      	ldrb	r1, [r3, #0]
200007e0:	250d      	movs	r5, #13
200007e2:	197b      	adds	r3, r7, r5
200007e4:	781a      	ldrb	r2, [r3, #0]
200007e6:	230a      	movs	r3, #10
200007e8:	18fb      	adds	r3, r7, r3
200007ea:	6878      	ldr	r0, [r7, #4]
200007ec:	00c9      	lsls	r1, r1, #3
200007ee:	1841      	adds	r1, r0, r1
200007f0:	5c8a      	ldrb	r2, [r1, r2]
200007f2:	701a      	strb	r2, [r3, #0]
				graphic_write_command(adress | x, controller);
200007f4:	220f      	movs	r2, #15
200007f6:	18bb      	adds	r3, r7, r2
200007f8:	781b      	ldrb	r3, [r3, #0]
200007fa:	2240      	movs	r2, #64	; 0x40
200007fc:	4313      	orrs	r3, r2
200007fe:	b2da      	uxtb	r2, r3
20000800:	260c      	movs	r6, #12
20000802:	19bb      	adds	r3, r7, r6
20000804:	781b      	ldrb	r3, [r3, #0]
20000806:	0019      	movs	r1, r3
20000808:	0010      	movs	r0, r2
2000080a:	f7ff fe17 	bl	2000043c <graphic_write_command>
				graphic_write_command(page | j, controller);
2000080e:	197b      	adds	r3, r7, r5
20000810:	781b      	ldrb	r3, [r3, #0]
20000812:	2248      	movs	r2, #72	; 0x48
20000814:	4252      	negs	r2, r2
20000816:	4313      	orrs	r3, r2
20000818:	b2da      	uxtb	r2, r3
2000081a:	19bb      	adds	r3, r7, r6
2000081c:	781b      	ldrb	r3, [r3, #0]
2000081e:	0019      	movs	r1, r3
20000820:	0010      	movs	r0, r2
20000822:	f7ff fe0b 	bl	2000043c <graphic_write_command>
				graphic_write_data(data, controller);
20000826:	19bb      	adds	r3, r7, r6
20000828:	781a      	ldrb	r2, [r3, #0]
2000082a:	230a      	movs	r3, #10
2000082c:	18fb      	adds	r3, r7, r3
2000082e:	781b      	ldrb	r3, [r3, #0]
20000830:	0011      	movs	r1, r2
20000832:	0018      	movs	r0, r3
20000834:	f7ff fe2e 	bl	20000494 <graphic_write_data>
				toDraw->changeLog[i] = (toDraw->changeLog[i] | (1<<j));
20000838:	193b      	adds	r3, r7, r4
2000083a:	781a      	ldrb	r2, [r3, #0]
2000083c:	6879      	ldr	r1, [r7, #4]
2000083e:	2380      	movs	r3, #128	; 0x80
20000840:	00db      	lsls	r3, r3, #3
20000842:	188a      	adds	r2, r1, r2
20000844:	18d3      	adds	r3, r2, r3
20000846:	781b      	ldrb	r3, [r3, #0]
20000848:	b25a      	sxtb	r2, r3
2000084a:	197b      	adds	r3, r7, r5
2000084c:	781b      	ldrb	r3, [r3, #0]
2000084e:	2101      	movs	r1, #1
20000850:	4099      	lsls	r1, r3
20000852:	000b      	movs	r3, r1
20000854:	b25b      	sxtb	r3, r3
20000856:	4313      	orrs	r3, r2
20000858:	b259      	sxtb	r1, r3
2000085a:	193b      	adds	r3, r7, r4
2000085c:	781a      	ldrb	r2, [r3, #0]
2000085e:	b2c8      	uxtb	r0, r1
20000860:	6879      	ldr	r1, [r7, #4]
20000862:	2380      	movs	r3, #128	; 0x80
20000864:	00db      	lsls	r3, r3, #3
20000866:	188a      	adds	r2, r1, r2
20000868:	18d3      	adds	r3, r2, r3
2000086a:	1c02      	adds	r2, r0, #0
2000086c:	701a      	strb	r2, [r3, #0]
		for(j=0; j<8; j++){
2000086e:	210d      	movs	r1, #13
20000870:	187b      	adds	r3, r7, r1
20000872:	781a      	ldrb	r2, [r3, #0]
20000874:	187b      	adds	r3, r7, r1
20000876:	3201      	adds	r2, #1
20000878:	701a      	strb	r2, [r3, #0]
2000087a:	230d      	movs	r3, #13
2000087c:	18fb      	adds	r3, r7, r3
2000087e:	781b      	ldrb	r3, [r3, #0]
20000880:	2b07      	cmp	r3, #7
20000882:	d800      	bhi.n	20000886 <lcdBufferDraw+0x136>
20000884:	e772      	b.n	2000076c <lcdBufferDraw+0x1c>
	for(i=0; i<128; i++){
20000886:	210e      	movs	r1, #14
20000888:	187b      	adds	r3, r7, r1
2000088a:	781a      	ldrb	r2, [r3, #0]
2000088c:	187b      	adds	r3, r7, r1
2000088e:	3201      	adds	r2, #1
20000890:	701a      	strb	r2, [r3, #0]
20000892:	230e      	movs	r3, #14
20000894:	18fb      	adds	r3, r7, r3
20000896:	781b      	ldrb	r3, [r3, #0]
20000898:	b25b      	sxtb	r3, r3
2000089a:	2b00      	cmp	r3, #0
2000089c:	db00      	blt.n	200008a0 <lcdBufferDraw+0x150>
2000089e:	e760      	b.n	20000762 <lcdBufferDraw+0x12>
			}
		}
	}
	
}
200008a0:	46c0      	nop			; (mov r8, r8)
200008a2:	46bd      	mov	sp, r7
200008a4:	b005      	add	sp, #20
200008a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

200008a8 <lcdBufferWritePixel>:

void lcdBufferWritePixel(plcdBuffer lcdBuff, unsigned char x, unsigned char y, unsigned char set){
200008a8:	b590      	push	{r4, r7, lr}
200008aa:	b085      	sub	sp, #20
200008ac:	af00      	add	r7, sp, #0
200008ae:	6078      	str	r0, [r7, #4]
200008b0:	000c      	movs	r4, r1
200008b2:	0010      	movs	r0, r2
200008b4:	0019      	movs	r1, r3
200008b6:	1cfb      	adds	r3, r7, #3
200008b8:	1c22      	adds	r2, r4, #0
200008ba:	701a      	strb	r2, [r3, #0]
200008bc:	1cbb      	adds	r3, r7, #2
200008be:	1c02      	adds	r2, r0, #0
200008c0:	701a      	strb	r2, [r3, #0]
200008c2:	1c7b      	adds	r3, r7, #1
200008c4:	1c0a      	adds	r2, r1, #0
200008c6:	701a      	strb	r2, [r3, #0]
	char controller;
	if (x > 127 | y > 63)
200008c8:	1cfb      	adds	r3, r7, #3
200008ca:	781b      	ldrb	r3, [r3, #0]
200008cc:	b25b      	sxtb	r3, r3
200008ce:	b2db      	uxtb	r3, r3
200008d0:	09db      	lsrs	r3, r3, #7
200008d2:	b2da      	uxtb	r2, r3
200008d4:	1cbb      	adds	r3, r7, #2
200008d6:	781b      	ldrb	r3, [r3, #0]
200008d8:	213f      	movs	r1, #63	; 0x3f
200008da:	4299      	cmp	r1, r3
200008dc:	419b      	sbcs	r3, r3
200008de:	425b      	negs	r3, r3
200008e0:	b2db      	uxtb	r3, r3
200008e2:	4313      	orrs	r3, r2
200008e4:	b2db      	uxtb	r3, r3
200008e6:	2b00      	cmp	r3, #0
200008e8:	d16c      	bne.n	200009c4 <lcdBufferWritePixel+0x11c>
		{return;}
	if (x<64){
200008ea:	1cfb      	adds	r3, r7, #3
200008ec:	781b      	ldrb	r3, [r3, #0]
200008ee:	2b3f      	cmp	r3, #63	; 0x3f
200008f0:	d804      	bhi.n	200008fc <lcdBufferWritePixel+0x54>
		controller = B_CS1;
200008f2:	230f      	movs	r3, #15
200008f4:	18fb      	adds	r3, r7, r3
200008f6:	2208      	movs	r2, #8
200008f8:	701a      	strb	r2, [r3, #0]
200008fa:	e003      	b.n	20000904 <lcdBufferWritePixel+0x5c>
	}
	else{
		controller = B_CS2;
200008fc:	230f      	movs	r3, #15
200008fe:	18fb      	adds	r3, r7, r3
20000900:	2210      	movs	r2, #16
20000902:	701a      	strb	r2, [r3, #0]
	}
	char index = (1<<(y%8));
20000904:	1cbb      	adds	r3, r7, #2
20000906:	781b      	ldrb	r3, [r3, #0]
20000908:	2207      	movs	r2, #7
2000090a:	4013      	ands	r3, r2
2000090c:	2201      	movs	r2, #1
2000090e:	409a      	lsls	r2, r3
20000910:	230e      	movs	r3, #14
20000912:	18fb      	adds	r3, r7, r3
20000914:	701a      	strb	r2, [r3, #0]
	if(set){
20000916:	1c7b      	adds	r3, r7, #1
20000918:	781b      	ldrb	r3, [r3, #0]
2000091a:	2b00      	cmp	r3, #0
2000091c:	d016      	beq.n	2000094c <lcdBufferWritePixel+0xa4>
		lcdBuff->display[x][y/8] |= index;
2000091e:	1cfb      	adds	r3, r7, #3
20000920:	781b      	ldrb	r3, [r3, #0]
20000922:	1cba      	adds	r2, r7, #2
20000924:	7812      	ldrb	r2, [r2, #0]
20000926:	08d2      	lsrs	r2, r2, #3
20000928:	b2d0      	uxtb	r0, r2
2000092a:	0001      	movs	r1, r0
2000092c:	687a      	ldr	r2, [r7, #4]
2000092e:	00db      	lsls	r3, r3, #3
20000930:	18d3      	adds	r3, r2, r3
20000932:	5c59      	ldrb	r1, [r3, r1]
20000934:	1cfb      	adds	r3, r7, #3
20000936:	781b      	ldrb	r3, [r3, #0]
20000938:	220e      	movs	r2, #14
2000093a:	18ba      	adds	r2, r7, r2
2000093c:	7812      	ldrb	r2, [r2, #0]
2000093e:	430a      	orrs	r2, r1
20000940:	b2d1      	uxtb	r1, r2
20000942:	687a      	ldr	r2, [r7, #4]
20000944:	00db      	lsls	r3, r3, #3
20000946:	18d3      	adds	r3, r2, r3
20000948:	1c0a      	adds	r2, r1, #0
2000094a:	541a      	strb	r2, [r3, r0]
	}
	if(!set){
2000094c:	1c7b      	adds	r3, r7, #1
2000094e:	781b      	ldrb	r3, [r3, #0]
20000950:	2b00      	cmp	r3, #0
20000952:	d11b      	bne.n	2000098c <lcdBufferWritePixel+0xe4>
		lcdBuff->display[x][y/8] &= ~index;
20000954:	1cfb      	adds	r3, r7, #3
20000956:	781b      	ldrb	r3, [r3, #0]
20000958:	1cba      	adds	r2, r7, #2
2000095a:	7812      	ldrb	r2, [r2, #0]
2000095c:	08d2      	lsrs	r2, r2, #3
2000095e:	b2d1      	uxtb	r1, r2
20000960:	0008      	movs	r0, r1
20000962:	687a      	ldr	r2, [r7, #4]
20000964:	00db      	lsls	r3, r3, #3
20000966:	18d3      	adds	r3, r2, r3
20000968:	5c1b      	ldrb	r3, [r3, r0]
2000096a:	b25b      	sxtb	r3, r3
2000096c:	220e      	movs	r2, #14
2000096e:	18ba      	adds	r2, r7, r2
20000970:	7812      	ldrb	r2, [r2, #0]
20000972:	b252      	sxtb	r2, r2
20000974:	43d2      	mvns	r2, r2
20000976:	b252      	sxtb	r2, r2
20000978:	4013      	ands	r3, r2
2000097a:	b25a      	sxtb	r2, r3
2000097c:	1cfb      	adds	r3, r7, #3
2000097e:	781b      	ldrb	r3, [r3, #0]
20000980:	b2d0      	uxtb	r0, r2
20000982:	687a      	ldr	r2, [r7, #4]
20000984:	00db      	lsls	r3, r3, #3
20000986:	18d3      	adds	r3, r2, r3
20000988:	1c02      	adds	r2, r0, #0
2000098a:	545a      	strb	r2, [r3, r1]
	}
	lcdBuff->changeLog[x] |= (1<<y);
2000098c:	1cfb      	adds	r3, r7, #3
2000098e:	781a      	ldrb	r2, [r3, #0]
20000990:	6879      	ldr	r1, [r7, #4]
20000992:	2380      	movs	r3, #128	; 0x80
20000994:	00db      	lsls	r3, r3, #3
20000996:	188a      	adds	r2, r1, r2
20000998:	18d3      	adds	r3, r2, r3
2000099a:	781b      	ldrb	r3, [r3, #0]
2000099c:	b25a      	sxtb	r2, r3
2000099e:	1cbb      	adds	r3, r7, #2
200009a0:	781b      	ldrb	r3, [r3, #0]
200009a2:	2101      	movs	r1, #1
200009a4:	4099      	lsls	r1, r3
200009a6:	000b      	movs	r3, r1
200009a8:	b25b      	sxtb	r3, r3
200009aa:	4313      	orrs	r3, r2
200009ac:	b259      	sxtb	r1, r3
200009ae:	1cfb      	adds	r3, r7, #3
200009b0:	781a      	ldrb	r2, [r3, #0]
200009b2:	b2c8      	uxtb	r0, r1
200009b4:	6879      	ldr	r1, [r7, #4]
200009b6:	2380      	movs	r3, #128	; 0x80
200009b8:	00db      	lsls	r3, r3, #3
200009ba:	188a      	adds	r2, r1, r2
200009bc:	18d3      	adds	r3, r2, r3
200009be:	1c02      	adds	r2, r0, #0
200009c0:	701a      	strb	r2, [r3, #0]
200009c2:	e000      	b.n	200009c6 <lcdBufferWritePixel+0x11e>
		{return;}
200009c4:	46c0      	nop			; (mov r8, r8)
}
200009c6:	46bd      	mov	sp, r7
200009c8:	b005      	add	sp, #20
200009ca:	bd90      	pop	{r4, r7, pc}

200009cc <buffer_clear>:
	buffer_display,
	buffer_changeLog,
	lcdBufferDraw
};*/

void buffer_clear(plcdBuffer plcdBuff){
200009cc:	b580      	push	{r7, lr}
200009ce:	b084      	sub	sp, #16
200009d0:	af00      	add	r7, sp, #0
200009d2:	6078      	str	r0, [r7, #4]
	for(int i=0; i<128; i++){
200009d4:	2300      	movs	r3, #0
200009d6:	60fb      	str	r3, [r7, #12]
200009d8:	e01b      	b.n	20000a12 <buffer_clear+0x46>
		plcdBuff->changeLog[i] = 0;
200009da:	6879      	ldr	r1, [r7, #4]
200009dc:	2380      	movs	r3, #128	; 0x80
200009de:	00db      	lsls	r3, r3, #3
200009e0:	68fa      	ldr	r2, [r7, #12]
200009e2:	188a      	adds	r2, r1, r2
200009e4:	18d3      	adds	r3, r2, r3
200009e6:	2200      	movs	r2, #0
200009e8:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<8; j++){
200009ea:	2300      	movs	r3, #0
200009ec:	60bb      	str	r3, [r7, #8]
200009ee:	e00a      	b.n	20000a06 <buffer_clear+0x3a>
			plcdBuff->display[i][j] = 0;
200009f0:	687a      	ldr	r2, [r7, #4]
200009f2:	68fb      	ldr	r3, [r7, #12]
200009f4:	00db      	lsls	r3, r3, #3
200009f6:	18d2      	adds	r2, r2, r3
200009f8:	68bb      	ldr	r3, [r7, #8]
200009fa:	18d3      	adds	r3, r2, r3
200009fc:	2200      	movs	r2, #0
200009fe:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<8; j++){
20000a00:	68bb      	ldr	r3, [r7, #8]
20000a02:	3301      	adds	r3, #1
20000a04:	60bb      	str	r3, [r7, #8]
20000a06:	68bb      	ldr	r3, [r7, #8]
20000a08:	2b07      	cmp	r3, #7
20000a0a:	ddf1      	ble.n	200009f0 <buffer_clear+0x24>
	for(int i=0; i<128; i++){
20000a0c:	68fb      	ldr	r3, [r7, #12]
20000a0e:	3301      	adds	r3, #1
20000a10:	60fb      	str	r3, [r7, #12]
20000a12:	68fb      	ldr	r3, [r7, #12]
20000a14:	2b7f      	cmp	r3, #127	; 0x7f
20000a16:	dde0      	ble.n	200009da <buffer_clear+0xe>
		}
	}
}
20000a18:	46c0      	nop			; (mov r8, r8)
20000a1a:	46bd      	mov	sp, r7
20000a1c:	b004      	add	sp, #16
20000a1e:	bd80      	pop	{r7, pc}

20000a20 <pong_init>:
#include "ponglogic.h"
#include "portDeclare.h"



void pong_init(){
20000a20:	b580      	push	{r7, lr}
20000a22:	af00      	add	r7, sp, #0
	
}
20000a24:	46c0      	nop			; (mov r8, r8)
20000a26:	46bd      	mov	sp, r7
20000a28:	bd80      	pop	{r7, pc}

20000a2a <set_object_speed>:

void set_object_speed(pobject o, int speedx, int speedy){
20000a2a:	b580      	push	{r7, lr}
20000a2c:	b084      	sub	sp, #16
20000a2e:	af00      	add	r7, sp, #0
20000a30:	60f8      	str	r0, [r7, #12]
20000a32:	60b9      	str	r1, [r7, #8]
20000a34:	607a      	str	r2, [r7, #4]
	o->dirx = speedx;
20000a36:	68fb      	ldr	r3, [r7, #12]
20000a38:	68ba      	ldr	r2, [r7, #8]
20000a3a:	605a      	str	r2, [r3, #4]
	o->diry = speedy;
20000a3c:	68fb      	ldr	r3, [r7, #12]
20000a3e:	687a      	ldr	r2, [r7, #4]
20000a40:	609a      	str	r2, [r3, #8]
}
20000a42:	46c0      	nop			; (mov r8, r8)
20000a44:	46bd      	mov	sp, r7
20000a46:	b004      	add	sp, #16
20000a48:	bd80      	pop	{r7, pc}

20000a4a <pong_set_position>:

void pong_set_position(pobject o, int posx, int posy){
20000a4a:	b580      	push	{r7, lr}
20000a4c:	b084      	sub	sp, #16
20000a4e:	af00      	add	r7, sp, #0
20000a50:	60f8      	str	r0, [r7, #12]
20000a52:	60b9      	str	r1, [r7, #8]
20000a54:	607a      	str	r2, [r7, #4]
	o->posx = posx;
20000a56:	68fb      	ldr	r3, [r7, #12]
20000a58:	68ba      	ldr	r2, [r7, #8]
20000a5a:	60da      	str	r2, [r3, #12]
	o->posy = posy;
20000a5c:	68fb      	ldr	r3, [r7, #12]
20000a5e:	687a      	ldr	r2, [r7, #4]
20000a60:	611a      	str	r2, [r3, #16]
}
20000a62:	46c0      	nop			; (mov r8, r8)
20000a64:	46bd      	mov	sp, r7
20000a66:	b004      	add	sp, #16
20000a68:	bd80      	pop	{r7, pc}

20000a6a <draw_object>:

void draw_object(object* o){
20000a6a:	b580      	push	{r7, lr}
20000a6c:	b086      	sub	sp, #24
20000a6e:	af00      	add	r7, sp, #0
20000a70:	6078      	str	r0, [r7, #4]
	for (int i=0; i < o->geo->numpoints; i++){
20000a72:	2300      	movs	r3, #0
20000a74:	617b      	str	r3, [r7, #20]
20000a76:	e020      	b.n	20000aba <draw_object+0x50>
		int drawx = o->posx + o->geo->px[i].x;
20000a78:	687b      	ldr	r3, [r7, #4]
20000a7a:	68da      	ldr	r2, [r3, #12]
20000a7c:	687b      	ldr	r3, [r7, #4]
20000a7e:	6819      	ldr	r1, [r3, #0]
20000a80:	697b      	ldr	r3, [r7, #20]
20000a82:	3304      	adds	r3, #4
20000a84:	005b      	lsls	r3, r3, #1
20000a86:	18cb      	adds	r3, r1, r3
20000a88:	3304      	adds	r3, #4
20000a8a:	781b      	ldrb	r3, [r3, #0]
20000a8c:	18d3      	adds	r3, r2, r3
20000a8e:	613b      	str	r3, [r7, #16]
		int drawy = o->posy + o->geo->px[i].y;
20000a90:	687b      	ldr	r3, [r7, #4]
20000a92:	691a      	ldr	r2, [r3, #16]
20000a94:	687b      	ldr	r3, [r7, #4]
20000a96:	6819      	ldr	r1, [r3, #0]
20000a98:	697b      	ldr	r3, [r7, #20]
20000a9a:	3304      	adds	r3, #4
20000a9c:	005b      	lsls	r3, r3, #1
20000a9e:	18cb      	adds	r3, r1, r3
20000aa0:	3305      	adds	r3, #5
20000aa2:	781b      	ldrb	r3, [r3, #0]
20000aa4:	18d3      	adds	r3, r2, r3
20000aa6:	60fb      	str	r3, [r7, #12]
		graphic_pixel(drawx, drawy,1);
20000aa8:	68f9      	ldr	r1, [r7, #12]
20000aaa:	693b      	ldr	r3, [r7, #16]
20000aac:	2201      	movs	r2, #1
20000aae:	0018      	movs	r0, r3
20000ab0:	f7ff fdb0 	bl	20000614 <graphic_pixel>
	for (int i=0; i < o->geo->numpoints; i++){
20000ab4:	697b      	ldr	r3, [r7, #20]
20000ab6:	3301      	adds	r3, #1
20000ab8:	617b      	str	r3, [r7, #20]
20000aba:	687b      	ldr	r3, [r7, #4]
20000abc:	681b      	ldr	r3, [r3, #0]
20000abe:	681b      	ldr	r3, [r3, #0]
20000ac0:	697a      	ldr	r2, [r7, #20]
20000ac2:	429a      	cmp	r2, r3
20000ac4:	dbd8      	blt.n	20000a78 <draw_object+0xe>
	}
}
20000ac6:	46c0      	nop			; (mov r8, r8)
20000ac8:	46bd      	mov	sp, r7
20000aca:	b006      	add	sp, #24
20000acc:	bd80      	pop	{r7, pc}

20000ace <clear_object>:

void clear_object(object* o){
20000ace:	b580      	push	{r7, lr}
20000ad0:	b084      	sub	sp, #16
20000ad2:	af00      	add	r7, sp, #0
20000ad4:	6078      	str	r0, [r7, #4]
	for (int i=0; i < o->geo->numpoints; i++){
20000ad6:	2300      	movs	r3, #0
20000ad8:	60fb      	str	r3, [r7, #12]
20000ada:	e01c      	b.n	20000b16 <clear_object+0x48>
		graphic_pixel(o->posx + o->geo->px[i].x, o->posy + o->geo->px[i].y,0);
20000adc:	687b      	ldr	r3, [r7, #4]
20000ade:	68da      	ldr	r2, [r3, #12]
20000ae0:	687b      	ldr	r3, [r7, #4]
20000ae2:	6819      	ldr	r1, [r3, #0]
20000ae4:	68fb      	ldr	r3, [r7, #12]
20000ae6:	3304      	adds	r3, #4
20000ae8:	005b      	lsls	r3, r3, #1
20000aea:	18cb      	adds	r3, r1, r3
20000aec:	3304      	adds	r3, #4
20000aee:	781b      	ldrb	r3, [r3, #0]
20000af0:	18d0      	adds	r0, r2, r3
20000af2:	687b      	ldr	r3, [r7, #4]
20000af4:	691a      	ldr	r2, [r3, #16]
20000af6:	687b      	ldr	r3, [r7, #4]
20000af8:	6819      	ldr	r1, [r3, #0]
20000afa:	68fb      	ldr	r3, [r7, #12]
20000afc:	3304      	adds	r3, #4
20000afe:	005b      	lsls	r3, r3, #1
20000b00:	18cb      	adds	r3, r1, r3
20000b02:	3305      	adds	r3, #5
20000b04:	781b      	ldrb	r3, [r3, #0]
20000b06:	18d3      	adds	r3, r2, r3
20000b08:	2200      	movs	r2, #0
20000b0a:	0019      	movs	r1, r3
20000b0c:	f7ff fd82 	bl	20000614 <graphic_pixel>
	for (int i=0; i < o->geo->numpoints; i++){
20000b10:	68fb      	ldr	r3, [r7, #12]
20000b12:	3301      	adds	r3, #1
20000b14:	60fb      	str	r3, [r7, #12]
20000b16:	687b      	ldr	r3, [r7, #4]
20000b18:	681b      	ldr	r3, [r3, #0]
20000b1a:	681b      	ldr	r3, [r3, #0]
20000b1c:	68fa      	ldr	r2, [r7, #12]
20000b1e:	429a      	cmp	r2, r3
20000b20:	dbdc      	blt.n	20000adc <clear_object+0xe>
	}
}
20000b22:	46c0      	nop			; (mov r8, r8)
20000b24:	46bd      	mov	sp, r7
20000b26:	b004      	add	sp, #16
20000b28:	bd80      	pop	{r7, pc}

20000b2a <move_object>:

void move_object(object* o){
20000b2a:	b580      	push	{r7, lr}
20000b2c:	b082      	sub	sp, #8
20000b2e:	af00      	add	r7, sp, #0
20000b30:	6078      	str	r0, [r7, #4]
	clear_object(o);
20000b32:	687b      	ldr	r3, [r7, #4]
20000b34:	0018      	movs	r0, r3
20000b36:	f7ff ffca 	bl	20000ace <clear_object>
	o->posx = o->posx + o->dirx;
20000b3a:	687b      	ldr	r3, [r7, #4]
20000b3c:	68da      	ldr	r2, [r3, #12]
20000b3e:	687b      	ldr	r3, [r7, #4]
20000b40:	685b      	ldr	r3, [r3, #4]
20000b42:	18d2      	adds	r2, r2, r3
20000b44:	687b      	ldr	r3, [r7, #4]
20000b46:	60da      	str	r2, [r3, #12]
	o->posy = o->posy + o->diry;
20000b48:	687b      	ldr	r3, [r7, #4]
20000b4a:	691a      	ldr	r2, [r3, #16]
20000b4c:	687b      	ldr	r3, [r7, #4]
20000b4e:	689b      	ldr	r3, [r3, #8]
20000b50:	18d2      	adds	r2, r2, r3
20000b52:	687b      	ldr	r3, [r7, #4]
20000b54:	611a      	str	r2, [r3, #16]
	if(o->posx <= 0 | o->posx >= 124){
20000b56:	687b      	ldr	r3, [r7, #4]
20000b58:	68db      	ldr	r3, [r3, #12]
20000b5a:	1e5a      	subs	r2, r3, #1
20000b5c:	4313      	orrs	r3, r2
20000b5e:	0fdb      	lsrs	r3, r3, #31
20000b60:	b2da      	uxtb	r2, r3
20000b62:	687b      	ldr	r3, [r7, #4]
20000b64:	68db      	ldr	r3, [r3, #12]
20000b66:	2101      	movs	r1, #1
20000b68:	2b7b      	cmp	r3, #123	; 0x7b
20000b6a:	dc01      	bgt.n	20000b70 <move_object+0x46>
20000b6c:	2300      	movs	r3, #0
20000b6e:	1c19      	adds	r1, r3, #0
20000b70:	b2cb      	uxtb	r3, r1
20000b72:	4313      	orrs	r3, r2
20000b74:	b2db      	uxtb	r3, r3
20000b76:	2b00      	cmp	r3, #0
20000b78:	d004      	beq.n	20000b84 <move_object+0x5a>
			o->dirx = -o->dirx;
20000b7a:	687b      	ldr	r3, [r7, #4]
20000b7c:	685b      	ldr	r3, [r3, #4]
20000b7e:	425a      	negs	r2, r3
20000b80:	687b      	ldr	r3, [r7, #4]
20000b82:	605a      	str	r2, [r3, #4]
	}
	if(o->posy <= 0 | o->posy >= 60){
20000b84:	687b      	ldr	r3, [r7, #4]
20000b86:	691b      	ldr	r3, [r3, #16]
20000b88:	1e5a      	subs	r2, r3, #1
20000b8a:	4313      	orrs	r3, r2
20000b8c:	0fdb      	lsrs	r3, r3, #31
20000b8e:	b2da      	uxtb	r2, r3
20000b90:	687b      	ldr	r3, [r7, #4]
20000b92:	691b      	ldr	r3, [r3, #16]
20000b94:	2101      	movs	r1, #1
20000b96:	2b3b      	cmp	r3, #59	; 0x3b
20000b98:	dc01      	bgt.n	20000b9e <move_object+0x74>
20000b9a:	2300      	movs	r3, #0
20000b9c:	1c19      	adds	r1, r3, #0
20000b9e:	b2cb      	uxtb	r3, r1
20000ba0:	4313      	orrs	r3, r2
20000ba2:	b2db      	uxtb	r3, r3
20000ba4:	2b00      	cmp	r3, #0
20000ba6:	d004      	beq.n	20000bb2 <move_object+0x88>
		o->diry = -o->diry;
20000ba8:	687b      	ldr	r3, [r7, #4]
20000baa:	689b      	ldr	r3, [r3, #8]
20000bac:	425a      	negs	r2, r3
20000bae:	687b      	ldr	r3, [r7, #4]
20000bb0:	609a      	str	r2, [r3, #8]
	}
	draw_object(o);
20000bb2:	687b      	ldr	r3, [r7, #4]
20000bb4:	0018      	movs	r0, r3
20000bb6:	f7ff ff58 	bl	20000a6a <draw_object>
}
20000bba:	46c0      	nop			; (mov r8, r8)
20000bbc:	46bd      	mov	sp, r7
20000bbe:	b002      	add	sp, #8
20000bc0:	bd80      	pop	{r7, pc}

20000bc2 <pong_inc_playerScore>:

void pong_inc_playerScore(char* playerScore, char player){
20000bc2:	b580      	push	{r7, lr}
20000bc4:	b084      	sub	sp, #16
20000bc6:	af00      	add	r7, sp, #0
20000bc8:	6078      	str	r0, [r7, #4]
20000bca:	000a      	movs	r2, r1
20000bcc:	1cfb      	adds	r3, r7, #3
20000bce:	701a      	strb	r2, [r3, #0]
	ascii_init();
20000bd0:	f000 f912 	bl	20000df8 <ascii_init>
	playerScore[player-1]++;
20000bd4:	1cfb      	adds	r3, r7, #3
20000bd6:	781b      	ldrb	r3, [r3, #0]
20000bd8:	3b01      	subs	r3, #1
20000bda:	687a      	ldr	r2, [r7, #4]
20000bdc:	18d3      	adds	r3, r2, r3
20000bde:	781a      	ldrb	r2, [r3, #0]
20000be0:	3201      	adds	r2, #1
20000be2:	b2d2      	uxtb	r2, r2
20000be4:	701a      	strb	r2, [r3, #0]
	ascii_gotoxy(10*player,1*player);
20000be6:	1cfb      	adds	r3, r7, #3
20000be8:	781a      	ldrb	r2, [r3, #0]
20000bea:	0013      	movs	r3, r2
20000bec:	009b      	lsls	r3, r3, #2
20000bee:	189b      	adds	r3, r3, r2
20000bf0:	005b      	lsls	r3, r3, #1
20000bf2:	001a      	movs	r2, r3
20000bf4:	1cfb      	adds	r3, r7, #3
20000bf6:	781b      	ldrb	r3, [r3, #0]
20000bf8:	0019      	movs	r1, r3
20000bfa:	0010      	movs	r0, r2
20000bfc:	f000 f93d 	bl	20000e7a <ascii_gotoxy>
	char newScore = playerScore[player-1]+47;
20000c00:	1cfb      	adds	r3, r7, #3
20000c02:	781b      	ldrb	r3, [r3, #0]
20000c04:	3b01      	subs	r3, #1
20000c06:	687a      	ldr	r2, [r7, #4]
20000c08:	18d3      	adds	r3, r2, r3
20000c0a:	781a      	ldrb	r2, [r3, #0]
20000c0c:	210f      	movs	r1, #15
20000c0e:	187b      	adds	r3, r7, r1
20000c10:	322f      	adds	r2, #47	; 0x2f
20000c12:	701a      	strb	r2, [r3, #0]
	ascii_write_char(newScore);
20000c14:	187b      	adds	r3, r7, r1
20000c16:	781b      	ldrb	r3, [r3, #0]
20000c18:	0018      	movs	r0, r3
20000c1a:	f000 f910 	bl	20000e3e <ascii_write_char>
	graphic_initialize();
20000c1e:	f7ff fc8b 	bl	20000538 <graphic_initialize>
}
20000c22:	46c0      	nop			; (mov r8, r8)
20000c24:	46bd      	mov	sp, r7
20000c26:	b004      	add	sp, #16
20000c28:	bd80      	pop	{r7, pc}
	...

20000c2c <ascii_ctrl_bit_set>:

#include "delay.h"
#include "ascii_drivers.h"
#include "portDeclare.h"

void ascii_ctrl_bit_set(unsigned short x){
20000c2c:	b580      	push	{r7, lr}
20000c2e:	b084      	sub	sp, #16
20000c30:	af00      	add	r7, sp, #0
20000c32:	0002      	movs	r2, r0
20000c34:	1dbb      	adds	r3, r7, #6
20000c36:	801a      	strh	r2, [r3, #0]
	
	unsigned char c;
	c = *portOdrLowE;
20000c38:	4a0c      	ldr	r2, [pc, #48]	; (20000c6c <ascii_ctrl_bit_set+0x40>)
20000c3a:	210f      	movs	r1, #15
20000c3c:	187b      	adds	r3, r7, r1
20000c3e:	7812      	ldrb	r2, [r2, #0]
20000c40:	701a      	strb	r2, [r3, #0]
	c |= ( B_SELECT | x );
20000c42:	1dbb      	adds	r3, r7, #6
20000c44:	881b      	ldrh	r3, [r3, #0]
20000c46:	b2da      	uxtb	r2, r3
20000c48:	187b      	adds	r3, r7, r1
20000c4a:	781b      	ldrb	r3, [r3, #0]
20000c4c:	4313      	orrs	r3, r2
20000c4e:	b2da      	uxtb	r2, r3
20000c50:	0008      	movs	r0, r1
20000c52:	187b      	adds	r3, r7, r1
20000c54:	2104      	movs	r1, #4
20000c56:	430a      	orrs	r2, r1
20000c58:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = c; 
20000c5a:	4a04      	ldr	r2, [pc, #16]	; (20000c6c <ascii_ctrl_bit_set+0x40>)
20000c5c:	0001      	movs	r1, r0
20000c5e:	187b      	adds	r3, r7, r1
20000c60:	781b      	ldrb	r3, [r3, #0]
20000c62:	7013      	strb	r3, [r2, #0]
}
20000c64:	46c0      	nop			; (mov r8, r8)
20000c66:	46bd      	mov	sp, r7
20000c68:	b004      	add	sp, #16
20000c6a:	bd80      	pop	{r7, pc}
20000c6c:	40021014 	andmi	r1, r2, r4, lsl r0

20000c70 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned short x){
20000c70:	b580      	push	{r7, lr}
20000c72:	b084      	sub	sp, #16
20000c74:	af00      	add	r7, sp, #0
20000c76:	0002      	movs	r2, r0
20000c78:	1dbb      	adds	r3, r7, #6
20000c7a:	801a      	strh	r2, [r3, #0]
	unsigned char c;
	c = *portOdrLowE;
20000c7c:	4a0d      	ldr	r2, [pc, #52]	; (20000cb4 <ascii_ctrl_bit_clear+0x44>)
20000c7e:	210f      	movs	r1, #15
20000c80:	187b      	adds	r3, r7, r1
20000c82:	7812      	ldrb	r2, [r2, #0]
20000c84:	701a      	strb	r2, [r3, #0]
	c = B_SELECT | ( c & ~x );
20000c86:	1dbb      	adds	r3, r7, #6
20000c88:	881b      	ldrh	r3, [r3, #0]
20000c8a:	b25b      	sxtb	r3, r3
20000c8c:	43db      	mvns	r3, r3
20000c8e:	b25b      	sxtb	r3, r3
20000c90:	187a      	adds	r2, r7, r1
20000c92:	7812      	ldrb	r2, [r2, #0]
20000c94:	b252      	sxtb	r2, r2
20000c96:	4013      	ands	r3, r2
20000c98:	b25b      	sxtb	r3, r3
20000c9a:	2204      	movs	r2, #4
20000c9c:	4313      	orrs	r3, r2
20000c9e:	b25a      	sxtb	r2, r3
20000ca0:	187b      	adds	r3, r7, r1
20000ca2:	701a      	strb	r2, [r3, #0]
	*portOdrLowE = c;
20000ca4:	4a03      	ldr	r2, [pc, #12]	; (20000cb4 <ascii_ctrl_bit_clear+0x44>)
20000ca6:	187b      	adds	r3, r7, r1
20000ca8:	781b      	ldrb	r3, [r3, #0]
20000caa:	7013      	strb	r3, [r2, #0]
}
20000cac:	46c0      	nop			; (mov r8, r8)
20000cae:	46bd      	mov	sp, r7
20000cb0:	b004      	add	sp, #16
20000cb2:	bd80      	pop	{r7, pc}
20000cb4:	40021014 	andmi	r1, r2, r4, lsl r0

20000cb8 <ascii_write_controller>:

void ascii_write_controller(unsigned char c){
20000cb8:	b580      	push	{r7, lr}
20000cba:	b082      	sub	sp, #8
20000cbc:	af00      	add	r7, sp, #0
20000cbe:	0002      	movs	r2, r0
20000cc0:	1dfb      	adds	r3, r7, #7
20000cc2:	701a      	strb	r2, [r3, #0]
	delay_40ns();
20000cc4:	f7ff fa30 	bl	20000128 <delay_40ns>
	ascii_ctrl_bit_set(B_E);
20000cc8:	2040      	movs	r0, #64	; 0x40
20000cca:	f7ff ffaf 	bl	20000c2c <ascii_ctrl_bit_set>
	*portOdrHighE = c;
20000cce:	4a05      	ldr	r2, [pc, #20]	; (20000ce4 <ascii_write_controller+0x2c>)
20000cd0:	1dfb      	adds	r3, r7, #7
20000cd2:	781b      	ldrb	r3, [r3, #0]
20000cd4:	7013      	strb	r3, [r2, #0]
	delay_250ns;
	ascii_ctrl_bit_clear(B_E);
20000cd6:	2040      	movs	r0, #64	; 0x40
20000cd8:	f7ff ffca 	bl	20000c70 <ascii_ctrl_bit_clear>
}
20000cdc:	46c0      	nop			; (mov r8, r8)
20000cde:	46bd      	mov	sp, r7
20000ce0:	b002      	add	sp, #8
20000ce2:	bd80      	pop	{r7, pc}
20000ce4:	40021015 	andmi	r1, r2, r5, lsl r0

20000ce8 <ascii_read_controller>:
unsigned char ascii_read_controller(void){
20000ce8:	b580      	push	{r7, lr}
20000cea:	b082      	sub	sp, #8
20000cec:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_set(B_E);
20000cee:	2040      	movs	r0, #64	; 0x40
20000cf0:	f7ff ff9c 	bl	20000c2c <ascii_ctrl_bit_set>
	delay_250ns;
	delay_250ns;
	unsigned char rv = *portIdrHighE;
20000cf4:	4a06      	ldr	r2, [pc, #24]	; (20000d10 <ascii_read_controller+0x28>)
20000cf6:	1dfb      	adds	r3, r7, #7
20000cf8:	7812      	ldrb	r2, [r2, #0]
20000cfa:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20000cfc:	2040      	movs	r0, #64	; 0x40
20000cfe:	f7ff ffb7 	bl	20000c70 <ascii_ctrl_bit_clear>
	return rv;
20000d02:	1dfb      	adds	r3, r7, #7
20000d04:	781b      	ldrb	r3, [r3, #0]
}
20000d06:	0018      	movs	r0, r3
20000d08:	46bd      	mov	sp, r7
20000d0a:	b002      	add	sp, #8
20000d0c:	bd80      	pop	{r7, pc}
20000d0e:	46c0      	nop			; (mov r8, r8)
20000d10:	40021011 	andmi	r1, r2, r1, lsl r0

20000d14 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20000d14:	b580      	push	{r7, lr}
20000d16:	b082      	sub	sp, #8
20000d18:	af00      	add	r7, sp, #0
20000d1a:	0002      	movs	r2, r0
20000d1c:	1dfb      	adds	r3, r7, #7
20000d1e:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000d20:	2001      	movs	r0, #1
20000d22:	f7ff ffa5 	bl	20000c70 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000d26:	2002      	movs	r0, #2
20000d28:	f7ff ffa2 	bl	20000c70 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20000d2c:	1dfb      	adds	r3, r7, #7
20000d2e:	781b      	ldrb	r3, [r3, #0]
20000d30:	0018      	movs	r0, r3
20000d32:	f7ff ffc1 	bl	20000cb8 <ascii_write_controller>
}
20000d36:	46c0      	nop			; (mov r8, r8)
20000d38:	46bd      	mov	sp, r7
20000d3a:	b002      	add	sp, #8
20000d3c:	bd80      	pop	{r7, pc}

20000d3e <ascii_write_data>:

void ascii_write_data(unsigned char data){
20000d3e:	b580      	push	{r7, lr}
20000d40:	b082      	sub	sp, #8
20000d42:	af00      	add	r7, sp, #0
20000d44:	0002      	movs	r2, r0
20000d46:	1dfb      	adds	r3, r7, #7
20000d48:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000d4a:	2001      	movs	r0, #1
20000d4c:	f7ff ff6e 	bl	20000c2c <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20000d50:	2002      	movs	r0, #2
20000d52:	f7ff ff8d 	bl	20000c70 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20000d56:	1dfb      	adds	r3, r7, #7
20000d58:	781b      	ldrb	r3, [r3, #0]
20000d5a:	0018      	movs	r0, r3
20000d5c:	f7ff ffac 	bl	20000cb8 <ascii_write_controller>
}
20000d60:	46c0      	nop			; (mov r8, r8)
20000d62:	46bd      	mov	sp, r7
20000d64:	b002      	add	sp, #8
20000d66:	bd80      	pop	{r7, pc}

20000d68 <ascii_read_status>:

unsigned char ascii_read_status(void){
20000d68:	b590      	push	{r4, r7, lr}
20000d6a:	b083      	sub	sp, #12
20000d6c:	af00      	add	r7, sp, #0
	*portModerE = (*portModerE & 0x0000FFFF);
20000d6e:	4b0e      	ldr	r3, [pc, #56]	; (20000da8 <ascii_read_status+0x40>)
20000d70:	681a      	ldr	r2, [r3, #0]
20000d72:	4b0d      	ldr	r3, [pc, #52]	; (20000da8 <ascii_read_status+0x40>)
20000d74:	0412      	lsls	r2, r2, #16
20000d76:	0c12      	lsrs	r2, r2, #16
20000d78:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000d7a:	2001      	movs	r0, #1
20000d7c:	f7ff ff78 	bl	20000c70 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
20000d80:	2002      	movs	r0, #2
20000d82:	f7ff ff53 	bl	20000c2c <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20000d86:	1dfc      	adds	r4, r7, #7
20000d88:	f7ff ffae 	bl	20000ce8 <ascii_read_controller>
20000d8c:	0003      	movs	r3, r0
20000d8e:	7023      	strb	r3, [r4, #0]
	*portModerE = (*portModerE | 0x55550000);
20000d90:	4b05      	ldr	r3, [pc, #20]	; (20000da8 <ascii_read_status+0x40>)
20000d92:	681a      	ldr	r2, [r3, #0]
20000d94:	4b04      	ldr	r3, [pc, #16]	; (20000da8 <ascii_read_status+0x40>)
20000d96:	4905      	ldr	r1, [pc, #20]	; (20000dac <ascii_read_status+0x44>)
20000d98:	430a      	orrs	r2, r1
20000d9a:	601a      	str	r2, [r3, #0]
	return rv;
20000d9c:	1dfb      	adds	r3, r7, #7
20000d9e:	781b      	ldrb	r3, [r3, #0]
}
20000da0:	0018      	movs	r0, r3
20000da2:	46bd      	mov	sp, r7
20000da4:	b003      	add	sp, #12
20000da6:	bd90      	pop	{r4, r7, pc}
20000da8:	40021000 	andmi	r1, r2, r0
20000dac:	55550000 	ldrbpl	r0, [r5, #-0]

20000db0 <ascii_read_data>:

unsigned char ascii_read_data(void){
20000db0:	b590      	push	{r4, r7, lr}
20000db2:	b083      	sub	sp, #12
20000db4:	af00      	add	r7, sp, #0
	*portModerE = (*portModerE & 0x0000FFFF);
20000db6:	4b0e      	ldr	r3, [pc, #56]	; (20000df0 <ascii_read_data+0x40>)
20000db8:	681a      	ldr	r2, [r3, #0]
20000dba:	4b0d      	ldr	r3, [pc, #52]	; (20000df0 <ascii_read_data+0x40>)
20000dbc:	0412      	lsls	r2, r2, #16
20000dbe:	0c12      	lsrs	r2, r2, #16
20000dc0:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000dc2:	2001      	movs	r0, #1
20000dc4:	f7ff ff32 	bl	20000c2c <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20000dc8:	2002      	movs	r0, #2
20000dca:	f7ff ff2f 	bl	20000c2c <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20000dce:	1dfc      	adds	r4, r7, #7
20000dd0:	f7ff ff8a 	bl	20000ce8 <ascii_read_controller>
20000dd4:	0003      	movs	r3, r0
20000dd6:	7023      	strb	r3, [r4, #0]
	*portModerE = (*portModerE | 0x55550000);
20000dd8:	4b05      	ldr	r3, [pc, #20]	; (20000df0 <ascii_read_data+0x40>)
20000dda:	681a      	ldr	r2, [r3, #0]
20000ddc:	4b04      	ldr	r3, [pc, #16]	; (20000df0 <ascii_read_data+0x40>)
20000dde:	4905      	ldr	r1, [pc, #20]	; (20000df4 <ascii_read_data+0x44>)
20000de0:	430a      	orrs	r2, r1
20000de2:	601a      	str	r2, [r3, #0]
	return rv;
20000de4:	1dfb      	adds	r3, r7, #7
20000de6:	781b      	ldrb	r3, [r3, #0]
}
20000de8:	0018      	movs	r0, r3
20000dea:	46bd      	mov	sp, r7
20000dec:	b003      	add	sp, #12
20000dee:	bd90      	pop	{r4, r7, pc}
20000df0:	40021000 	andmi	r1, r2, r0
20000df4:	55550000 	ldrbpl	r0, [r5, #-0]

20000df8 <ascii_init>:

void ascii_init(void){
20000df8:	b580      	push	{r7, lr}
20000dfa:	af00      	add	r7, sp, #0
	while((ascii_read_status() & 0x80) == 0x80){}
20000dfc:	46c0      	nop			; (mov r8, r8)
20000dfe:	f7ff ffb3 	bl	20000d68 <ascii_read_status>
20000e02:	0003      	movs	r3, r0
20000e04:	001a      	movs	r2, r3
20000e06:	2380      	movs	r3, #128	; 0x80
20000e08:	4013      	ands	r3, r2
20000e0a:	2b80      	cmp	r3, #128	; 0x80
20000e0c:	d0f7      	beq.n	20000dfe <ascii_init+0x6>
	delay_mikro(8);
20000e0e:	2008      	movs	r0, #8
20000e10:	f7ff f9b1 	bl	20000176 <delay_mikro>
	ascii_write_cmd(0x38);
20000e14:	2038      	movs	r0, #56	; 0x38
20000e16:	f7ff ff7d 	bl	20000d14 <ascii_write_cmd>
	delay_mikro(40);
20000e1a:	2028      	movs	r0, #40	; 0x28
20000e1c:	f7ff f9ab 	bl	20000176 <delay_mikro>
	ascii_write_cmd(0xE);
20000e20:	200e      	movs	r0, #14
20000e22:	f7ff ff77 	bl	20000d14 <ascii_write_cmd>
	delay_mikro(40);
20000e26:	2028      	movs	r0, #40	; 0x28
20000e28:	f7ff f9a5 	bl	20000176 <delay_mikro>
	ascii_write_cmd(0x4);
20000e2c:	2004      	movs	r0, #4
20000e2e:	f7ff ff71 	bl	20000d14 <ascii_write_cmd>
	delay_mikro(40);
20000e32:	2028      	movs	r0, #40	; 0x28
20000e34:	f7ff f99f 	bl	20000176 <delay_mikro>
}
20000e38:	46c0      	nop			; (mov r8, r8)
20000e3a:	46bd      	mov	sp, r7
20000e3c:	bd80      	pop	{r7, pc}

20000e3e <ascii_write_char>:

void ascii_write_char(char c){
20000e3e:	b580      	push	{r7, lr}
20000e40:	b082      	sub	sp, #8
20000e42:	af00      	add	r7, sp, #0
20000e44:	0002      	movs	r2, r0
20000e46:	1dfb      	adds	r3, r7, #7
20000e48:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80){}
20000e4a:	46c0      	nop			; (mov r8, r8)
20000e4c:	f7ff ff8c 	bl	20000d68 <ascii_read_status>
20000e50:	0003      	movs	r3, r0
20000e52:	001a      	movs	r2, r3
20000e54:	2380      	movs	r3, #128	; 0x80
20000e56:	4013      	ands	r3, r2
20000e58:	2b80      	cmp	r3, #128	; 0x80
20000e5a:	d0f7      	beq.n	20000e4c <ascii_write_char+0xe>
	delay_mikro(8);
20000e5c:	2008      	movs	r0, #8
20000e5e:	f7ff f98a 	bl	20000176 <delay_mikro>
	ascii_write_data(c);
20000e62:	1dfb      	adds	r3, r7, #7
20000e64:	781b      	ldrb	r3, [r3, #0]
20000e66:	0018      	movs	r0, r3
20000e68:	f7ff ff69 	bl	20000d3e <ascii_write_data>
	delay_mikro(43);
20000e6c:	202b      	movs	r0, #43	; 0x2b
20000e6e:	f7ff f982 	bl	20000176 <delay_mikro>
}
20000e72:	46c0      	nop			; (mov r8, r8)
20000e74:	46bd      	mov	sp, r7
20000e76:	b002      	add	sp, #8
20000e78:	bd80      	pop	{r7, pc}

20000e7a <ascii_gotoxy>:

void ascii_gotoxy(int x, int y){
20000e7a:	b580      	push	{r7, lr}
20000e7c:	b084      	sub	sp, #16
20000e7e:	af00      	add	r7, sp, #0
20000e80:	6078      	str	r0, [r7, #4]
20000e82:	6039      	str	r1, [r7, #0]
	int adress = (x - 1 + (y-1)*64);
20000e84:	687b      	ldr	r3, [r7, #4]
20000e86:	1e5a      	subs	r2, r3, #1
20000e88:	683b      	ldr	r3, [r7, #0]
20000e8a:	3b01      	subs	r3, #1
20000e8c:	019b      	lsls	r3, r3, #6
20000e8e:	18d3      	adds	r3, r2, r3
20000e90:	60fb      	str	r3, [r7, #12]
	ascii_write_cmd(0x80 | adress);
20000e92:	68fb      	ldr	r3, [r7, #12]
20000e94:	b25b      	sxtb	r3, r3
20000e96:	2280      	movs	r2, #128	; 0x80
20000e98:	4252      	negs	r2, r2
20000e9a:	4313      	orrs	r3, r2
20000e9c:	b25b      	sxtb	r3, r3
20000e9e:	b2db      	uxtb	r3, r3
20000ea0:	0018      	movs	r0, r3
20000ea2:	f7ff ff37 	bl	20000d14 <ascii_write_cmd>
}
20000ea6:	46c0      	nop			; (mov r8, r8)
20000ea8:	46bd      	mov	sp, r7
20000eaa:	b004      	add	sp, #16
20000eac:	bd80      	pop	{r7, pc}

20000eae <ascii_init_app>:

void ascii_init_app(void){
20000eae:	b580      	push	{r7, lr}
20000eb0:	af00      	add	r7, sp, #0
	*portModerE = 0x55555555;
20000eb2:	4b06      	ldr	r3, [pc, #24]	; (20000ecc <ascii_init_app+0x1e>)
20000eb4:	4a06      	ldr	r2, [pc, #24]	; (20000ed0 <ascii_init_app+0x22>)
20000eb6:	601a      	str	r2, [r3, #0]
	*portOtyperE = 0x0000;
20000eb8:	4b06      	ldr	r3, [pc, #24]	; (20000ed4 <ascii_init_app+0x26>)
20000eba:	2200      	movs	r2, #0
20000ebc:	801a      	strh	r2, [r3, #0]
	*portOspeedrE = 0x0000;
20000ebe:	4b06      	ldr	r3, [pc, #24]	; (20000ed8 <ascii_init_app+0x2a>)
20000ec0:	2200      	movs	r2, #0
20000ec2:	601a      	str	r2, [r3, #0]

20000ec4:	46c0      	nop			; (mov r8, r8)
20000ec6:	46bd      	mov	sp, r7
20000ec8:	bd80      	pop	{r7, pc}
20000eca:	46c0      	nop			; (mov r8, r8)
20000ecc:	40021000 	andmi	r1, r2, r0
20000ed0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000ed4:	40021004 	andmi	r1, r2, r4
20000ed8:	40021008 	andmi	r1, r2, r8

20000edc <init_keypad>:

#include "delay.h"
#include "keypad_drivers.h"
#include "portDeclare.h"

void init_keypad(void){
20000edc:	b580      	push	{r7, lr}
20000ede:	af00      	add	r7, sp, #0
	#ifdef bargraph
		*((unsigned long *)(0x40021000)) = 0x5555;
	#endif
	*portModerD = 0x55005555;
20000ee0:	4b07      	ldr	r3, [pc, #28]	; (20000f00 <init_keypad+0x24>)
20000ee2:	4a08      	ldr	r2, [pc, #32]	; (20000f04 <init_keypad+0x28>)
20000ee4:	601a      	str	r2, [r3, #0]
	*portOtyperD = 0x0000;
20000ee6:	4b08      	ldr	r3, [pc, #32]	; (20000f08 <init_keypad+0x2c>)
20000ee8:	2200      	movs	r2, #0
20000eea:	801a      	strh	r2, [r3, #0]
	*portOspeedrD = 0x0000;
20000eec:	4b07      	ldr	r3, [pc, #28]	; (20000f0c <init_keypad+0x30>)
20000eee:	2200      	movs	r2, #0
20000ef0:	601a      	str	r2, [r3, #0]
	*portPupdrD = 0x00AA0000;
20000ef2:	4b07      	ldr	r3, [pc, #28]	; (20000f10 <init_keypad+0x34>)
20000ef4:	22aa      	movs	r2, #170	; 0xaa
20000ef6:	0412      	lsls	r2, r2, #16
20000ef8:	601a      	str	r2, [r3, #0]
	

}
20000efa:	46c0      	nop			; (mov r8, r8)
20000efc:	46bd      	mov	sp, r7
20000efe:	bd80      	pop	{r7, pc}
20000f00:	40020c00 	andmi	r0, r2, r0, lsl #24
20000f04:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000f08:	40020c04 	andmi	r0, r2, r4, lsl #24
20000f0c:	40020c08 	andmi	r0, r2, r8, lsl #24
20000f10:	40020c0c 	andmi	r0, r2, ip, lsl #24

20000f14 <keyb>:

unsigned char keyb(void){
20000f14:	b590      	push	{r4, r7, lr}
20000f16:	b087      	sub	sp, #28
20000f18:	af00      	add	r7, sp, #0
	
	unsigned char count = 0;
20000f1a:	2317      	movs	r3, #23
20000f1c:	18fb      	adds	r3, r7, r3
20000f1e:	2200      	movs	r2, #0
20000f20:	701a      	strb	r2, [r3, #0]
	unsigned char numpad[] = {0x1,0x2,0x3,0xA,0x4,0x5,0x6,0xB,0x7,0x8,0x9,0xC,0xE,0x0,0xF,0xD};
20000f22:	1d3b      	adds	r3, r7, #4
20000f24:	4a27      	ldr	r2, [pc, #156]	; (20000fc4 <keyb+0xb0>)
20000f26:	ca13      	ldmia	r2!, {r0, r1, r4}
20000f28:	c313      	stmia	r3!, {r0, r1, r4}
20000f2a:	6812      	ldr	r2, [r2, #0]
20000f2c:	601a      	str	r2, [r3, #0]
	
	for (char i=0; i < 4; i++){
20000f2e:	2316      	movs	r3, #22
20000f30:	18fb      	adds	r3, r7, r3
20000f32:	2200      	movs	r2, #0
20000f34:	701a      	strb	r2, [r3, #0]
20000f36:	e03b      	b.n	20000fb0 <keyb+0x9c>
		char activeRow = 0x10 << i;
20000f38:	2316      	movs	r3, #22
20000f3a:	18fb      	adds	r3, r7, r3
20000f3c:	781b      	ldrb	r3, [r3, #0]
20000f3e:	2210      	movs	r2, #16
20000f40:	409a      	lsls	r2, r3
20000f42:	2114      	movs	r1, #20
20000f44:	187b      	adds	r3, r7, r1
20000f46:	701a      	strb	r2, [r3, #0]
		*portOdrHighD = activeRow;
20000f48:	4a1f      	ldr	r2, [pc, #124]	; (20000fc8 <keyb+0xb4>)
20000f4a:	187b      	adds	r3, r7, r1
20000f4c:	781b      	ldrb	r3, [r3, #0]
20000f4e:	7013      	strb	r3, [r2, #0]
		char keys = *portIdrHighD & 0x0f;
20000f50:	4b1e      	ldr	r3, [pc, #120]	; (20000fcc <keyb+0xb8>)
20000f52:	781b      	ldrb	r3, [r3, #0]
20000f54:	b2da      	uxtb	r2, r3
20000f56:	2015      	movs	r0, #21
20000f58:	183b      	adds	r3, r7, r0
20000f5a:	210f      	movs	r1, #15
20000f5c:	400a      	ands	r2, r1
20000f5e:	701a      	strb	r2, [r3, #0]
		
		if (keys != 0){
20000f60:	183b      	adds	r3, r7, r0
20000f62:	781b      	ldrb	r3, [r3, #0]
20000f64:	2b00      	cmp	r3, #0
20000f66:	d01d      	beq.n	20000fa4 <keyb+0x90>
		
			while((keys & 0x1) == 0){
20000f68:	e00b      	b.n	20000f82 <keyb+0x6e>
				keys = keys >> 1;
20000f6a:	2215      	movs	r2, #21
20000f6c:	18bb      	adds	r3, r7, r2
20000f6e:	18ba      	adds	r2, r7, r2
20000f70:	7812      	ldrb	r2, [r2, #0]
20000f72:	0852      	lsrs	r2, r2, #1
20000f74:	701a      	strb	r2, [r3, #0]
				count++;
20000f76:	2117      	movs	r1, #23
20000f78:	187b      	adds	r3, r7, r1
20000f7a:	781a      	ldrb	r2, [r3, #0]
20000f7c:	187b      	adds	r3, r7, r1
20000f7e:	3201      	adds	r2, #1
20000f80:	701a      	strb	r2, [r3, #0]
			while((keys & 0x1) == 0){
20000f82:	2315      	movs	r3, #21
20000f84:	18fb      	adds	r3, r7, r3
20000f86:	781b      	ldrb	r3, [r3, #0]
20000f88:	2201      	movs	r2, #1
20000f8a:	4013      	ands	r3, r2
20000f8c:	d0ed      	beq.n	20000f6a <keyb+0x56>
			}
			return numpad[i*4+count];
20000f8e:	2316      	movs	r3, #22
20000f90:	18fb      	adds	r3, r7, r3
20000f92:	781b      	ldrb	r3, [r3, #0]
20000f94:	009a      	lsls	r2, r3, #2
20000f96:	2317      	movs	r3, #23
20000f98:	18fb      	adds	r3, r7, r3
20000f9a:	781b      	ldrb	r3, [r3, #0]
20000f9c:	18d3      	adds	r3, r2, r3
20000f9e:	1d3a      	adds	r2, r7, #4
20000fa0:	5cd3      	ldrb	r3, [r2, r3]
20000fa2:	e00b      	b.n	20000fbc <keyb+0xa8>
	for (char i=0; i < 4; i++){
20000fa4:	2116      	movs	r1, #22
20000fa6:	187b      	adds	r3, r7, r1
20000fa8:	781a      	ldrb	r2, [r3, #0]
20000faa:	187b      	adds	r3, r7, r1
20000fac:	3201      	adds	r2, #1
20000fae:	701a      	strb	r2, [r3, #0]
20000fb0:	2316      	movs	r3, #22
20000fb2:	18fb      	adds	r3, r7, r3
20000fb4:	781b      	ldrb	r3, [r3, #0]
20000fb6:	2b03      	cmp	r3, #3
20000fb8:	d9be      	bls.n	20000f38 <keyb+0x24>
		}
			
	}
	return 0xff;
20000fba:	23ff      	movs	r3, #255	; 0xff
}
20000fbc:	0018      	movs	r0, r3
20000fbe:	46bd      	mov	sp, r7
20000fc0:	b007      	add	sp, #28
20000fc2:	bd90      	pop	{r4, r7, pc}
20000fc4:	20001e98 	mulcs	r0, r8, lr
20000fc8:	40020c15 	andmi	r0, r2, r5, lsl ip
20000fcc:	40020c11 	andmi	r0, r2, r1, lsl ip

20000fd0 <out7seg>:

void out7seg(unsigned char num){
20000fd0:	b5b0      	push	{r4, r5, r7, lr}
20000fd2:	b086      	sub	sp, #24
20000fd4:	af00      	add	r7, sp, #0
20000fd6:	0002      	movs	r2, r0
20000fd8:	1dfb      	adds	r3, r7, #7
20000fda:	701a      	strb	r2, [r3, #0]
	unsigned char segCodes[] = {0x3f,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71};
20000fdc:	2008      	movs	r0, #8
20000fde:	183b      	adds	r3, r7, r0
20000fe0:	4a06      	ldr	r2, [pc, #24]	; (20000ffc <out7seg+0x2c>)
20000fe2:	ca32      	ldmia	r2!, {r1, r4, r5}
20000fe4:	c332      	stmia	r3!, {r1, r4, r5}
20000fe6:	6812      	ldr	r2, [r2, #0]
20000fe8:	601a      	str	r2, [r3, #0]
	if (num & 0xf0 == 0){
		*portOdrLowE = 0;
		return;
	}
	*portOdrLowD = segCodes[num];
20000fea:	1dfb      	adds	r3, r7, #7
20000fec:	781b      	ldrb	r3, [r3, #0]
20000fee:	4904      	ldr	r1, [pc, #16]	; (20001000 <out7seg+0x30>)
20000ff0:	183a      	adds	r2, r7, r0
20000ff2:	5cd3      	ldrb	r3, [r2, r3]
20000ff4:	700b      	strb	r3, [r1, #0]
}
20000ff6:	46bd      	mov	sp, r7
20000ff8:	b006      	add	sp, #24
20000ffa:	bdb0      	pop	{r4, r5, r7, pc}
20000ffc:	20001ea8 	andcs	r1, r0, r8, lsr #29
20001000:	40020c14 	andmi	r0, r2, r4, lsl ip

20001004 <keyRead>:

unsigned short keyRead(void){
20001004:	b580      	push	{r7, lr}
20001006:	b082      	sub	sp, #8
20001008:	af00      	add	r7, sp, #0
	
	unsigned char count = 0;
2000100a:	1d3b      	adds	r3, r7, #4
2000100c:	2200      	movs	r2, #0
2000100e:	701a      	strb	r2, [r3, #0]
	unsigned short read = 0;
20001010:	1dbb      	adds	r3, r7, #6
20001012:	2200      	movs	r2, #0
20001014:	801a      	strh	r2, [r3, #0]
	for (char i=0; i < 4; i++){
20001016:	1d7b      	adds	r3, r7, #5
20001018:	2200      	movs	r2, #0
2000101a:	701a      	strb	r2, [r3, #0]
2000101c:	e027      	b.n	2000106e <keyRead+0x6a>
		char activeRow = 0x10 << i;
2000101e:	1d7b      	adds	r3, r7, #5
20001020:	781b      	ldrb	r3, [r3, #0]
20001022:	2210      	movs	r2, #16
20001024:	409a      	lsls	r2, r3
20001026:	1cfb      	adds	r3, r7, #3
20001028:	701a      	strb	r2, [r3, #0]
		*portOdrHighD = activeRow;
2000102a:	4a16      	ldr	r2, [pc, #88]	; (20001084 <keyRead+0x80>)
2000102c:	1cfb      	adds	r3, r7, #3
2000102e:	781b      	ldrb	r3, [r3, #0]
20001030:	7013      	strb	r3, [r2, #0]
		unsigned volatile char keys = *portIdrHighD & 0x0f;
20001032:	4b15      	ldr	r3, [pc, #84]	; (20001088 <keyRead+0x84>)
20001034:	781b      	ldrb	r3, [r3, #0]
20001036:	b2db      	uxtb	r3, r3
20001038:	220f      	movs	r2, #15
2000103a:	4013      	ands	r3, r2
2000103c:	b2da      	uxtb	r2, r3
2000103e:	1cbb      	adds	r3, r7, #2
20001040:	701a      	strb	r2, [r3, #0]
		read |= (keys<<(i*4));
20001042:	1cbb      	adds	r3, r7, #2
20001044:	781b      	ldrb	r3, [r3, #0]
20001046:	b2db      	uxtb	r3, r3
20001048:	001a      	movs	r2, r3
2000104a:	1d7b      	adds	r3, r7, #5
2000104c:	781b      	ldrb	r3, [r3, #0]
2000104e:	009b      	lsls	r3, r3, #2
20001050:	409a      	lsls	r2, r3
20001052:	0013      	movs	r3, r2
20001054:	b21a      	sxth	r2, r3
20001056:	1dbb      	adds	r3, r7, #6
20001058:	2100      	movs	r1, #0
2000105a:	5e5b      	ldrsh	r3, [r3, r1]
2000105c:	4313      	orrs	r3, r2
2000105e:	b21a      	sxth	r2, r3
20001060:	1dbb      	adds	r3, r7, #6
20001062:	801a      	strh	r2, [r3, #0]
	for (char i=0; i < 4; i++){
20001064:	1d7b      	adds	r3, r7, #5
20001066:	781a      	ldrb	r2, [r3, #0]
20001068:	1d7b      	adds	r3, r7, #5
2000106a:	3201      	adds	r2, #1
2000106c:	701a      	strb	r2, [r3, #0]
2000106e:	1d7b      	adds	r3, r7, #5
20001070:	781b      	ldrb	r3, [r3, #0]
20001072:	2b03      	cmp	r3, #3
20001074:	d9d3      	bls.n	2000101e <keyRead+0x1a>
			}
			return numpad[i*4+count];
		}*/
			
	}
	return read;
20001076:	1dbb      	adds	r3, r7, #6
20001078:	881b      	ldrh	r3, [r3, #0]
2000107a:	0018      	movs	r0, r3
2000107c:	46bd      	mov	sp, r7
2000107e:	b002      	add	sp, #8
20001080:	bd80      	pop	{r7, pc}
20001082:	46c0      	nop			; (mov r8, r8)
20001084:	40020c15 	andmi	r0, r2, r5, lsl ip
20001088:	40020c11 	andmi	r0, r2, r1, lsl ip

2000108c <buffer>:
	...

20001518 <buffer>:
	...

200019a4 <buffer_changeLog>:
	...

20001a24 <buffer_display>:
	...

20001e24 <ball_geometry>:
20001e24:	0000000c 	andeq	r0, r0, ip
20001e28:	00000004 	andeq	r0, r0, r4
20001e2c:	00000004 	andeq	r0, r0, r4
20001e30:	02000100 	andeq	r0, r0, #0, 2
20001e34:	01010001 	tsteq	r1, r1
20001e38:	03010201 	movweq	r0, #4609	; 0x1201
20001e3c:	01020002 	tsteq	r2, r2
20001e40:	03020202 	movweq	r0, #8706	; 0x2202
20001e44:	01030103 	tsteq	r3, r3, lsl #2
	...

20001e58 <ball>:
20001e58:	20001e24 	andcs	r1, r0, r4, lsr #28
	...
20001e64:	00000001 	andeq	r0, r0, r1
20001e68:	00000001 	andeq	r0, r0, r1
20001e6c:	20000a6b 	andcs	r0, r0, fp, ror #20
20001e70:	20000acf 	andcs	r0, r0, pc, asr #21
20001e74:	20000b2b 	andcs	r0, r0, fp, lsr #22
20001e78:	20000a2b 	andcs	r0, r0, fp, lsr #20
20001e7c:	20000a4b 	andcs	r0, r0, fp, asr #20
20001e80:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
20001e84:	31207265 			; <UNDEFINED> instruction: 0x31207265
20001e88:	0000203a 	andeq	r2, r0, sl, lsr r0
20001e8c:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
20001e90:	32207265 	eorcc	r7, r0, #1342177286	; 0x50000006
20001e94:	0000203a 	andeq	r2, r0, sl, lsr r0
20001e98:	0a030201 	beq	200c26a4 <ball+0xc084c>
20001e9c:	0b060504 	bleq	201832b4 <ball+0x18145c>
20001ea0:	0c090807 	stceq	8, cr0, [r9], {7}
20001ea4:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20001e74 <ball+0x1c>
20001ea8:	4f5b063f 	svcmi	0x005b063f
20001eac:	077d6d66 	ldrbeq	r6, [sp, -r6, ror #26]!
20001eb0:	7c776f7f 	ldclvc	15, cr6, [r7], #-508	; 0xfffffe04
20001eb4:	71795e39 	cmnvc	r9, r9, lsr lr

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000381 	andeq	r0, r0, r1, lsl #7
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000003d 	andeq	r0, r0, sp, lsr r0
  10:	0001510c 	andeq	r5, r1, ip, lsl #2
  14:	0000e300 	andeq	lr, r0, r0, lsl #6
	...
  24:	01420200 	mrseq	r0, (UNDEF: 98)
  28:	048c0000 	streq	r0, [ip], #0
  2c:	00730b02 	rsbseq	r0, r3, r2, lsl #22
  30:	5f030000 	svcpl	0x00030000
  34:	02000002 	andeq	r0, r0, #2
  38:	0000730c 	andeq	r7, r0, ip, lsl #6
  3c:	34040000 	strcc	r0, [r4], #-0
  40:	02000002 	andeq	r0, r0, #2
  44:	0000970d 	andeq	r9, r0, sp, lsl #14
  48:	04040000 	streq	r0, [r4], #-0
  4c:	0000014c 	andeq	r0, r0, ip, asr #2
  50:	00b80e02 	adcseq	r0, r8, r2, lsl #28
  54:	04800000 	streq	r0, [r0], #0
  58:	00030904 	andeq	r0, r3, r4, lsl #18
  5c:	df0f0200 	svcle	0x000f0200
  60:	84000000 	strhi	r0, [r0], #-0
  64:	02270404 	eoreq	r0, r7, #4, 8	; 0x4000000
  68:	10020000 	andne	r0, r2, r0
  6c:	000000b8 	strheq	r0, [r0], -r8
  70:	05000488 	streq	r0, [r0, #-1160]	; 0xfffffb78
  74:	00000090 	muleq	r0, r0, r0
  78:	00000089 	andeq	r0, r0, r9, lsl #1
  7c:	00008906 	andeq	r8, r0, r6, lsl #18
  80:	89067f00 	stmdbhi	r6, {r8, r9, sl, fp, ip, sp, lr}
  84:	07000000 	streq	r0, [r0, -r0]
  88:	07040700 	streq	r0, [r4, -r0, lsl #14]
  8c:	00000021 	andeq	r0, r0, r1, lsr #32
  90:	de080107 	adflee	f0, f0, f7
  94:	05000000 	streq	r0, [r0, #-0]
  98:	00000090 	muleq	r0, r0, r0
  9c:	000000a7 	andeq	r0, r0, r7, lsr #1
  a0:	00008906 	andeq	r8, r0, r6, lsl #18
  a4:	08007f00 	stmdaeq	r0, {r8, r9, sl, fp, ip, sp, lr}
  a8:	000000b2 	strheq	r0, [r0], -r2
  ac:	0000b209 	andeq	fp, r0, r9, lsl #4
  b0:	040a0000 	streq	r0, [sl], #-0
  b4:	00000025 	andeq	r0, r0, r5, lsr #32
  b8:	00a7040a 	adceq	r0, r7, sl, lsl #8
  bc:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
  c0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
  c4:	000000b2 	strheq	r0, [r0], -r2
  c8:	0000d809 	andeq	sp, r0, r9, lsl #16
  cc:	00d80900 	sbcseq	r0, r8, r0, lsl #18
  d0:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
  d4:	00000000 	andeq	r0, r0, r0
  d8:	d5080107 	strle	r0, [r8, #-263]	; 0xfffffef9
  dc:	0a000000 	beq	e4 <startup-0x1fffff1c>
  e0:	0000be04 	andeq	fp, r0, r4, lsl #28
  e4:	03150b00 	tsteq	r5, #0, 22
  e8:	12020000 	andne	r0, r2, #0
  ec:	00000025 	andeq	r0, r0, r5, lsr #32
  f0:	0001450c 	andeq	r4, r1, ip, lsl #10
  f4:	e51e0200 	ldr	r0, [lr, #-512]	; 0xfffffe00
  f8:	05000000 	streq	r0, [r0, #-0]
  fc:	00108c03 	andseq	r8, r0, r3, lsl #24
 100:	03020d20 	movweq	r0, #11552	; 0x2d20
 104:	00011e05 	andeq	r1, r1, r5, lsl #28
 108:	00780e00 	rsbseq	r0, r8, r0, lsl #28
 10c:	00d80603 	sbcseq	r0, r8, r3, lsl #12
 110:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 114:	07030079 	smlsdxeq	r3, r9, r0, r0
 118:	000000d8 	ldrdeq	r0, [r0], -r8
 11c:	100b0001 	andne	r0, fp, r1
 120:	03000000 	movweq	r0, #0
 124:	00010108 	andeq	r0, r1, r8, lsl #2
 128:	03340d00 	teqeq	r4, #0, 26
 12c:	00016119 	andeq	r6, r1, r9, lsl r1
 130:	01a30300 			; <UNDEFINED> instruction: 0x01a30300
 134:	1a030000 	bne	c013c <startup-0x1ff3fec4>
 138:	00000161 	andeq	r0, r0, r1, ror #2
 13c:	01310300 	teqeq	r1, r0, lsl #6
 140:	1b030000 	blne	c0148 <startup-0x1ff3feb8>
 144:	00000161 	andeq	r0, r0, r1, ror #2
 148:	01370304 	teqeq	r7, r4, lsl #6
 14c:	1c030000 	stcne	0, cr0, [r3], {-0}
 150:	00000161 	andeq	r0, r0, r1, ror #2
 154:	78700e08 	ldmdavc	r0!, {r3, r9, sl, fp}^
 158:	681d0300 	ldmdavs	sp, {r8, r9}
 15c:	0c000001 	stceq	0, cr0, [r0], {1}
 160:	05040f00 	streq	r0, [r4, #-3840]	; 0xfffff100
 164:	00746e69 	rsbseq	r6, r4, r9, ror #28
 168:	00011e05 	andeq	r1, r1, r5, lsl #28
 16c:	00017800 	andeq	r7, r1, r0, lsl #16
 170:	00890600 	addeq	r0, r9, r0, lsl #12
 174:	00130000 	andseq	r0, r3, r0
 178:	0001230b 	andeq	r2, r1, fp, lsl #6
 17c:	291e0300 	ldmdbcs	lr, {r8, r9}
 180:	0b000001 	bleq	18c <startup-0x1ffffe74>
 184:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
 188:	018e1e03 	orreq	r1, lr, r3, lsl #28
 18c:	040a0000 	streq	r0, [sl], #-0
 190:	00000129 	andeq	r0, r0, r9, lsr #2
 194:	00019e10 	andeq	r9, r1, r0, lsl lr
 198:	22032800 	andcs	r2, r3, #0, 16
 19c:	00000219 	andeq	r0, r0, r9, lsl r2
 1a0:	6f65670e 	svcvs	0x0065670e
 1a4:	83230300 			; <UNDEFINED> instruction: 0x83230300
 1a8:	00000001 	andeq	r0, r0, r1
 1ac:	00002e03 	andeq	r2, r0, r3, lsl #28
 1b0:	61240300 			; <UNDEFINED> instruction: 0x61240300
 1b4:	04000001 	streq	r0, [r0], #-1
 1b8:	00003303 	andeq	r3, r0, r3, lsl #6
 1bc:	61240300 			; <UNDEFINED> instruction: 0x61240300
 1c0:	08000001 	stmdaeq	r0, {r0}
 1c4:	00011403 	andeq	r1, r1, r3, lsl #8
 1c8:	61250300 			; <UNDEFINED> instruction: 0x61250300
 1cc:	0c000001 	stceq	0, cr0, [r0], {1}
 1d0:	00011903 	andeq	r1, r1, r3, lsl #18
 1d4:	61250300 			; <UNDEFINED> instruction: 0x61250300
 1d8:	10000001 	andne	r0, r0, r1
 1dc:	00014c03 	andeq	r4, r1, r3, lsl #24
 1e0:	2a260300 	bcs	980de8 <startup-0x1f67f218>
 1e4:	14000002 	strne	r0, [r0], #-2
 1e8:	00022703 	andeq	r2, r2, r3, lsl #14
 1ec:	2a270300 	bcs	9c0df4 <startup-0x1f63f20c>
 1f0:	18000002 	stmdane	r0, {r1}
 1f4:	00018203 	andeq	r8, r1, r3, lsl #4
 1f8:	2a280300 	bcs	a00e00 <startup-0x1f5ff200>
 1fc:	1c000002 	stcne	0, cr0, [r0], {2}
 200:	00010a03 	andeq	r0, r1, r3, lsl #20
 204:	45290300 	strmi	r0, [r9, #-768]!	; 0xfffffd00
 208:	20000002 	andcs	r0, r0, r2
 20c:	0003c503 	andeq	ip, r3, r3, lsl #10
 210:	5b2a0300 	blpl	a80e18 <startup-0x1f57f1e8>
 214:	24000002 	strcs	r0, [r0], #-2
 218:	02240800 	eoreq	r0, r4, #0, 16
 21c:	24090000 	strcs	r0, [r9], #-0
 220:	00000002 	andeq	r0, r0, r2
 224:	0194040a 	orrseq	r0, r4, sl, lsl #8
 228:	040a0000 	streq	r0, [sl], #-0
 22c:	00000219 	andeq	r0, r0, r9, lsl r2
 230:	00024508 	andeq	r4, r2, r8, lsl #10
 234:	02240900 	eoreq	r0, r4, #0, 18
 238:	61090000 	mrsvs	r0, (UNDEF: 9)
 23c:	09000001 	stmdbeq	r0, {r0}
 240:	00000161 	andeq	r0, r0, r1, ror #2
 244:	30040a00 	andcc	r0, r4, r0, lsl #20
 248:	08000002 	stmdaeq	r0, {r1}
 24c:	0000025b 	andeq	r0, r0, fp, asr r2
 250:	00022409 	andeq	r2, r2, r9, lsl #8
 254:	011e0900 	tsteq	lr, r0, lsl #18
 258:	0a000000 	beq	260 <startup-0x1ffffda0>
 25c:	00024b04 	andeq	r4, r2, r4, lsl #22
 260:	04700b00 	ldrbteq	r0, [r0], #-2816	; 0xfffff500
 264:	2b030000 	blcs	c026c <startup-0x1ff3fd94>
 268:	00000194 	muleq	r0, r4, r1
 26c:	0000080b 	andeq	r0, r0, fp, lsl #16
 270:	242b0300 	strtcs	r0, [fp], #-768	; 0xfffffd00
 274:	11000002 	tstne	r0, r2
 278:	0000011e 	andeq	r0, r0, lr, lsl r1
 27c:	01781d01 	cmneq	r8, r1, lsl #26
 280:	03050000 	movweq	r0, #20480	; 0x5000
 284:	20001e24 	andcs	r1, r0, r4, lsr #28
 288:	0000380c 	andeq	r3, r0, ip, lsl #16
 28c:	61240100 			; <UNDEFINED> instruction: 0x61240100
 290:	05000002 	streq	r0, [r0, #-2]
 294:	001e5803 	andseq	r5, lr, r3, lsl #16
 298:	012c1220 			; <UNDEFINED> instruction: 0x012c1220
 29c:	2f010000 	svccs	0x00010000
 2a0:	20000010 	andcs	r0, r0, r0, lsl r0
 2a4:	00000118 	andeq	r0, r0, r8, lsl r1
 2a8:	03359c01 	teqeq	r5, #256	; 0x100
 2ac:	3d130000 	ldccc	0, cr0, [r3, #-0]
 2b0:	01000001 	tsteq	r0, r1
 2b4:	0001612f 	andeq	r6, r1, pc, lsr #2
 2b8:	bc910300 	ldclt	3, cr0, [r1], {0}
 2bc:	0016137f 	andseq	r1, r6, pc, ror r3
 2c0:	2f010000 	svccs	0x00010000
 2c4:	00000335 	andeq	r0, r0, r5, lsr r3
 2c8:	7fb89103 	svcvc	0x00b89103
 2cc:	01007314 	tsteq	r0, r4, lsl r3
 2d0:	00033b38 	andeq	r3, r3, r8, lsr fp
 2d4:	6c910200 	lfmvs	f0, 4, [r1], {0}
 2d8:	00018e0c 	andeq	r8, r1, ip, lsl #28
 2dc:	41390100 	teqmi	r9, r0, lsl #2
 2e0:	02000003 	andeq	r0, r0, #3
 2e4:	960c5891 			; <UNDEFINED> instruction: 0x960c5891
 2e8:	01000001 	tsteq	r0, r1
 2ec:	0003413e 	andeq	r4, r3, lr, lsr r1
 2f0:	4c910200 	lfmmi	f0, 4, [r1], {0}
 2f4:	0003b40c 	andeq	fp, r3, ip, lsl #8
 2f8:	514f0100 	mrspl	r0, (UNDEF: 95)
 2fc:	02000003 	andeq	r0, r0, #3
 300:	870c4891 			; <UNDEFINED> instruction: 0x870c4891
 304:	01000001 	tsteq	r0, r1
 308:	00036150 	andeq	r6, r3, r0, asr r1
 30c:	68910200 	ldmvs	r1, {r9}
 310:	01007014 	tsteq	r0, r4, lsl r0
 314:	00026c56 	andeq	r6, r2, r6, asr ip
 318:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 31c:	01ad1615 			; <UNDEFINED> instruction: 0x01ad1615
 320:	65010000 	strvs	r0, [r1, #-0]
 324:	0000036e 	andeq	r0, r0, lr, ror #6
 328:	00691715 	rsbeq	r1, r9, r5, lsl r7
 32c:	01616701 	cmneq	r1, r1, lsl #14
 330:	00000000 	andeq	r0, r0, r0
 334:	3b040a00 	blcc	102b3c <startup-0x1fefd4c4>
 338:	0a000003 	beq	34c <startup-0x1ffffcb4>
 33c:	00009004 	andeq	r9, r0, r4
 340:	00900500 	addseq	r0, r0, r0, lsl #10
 344:	03510000 	cmpeq	r1, #0
 348:	89060000 	stmdbhi	r6, {}	; <UNPREDICTABLE>
 34c:	0a000000 	beq	354 <startup-0x1ffffcac>
 350:	00d80500 	sbcseq	r0, r8, r0, lsl #10
 354:	03610000 	cmneq	r1, #0
 358:	89060000 	stmdbhi	r6, {}	; <UNPREDICTABLE>
 35c:	01000000 	mrseq	r0, (UNDEF: 0)
 360:	d8040a00 	stmdale	r4, {r9, fp}
 364:	07000000 	streq	r0, [r0, -r0]
 368:	001b0702 	andseq	r0, fp, r2, lsl #14
 36c:	67180000 	ldrvs	r0, [r8, -r0]
 370:	19000003 	stmdbne	r0, {r0, r1}
 374:	00000000 	andeq	r0, r0, r0
 378:	00000701 	andeq	r0, r0, r1, lsl #14
 37c:	000c2000 	andeq	r2, ip, r0
 380:	9c010000 	stcls	0, cr0, [r1], {-0}
 384:	00009800 	andeq	r9, r0, r0, lsl #16
 388:	50000400 	andpl	r0, r0, r0, lsl #8
 38c:	04000001 	streq	r0, [r0], #-1
 390:	00003d01 	andeq	r3, r0, r1, lsl #26
 394:	01bc0c00 			; <UNDEFINED> instruction: 0x01bc0c00
 398:	00e30000 	rsceq	r0, r3, r0
 39c:	01280000 			; <UNDEFINED> instruction: 0x01280000
 3a0:	006e2000 	rsbeq	r2, lr, r0
 3a4:	00bc0000 	adcseq	r0, ip, r0
 3a8:	01020000 	mrseq	r0, (UNDEF: 2)
 3ac:	0000d508 	andeq	sp, r0, r8, lsl #10
 3b0:	02020300 	andeq	r0, r2, #0, 6
 3b4:	24010000 	strcs	r0, [r1], #-0
 3b8:	20000186 	andcs	r0, r0, r6, lsl #3
 3bc:	00000010 	andeq	r0, r0, r0, lsl r0
 3c0:	004f9c01 	subeq	r9, pc, r1, lsl #24
 3c4:	6d040000 	stcvs	0, cr0, [r4, #-0]
 3c8:	24010073 	strcs	r0, [r1], #-115	; 0xffffff8d
 3cc:	0000004f 	andeq	r0, r0, pc, asr #32
 3d0:	00749102 	rsbseq	r9, r4, r2, lsl #2
 3d4:	21070402 	tstcs	r7, r2, lsl #8
 3d8:	03000000 	movweq	r0, #0
 3dc:	000001eb 	andeq	r0, r0, fp, ror #3
 3e0:	01761b01 	cmneq	r6, r1, lsl #22
 3e4:	00102000 	andseq	r2, r0, r0
 3e8:	9c010000 	stcls	0, cr0, [r1], {-0}
 3ec:	00000079 	andeq	r0, r0, r9, ror r0
 3f0:	00737504 	rsbseq	r7, r3, r4, lsl #10
 3f4:	004f1b01 	subeq	r1, pc, r1, lsl #22
 3f8:	91020000 	mrsls	r0, (UNDEF: 2)
 3fc:	0e050074 	mcreq	0, 0, r0, cr5, cr4, {3}
 400:	01000002 	tsteq	r0, r2
 404:	00016c0f 	andeq	r6, r1, pc, lsl #24
 408:	00000a20 	andeq	r0, r0, r0, lsr #20
 40c:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
 410:	000001f7 	strdeq	r0, [r0], -r7
 414:	01280501 			; <UNDEFINED> instruction: 0x01280501
 418:	00442000 	subeq	r2, r4, r0
 41c:	9c010000 	stcls	0, cr0, [r1], {-0}
 420:	00047e00 	andeq	r7, r4, r0, lsl #28
 424:	b0000400 	andlt	r0, r0, r0, lsl #8
 428:	04000001 	streq	r0, [r0], #-1
 42c:	00003d01 	andeq	r3, r0, r1, lsl #26
 430:	02af0c00 	adceq	r0, pc, #0, 24
 434:	00e30000 	rsceq	r0, r3, r0
 438:	01980000 	orrseq	r0, r8, r0
 43c:	08882000 	stmeq	r8, {sp}
 440:	012e0000 			; <UNDEFINED> instruction: 0x012e0000
 444:	42020000 	andmi	r0, r2, #0
 448:	8c000001 	stchi	0, cr0, [r0], {1}
 44c:	730b0204 	movwvc	r0, #45572	; 0xb204
 450:	03000000 	movweq	r0, #0
 454:	0000025f 	andeq	r0, r0, pc, asr r2
 458:	00730c02 	rsbseq	r0, r3, r2, lsl #24
 45c:	04000000 	streq	r0, [r0], #-0
 460:	00000234 	andeq	r0, r0, r4, lsr r2
 464:	00970d02 	addseq	r0, r7, r2, lsl #26
 468:	04000000 	streq	r0, [r0], #-0
 46c:	00014c04 	andeq	r4, r1, r4, lsl #24
 470:	b80e0200 	stmdalt	lr, {r9}
 474:	80000000 	andhi	r0, r0, r0
 478:	03090404 	movweq	r0, #37892	; 0x9404
 47c:	0f020000 	svceq	0x00020000
 480:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 484:	27040484 	strcs	r0, [r4, -r4, lsl #9]
 488:	02000002 	andeq	r0, r0, #2
 48c:	0000b810 	andeq	fp, r0, r0, lsl r8
 490:	00048800 	andeq	r8, r4, r0, lsl #16
 494:	00009005 	andeq	r9, r0, r5
 498:	00008900 	andeq	r8, r0, r0, lsl #18
 49c:	00890600 	addeq	r0, r9, r0, lsl #12
 4a0:	067f0000 	ldrbteq	r0, [pc], -r0
 4a4:	00000089 	andeq	r0, r0, r9, lsl #1
 4a8:	04070007 	streq	r0, [r7], #-7
 4ac:	00002107 	andeq	r2, r0, r7, lsl #2
 4b0:	08010700 	stmdaeq	r1, {r8, r9, sl}
 4b4:	000000de 	ldrdeq	r0, [r0], -lr
 4b8:	00009005 	andeq	r9, r0, r5
 4bc:	0000a700 	andeq	sl, r0, r0, lsl #14
 4c0:	00890600 	addeq	r0, r9, r0, lsl #12
 4c4:	007f0000 	rsbseq	r0, pc, r0
 4c8:	0000b208 	andeq	fp, r0, r8, lsl #4
 4cc:	00b20900 	adcseq	r0, r2, r0, lsl #18
 4d0:	0a000000 	beq	4d8 <startup-0x1ffffb28>
 4d4:	00002504 	andeq	r2, r0, r4, lsl #10
 4d8:	a7040a00 	strge	r0, [r4, -r0, lsl #20]
 4dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 4e0:	000000d8 	ldrdeq	r0, [r0], -r8
 4e4:	0000b209 	andeq	fp, r0, r9, lsl #4
 4e8:	00d80900 	sbcseq	r0, r8, r0, lsl #18
 4ec:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
 4f0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 4f4:	000000d8 	ldrdeq	r0, [r0], -r8
 4f8:	08010700 	stmdaeq	r1, {r8, r9, sl}
 4fc:	000000d5 	ldrdeq	r0, [r0], -r5
 500:	00be040a 	adcseq	r0, lr, sl, lsl #8
 504:	150b0000 	strne	r0, [fp, #-0]
 508:	02000003 	andeq	r0, r0, #3
 50c:	00002512 	andeq	r2, r0, r2, lsl r5
 510:	03140b00 	tsteq	r4, #0, 22
 514:	12020000 	andne	r0, r2, #0
 518:	000000b2 	strheq	r0, [r0], -r2
 51c:	0001450c 	andeq	r4, r1, ip, lsl #10
 520:	e51e0200 	ldr	r0, [lr, #-512]	; 0xfffffe00
 524:	05000000 	streq	r0, [r0, #-0]
 528:	00151803 	andseq	r1, r5, r3, lsl #16
 52c:	01070d20 	tsteq	r7, r0, lsr #26
 530:	000000d8 	ldrdeq	r0, [r0], -r8
 534:	01441d03 	cmpeq	r4, r3, lsl #26
 538:	0f0e0000 	svceq	0x000e0000
 53c:	01000003 	tsteq	r0, r3
 540:	0002850e 	andeq	r8, r2, lr, lsl #10
 544:	250e0200 	strcs	r0, [lr, #-512]	; 0xfffffe00
 548:	04000003 	streq	r0, [r0], #-3
 54c:	00031f0e 	andeq	r1, r3, lr, lsl #30
 550:	1a0e0800 	bne	382558 <startup-0x1fc7daa8>
 554:	10000002 	andne	r0, r0, r2
 558:	0002e40e 	andeq	lr, r2, lr, lsl #8
 55c:	420f2000 	andmi	r2, pc, #0
 560:	4000455f 	andmi	r4, r0, pc, asr r5
 564:	02581000 	subseq	r1, r8, #0
 568:	d2010000 	andle	r0, r1, #0
 56c:	00000073 	andeq	r0, r0, r3, ror r0
 570:	1a240305 	bne	90118c <startup-0x1f6fee74>
 574:	2d102000 	ldccs	0, cr2, [r0, #-0]
 578:	01000002 	tsteq	r0, r2
 57c:	000097d3 	ldrdeq	r9, [r0], -r3
 580:	a4030500 	strge	r0, [r3], #-1280	; 0xfffffb00
 584:	11200019 			; <UNDEFINED> instruction: 0x11200019
 588:	00000220 	andeq	r0, r0, r0, lsr #4
 58c:	09ccdb01 	stmibeq	ip, {r0, r8, r9, fp, ip, lr, pc}^
 590:	00542000 	subseq	r2, r4, r0
 594:	9c010000 	stcls	0, cr0, [r1], {-0}
 598:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
 59c:	00026712 	andeq	r6, r2, r2, lsl r7
 5a0:	f0db0100 			; <UNDEFINED> instruction: 0xf0db0100
 5a4:	02000000 	andeq	r0, r0, #0
 5a8:	d4136c91 	ldrle	r6, [r3], #-3217	; 0xfffff36f
 5ac:	44200009 	strtmi	r0, [r0], #-9
 5b0:	14000000 	strne	r0, [r0], #-0
 5b4:	dc010069 	stcle	0, cr0, [r1], {105}	; 0x69
 5b8:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
 5bc:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
 5c0:	200009ea 	andcs	r0, r0, sl, ror #19
 5c4:	00000022 	andeq	r0, r0, r2, lsr #32
 5c8:	01006a14 	tsteq	r0, r4, lsl sl
 5cc:	0001b6de 	ldrdeq	fp, [r1], -lr
 5d0:	70910200 	addsvc	r0, r1, r0, lsl #4
 5d4:	15000000 	strne	r0, [r0, #-0]
 5d8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 5dc:	47110074 			; <UNDEFINED> instruction: 0x47110074
 5e0:	01000003 	tsteq	r0, r3
 5e4:	0008a8be 			; <UNDEFINED> instruction: 0x0008a8be
 5e8:	00012420 	andeq	r2, r1, r0, lsr #8
 5ec:	239c0100 	orrscs	r0, ip, #0, 2
 5f0:	12000002 	andne	r0, r0, #2
 5f4:	00000268 	andeq	r0, r0, r8, ror #4
 5f8:	00f0be01 	rscseq	fp, r0, r1, lsl #28
 5fc:	91020000 	mrsls	r0, (UNDEF: 2)
 600:	00781664 	rsbseq	r1, r8, r4, ror #12
 604:	00d8be01 	sbcseq	fp, r8, r1, lsl #28
 608:	91020000 	mrsls	r0, (UNDEF: 2)
 60c:	00791663 	rsbseq	r1, r9, r3, ror #12
 610:	00d8be01 	sbcseq	fp, r8, r1, lsl #28
 614:	91020000 	mrsls	r0, (UNDEF: 2)
 618:	65731662 	ldrbvs	r1, [r3, #-1634]!	; 0xfffff99e
 61c:	be010074 	mcrlt	0, 0, r0, cr1, cr4, {3}
 620:	000000d8 	ldrdeq	r0, [r0], -r8
 624:	0c619102 	stfeqp	f1, [r1], #-8
 628:	00000505 	andeq	r0, r0, r5, lsl #10
 62c:	0090bf01 	addseq	fp, r0, r1, lsl #30
 630:	91020000 	mrsls	r0, (UNDEF: 2)
 634:	032e0c6f 			; <UNDEFINED> instruction: 0x032e0c6f
 638:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
 63c:	00000090 	muleq	r0, r0, r0
 640:	006e9102 	rsbeq	r9, lr, r2, lsl #2
 644:	0002f317 	andeq	pc, r2, r7, lsl r3	; <UNPREDICTABLE>
 648:	50a20100 	adcpl	r0, r2, r0, lsl #2
 64c:	58200007 	stmdapl	r0!, {r0, r1, r2}
 650:	01000001 	tsteq	r0, r1
 654:	00029f9c 	muleq	r2, ip, pc	; <UNPREDICTABLE>
 658:	03911200 	orrseq	r1, r1, #0, 4
 65c:	a2010000 	andge	r0, r1, #0
 660:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 664:	145c9102 	ldrbne	r9, [ip], #-258	; 0xfffffefe
 668:	a5010078 	strge	r0, [r1, #-120]	; 0xffffff88
 66c:	000000d8 	ldrdeq	r0, [r0], -r8
 670:	14679102 	strbtne	r9, [r7], #-258	; 0xfffffefe
 674:	a5010069 	strge	r0, [r1, #-105]	; 0xffffff97
 678:	000000d8 	ldrdeq	r0, [r0], -r8
 67c:	14669102 	strbtne	r9, [r6], #-258	; 0xfffffefe
 680:	a501006a 	strge	r0, [r1, #-106]	; 0xffffff96
 684:	000000d8 	ldrdeq	r0, [r0], -r8
 688:	0c659102 	stfeqp	f1, [r5], #-8
 68c:	00000505 	andeq	r0, r0, r5, lsl #10
 690:	00d8a601 	sbcseq	sl, r8, r1, lsl #12
 694:	91020000 	mrsls	r0, (UNDEF: 2)
 698:	02530c64 	subseq	r0, r3, #100, 24	; 0x6400
 69c:	a6010000 	strge	r0, [r1], -r0
 6a0:	000000d8 	ldrdeq	r0, [r0], -r8
 6a4:	13629102 	cmnne	r2, #-2147483648	; 0x80000000
 6a8:	2000076c 	andcs	r0, r0, ip, ror #14
 6ac:	00000102 	andeq	r0, r0, r2, lsl #2
 6b0:	00023e0c 	andeq	r3, r2, ip, lsl #28
 6b4:	90a90100 	adcls	r0, r9, r0, lsl #2
 6b8:	02000000 	andeq	r0, r0, #0
 6bc:	00006391 	muleq	r0, r1, r3
 6c0:	00030117 	andeq	r0, r3, r7, lsl r1
 6c4:	14870100 	strne	r0, [r7], #256	; 0x100
 6c8:	3c200006 	stccc	0, cr0, [r0], #-24	; 0xffffffe8
 6cc:	01000001 	tsteq	r0, r1
 6d0:	0003059c 	muleq	r3, ip, r5
 6d4:	00781600 	rsbseq	r1, r8, r0, lsl #12
 6d8:	00d88701 	sbcseq	r8, r8, r1, lsl #14
 6dc:	91020000 	mrsls	r0, (UNDEF: 2)
 6e0:	00791667 	rsbseq	r1, r9, r7, ror #12
 6e4:	00d88701 	sbcseq	r8, r8, r1, lsl #14
 6e8:	91020000 	mrsls	r0, (UNDEF: 2)
 6ec:	65731666 	ldrbvs	r1, [r3, #-1638]!	; 0xfffff99a
 6f0:	87010074 	smlsdxhi	r1, r4, r0, r0
 6f4:	000000d8 	ldrdeq	r0, [r0], -r8
 6f8:	0c659102 	stfeqp	f1, [r5], #-8
 6fc:	00000505 	andeq	r0, r0, r5, lsl #10
 700:	00908a01 	addseq	r8, r0, r1, lsl #20
 704:	91020000 	mrsls	r0, (UNDEF: 2)
 708:	032e0c6f 			; <UNDEFINED> instruction: 0x032e0c6f
 70c:	8d010000 	stchi	0, cr0, [r1, #-0]
 710:	00000090 	muleq	r0, r0, r0
 714:	0c6d9102 	stfeqp	f1, [sp], #-8
 718:	00000298 	muleq	r0, r8, r2
 71c:	00d89701 	sbcseq	r9, r8, r1, lsl #14
 720:	91020000 	mrsls	r0, (UNDEF: 2)
 724:	7017006e 	andsvc	r0, r7, lr, rrx
 728:	01000002 	tsteq	r0, r2
 72c:	0005bc7d 	andeq	fp, r5, sp, ror ip
 730:	00005820 	andeq	r5, r0, r0, lsr #16
 734:	479c0100 	ldrmi	r0, [ip, r0, lsl #2]
 738:	13000003 	movwne	r0, #3
 73c:	200005c2 	andcs	r0, r0, r2, asr #11
 740:	0000004a 	andeq	r0, r0, sl, asr #32
 744:	01006914 	tsteq	r0, r4, lsl r9
 748:	0001b67e 	andeq	fp, r1, lr, ror r6
 74c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 750:	0005e613 	andeq	lr, r5, r3, lsl r6
 754:	00001a20 	andeq	r1, r0, r0, lsr #20
 758:	006a1400 	rsbeq	r1, sl, r0, lsl #8
 75c:	01b68101 			; <UNDEFINED> instruction: 0x01b68101
 760:	91020000 	mrsls	r0, (UNDEF: 2)
 764:	00000070 	andeq	r0, r0, r0, ror r0
 768:	00039818 	andeq	r9, r3, r8, lsl r8
 76c:	386a0100 	stmdacc	sl!, {r8}^
 770:	84200005 	strthi	r0, [r0], #-5
 774:	01000000 	mrseq	r0, (UNDEF: 0)
 778:	02ea199c 	rsceq	r1, sl, #156, 18	; 0x270000
 77c:	66010000 	strvs	r0, [r1], -r0
 780:	2000051e 	andcs	r0, r0, lr, lsl r5
 784:	0000001a 	andeq	r0, r0, sl, lsl r0
 788:	461a9c01 	ldrmi	r9, [sl], -r1, lsl #24
 78c:	01000002 	tsteq	r0, r2
 790:	0000d861 	andeq	sp, r0, r1, ror #16
 794:	0004f400 	andeq	pc, r4, r0, lsl #8
 798:	00002a20 	andeq	r2, r0, r0, lsr #20
 79c:	8f9c0100 	svchi	0x009c0100
 7a0:	16000003 	strne	r0, [r0], -r3
 7a4:	61010063 	tstvs	r1, r3, rrx
 7a8:	000000d8 	ldrdeq	r0, [r0], -r8
 7ac:	00779102 	rsbseq	r9, r7, r2, lsl #2
 7b0:	00033417 	andeq	r3, r3, r7, lsl r4
 7b4:	945a0100 	ldrbls	r0, [sl], #-256	; 0xffffff00
 7b8:	60200004 	eorvs	r0, r0, r4
 7bc:	01000000 	mrseq	r0, (UNDEF: 0)
 7c0:	0003bf9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
 7c4:	02531200 	subseq	r1, r3, #0, 4
 7c8:	5a010000 	bpl	407d0 <startup-0x1ffbf830>
 7cc:	000000d8 	ldrdeq	r0, [r0], -r8
 7d0:	16779102 	ldrbtne	r9, [r7], -r2, lsl #2
 7d4:	5a010063 	bpl	40968 <startup-0x1ffbf698>
 7d8:	000000d8 	ldrdeq	r0, [r0], -r8
 7dc:	00769102 	rsbseq	r9, r6, r2, lsl #2
 7e0:	00037b17 	andeq	r7, r3, r7, lsl fp
 7e4:	3c530100 	ldfcce	f0, [r3], {-0}
 7e8:	58200004 	stmdapl	r0!, {r2}
 7ec:	01000000 	mrseq	r0, (UNDEF: 0)
 7f0:	0003ef9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
 7f4:	6d631600 	stclvs	6, cr1, [r3, #-0]
 7f8:	53010064 	movwpl	r0, #4196	; 0x1064
 7fc:	000000d8 	ldrdeq	r0, [r0], -r8
 800:	16779102 	ldrbtne	r9, [r7], -r2, lsl #2
 804:	53010063 	movwpl	r0, #4195	; 0x1063
 808:	000000d8 	ldrdeq	r0, [r0], -r8
 80c:	00769102 	rsbseq	r9, r6, r2, lsl #2
 810:	00028a17 	andeq	r8, r2, r7, lsl sl
 814:	943d0100 	ldrtls	r0, [sp], #-256	; 0xffffff00
 818:	a8200003 	stmdage	r0!, {r0, r1}
 81c:	01000000 	mrseq	r0, (UNDEF: 0)
 820:	00041f9c 	muleq	r4, ip, pc	; <UNPREDICTABLE>
 824:	61761600 	cmnvs	r6, r0, lsl #12
 828:	3d01006c 	stccc	0, cr0, [r1, #-432]	; 0xfffffe50
 82c:	000000d8 	ldrdeq	r0, [r0], -r8
 830:	16779102 	ldrbtne	r9, [r7], -r2, lsl #2
 834:	3d010063 	stccc	0, cr0, [r1, #-396]	; 0xfffffe74
 838:	000000d8 	ldrdeq	r0, [r0], -r8
 83c:	00769102 	rsbseq	r9, r6, r2, lsl #2
 840:	00035b1a 	andeq	r5, r3, sl, lsl fp
 844:	90240100 	eorls	r0, r4, r0, lsl #2
 848:	cc000000 	stcgt	0, cr0, [r0], {-0}
 84c:	c8200002 	stmdagt	r0!, {r1}
 850:	01000000 	mrseq	r0, (UNDEF: 0)
 854:	0004529c 	muleq	r4, ip, r2
 858:	00631600 	rsbeq	r1, r3, r0, lsl #12
 85c:	00d82401 	sbcseq	r2, r8, r1, lsl #8
 860:	91020000 	mrsls	r0, (UNDEF: 2)
 864:	5652146f 	ldrbpl	r1, [r2], -pc, ror #8
 868:	d82e0100 	stmdale	lr!, {r8}
 86c:	02000000 	andeq	r0, r0, #0
 870:	1b007791 	blne	1e6bc <startup-0x1ffe1944>
 874:	00000368 	andeq	r0, r0, r8, ror #6
 878:	02281201 	eoreq	r1, r8, #268435456	; 0x10000000
 87c:	00a42000 	adceq	r2, r4, r0
 880:	9c010000 	stcls	0, cr0, [r1], {-0}
 884:	00029d1c 	andeq	r9, r2, ip, lsl sp
 888:	98090100 	stmdals	r9, {r8}
 88c:	90200001 	eorls	r0, r0, r1
 890:	01000000 	mrseq	r0, (UNDEF: 0)
 894:	0063169c 	mlseq	r3, ip, r6, r1
 898:	00900901 	addseq	r0, r0, r1, lsl #18
 89c:	91020000 	mrsls	r0, (UNDEF: 2)
 8a0:	97000077 	smlsdxls	r0, r7, r0, r0
 8a4:	04000003 	streq	r0, [r0], #-3
 8a8:	00036600 	andeq	r6, r3, r0, lsl #12
 8ac:	3d010400 	cfstrscc	mvf0, [r1, #-0]
 8b0:	0c000000 	stceq	0, cr0, [r0], {-0}
 8b4:	000003f4 	strdeq	r0, [r0], -r4
 8b8:	000000e3 	andeq	r0, r0, r3, ror #1
 8bc:	20000a20 	andcs	r0, r0, r0, lsr #20
 8c0:	0000020a 	andeq	r0, r0, sl, lsl #4
 8c4:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
 8c8:	05020202 	streq	r0, [r2, #-514]	; 0xfffffdfe
 8cc:	00000042 	andeq	r0, r0, r2, asr #32
 8d0:	02007803 	andeq	r7, r0, #196608	; 0x30000
 8d4:	00004206 	andeq	r4, r0, r6, lsl #4
 8d8:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
 8dc:	42070200 	andmi	r0, r7, #0, 4
 8e0:	01000000 	mrseq	r0, (UNDEF: 0)
 8e4:	08010400 	stmdaeq	r1, {sl}
 8e8:	000000d5 	ldrdeq	r0, [r0], -r5
 8ec:	00001005 	andeq	r1, r0, r5
 8f0:	25080200 	strcs	r0, [r8, #-512]	; 0xfffffe00
 8f4:	02000000 	andeq	r0, r0, #0
 8f8:	8c190234 	lfmhi	f0, 4, [r9], {52}	; 0x34
 8fc:	06000000 	streq	r0, [r0], -r0
 900:	000001a3 	andeq	r0, r0, r3, lsr #3
 904:	008c1a02 	addeq	r1, ip, r2, lsl #20
 908:	06000000 	streq	r0, [r0], -r0
 90c:	00000131 	andeq	r0, r0, r1, lsr r1
 910:	008c1b02 	addeq	r1, ip, r2, lsl #22
 914:	06040000 	streq	r0, [r4], -r0
 918:	00000137 	andeq	r0, r0, r7, lsr r1
 91c:	008c1c02 	addeq	r1, ip, r2, lsl #24
 920:	03080000 	movweq	r0, #32768	; 0x8000
 924:	02007870 	andeq	r7, r0, #112, 16	; 0x700000
 928:	0000931d 	andeq	r9, r0, sp, lsl r3
 92c:	07000c00 	streq	r0, [r0, -r0, lsl #24]
 930:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 934:	49080074 	stmdbmi	r8, {r2, r4, r5, r6}
 938:	a3000000 	movwge	r0, #0
 93c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 940:	000000a3 	andeq	r0, r0, r3, lsr #1
 944:	04040013 	streq	r0, [r4], #-19	; 0xffffffed
 948:	00002107 	andeq	r2, r0, r7, lsl #2
 94c:	01b20500 			; <UNDEFINED> instruction: 0x01b20500
 950:	1e020000 	cdpne	0, 0, cr0, cr2, cr0, {0}
 954:	000000b5 	strheq	r0, [r0], -r5
 958:	0054040a 	subseq	r0, r4, sl, lsl #8
 95c:	9e0b0000 	cdpls	0, 0, cr0, cr11, cr0, {0}
 960:	28000001 	stmdacs	r0, {r0}
 964:	01402202 	cmpeq	r0, r2, lsl #4
 968:	67030000 	strvs	r0, [r3, -r0]
 96c:	02006f65 	andeq	r6, r0, #404	; 0x194
 970:	0000aa23 	andeq	sl, r0, r3, lsr #20
 974:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
 978:	02000000 	andeq	r0, r0, #0
 97c:	00008c24 	andeq	r8, r0, r4, lsr #24
 980:	33060400 	movwcc	r0, #25600	; 0x6400
 984:	02000000 	andeq	r0, r0, #0
 988:	00008c24 	andeq	r8, r0, r4, lsr #24
 98c:	14060800 	strne	r0, [r6], #-2048	; 0xfffff800
 990:	02000001 	andeq	r0, r0, #1
 994:	00008c25 	andeq	r8, r0, r5, lsr #24
 998:	19060c00 	stmdbne	r6, {sl, fp}
 99c:	02000001 	andeq	r0, r0, #1
 9a0:	00008c25 	andeq	r8, r0, r5, lsr #24
 9a4:	4c061000 	stcmi	0, cr1, [r6], {-0}
 9a8:	02000001 	andeq	r0, r0, #1
 9ac:	00015126 	andeq	r5, r1, r6, lsr #2
 9b0:	27061400 	strcs	r1, [r6, -r0, lsl #8]
 9b4:	02000002 	andeq	r0, r0, #2
 9b8:	00015127 	andeq	r5, r1, r7, lsr #2
 9bc:	82061800 	andhi	r1, r6, #0, 16
 9c0:	02000001 	andeq	r0, r0, #1
 9c4:	00015128 	andeq	r5, r1, r8, lsr #2
 9c8:	0a061c00 	beq	1879d0 <startup-0x1fe78630>
 9cc:	02000001 	andeq	r0, r0, #1
 9d0:	00016c29 	andeq	r6, r1, r9, lsr #24
 9d4:	c5062000 	strgt	r2, [r6, #-0]
 9d8:	02000003 	andeq	r0, r0, #3
 9dc:	0001822a 	andeq	r8, r1, sl, lsr #4
 9e0:	0c002400 	cfstrseq	mvf2, [r0], {-0}
 9e4:	0000014b 	andeq	r0, r0, fp, asr #2
 9e8:	00014b0d 	andeq	r4, r1, sp, lsl #22
 9ec:	040a0000 	streq	r0, [sl], #-0
 9f0:	000000bb 	strheq	r0, [r0], -fp
 9f4:	0140040a 	cmpeq	r0, sl, lsl #8
 9f8:	6c0c0000 	stcvs	0, cr0, [ip], {-0}
 9fc:	0d000001 	stceq	0, cr0, [r0, #-4]
 a00:	0000014b 	andeq	r0, r0, fp, asr #2
 a04:	00008c0d 	andeq	r8, r0, sp, lsl #24
 a08:	008c0d00 	addeq	r0, ip, r0, lsl #26
 a0c:	0a000000 	beq	a14 <startup-0x1ffff5ec>
 a10:	00015704 	andeq	r5, r1, r4, lsl #14
 a14:	01820c00 	orreq	r0, r2, r0, lsl #24
 a18:	4b0d0000 	blmi	340a20 <startup-0x1fcbf5e0>
 a1c:	0d000001 	stceq	0, cr0, [r0, #-4]
 a20:	00000049 	andeq	r0, r0, r9, asr #32
 a24:	72040a00 	andvc	r0, r4, #0, 20
 a28:	05000001 	streq	r0, [r0, #-1]
 a2c:	00000470 	andeq	r0, r0, r0, ror r4
 a30:	00bb2b02 	adcseq	r2, fp, r2, lsl #22
 a34:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
 a38:	02000000 	andeq	r0, r0, #0
 a3c:	00014b2b 	andeq	r4, r1, fp, lsr #22
 a40:	03ab0e00 			; <UNDEFINED> instruction: 0x03ab0e00
 a44:	31010000 	mrscc	r0, (UNDEF: 1)
 a48:	20000bc2 	andcs	r0, r0, r2, asr #23
 a4c:	00000068 	andeq	r0, r0, r8, rrx
 a50:	021e9c01 	andseq	r9, lr, #256	; 0x100
 a54:	b40f0000 	strlt	r0, [pc], #-0	; a5c <startup-0x1ffff5a4>
 a58:	01000003 	tsteq	r0, r3
 a5c:	00021e31 	andeq	r1, r2, r1, lsr lr
 a60:	6c910200 	lfmvs	f0, 4, [r1], {0}
 a64:	00042e0f 	andeq	r2, r4, pc, lsl #28
 a68:	24310100 	ldrtcs	r0, [r1], #-256	; 0xffffff00
 a6c:	02000002 	andeq	r0, r0, #2
 a70:	d2106b91 	andsle	r6, r0, #148480	; 0x24400
 a74:	01000003 	tsteq	r0, r3
 a78:	00008c32 	andeq	r8, r0, r2, lsr ip
 a7c:	0001e000 	andeq	lr, r1, r0
 a80:	10001100 	andne	r1, r0, r0, lsl #2
 a84:	000003dd 	ldrdeq	r0, [r0], -sp
 a88:	008c3401 	addeq	r3, ip, r1, lsl #8
 a8c:	01f10000 	mvnseq	r0, r0
 a90:	00110000 	andseq	r0, r1, r0
 a94:	00047712 	andeq	r7, r4, r2, lsl r7
 a98:	24350100 	ldrtcs	r0, [r5], #-256	; 0xffffff00
 a9c:	02000002 	andeq	r0, r0, #2
 aa0:	87107791 			; <UNDEFINED> instruction: 0x87107791
 aa4:	01000004 	tsteq	r0, r4
 aa8:	00008c36 	andeq	r8, r0, r6, lsr ip
 aac:	00021000 	andeq	r1, r2, r0
 ab0:	13001100 	movwne	r1, #256	; 0x100
 ab4:	00000398 	muleq	r0, r8, r3
 ab8:	008c3701 	addeq	r3, ip, r1, lsl #14
 abc:	00110000 	andseq	r0, r1, r0
 ac0:	24040a00 	strcs	r0, [r4], #-2560	; 0xfffff600
 ac4:	04000002 	streq	r0, [r0], #-2
 ac8:	00de0801 	sbcseq	r0, lr, r1, lsl #16
 acc:	6b0e0000 	blvs	380ad4 <startup-0x1fc7f52c>
 ad0:	01000004 	tsteq	r0, r4
 ad4:	000b2a24 	andeq	r2, fp, r4, lsr #20
 ad8:	00009820 	andeq	r9, r0, r0, lsr #16
 adc:	4d9c0100 	ldfmis	f0, [ip]
 ae0:	14000002 	strne	r0, [r0], #-2
 ae4:	2401006f 	strcs	r0, [r1], #-111	; 0xffffff91
 ae8:	0000024d 	andeq	r0, r0, sp, asr #4
 aec:	00749102 	rsbseq	r9, r4, r2, lsl #2
 af0:	0188040a 	orreq	r0, r8, sl, lsl #8
 af4:	520e0000 	andpl	r0, lr, #0
 af8:	01000004 	tsteq	r0, r4
 afc:	000ace1e 	andeq	ip, sl, lr, lsl lr
 b00:	00005c20 	andeq	r5, r0, r0, lsr #24
 b04:	a29c0100 	addsge	r0, ip, #0, 2
 b08:	14000002 	strne	r0, [r0], #-2
 b0c:	1e01006f 	cdpne	0, 0, cr0, cr1, cr15, {3}
 b10:	0000024d 	andeq	r0, r0, sp, asr #4
 b14:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
 b18:	20000ad6 	ldrdcs	r0, [r0], -r6
 b1c:	0000004c 	andeq	r0, r0, ip, asr #32
 b20:	01006916 	tsteq	r0, r6, lsl r9
 b24:	00008c1f 	andeq	r8, r0, pc, lsl ip
 b28:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 b2c:	000adc15 	andeq	sp, sl, r5, lsl ip
 b30:	00003420 	andeq	r3, r0, r0, lsr #8
 b34:	03011300 	movweq	r1, #4864	; 0x1300
 b38:	1a010000 	bne	40b40 <startup-0x1ffbf4c0>
 b3c:	0000008c 	andeq	r0, r0, ip, lsl #1
 b40:	00000011 	andeq	r0, r0, r1, lsl r0
 b44:	045f0e00 	ldrbeq	r0, [pc], #-3584	; b4c <startup-0x1ffff4b4>
 b48:	16010000 	strne	r0, [r1], -r0
 b4c:	20000a6a 	andcs	r0, r0, sl, ror #20
 b50:	00000064 	andeq	r0, r0, r4, rrx
 b54:	030d9c01 	movweq	r9, #56321	; 0xdc01
 b58:	6f140000 	svcvs	0x00140000
 b5c:	4d160100 	ldfmis	f0, [r6, #-0]
 b60:	02000002 	andeq	r0, r0, #2
 b64:	72156491 	andsvc	r6, r5, #-1862270976	; 0x91000000
 b68:	5420000a 	strtpl	r0, [r0], #-10
 b6c:	16000000 	strne	r0, [r0], -r0
 b70:	17010069 	strne	r0, [r1, -r9, rrx]
 b74:	0000008c 	andeq	r0, r0, ip, lsl #1
 b78:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
 b7c:	20000a78 	andcs	r0, r0, r8, ror sl
 b80:	0000003c 	andeq	r0, r0, ip, lsr r0
 b84:	00044612 	andeq	r4, r4, r2, lsl r6
 b88:	8c180100 	ldfhis	f0, [r8], {-0}
 b8c:	02000000 	andeq	r0, r0, #0
 b90:	4c127091 	ldcmi	0, cr7, [r2], {145}	; 0x91
 b94:	01000004 	tsteq	r0, r4
 b98:	00008c19 	andeq	r8, r0, r9, lsl ip
 b9c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 ba0:	00030113 	andeq	r0, r3, r3, lsl r1
 ba4:	8c1a0100 	ldfhis	f0, [sl], {-0}
 ba8:	11000000 	mrsne	r0, (UNDEF: 0)
 bac:	00000000 	andeq	r0, r0, r0
 bb0:	0003c017 	andeq	ip, r3, r7, lsl r0
 bb4:	4a110100 	bmi	440fbc <startup-0x1fbbf044>
 bb8:	2020000a 	eorcs	r0, r0, sl
 bbc:	01000000 	mrseq	r0, (UNDEF: 0)
 bc0:	00034b9c 	muleq	r3, ip, fp
 bc4:	006f1400 	rsbeq	r1, pc, r0, lsl #8
 bc8:	01931101 	orrseq	r1, r3, r1, lsl #2
 bcc:	91020000 	mrsls	r0, (UNDEF: 2)
 bd0:	01140f74 	tsteq	r4, r4, ror pc
 bd4:	11010000 	mrsne	r0, (UNDEF: 1)
 bd8:	0000008c 	andeq	r0, r0, ip, lsl #1
 bdc:	0f709102 	svceq	0x00709102
 be0:	00000119 	andeq	r0, r0, r9, lsl r1
 be4:	008c1101 	addeq	r1, ip, r1, lsl #2
 be8:	91020000 	mrsls	r0, (UNDEF: 2)
 bec:	3517006c 	ldrcc	r0, [r7, #-108]	; 0xffffff94
 bf0:	01000004 	tsteq	r0, r4
 bf4:	000a2a0c 	andeq	r2, sl, ip, lsl #20
 bf8:	00002020 	andeq	r2, r0, r0, lsr #32
 bfc:	899c0100 	ldmibhi	ip, {r8}
 c00:	14000003 	strne	r0, [r0], #-3
 c04:	0c01006f 	stceq	0, cr0, [r1], {111}	; 0x6f
 c08:	00000193 	muleq	r0, r3, r1
 c0c:	0f749102 	svceq	0x00749102
 c10:	00000427 	andeq	r0, r0, r7, lsr #8
 c14:	008c0c01 	addeq	r0, ip, r1, lsl #24
 c18:	91020000 	mrsls	r0, (UNDEF: 2)
 c1c:	04800f70 	streq	r0, [r0], #3952	; 0xf70
 c20:	0c010000 	stceq	0, cr0, [r1], {-0}
 c24:	0000008c 	andeq	r0, r0, ip, lsl #1
 c28:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 c2c:	0003ea18 	andeq	lr, r3, r8, lsl sl
 c30:	20080100 	andcs	r0, r8, r0, lsl #2
 c34:	0a20000a 	beq	800c64 <startup-0x1f7ff39c>
 c38:	01000000 	mrseq	r0, (UNDEF: 0)
 c3c:	022d009c 	eoreq	r0, sp, #156	; 0x9c
 c40:	00040000 	andeq	r0, r4, r0
 c44:	000004ba 			; <UNDEFINED> instruction: 0x000004ba
 c48:	003d0104 	eorseq	r0, sp, r4, lsl #2
 c4c:	100c0000 	andne	r0, ip, r0
 c50:	e3000005 	movw	r0, #5
 c54:	2c000000 	stccs	0, cr0, [r0], {-0}
 c58:	b020000c 	eorlt	r0, r0, ip
 c5c:	79000002 	stmdbvc	r0, {r1}
 c60:	02000003 	andeq	r0, r0, #3
 c64:	005d0107 	subseq	r0, sp, r7, lsl #2
 c68:	1d020000 	stcne	0, cr0, [r2, #-0]
 c6c:	0000005d 	andeq	r0, r0, sp, asr r0
 c70:	00030f03 	andeq	r0, r3, r3, lsl #30
 c74:	85030100 	strhi	r0, [r3, #-256]	; 0xffffff00
 c78:	02000002 	andeq	r0, r0, #2
 c7c:	00032503 	andeq	r2, r3, r3, lsl #10
 c80:	1f030400 	svcne	0x00030400
 c84:	08000003 	stmdaeq	r0, {r0, r1}
 c88:	00021a03 	andeq	r1, r2, r3, lsl #20
 c8c:	e4031000 	str	r1, [r3], #-0
 c90:	20000002 	andcs	r0, r0, r2
 c94:	455f4204 	ldrbmi	r4, [pc, #-516]	; a98 <startup-0x1ffff568>
 c98:	05004000 	streq	r4, [r0, #-0]
 c9c:	00d50801 	sbcseq	r0, r5, r1, lsl #16
 ca0:	67060000 	strvs	r0, [r6, -r0]
 ca4:	01000005 	tsteq	r0, r5
 ca8:	000eae5a 	andeq	sl, lr, sl, asr lr
 cac:	00002e20 	andeq	r2, r0, r0, lsr #28
 cb0:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
 cb4:	000003dd 	ldrdeq	r0, [r0], -sp
 cb8:	0e7a5501 	cdpeq	5, 7, cr5, cr10, cr1, {0}
 cbc:	00342000 	eorseq	r2, r4, r0
 cc0:	9c010000 	stcls	0, cr0, [r1], {-0}
 cc4:	000000b1 	strheq	r0, [r0], -r1
 cc8:	01007808 	tsteq	r0, r8, lsl #16
 ccc:	0000b155 	andeq	fp, r0, r5, asr r1
 cd0:	6c910200 	lfmvs	f0, 4, [r1], {0}
 cd4:	01007908 	tsteq	r0, r8, lsl #18
 cd8:	0000b155 	andeq	fp, r0, r5, asr r1
 cdc:	68910200 	ldmvs	r1, {r9}
 ce0:	00057609 	andeq	r7, r5, r9, lsl #12
 ce4:	b1560100 	cmplt	r6, r0, lsl #2
 ce8:	02000000 	andeq	r0, r0, #0
 cec:	0a007491 	beq	1df38 <startup-0x1ffe20c8>
 cf0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 cf4:	87070074 	smlsdxhi	r7, r4, r0, r0
 cf8:	01000004 	tsteq	r0, r4
 cfc:	000e3e4e 	andeq	r3, lr, lr, asr #28
 d00:	00003c20 	andeq	r3, r0, r0, lsr #24
 d04:	da9c0100 	ble	fe70110c <ball+0xde6ff2b4>
 d08:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 d0c:	4e010063 	cdpmi	0, 0, cr0, cr1, cr3, {3}
 d10:	000000da 	ldrdeq	r0, [r0], -sl
 d14:	00779102 	rsbseq	r9, r7, r2, lsl #2
 d18:	de080105 	adflee	f0, f0, f5
 d1c:	0b000000 	bleq	d24 <startup-0x1ffff2dc>
 d20:	000003d2 	ldrdeq	r0, [r0], -r2
 d24:	0df84301 	ldcleq	3, cr4, [r8, #4]!
 d28:	00462000 	subeq	r2, r6, r0
 d2c:	9c010000 	stcls	0, cr0, [r1], {-0}
 d30:	0005470c 	andeq	r4, r5, ip, lsl #14
 d34:	5d3a0100 	ldfpls	f0, [sl, #-0]
 d38:	b0000000 	andlt	r0, r0, r0
 d3c:	4820000d 	stmdami	r0!, {r0, r2, r3}
 d40:	01000000 	mrseq	r0, (UNDEF: 0)
 d44:	0001199c 	muleq	r1, ip, r9
 d48:	76720d00 	ldrbtvc	r0, [r2], -r0, lsl #26
 d4c:	5d3e0100 	ldfpls	f0, [lr, #-0]
 d50:	02000000 	andeq	r0, r0, #0
 d54:	0c006f91 	stceq	15, cr6, [r0], {145}	; 0x91
 d58:	000004e8 	andeq	r0, r0, r8, ror #9
 d5c:	005d3101 	subseq	r3, sp, r1, lsl #2
 d60:	0d680000 	stcleq	0, cr0, [r8, #-0]
 d64:	00482000 	subeq	r2, r8, r0
 d68:	9c010000 	stcls	0, cr0, [r1], {-0}
 d6c:	00000140 	andeq	r0, r0, r0, asr #2
 d70:	0076720d 	rsbseq	r7, r6, sp, lsl #4
 d74:	005d3501 	subseq	r3, sp, r1, lsl #10
 d78:	91020000 	mrsls	r0, (UNDEF: 2)
 d7c:	d707006f 	strle	r0, [r7, -pc, rrx]
 d80:	01000004 	tsteq	r0, r4
 d84:	000d3e2b 	andeq	r3, sp, fp, lsr #28
 d88:	00002a20 	andeq	r2, r0, r0, lsr #20
 d8c:	649c0100 	ldrvs	r0, [ip], #256	; 0x100
 d90:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 d94:	00000253 	andeq	r0, r0, r3, asr r2
 d98:	005d2b01 	subseq	r2, sp, r1, lsl #22
 d9c:	91020000 	mrsls	r0, (UNDEF: 2)
 da0:	57070077 	smlsdxpl	r7, r7, r0, r0
 da4:	01000005 	tsteq	r0, r5
 da8:	000d1425 	andeq	r1, sp, r5, lsr #8
 dac:	00002a20 	andeq	r2, r0, r0, lsr #20
 db0:	889c0100 	ldmhi	ip, {r8}
 db4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 db8:	00000389 	andeq	r0, r0, r9, lsl #7
 dbc:	005d2501 	subseq	r2, sp, r1, lsl #10
 dc0:	91020000 	mrsls	r0, (UNDEF: 2)
 dc4:	fa0c0077 	blx	300fa8 <startup-0x1fcff058>
 dc8:	01000004 	tsteq	r0, r4
 dcc:	00005d1c 	andeq	r5, r0, ip, lsl sp
 dd0:	000ce800 	andeq	lr, ip, r0, lsl #16
 dd4:	00002c20 	andeq	r2, r0, r0, lsr #24
 dd8:	af9c0100 	svcge	0x009c0100
 ddc:	0d000001 	stceq	0, cr0, [r0, #-4]
 de0:	01007672 	tsteq	r0, r2, ror r6
 de4:	00005d20 	andeq	r5, r0, r0, lsr #26
 de8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 dec:	04ad0700 	strteq	r0, [sp], #1792	; 0x700
 df0:	15010000 	strne	r0, [r1, #-0]
 df4:	20000cb8 			; <UNDEFINED> instruction: 0x20000cb8
 df8:	00000030 	andeq	r0, r0, r0, lsr r0
 dfc:	01d19c01 	bicseq	r9, r1, r1, lsl #24
 e00:	63080000 	movwvs	r0, #32768	; 0x8000
 e04:	5d150100 	ldfpls	f0, [r5, #-0]
 e08:	02000000 	andeq	r0, r0, #0
 e0c:	0f007791 	svceq	0x00007791
 e10:	00000498 	muleq	r0, r8, r4
 e14:	0c700e01 	ldcleq	14, cr0, [r0], #-4
 e18:	00482000 	subeq	r2, r8, r0
 e1c:	9c010000 	stcls	0, cr0, [r1], {-0}
 e20:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 e24:	01007808 	tsteq	r0, r8, lsl #16
 e28:	0001ff0e 	andeq	pc, r1, lr, lsl #30
 e2c:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
 e30:	0100630d 	tsteq	r0, sp, lsl #6
 e34:	00005d0f 	andeq	r5, r0, pc, lsl #26
 e38:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 e3c:	07020500 	streq	r0, [r2, -r0, lsl #10]
 e40:	0000001b 	andeq	r0, r0, fp, lsl r0
 e44:	0004c410 	andeq	ip, r4, r0, lsl r4
 e48:	2c060100 	stfcss	f0, [r6], {-0}
 e4c:	4420000c 	strtmi	r0, [r0], #-12
 e50:	01000000 	mrseq	r0, (UNDEF: 0)
 e54:	0078089c 			; <UNDEFINED> instruction: 0x0078089c
 e58:	01ff0601 	mvnseq	r0, r1, lsl #12
 e5c:	91020000 	mrsls	r0, (UNDEF: 2)
 e60:	00630d6e 	rsbeq	r0, r3, lr, ror #26
 e64:	005d0801 	subseq	r0, sp, r1, lsl #16
 e68:	91020000 	mrsls	r0, (UNDEF: 2)
 e6c:	7a000077 	bvc	1050 <startup-0x1fffefb0>
 e70:	04000001 	streq	r0, [r0], #-1
 e74:	0005db00 	andeq	sp, r5, r0, lsl #22
 e78:	3d010400 	cfstrscc	mvf0, [r1, #-0]
 e7c:	0c000000 	stceq	0, cr0, [r0], {-0}
 e80:	00000582 	andeq	r0, r0, r2, lsl #11
 e84:	000000e3 	andeq	r0, r0, r3, ror #1
 e88:	20000edc 	ldrdcs	r0, [r0], -ip
 e8c:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 e90:	00000444 	andeq	r0, r0, r4, asr #8
 e94:	d5080102 	strle	r0, [r8, #-258]	; 0xfffffefe
 e98:	03000000 	movweq	r0, #0
 e9c:	00000025 	andeq	r0, r0, r5, lsr #32
 ea0:	0005e704 	andeq	lr, r5, r4, lsl #14
 ea4:	a3320100 	teqge	r2, #0, 2
 ea8:	04000000 	streq	r0, [r0], #-0
 eac:	88200010 	stmdahi	r0!, {r4}
 eb0:	01000000 	mrseq	r0, (UNDEF: 0)
 eb4:	0000a39c 	muleq	r0, ip, r3
 eb8:	05d90500 	ldrbeq	r0, [r9, #1280]	; 0x500
 ebc:	34010000 	strcc	r0, [r1], #-0
 ec0:	00000025 	andeq	r0, r0, r5, lsr #32
 ec4:	05749102 	ldrbeq	r9, [r4, #-258]!	; 0xfffffefe
 ec8:	00000363 	andeq	r0, r0, r3, ror #6
 ecc:	00a33501 	adceq	r3, r3, r1, lsl #10
 ed0:	91020000 	mrsls	r0, (UNDEF: 2)
 ed4:	10160676 	andsne	r0, r6, r6, ror r6
 ed8:	00602000 	rsbeq	r2, r0, r0
 edc:	69070000 	stmdbvs	r7, {}	; <UNPREDICTABLE>
 ee0:	aa360100 	bge	d812e8 <startup-0x1f27ed18>
 ee4:	02000000 	andeq	r0, r0, #0
 ee8:	1e067591 	mcrne	5, 0, r7, cr6, cr1, {4}
 eec:	46200010 			; <UNDEFINED> instruction: 0x46200010
 ef0:	05000000 	streq	r0, [r0, #-0]
 ef4:	000005ba 			; <UNDEFINED> instruction: 0x000005ba
 ef8:	00aa3701 	adceq	r3, sl, r1, lsl #14
 efc:	91020000 	mrsls	r0, (UNDEF: 2)
 f00:	01ad0573 			; <UNDEFINED> instruction: 0x01ad0573
 f04:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
 f08:	0000002c 	andeq	r0, r0, ip, lsr #32
 f0c:	00729102 	rsbseq	r9, r2, r2, lsl #2
 f10:	02020000 	andeq	r0, r2, #0
 f14:	00001b07 	andeq	r1, r0, r7, lsl #22
 f18:	08010200 	stmdaeq	r1, {r9}
 f1c:	000000de 	ldrdeq	r0, [r0], -lr
 f20:	0005df08 	andeq	sp, r5, r8, lsl #30
 f24:	d0290100 	eorle	r0, r9, r0, lsl #2
 f28:	3420000f 	strtcc	r0, [r0], #-15
 f2c:	01000000 	mrseq	r0, (UNDEF: 0)
 f30:	0000e39c 	muleq	r0, ip, r3
 f34:	756e0900 	strbvc	r0, [lr, #-2304]!	; 0xfffff700
 f38:	2901006d 	stmdbcs	r1, {r0, r2, r3, r5, r6}
 f3c:	00000025 	andeq	r0, r0, r5, lsr #32
 f40:	055f9102 	ldrbeq	r9, [pc, #-258]	; e46 <startup-0x1ffff1ba>
 f44:	000005c4 	andeq	r0, r0, r4, asr #11
 f48:	00e32a01 	rsceq	r2, r3, r1, lsl #20
 f4c:	91020000 	mrsls	r0, (UNDEF: 2)
 f50:	250a0060 	strcs	r0, [sl, #-96]	; 0xffffffa0
 f54:	f3000000 	vhadd.u8	d0, d0, d0
 f58:	0b000000 	bleq	f60 <startup-0x1ffff0a0>
 f5c:	000000f3 	strdeq	r0, [r0], -r3
 f60:	0402000f 	streq	r0, [r2], #-15
 f64:	00002107 	andeq	r2, r0, r7, lsl #2
 f68:	057d0400 	ldrbeq	r0, [sp, #-1024]!	; 0xfffffc00
 f6c:	12010000 	andne	r0, r1, #0
 f70:	00000025 	andeq	r0, r0, r5, lsr #32
 f74:	20000f14 	andcs	r0, r0, r4, lsl pc
 f78:	000000bc 	strheq	r0, [r0], -ip
 f7c:	016c9c01 	cmneq	ip, r1, lsl #24
 f80:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
 f84:	01000005 	tsteq	r0, r5
 f88:	00002514 	andeq	r2, r0, r4, lsl r5
 f8c:	6f910200 	svcvs	0x00910200
 f90:	0005ef05 	andeq	lr, r5, r5, lsl #30
 f94:	e3150100 	tst	r5, #0, 2
 f98:	02000000 	andeq	r0, r0, #0
 f9c:	2e065c91 	mcrcs	12, 0, r5, cr6, cr1, {4}
 fa0:	8c20000f 	stchi	0, cr0, [r0], #-60	; 0xffffffc4
 fa4:	07000000 	streq	r0, [r0, -r0]
 fa8:	17010069 	strne	r0, [r1, -r9, rrx]
 fac:	000000aa 	andeq	r0, r0, sl, lsr #1
 fb0:	066e9102 	strbteq	r9, [lr], -r2, lsl #2
 fb4:	20000f38 	andcs	r0, r0, r8, lsr pc
 fb8:	0000006c 	andeq	r0, r0, ip, rrx
 fbc:	0005ba05 	andeq	fp, r5, r5, lsl #20
 fc0:	aa180100 	bge	6013c8 <startup-0x1f9fec38>
 fc4:	02000000 	andeq	r0, r0, #0
 fc8:	ad056c91 	stcge	12, cr6, [r5, #-580]	; 0xfffffdbc
 fcc:	01000001 	tsteq	r0, r1
 fd0:	0000aa1a 	andeq	sl, r0, sl, lsl sl
 fd4:	6d910200 	lfmvs	f0, 4, [r1]
 fd8:	0c000000 	stceq	0, cr0, [r0], {-0}
 fdc:	000005cd 	andeq	r0, r0, sp, asr #11
 fe0:	0edc0601 	cdpeq	6, 13, cr0, cr12, cr1, {0}
 fe4:	00382000 	eorseq	r2, r8, r0
 fe8:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
  18:	0b3a050b 	bleq	e8144c <startup-0x1f17ebb4>
  1c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  20:	0d030000 	stceq	0, cr0, [r3, #-0]
  24:	3a0e0300 	bcc	380c2c <startup-0x1fc7f3d4>
  28:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  2c:	000b3813 	andeq	r3, fp, r3, lsl r8
  30:	000d0400 	andeq	r0, sp, r0, lsl #8
  34:	0b3a0e03 	bleq	e83848 <startup-0x1f17c7b8>
  38:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  3c:	00000538 	andeq	r0, r0, r8, lsr r5
  40:	49010105 	stmdbmi	r1, {r0, r2, r8}
  44:	00130113 	andseq	r0, r3, r3, lsl r1
  48:	00210600 	eoreq	r0, r1, r0, lsl #12
  4c:	0b2f1349 	bleq	bc4d78 <startup-0x1f43b288>
  50:	24070000 	strcs	r0, [r7], #-0
  54:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  58:	000e030b 	andeq	r0, lr, fp, lsl #6
  5c:	01150800 	tsteq	r5, r0, lsl #16
  60:	13011927 	movwne	r1, #6439	; 0x1927
  64:	05090000 	streq	r0, [r9, #-0]
  68:	00134900 	andseq	r4, r3, r0, lsl #18
  6c:	000f0a00 	andeq	r0, pc, r0, lsl #20
  70:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  74:	160b0000 	strne	r0, [fp], -r0
  78:	3a0e0300 	bcc	380c80 <startup-0x1fc7f380>
  7c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  80:	0c000013 	stceq	0, cr0, [r0], {19}
  84:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  88:	0b3b0b3a 	bleq	ec2d78 <startup-0x1f13d288>
  8c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  90:	130d0000 	movwne	r0, #53248	; 0xd000
  94:	3a0b0b01 	bcc	2c2ca0 <startup-0x1fd3d360>
  98:	010b3b0b 	tsteq	fp, fp, lsl #22
  9c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  a0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  a4:	0b3b0b3a 	bleq	ec2d94 <startup-0x1f13d26c>
  a8:	0b381349 	bleq	e04dd4 <startup-0x1f1fb22c>
  ac:	240f0000 	strcs	r0, [pc], #-0	; b4 <startup-0x1fffff4c>
  b0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  b4:	0008030b 	andeq	r0, r8, fp, lsl #6
  b8:	01131000 	tsteq	r3, r0
  bc:	0b0b0e03 	bleq	2c38d0 <startup-0x1fd3c730>
  c0:	0b3b0b3a 	bleq	ec2db0 <startup-0x1f13d250>
  c4:	00001301 	andeq	r1, r0, r1, lsl #6
  c8:	03003411 	movweq	r3, #1041	; 0x411
  cc:	3b0b3a0e 	blcc	2ce90c <startup-0x1fd316f4>
  d0:	3f13490b 	svccc	0x0013490b
  d4:	00180219 	andseq	r0, r8, r9, lsl r2
  d8:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
  dc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  e0:	0b3b0b3a 	bleq	ec2dd0 <startup-0x1f13d230>
  e4:	01111927 	tsteq	r1, r7, lsr #18
  e8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  ec:	01194296 			; <UNDEFINED> instruction: 0x01194296
  f0:	13000013 	movwne	r0, #19
  f4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
  f8:	0b3b0b3a 	bleq	ec2de8 <startup-0x1f13d218>
  fc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 100:	34140000 	ldrcc	r0, [r4], #-0
 104:	3a080300 	bcc	200d0c <startup-0x1fdff2f4>
 108:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 10c:	00180213 	andseq	r0, r8, r3, lsl r2
 110:	010b1500 	tsteq	fp, r0, lsl #10
 114:	34160000 	ldrcc	r0, [r6], #-0
 118:	3a0e0300 	bcc	380d20 <startup-0x1fc7f2e0>
 11c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 120:	17000013 	smladne	r0, r3, r0, r0
 124:	08030034 	stmdaeq	r3, {r2, r4, r5}
 128:	0b3b0b3a 	bleq	ec2e18 <startup-0x1f13d1e8>
 12c:	00001349 	andeq	r1, r0, r9, asr #6
 130:	49003518 	stmdbmi	r0, {r3, r4, r8, sl, ip, sp}
 134:	19000013 	stmdbne	r0, {r0, r1, r4}
 138:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 13c:	0b3a0e03 	bleq	e83950 <startup-0x1f17c6b0>
 140:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 144:	06120111 			; <UNDEFINED> instruction: 0x06120111
 148:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 14c:	00000019 	andeq	r0, r0, r9, lsl r0
 150:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 154:	030b130e 	movweq	r1, #45838	; 0xb30e
 158:	110e1b0e 	tstne	lr, lr, lsl #22
 15c:	10061201 	andne	r1, r6, r1, lsl #4
 160:	02000017 	andeq	r0, r0, #23
 164:	0b0b0024 	bleq	2c01fc <startup-0x1fd3fe04>
 168:	0e030b3e 	vmoveq.16	d3[0], r0
 16c:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
 170:	03193f01 	tsteq	r9, #1, 30
 174:	3b0b3a0e 	blcc	2ce9b4 <startup-0x1fd3164c>
 178:	1119270b 	tstne	r9, fp, lsl #14
 17c:	40061201 	andmi	r1, r6, r1, lsl #4
 180:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 184:	00001301 	andeq	r1, r0, r1, lsl #6
 188:	03000504 	movweq	r0, #1284	; 0x504
 18c:	3b0b3a08 	blcc	2ce9b4 <startup-0x1fd3164c>
 190:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 194:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
 198:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 19c:	0b3a0e03 	bleq	e839b0 <startup-0x1f17c650>
 1a0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1a8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1ac:	00000019 	andeq	r0, r0, r9, lsl r0
 1b0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 1b4:	030b130e 	movweq	r1, #45838	; 0xb30e
 1b8:	110e1b0e 	tstne	lr, lr, lsl #22
 1bc:	10061201 	andne	r1, r6, r1, lsl #4
 1c0:	02000017 	andeq	r0, r0, #23
 1c4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 1c8:	0b3a050b 	bleq	e815fc <startup-0x1f17ea04>
 1cc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 1d0:	0d030000 	stceq	0, cr0, [r3, #-0]
 1d4:	3a0e0300 	bcc	380ddc <startup-0x1fc7f224>
 1d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1dc:	000b3813 	andeq	r3, fp, r3, lsl r8
 1e0:	000d0400 	andeq	r0, sp, r0, lsl #8
 1e4:	0b3a0e03 	bleq	e839f8 <startup-0x1f17c608>
 1e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1ec:	00000538 	andeq	r0, r0, r8, lsr r5
 1f0:	49010105 	stmdbmi	r1, {r0, r2, r8}
 1f4:	00130113 	andseq	r0, r3, r3, lsl r1
 1f8:	00210600 	eoreq	r0, r1, r0, lsl #12
 1fc:	0b2f1349 	bleq	bc4f28 <startup-0x1f43b0d8>
 200:	24070000 	strcs	r0, [r7], #-0
 204:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 208:	000e030b 	andeq	r0, lr, fp, lsl #6
 20c:	01150800 	tsteq	r5, r0, lsl #16
 210:	13011927 	movwne	r1, #6439	; 0x1927
 214:	05090000 	streq	r0, [r9, #-0]
 218:	00134900 	andseq	r4, r3, r0, lsl #18
 21c:	000f0a00 	andeq	r0, pc, r0, lsl #20
 220:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 224:	160b0000 	strne	r0, [fp], -r0
 228:	3a0e0300 	bcc	380e30 <startup-0x1fc7f1d0>
 22c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 230:	0c000013 	stceq	0, cr0, [r0], {19}
 234:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 238:	0b3b0b3a 	bleq	ec2f28 <startup-0x1f13d0d8>
 23c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 240:	040d0000 	streq	r0, [sp], #-0
 244:	0b0b3e01 	bleq	2cfa50 <startup-0x1fd305b0>
 248:	3a13490b 	bcc	4d267c <startup-0x1fb2d984>
 24c:	010b3b0b 	tsteq	fp, fp, lsl #22
 250:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 254:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 258:	00000b1c 	andeq	r0, r0, ip, lsl fp
 25c:	0300280f 	movweq	r2, #2063	; 0x80f
 260:	000b1c08 	andeq	r1, fp, r8, lsl #24
 264:	00341000 	eorseq	r1, r4, r0
 268:	0b3a0e03 	bleq	e83a7c <startup-0x1f17c584>
 26c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 270:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 274:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 278:	03193f01 	tsteq	r9, #1, 30
 27c:	3b0b3a0e 	blcc	2ceabc <startup-0x1fd31544>
 280:	1119270b 	tstne	r9, fp, lsl #14
 284:	40061201 	andmi	r1, r6, r1, lsl #4
 288:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 28c:	00001301 	andeq	r1, r0, r1, lsl #6
 290:	03000512 	movweq	r0, #1298	; 0x512
 294:	3b0b3a0e 	blcc	2cead4 <startup-0x1fd3152c>
 298:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 29c:	13000018 	movwne	r0, #24
 2a0:	0111010b 	tsteq	r1, fp, lsl #2
 2a4:	00000612 	andeq	r0, r0, r2, lsl r6
 2a8:	03003414 	movweq	r3, #1044	; 0x414
 2ac:	3b0b3a08 	blcc	2cead4 <startup-0x1fd3152c>
 2b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 2b4:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 2b8:	0b0b0024 	bleq	2c0350 <startup-0x1fd3fcb0>
 2bc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 2c0:	05160000 	ldreq	r0, [r6, #-0]
 2c4:	3a080300 	bcc	200ecc <startup-0x1fdff134>
 2c8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2cc:	00180213 	andseq	r0, r8, r3, lsl r2
 2d0:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 2d4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2d8:	0b3b0b3a 	bleq	ec2fc8 <startup-0x1f13d038>
 2dc:	01111927 	tsteq	r1, r7, lsr #18
 2e0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2e4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 2e8:	18000013 	stmdane	r0, {r0, r1, r4}
 2ec:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 2f0:	0b3a0e03 	bleq	e83b04 <startup-0x1f17c4fc>
 2f4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2fc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 300:	19000019 	stmdbne	r0, {r0, r3, r4}
 304:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 308:	0b3a0e03 	bleq	e83b1c <startup-0x1f17c4e4>
 30c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 310:	06120111 			; <UNDEFINED> instruction: 0x06120111
 314:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 318:	1a000019 	bne	384 <startup-0x1ffffc7c>
 31c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 320:	0b3a0e03 	bleq	e83b34 <startup-0x1f17c4cc>
 324:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 328:	01111349 	tsteq	r1, r9, asr #6
 32c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 330:	01194296 			; <UNDEFINED> instruction: 0x01194296
 334:	1b000013 	blne	388 <startup-0x1ffffc78>
 338:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 33c:	0b3a0e03 	bleq	e83b50 <startup-0x1f17c4b0>
 340:	01110b3b 	tsteq	r1, fp, lsr fp
 344:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 348:	00194296 	mulseq	r9, r6, r2
 34c:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
 350:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 354:	0b3b0b3a 	bleq	ec3044 <startup-0x1f13cfbc>
 358:	01111927 	tsteq	r1, r7, lsr #18
 35c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 360:	00194297 	mulseq	r9, r7, r2
 364:	11010000 	mrsne	r0, (UNDEF: 1)
 368:	130e2501 	movwne	r2, #58625	; 0xe501
 36c:	1b0e030b 	blne	380fa0 <startup-0x1fc7f060>
 370:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 374:	00171006 	andseq	r1, r7, r6
 378:	01130200 	tsteq	r3, r0, lsl #4
 37c:	0b3a0b0b 	bleq	e82fb0 <startup-0x1f17d050>
 380:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 384:	0d030000 	stceq	0, cr0, [r3, #-0]
 388:	3a080300 	bcc	200f90 <startup-0x1fdff070>
 38c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 390:	000b3813 	andeq	r3, fp, r3, lsl r8
 394:	00240400 	eoreq	r0, r4, r0, lsl #8
 398:	0b3e0b0b 	bleq	f82fcc <startup-0x1f07d034>
 39c:	00000e03 	andeq	r0, r0, r3, lsl #28
 3a0:	03001605 	movweq	r1, #1541	; 0x605
 3a4:	3b0b3a0e 	blcc	2cebe4 <startup-0x1fd3141c>
 3a8:	0013490b 	andseq	r4, r3, fp, lsl #18
 3ac:	000d0600 	andeq	r0, sp, r0, lsl #12
 3b0:	0b3a0e03 	bleq	e83bc4 <startup-0x1f17c43c>
 3b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3b8:	00000b38 	andeq	r0, r0, r8, lsr fp
 3bc:	0b002407 	bleq	93e0 <startup-0x1fff6c20>
 3c0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 3c4:	08000008 	stmdaeq	r0, {r3}
 3c8:	13490101 	movtne	r0, #37121	; 0x9101
 3cc:	00001301 	andeq	r1, r0, r1, lsl #6
 3d0:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
 3d4:	000b2f13 	andeq	r2, fp, r3, lsl pc
 3d8:	000f0a00 	andeq	r0, pc, r0, lsl #20
 3dc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 3e0:	130b0000 	movwne	r0, #45056	; 0xb000
 3e4:	0b0e0301 	bleq	380ff0 <startup-0x1fc7f010>
 3e8:	3b0b3a0b 	blcc	2cec1c <startup-0x1fd313e4>
 3ec:	0013010b 	andseq	r0, r3, fp, lsl #2
 3f0:	01150c00 	tsteq	r5, r0, lsl #24
 3f4:	13011927 	movwne	r1, #6439	; 0x1927
 3f8:	050d0000 	streq	r0, [sp, #-0]
 3fc:	00134900 	andseq	r4, r3, r0, lsl #18
 400:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
 404:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 408:	0b3b0b3a 	bleq	ec30f8 <startup-0x1f13cf08>
 40c:	01111927 	tsteq	r1, r7, lsr #18
 410:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 414:	01194296 			; <UNDEFINED> instruction: 0x01194296
 418:	0f000013 	svceq	0x00000013
 41c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 420:	0b3b0b3a 	bleq	ec3110 <startup-0x1f13cef0>
 424:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 428:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 42c:	03193f01 	tsteq	r9, #1, 30
 430:	3b0b3a0e 	blcc	2cec70 <startup-0x1fd31390>
 434:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 438:	00130119 	andseq	r0, r3, r9, lsl r1
 43c:	00181100 	andseq	r1, r8, r0, lsl #2
 440:	34120000 	ldrcc	r0, [r2], #-0
 444:	3a0e0300 	bcc	38104c <startup-0x1fc7efb4>
 448:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 44c:	00180213 	andseq	r0, r8, r3, lsl r2
 450:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 454:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 458:	0b3b0b3a 	bleq	ec3148 <startup-0x1f13ceb8>
 45c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 460:	05140000 	ldreq	r0, [r4, #-0]
 464:	3a080300 	bcc	20106c <startup-0x1fdfef94>
 468:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 46c:	00180213 	andseq	r0, r8, r3, lsl r2
 470:	010b1500 	tsteq	fp, r0, lsl #10
 474:	06120111 			; <UNDEFINED> instruction: 0x06120111
 478:	34160000 	ldrcc	r0, [r6], #-0
 47c:	3a080300 	bcc	201084 <startup-0x1fdfef7c>
 480:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 484:	00180213 	andseq	r0, r8, r3, lsl r2
 488:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 48c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 490:	0b3b0b3a 	bleq	ec3180 <startup-0x1f13ce80>
 494:	01111927 	tsteq	r1, r7, lsr #18
 498:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 49c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 4a0:	18000013 	stmdane	r0, {r0, r1, r4}
 4a4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 4a8:	0b3a0e03 	bleq	e83cbc <startup-0x1f17c344>
 4ac:	01110b3b 	tsteq	r1, fp, lsr fp
 4b0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4b4:	00194297 	mulseq	r9, r7, r2
 4b8:	11010000 	mrsne	r0, (UNDEF: 1)
 4bc:	130e2501 	movwne	r2, #58625	; 0xe501
 4c0:	1b0e030b 	blne	3810f4 <startup-0x1fc7ef0c>
 4c4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 4c8:	00171006 	andseq	r1, r7, r6
 4cc:	01040200 	mrseq	r0, R12_usr
 4d0:	0b0b0b3e 	bleq	2c31d0 <startup-0x1fd3ce30>
 4d4:	0b3a1349 	bleq	e85200 <startup-0x1f17ae00>
 4d8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 4dc:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
 4e0:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 4e4:	0400000b 	streq	r0, [r0], #-11
 4e8:	08030028 	stmdaeq	r3, {r3, r5}
 4ec:	00000b1c 	andeq	r0, r0, ip, lsl fp
 4f0:	0b002405 	bleq	950c <startup-0x1fff6af4>
 4f4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 4f8:	0600000e 	streq	r0, [r0], -lr
 4fc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 500:	0b3a0e03 	bleq	e83d14 <startup-0x1f17c2ec>
 504:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 508:	06120111 			; <UNDEFINED> instruction: 0x06120111
 50c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 510:	07000019 	smladeq	r0, r9, r0, r0
 514:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 518:	0b3a0e03 	bleq	e83d2c <startup-0x1f17c2d4>
 51c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 520:	06120111 			; <UNDEFINED> instruction: 0x06120111
 524:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 528:	00130119 	andseq	r0, r3, r9, lsl r1
 52c:	00050800 	andeq	r0, r5, r0, lsl #16
 530:	0b3a0803 	bleq	e82544 <startup-0x1f17dabc>
 534:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 538:	00001802 	andeq	r1, r0, r2, lsl #16
 53c:	03003409 	movweq	r3, #1033	; 0x409
 540:	3b0b3a0e 	blcc	2ced80 <startup-0x1fd31280>
 544:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 548:	0a000018 	beq	5b0 <startup-0x1ffffa50>
 54c:	0b0b0024 	bleq	2c05e4 <startup-0x1fd3fa1c>
 550:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 554:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
 558:	03193f00 	tsteq	r9, #0, 30
 55c:	3b0b3a0e 	blcc	2ced9c <startup-0x1fd31264>
 560:	1119270b 	tstne	r9, fp, lsl #14
 564:	40061201 	andmi	r1, r6, r1, lsl #4
 568:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 56c:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
 570:	03193f01 	tsteq	r9, #1, 30
 574:	3b0b3a0e 	blcc	2cedb4 <startup-0x1fd3124c>
 578:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 57c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 580:	96184006 	ldrls	r4, [r8], -r6
 584:	13011942 	movwne	r1, #6466	; 0x1942
 588:	340d0000 	strcc	r0, [sp], #-0
 58c:	3a080300 	bcc	201194 <startup-0x1fdfee6c>
 590:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 594:	00180213 	andseq	r0, r8, r3, lsl r2
 598:	00050e00 	andeq	r0, r5, r0, lsl #28
 59c:	0b3a0e03 	bleq	e83db0 <startup-0x1f17c250>
 5a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 5a4:	00001802 	andeq	r1, r0, r2, lsl #16
 5a8:	3f012e0f 	svccc	0x00012e0f
 5ac:	3a0e0319 	bcc	381218 <startup-0x1fc7ede8>
 5b0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 5b4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 5b8:	97184006 	ldrls	r4, [r8, -r6]
 5bc:	13011942 	movwne	r1, #6466	; 0x1942
 5c0:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 5c4:	03193f01 	tsteq	r9, #1, 30
 5c8:	3b0b3a0e 	blcc	2cee08 <startup-0x1fd311f8>
 5cc:	1119270b 	tstne	r9, fp, lsl #14
 5d0:	40061201 	andmi	r1, r6, r1, lsl #4
 5d4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 5d8:	01000000 	mrseq	r0, (UNDEF: 0)
 5dc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 5e0:	0e030b13 	vmoveq.32	d3[0], r0
 5e4:	01110e1b 	tsteq	r1, fp, lsl lr
 5e8:	17100612 			; <UNDEFINED> instruction: 0x17100612
 5ec:	24020000 	strcs	r0, [r2], #-0
 5f0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 5f4:	000e030b 	andeq	r0, lr, fp, lsl #6
 5f8:	00350300 	eorseq	r0, r5, r0, lsl #6
 5fc:	00001349 	andeq	r1, r0, r9, asr #6
 600:	3f012e04 	svccc	0x00012e04
 604:	3a0e0319 	bcc	381270 <startup-0x1fc7ed90>
 608:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 60c:	11134919 	tstne	r3, r9, lsl r9
 610:	40061201 	andmi	r1, r6, r1, lsl #4
 614:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 618:	00001301 	andeq	r1, r0, r1, lsl #6
 61c:	03003405 	movweq	r3, #1029	; 0x405
 620:	3b0b3a0e 	blcc	2cee60 <startup-0x1fd311a0>
 624:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 628:	06000018 			; <UNDEFINED> instruction: 0x06000018
 62c:	0111010b 	tsteq	r1, fp, lsl #2
 630:	00000612 	andeq	r0, r0, r2, lsl r6
 634:	03003407 	movweq	r3, #1031	; 0x407
 638:	3b0b3a08 	blcc	2cee60 <startup-0x1fd311a0>
 63c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 640:	08000018 	stmdaeq	r0, {r3, r4}
 644:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 648:	0b3a0e03 	bleq	e83e5c <startup-0x1f17c1a4>
 64c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 650:	06120111 			; <UNDEFINED> instruction: 0x06120111
 654:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 658:	00130119 	andseq	r0, r3, r9, lsl r1
 65c:	00050900 	andeq	r0, r5, r0, lsl #18
 660:	0b3a0803 	bleq	e82674 <startup-0x1f17d98c>
 664:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 668:	00001802 	andeq	r1, r0, r2, lsl #16
 66c:	4901010a 	stmdbmi	r1, {r1, r3, r8}
 670:	00130113 	andseq	r0, r3, r3, lsl r1
 674:	00210b00 	eoreq	r0, r1, r0, lsl #22
 678:	0b2f1349 	bleq	bc53a4 <startup-0x1f43ac5c>
 67c:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
 680:	03193f00 	tsteq	r9, #0, 30
 684:	3b0b3a0e 	blcc	2ceec4 <startup-0x1fd3113c>
 688:	1119270b 	tstne	r9, fp, lsl #14
 68c:	40061201 	andmi	r1, r6, r1, lsl #4
 690:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 694:	Address 0x00000694 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000118 	andeq	r0, r0, r8, lsl r1
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	03850002 	orreq	r0, r5, #2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000128 	andcs	r0, r0, r8, lsr #2
  3c:	0000006e 	andeq	r0, r0, lr, rrx
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	04210002 	strteq	r0, [r1], #-2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000198 	mulcs	r0, r8, r1
  5c:	00000888 	andeq	r0, r0, r8, lsl #17
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	08a30002 	stmiaeq	r3!, {r1}
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000a20 	andcs	r0, r0, r0, lsr #20
  7c:	0000020a 	andeq	r0, r0, sl, lsl #4
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	0c3e0002 	ldceq	0, cr0, [lr], #-8
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000c2c 	andcs	r0, r0, ip, lsr #24
  9c:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	0e6f0002 	cdpeq	0, 6, cr0, cr15, cr2, {0}
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000edc 	ldrdcs	r0, [r0], -ip
  bc:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000128 	andcs	r0, r0, r8, lsr #2
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000b8 	strheq	r0, [r0], -r8
   4:	00670002 	rsbeq	r0, r7, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	756d6173 	strbvc	r6, [sp, #-371]!	; 0xfffffe8d
  28:	6f442f65 	svcvs	0x00442f65
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	4c706f4d 	ldclmi	15, cr6, [r0], #-308	; 0xfffffecc
  38:	4d2f6261 	sfmmi	f6, 4, [pc, #-388]!	; fffffebc <ball+0xdfffe064>
  3c:	6570706f 	ldrbvs	r7, [r0, #-111]!	; 0xffffff91
  40:	7300006e 	movwvc	r0, #110	; 0x6e
  44:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  48:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  4c:	00000100 	andeq	r0, r0, r0, lsl #2
  50:	5f64636c 	svcpl	0x0064636c
  54:	76697264 	strbtvc	r7, [r9], -r4, ror #4
  58:	2e737265 	cdpcs	2, 7, cr7, cr3, cr5, {3}
  5c:	00010068 	andeq	r0, r1, r8, rrx
  60:	6e6f7000 	cdpvs	0, 6, cr7, cr15, cr0, {0}
  64:	676f6c67 	strbvs	r6, [pc, -r7, ror #24]!
  68:	682e6369 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sp, lr}
  6c:	00000100 	andeq	r0, r0, r0, lsl #2
  70:	02050000 	andeq	r0, r5, #0
  74:	20000000 	andcs	r0, r0, r0
  78:	025e1319 	subseq	r1, lr, #1677721600	; 0x64000000
  7c:	01010003 	tsteq	r1, r3
  80:	10020500 	andne	r0, r2, r0, lsl #10
  84:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  88:	2f5e012e 	svccs	0x005e012e
  8c:	2f914c2f 	svccs	0x00914c2f
  90:	4b4c7321 	blmi	131cd1c <startup-0x1ece32e4>
  94:	73212f91 			; <UNDEFINED> instruction: 0x73212f91
  98:	34312f4f 	ldrtcc	r2, [r1], #-3919	; 0xfffff0b1
  9c:	5a592f77 	bpl	164be80 <startup-0x1e9b4180>
  a0:	0077082f 	rsbseq	r0, r7, pc, lsr #16
  a4:	68010402 	stmdavs	r1, {r1, sl}
  a8:	01040200 	mrseq	r0, R12_usr
  ac:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
  b0:	02005901 	andeq	r5, r0, #16384	; 0x4000
  b4:	02390104 	eorseq	r0, r9, #4, 2
  b8:	01010008 	tsteq	r1, r8
  bc:	0000006e 	andeq	r0, r0, lr, rrx
  c0:	00450002 	subeq	r0, r5, r2
  c4:	01020000 	mrseq	r0, (UNDEF: 2)
  c8:	000d0efb 	strdeq	r0, [sp], -fp
  cc:	01010101 	tsteq	r1, r1, lsl #2
  d0:	01000000 	mrseq	r0, (UNDEF: 0)
  d4:	43010000 	movwmi	r0, #4096	; 0x1000
  d8:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  dc:	2f737265 	svccs	0x00737265
  e0:	756d6173 	strbvc	r6, [sp, #-371]!	; 0xfffffe8d
  e4:	6f442f65 	svcvs	0x00442f65
  e8:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  ec:	2f73746e 	svccs	0x0073746e
  f0:	4c706f4d 	ldclmi	15, cr6, [r0], #-308	; 0xfffffecc
  f4:	4d2f6261 	sfmmi	f6, 4, [pc, #-388]!	; ffffff78 <ball+0xdfffe120>
  f8:	6570706f 	ldrbvs	r7, [r0, #-111]!	; 0xffffff91
  fc:	6400006e 	strvs	r0, [r0], #-110	; 0xffffff92
 100:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 104:	0100632e 	tsteq	r0, lr, lsr #6
 108:	00000000 	andeq	r0, r0, r0
 10c:	01280205 			; <UNDEFINED> instruction: 0x01280205
 110:	2f162000 	svccs	0x00162000
 114:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 118:	01040200 	mrseq	r0, R12_usr
 11c:	68062006 	stmdavs	r6, {r1, r2, sp}
 120:	0a03a03d 	beq	e821c <startup-0x1ff17de4>
 124:	4c513e2e 	mrrcmi	14, 2, r3, r1, cr14
 128:	0004024f 	andeq	r0, r4, pc, asr #4
 12c:	01880101 	orreq	r0, r8, r1, lsl #2
 130:	00020000 	andeq	r0, r2, r0
 134:	0000006d 	andeq	r0, r0, sp, rrx
 138:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 13c:	0101000d 	tsteq	r1, sp
 140:	00000101 	andeq	r0, r0, r1, lsl #2
 144:	00000100 	andeq	r0, r0, r0, lsl #2
 148:	2f3a4301 	svccs	0x003a4301
 14c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 150:	61732f73 	cmnvs	r3, r3, ror pc
 154:	2f65756d 	svccs	0x0065756d
 158:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 15c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 160:	6f4d2f73 	svcvs	0x004d2f73
 164:	62614c70 	rsbvs	r4, r1, #112, 24	; 0x7000
 168:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 16c:	006e6570 	rsbeq	r6, lr, r0, ror r5
 170:	64636c00 	strbtvs	r6, [r3], #-3072	; 0xfffff400
 174:	6972645f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, sp, lr}^
 178:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 17c:	0100632e 	tsteq	r0, lr, lsr #6
 180:	636c0000 	cmnvs	ip, #0
 184:	72645f64 	rsbvc	r5, r4, #100, 30	; 0x190
 188:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 18c:	00682e73 	rsbeq	r2, r8, r3, ror lr
 190:	70000001 	andvc	r0, r0, r1
 194:	4474726f 	ldrbtmi	r7, [r4], #-623	; 0xfffffd91
 198:	616c6365 	cmnvs	ip, r5, ror #6
 19c:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
 1a0:	00000100 	andeq	r0, r0, r0, lsl #2
 1a4:	02050000 	andeq	r0, r5, #0
 1a8:	20000198 	mulcs	r0, r8, r1
 1ac:	037a671a 	cmneq	sl, #6815744	; 0x680000
 1b0:	1b50207a 	blne	14083a0 <startup-0x1ebf7c60>
 1b4:	92d7d791 	sbcsls	sp, r7, #38010880	; 0x2440000
 1b8:	3d832f76 	stccc	15, cr2, [r3, #472]	; 0x1d8
 1bc:	212f2fad 			; <UNDEFINED> instruction: 0x212f2fad
 1c0:	832f2f83 			; <UNDEFINED> instruction: 0x832f2f83
 1c4:	2e7a032f 	cdpcs	3, 7, cr0, cr10, cr15, {1}
 1c8:	bc3d836e 	ldclt	3, cr8, [sp], #-440	; 0xfffffe48
 1cc:	833d8367 	teqhi	sp, #-1677721599	; 0x9c000001
 1d0:	832f2f59 			; <UNDEFINED> instruction: 0x832f2f59
 1d4:	83592f2f 	cmphi	r9, #47, 30	; 0xbc
 1d8:	303d593d 	eorscc	r5, sp, sp, lsr r9
 1dc:	3d313d59 	ldccc	13, cr3, [r1, #-356]!	; 0xfffffe9c
 1e0:	594b91e6 	stmdbpl	fp, {r1, r2, r5, r6, r7, r8, ip, pc}^
 1e4:	2f832f2f 	svccs	0x00832f2f
 1e8:	3d59832f 	ldclcc	3, cr8, [r9, #-188]	; 0xffffff44
 1ec:	303d5930 	eorscc	r5, sp, r0, lsr r9
 1f0:	843d833d 	ldrthi	r8, [sp], #-829	; 0xfffffcc3
 1f4:	83598391 	cmphi	r9, #1140850690	; 0x44000002
 1f8:	83916883 	orrshi	r6, r1, #8585216	; 0x830000
 1fc:	7683ad59 	pkhtbvc	sl, r3, r9, asr #26
 200:	4c675967 			; <UNDEFINED> instruction: 0x4c675967
 204:	2f843d2f 	svccs	0x00843d2f
 208:	863e8483 	ldrthi	r8, [lr], -r3, lsl #9
 20c:	4b4b4b83 	blmi	12d3020 <startup-0x1ed2cfe0>
 210:	683d4b4b 	ldmdavs	sp!, {r0, r1, r3, r6, r8, r9, fp, lr}
 214:	4bad3d3d 	blmi	feb4f710 <ball+0xdeb4d8b8>
 218:	03040200 	movweq	r0, #16896	; 0x4200
 21c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 220:	02004903 	andeq	r4, r0, #49152	; 0xc000
 224:	3c060104 	stfccs	f0, [r6], {4}
 228:	02040200 	andeq	r0, r4, #0, 4
 22c:	02003906 	andeq	r3, r0, #98304	; 0x18000
 230:	3c060104 	stfccs	f0, [r6], {4}
 234:	e54c4306 	strb	r4, [ip, #-774]	; 0xfffffcfa
 238:	14085a59 	strne	r5, [r8], #-2649	; 0xfffff5a7
 23c:	4b5b4b91 	blmi	16d3088 <startup-0x1e92cf78>
 240:	91d7bb5a 	bicsls	fp, r7, sl, asr fp
 244:	d8a14bad 	stmiale	r1!, {r0, r2, r3, r5, r7, r8, r9, fp, lr}
 248:	03ac6d03 			; <UNDEFINED> instruction: 0x03ac6d03
 24c:	4f3e2014 	svcmi	0x003e2014
 250:	75085959 	strvc	r5, [r8, #-2393]	; 0xfffff6a7
 254:	774b594b 	strbvc	r5, [fp, -fp, asr #18]
 258:	c9c9764b 	stmibgt	r9, {r0, r1, r3, r6, r9, sl, ip, sp, lr}^
 25c:	020091bb 	andeq	r9, r0, #-1073741778	; 0xc000002e
 260:	71030204 	tstvc	r3, r4, lsl #4
 264:	02009e08 	andeq	r9, r0, #8, 28	; 0x80
 268:	66060104 	strvs	r0, [r6], -r4, lsl #2
 26c:	02040200 	andeq	r0, r4, #0, 4
 270:	02006506 	andeq	r6, r0, #25165824	; 0x1800000
 274:	66060104 	strvs	r0, [r6], -r4, lsl #2
 278:	74150306 	ldrvc	r0, [r5], #-774	; 0xfffffcfa
 27c:	1408f44c 	strne	pc, [r8], #-1100	; 0xfffffbb4
 280:	914c5b4b 	cmpls	ip, fp, asr #22
 284:	4b68084b 	blmi	1a023b8 <startup-0x1e5fdc48>
 288:	7203ae08 	andvc	sl, r3, #8, 28	; 0x80
 28c:	0f03ac08 	svceq	0x0003ac08
 290:	3c0b0320 	stccc	3, cr0, [fp], {32}
 294:	00833d4b 	addeq	r3, r3, fp, asr #26
 298:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 29c:	03040200 	movweq	r0, #16896	; 0x4200
 2a0:	04020081 	streq	r0, [r2], #-129	; 0xffffff7f
 2a4:	003c0601 	eorseq	r0, ip, r1, lsl #12
 2a8:	06020402 	streq	r0, [r2], -r2, lsl #8
 2ac:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
 2b0:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 2b4:	00040242 	andeq	r0, r4, r2, asr #4
 2b8:	00bb0101 	adcseq	r0, fp, r1, lsl #2
 2bc:	00020000 	andeq	r0, r2, r0
 2c0:	00000058 	andeq	r0, r0, r8, asr r0
 2c4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 2c8:	0101000d 	tsteq	r1, sp
 2cc:	00000101 	andeq	r0, r0, r1, lsl #2
 2d0:	00000100 	andeq	r0, r0, r0, lsl #2
 2d4:	2f3a4301 	svccs	0x003a4301
 2d8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 2dc:	61732f73 	cmnvs	r3, r3, ror pc
 2e0:	2f65756d 	svccs	0x0065756d
 2e4:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 2e8:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 2ec:	6f4d2f73 	svcvs	0x004d2f73
 2f0:	62614c70 	rsbvs	r4, r1, #112, 24	; 0x7000
 2f4:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 2f8:	006e6570 	rsbeq	r6, lr, r0, ror r5
 2fc:	6e6f7000 	cdpvs	0, 6, cr7, cr15, cr0, {0}
 300:	676f6c67 	strbvs	r6, [pc, -r7, ror #24]!
 304:	632e6369 			; <UNDEFINED> instruction: 0x632e6369
 308:	00000100 	andeq	r0, r0, r0, lsl #2
 30c:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 310:	69676f6c 	stmdbvs	r7!, {r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 314:	00682e63 	rsbeq	r2, r8, r3, ror #28
 318:	00000001 	andeq	r0, r0, r1
 31c:	20020500 	andcs	r0, r2, r0, lsl #10
 320:	1920000a 	stmdbne	r0!, {r1, r3}
 324:	3d673e30 	stclcc	14, cr3, [r7, #-192]!	; 0xffffff40
 328:	3d674c3d 	stclcc	12, cr4, [r7, #-244]!	; 0xffffff0c
 32c:	004b4c3d 	subeq	r4, fp, sp, lsr ip
 330:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 334:	03040200 	movweq	r0, #16896	; 0x4200
 338:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
 33c:	0200bb03 	andeq	fp, r0, #3072	; 0xc00
 340:	00630304 	rsbeq	r0, r3, r4, lsl #6
 344:	06010402 	streq	r0, [r1], -r2, lsl #8
 348:	4c6b063c 	stclmi	6, cr0, [fp], #-240	; 0xffffff10
 34c:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 350:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 354:	8f080304 	svchi	0x00080304
 358:	01040200 	mrseq	r0, R12_usr
 35c:	69063c06 	stmdbvs	r6, {r1, r2, sl, fp, ip, sp}
 360:	754b4b4c 	strbvc	r4, [fp, #-2892]	; 0xfffff4b4
 364:	5a210875 	bpl	842540 <startup-0x1f7bdac0>
 368:	4b5a2108 	blmi	1688790 <startup-0x1e977870>
 36c:	912f754c 			; <UNDEFINED> instruction: 0x912f754c
 370:	2f599fc9 	svccs	0x00599fc9
 374:	01000402 	tsteq	r0, r2, lsl #8
 378:	0000c701 	andeq	ip, r0, r1, lsl #14
 37c:	5e000200 	cdppl	2, 0, cr0, cr0, cr0, {0}
 380:	02000000 	andeq	r0, r0, #0
 384:	0d0efb01 	vstreq	d15, [lr, #-4]
 388:	01010100 	mrseq	r0, (UNDEF: 17)
 38c:	00000001 	andeq	r0, r0, r1
 390:	01000001 	tsteq	r0, r1
 394:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff959 <ball+0xdfffdb01>
 398:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 39c:	6d61732f 	stclvs	3, cr7, [r1, #-188]!	; 0xffffff44
 3a0:	442f6575 	strtmi	r6, [pc], #-1397	; 3a8 <startup-0x1ffffc58>
 3a4:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 3a8:	73746e65 	cmnvc	r4, #1616	; 0x650
 3ac:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 3b0:	2f62614c 	svccs	0x0062614c
 3b4:	70706f4d 	rsbsvc	r6, r0, sp, asr #30
 3b8:	00006e65 	andeq	r6, r0, r5, ror #28
 3bc:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 3c0:	72645f69 	rsbvc	r5, r4, #420	; 0x1a4
 3c4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 3c8:	00632e73 	rsbeq	r2, r3, r3, ror lr
 3cc:	70000001 	andvc	r0, r0, r1
 3d0:	4474726f 	ldrbtmi	r7, [r4], #-623	; 0xfffffd91
 3d4:	616c6365 	cmnvs	ip, r5, ror #6
 3d8:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
 3dc:	00000100 	andeq	r0, r0, r0, lsl #2
 3e0:	02050000 	andeq	r0, r5, #0
 3e4:	20000c2c 	andcs	r0, r0, ip, lsr #24
 3e8:	bb596917 	bllt	165a84c <startup-0x1e9a57b4>
 3ec:	59686859 	stmdbpl	r8!, {r0, r3, r4, r6, fp, sp, lr}^
 3f0:	67684be5 	strbvs	r4, [r8, -r5, ror #23]!
 3f4:	3d4c3d2f 	stclcc	13, cr3, [ip, #-188]	; 0xffffff44
 3f8:	4b3f3d67 	blmi	fcf99c <startup-0x1f030664>
 3fc:	67762f3d 			; <UNDEFINED> instruction: 0x67762f3d
 400:	4c593d3d 	mrrcmi	13, 3, r3, r9, cr13
 404:	593d3d67 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}
 408:	3d673d4c 	stclcc	13, cr3, [r7, #-304]!	; 0xfffffed0
 40c:	2f67593d 	svccs	0x0067593d
 410:	3d673d84 	stclcc	13, cr3, [r7, #-528]!	; 0xfffffdf0
 414:	2f67593d 	svccs	0x0067593d
 418:	02002f84 	andeq	r2, r0, #132, 30	; 0x210
 41c:	20060104 	andcs	r0, r6, r4, lsl #2
 420:	3d3d8306 	ldccc	3, cr8, [sp, #-24]!	; 0xffffffe8
 424:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 428:	00673e3d 	rsbeq	r3, r7, sp, lsr lr
 42c:	06010402 	streq	r0, [r1], -r2, lsl #8
 430:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
 434:	594c3d59 	stmdbpl	ip, {r0, r3, r4, r6, r8, sl, fp, ip, sp}^
 438:	2f4c9f75 	svccs	0x004c9f75
 43c:	023e3d3d 	eorseq	r3, lr, #3904	; 0xf40
 440:	0101000c 	tsteq	r1, ip
 444:	000000b5 	strheq	r0, [r0], -r5
 448:	004e0002 	subeq	r0, lr, r2
 44c:	01020000 	mrseq	r0, (UNDEF: 2)
 450:	000d0efb 	strdeq	r0, [sp], -fp
 454:	01010101 	tsteq	r1, r1, lsl #2
 458:	01000000 	mrseq	r0, (UNDEF: 0)
 45c:	43010000 	movwmi	r0, #4096	; 0x1000
 460:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 464:	2f737265 	svccs	0x00737265
 468:	756d6173 	strbvc	r6, [sp, #-371]!	; 0xfffffe8d
 46c:	6f442f65 	svcvs	0x00442f65
 470:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 474:	2f73746e 	svccs	0x0073746e
 478:	4c706f4d 	ldclmi	15, cr6, [r0], #-308	; 0xfffffecc
 47c:	4d2f6261 	sfmmi	f6, 4, [pc, #-388]!	; 300 <startup-0x1ffffd00>
 480:	6570706f 	ldrbvs	r7, [r0, #-111]!	; 0xffffff91
 484:	6b00006e 	blvs	644 <startup-0x1ffff9bc>
 488:	61707965 	cmnvs	r0, r5, ror #18
 48c:	72645f64 	rsbvc	r5, r4, #100, 30	; 0x190
 490:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 494:	00632e73 	rsbeq	r2, r3, r3, ror lr
 498:	00000001 	andeq	r0, r0, r1
 49c:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
 4a0:	1720000e 	strne	r0, [r0, -lr]!
 4a4:	3d3d3d32 	ldccc	13, cr3, [sp, #-200]!	; 0xffffff38
 4a8:	4b3eca4d 	blmi	fb2de4 <startup-0x1f04d21c>
 4ac:	4b835968 	blmi	fe0d6a54 <ball+0xde0d4bfc>
 4b0:	67214c84 	strvs	r4, [r1, -r4, lsl #25]!
 4b4:	02006a64 	andeq	r6, r0, #100, 20	; 0x64000
 4b8:	75030204 	strvc	r0, [r3, #-516]	; 0xfffffdfc
 4bc:	040200ac 	streq	r0, [r2], #-172	; 0xffffff54
 4c0:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 4c4:	00580f03 	subseq	r0, r8, r3, lsl #30
 4c8:	21010402 	tstcs	r1, r2, lsl #8
 4cc:	677967a0 	ldrbvs	r6, [r9, -r0, lsr #15]!
 4d0:	3d3d3e76 	ldccc	14, cr3, [sp, #-472]!	; 0xfffffe28
 4d4:	03040200 	movweq	r0, #16896	; 0x4200
 4d8:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 4dc:	02006703 	andeq	r6, r0, #786432	; 0xc0000
 4e0:	004b0304 	subeq	r0, fp, r4, lsl #6
 4e4:	83030402 	movwhi	r0, #13314	; 0x3402
 4e8:	03040200 	movweq	r0, #16896	; 0x4200
 4ec:	040200fc 	streq	r0, [r2], #-252	; 0xffffff04
 4f0:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 4f4:	2f4a1003 	svccs	0x004a1003
 4f8:	01000902 	tsteq	r0, r2, lsl #18
 4fc:	Address 0x000004fc is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
   4:	00707574 	rsbseq	r7, r0, r4, ror r5
   8:	6a626f70 	bvs	189bdd0 <startup-0x1e764230>
   c:	00746365 	rsbseq	r6, r4, r5, ror #6
  10:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
  14:	72610074 	rsbvc	r0, r1, #116	; 0x74
  18:	73007667 	movwvc	r7, #1639	; 0x667
  1c:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
  20:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
  24:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  28:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
  2c:	69640074 	stmdbvs	r4!, {r2, r4, r5, r6}^
  30:	64007872 	strvs	r7, [r0], #-2162	; 0xfffff78e
  34:	00797269 	rsbseq	r7, r9, r9, ror #4
  38:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
  3c:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  40:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  44:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  48:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  4c:	30373130 	eorscc	r3, r7, r0, lsr r1
  50:	20343039 	eorscs	r3, r4, r9, lsr r0
  54:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  58:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  5c:	415b2029 	cmpmi	fp, r9, lsr #32
  60:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff316 <ball+0xdfffd4be>
  64:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  68:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  6c:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  70:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  74:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  78:	6f697369 	svcvs	0x00697369
  7c:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  80:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  84:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
  88:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  8c:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  90:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  94:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  98:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  9c:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  a0:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
  a4:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
  a8:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
  ac:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
  b0:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  b4:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  b8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  bc:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  c0:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  c4:	20672d20 	rsbcs	r2, r7, r0, lsr #26
  c8:	20304f2d 	eorscs	r4, r0, sp, lsr #30
  cc:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
  d0:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
  d4:	736e7500 	cmnvc	lr, #0, 10
  d8:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  dc:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
  e0:	43007261 	movwmi	r7, #609	; 0x261
  e4:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
  e8:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
  ec:	756d6173 	strbvc	r6, [sp, #-371]!	; 0xfffffe8d
  f0:	6f445c65 	svcvs	0x00445c65
  f4:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  f8:	5c73746e 	cfldrdpl	mvd7, [r3], #-440	; 0xfffffe48
  fc:	4c706f4d 	ldclmi	15, cr6, [r0], #-308	; 0xfffffecc
 100:	4d5c6261 	lfmmi	f6, 2, [ip, #-388]	; 0xfffffe7c
 104:	6570706f 	ldrbvs	r7, [r0, #-111]!	; 0xffffff91
 108:	6573006e 	ldrbvs	r0, [r3, #-110]!	; 0xffffff92
 10c:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 110:	00646565 	rsbeq	r6, r4, r5, ror #10
 114:	78736f70 	ldmdavc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 118:	736f7000 	cmnvc	pc, #0
 11c:	61620079 	smcvs	8201	; 0x2009
 120:	675f6c6c 	ldrbvs	r6, [pc, -ip, ror #24]
 124:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 128:	00797274 	rsbseq	r7, r9, r4, ror r2
 12c:	6e69616d 	powvsez	f6, f1, #5.0
 130:	7a697300 	bvc	1a5cd38 <startup-0x1e5a32c8>
 134:	73007865 	movwvc	r7, #2149	; 0x865
 138:	79657a69 	stmdbvc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 13c:	67726100 	ldrbvs	r6, [r2, -r0, lsl #2]!
 140:	6d740063 	ldclvs	0, cr0, [r4, #-396]!	; 0xfffffe74
 144:	66756270 			; <UNDEFINED> instruction: 0x66756270
 148:	00726566 	rsbseq	r6, r2, r6, ror #10
 14c:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 150:	2f3a4300 	svccs	0x003a4300
 154:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 158:	61732f73 	cmnvs	r3, r3, ror pc
 15c:	2f65756d 	svccs	0x0065756d
 160:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 164:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 168:	6f4d2f73 	svcvs	0x004d2f73
 16c:	62614c70 	rsbvs	r4, r1, #112, 24	; 0x7000
 170:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 174:	2f6e6570 	svccs	0x006e6570
 178:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 17c:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 180:	6f6d0063 	svcvs	0x006d0063
 184:	70006576 	andvc	r6, r0, r6, ror r5
 188:	726f6353 	rsbvc	r6, pc, #1275068417	; 0x4c000001
 18c:	74730065 	ldrbtvc	r0, [r3], #-101	; 0xffffff9b
 190:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 194:	74730031 	ldrbtvc	r0, [r3], #-49	; 0xffffffcf
 198:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 19c:	4f740032 	svcmi	0x00740032
 1a0:	6e006a62 	vmlsvs.f32	s12, s0, s5
 1a4:	6f706d75 	svcvs	0x00706d75
 1a8:	73746e69 	cmnvc	r4, #1680	; 0x690
 1ac:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 1b0:	67700073 			; <UNDEFINED> instruction: 0x67700073
 1b4:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 1b8:	00797274 	rsbseq	r7, r9, r4, ror r2
 1bc:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff781 <ball+0xdfffd929>
 1c0:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 1c4:	6d61732f 	stclvs	3, cr7, [r1, #-188]!	; 0xffffff44
 1c8:	442f6575 	strtmi	r6, [pc], #-1397	; 1d0 <startup-0x1ffffe30>
 1cc:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 1d0:	73746e65 	cmnvc	r4, #1616	; 0x650
 1d4:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 1d8:	2f62614c 	svccs	0x0062614c
 1dc:	70706f4d 	rsbsvc	r6, r0, sp, asr #30
 1e0:	642f6e65 	strtvs	r6, [pc], #-3685	; 1e8 <startup-0x1ffffe18>
 1e4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 1e8:	6400632e 	strvs	r6, [r0], #-814	; 0xfffffcd2
 1ec:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 1f0:	6b696d5f 	blvs	1a5b774 <startup-0x1e5a488c>
 1f4:	64006f72 	strvs	r6, [r0], #-3954	; 0xfffff08e
 1f8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 1fc:	6e30345f 	mrcvs	4, 1, r3, cr0, cr15, {2}
 200:	65640073 	strbvs	r0, [r4, #-115]!	; 0xffffff8d
 204:	5f79616c 	svcpl	0x0079616c
 208:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
 20c:	65640069 	strbvs	r0, [r4, #-105]!	; 0xffffff97
 210:	5f79616c 	svcpl	0x0079616c
 214:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 218:	5f420073 	svcpl	0x00420073
 21c:	00325343 	eorseq	r5, r2, r3, asr #6
 220:	66667562 	strbtvs	r7, [r6], -r2, ror #10
 224:	635f7265 	cmpvs	pc, #1342177286	; 0x50000006
 228:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 22c:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
 230:	5f726566 	svcpl	0x00726566
 234:	6e616863 	cdpvs	8, 6, cr6, cr1, cr3, {3}
 238:	6f4c6567 	svcvs	0x004c6567
 23c:	70750067 	rsbsvc	r0, r5, r7, rrx
 240:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
 244:	72670064 	rsbvc	r0, r7, #100	; 0x64
 248:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 24c:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 250:	645f6461 	ldrbvs	r6, [pc], #-1121	; 258 <startup-0x1ffffda8>
 254:	00617461 	rsbeq	r7, r1, r1, ror #8
 258:	66667562 	strbtvs	r7, [r6], -r2, ror #10
 25c:	645f7265 	ldrbvs	r7, [pc], #-613	; 264 <startup-0x1ffffd9c>
 260:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 264:	70007961 	andvc	r7, r0, r1, ror #18
 268:	4264636c 	rsbmi	r6, r4, #108, 6	; 0xb0000001
 26c:	00666675 	rsbeq	r6, r6, r5, ror r6
 270:	70617267 	rsbvc	r7, r1, r7, ror #4
 274:	5f636968 	svcpl	0x00636968
 278:	61656c63 	cmnvs	r5, r3, ror #24
 27c:	63735f6e 	cmnvs	r3, #440	; 0x1b8
 280:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 284:	525f4200 	subspl	r4, pc, #0, 4
 288:	72670057 	rsbvc	r0, r7, #87	; 0x57
 28c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 290:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 294:	00657469 	rsbeq	r7, r5, r9, ror #8
 298:	706d6574 	rsbvc	r6, sp, r4, ror r5
 29c:	6c657300 	stclvs	3, cr7, [r5], #-0
 2a0:	5f746365 	svcpl	0x00746365
 2a4:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 2a8:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 2ac:	43007265 	movwmi	r7, #613	; 0x265
 2b0:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 2b4:	2f737265 	svccs	0x00737265
 2b8:	756d6173 	strbvc	r6, [sp, #-371]!	; 0xfffffe8d
 2bc:	6f442f65 	svcvs	0x00442f65
 2c0:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 2c4:	2f73746e 	svccs	0x0073746e
 2c8:	4c706f4d 	ldclmi	15, cr6, [r0], #-308	; 0xfffffecc
 2cc:	4d2f6261 	sfmmi	f6, 4, [pc, #-388]!	; 150 <startup-0x1ffffeb0>
 2d0:	6570706f 	ldrbvs	r7, [r0, #-111]!	; 0xffffff91
 2d4:	636c2f6e 	cmnvs	ip, #440	; 0x1b8
 2d8:	72645f64 	rsbvc	r5, r4, #100, 30	; 0x190
 2dc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 2e0:	00632e73 	rsbeq	r2, r3, r3, ror lr
 2e4:	53525f42 	cmppl	r2, #264	; 0x108
 2e8:	6e690054 	mcrvs	0, 3, r0, cr9, cr4, {2}
 2ec:	6c5f7469 	cfldrdvs	mvd7, [pc], {105}	; 0x69
 2f0:	6c006463 	cfstrsvs	mvf6, [r0], {99}	; 0x63
 2f4:	75426463 	strbvc	r6, [r2, #-1123]	; 0xfffffb9d
 2f8:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 2fc:	77617244 	strbvc	r7, [r1, -r4, asr #4]!
 300:	61726700 	cmnvs	r2, r0, lsl #14
 304:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 308:	7869705f 	stmdavc	r9!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
 30c:	42006c65 	andmi	r6, r0, #25856	; 0x6500
 310:	0053525f 	subseq	r5, r3, pc, asr r2
 314:	64636c70 	strbtvs	r6, [r3], #-3184	; 0xfffff390
 318:	66667542 	strbtvs	r7, [r6], -r2, asr #10
 31c:	42007265 	andmi	r7, r0, #1342177286	; 0x50000006
 320:	3153435f 	cmpcc	r3, pc, asr r3
 324:	535f4200 	cmppl	pc, #0, 4
 328:	43454c45 	movtmi	r4, #23621	; 0x5c45
 32c:	6e690054 	mcrvs	0, 3, r0, cr9, cr4, {2}
 330:	00786564 	rsbseq	r6, r8, r4, ror #10
 334:	70617267 	rsbvc	r7, r1, r7, ror #4
 338:	5f636968 	svcpl	0x00636968
 33c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 340:	61645f65 	cmnvs	r4, r5, ror #30
 344:	6c006174 	stfvss	f6, [r0], {116}	; 0x74
 348:	75426463 	strbvc	r6, [r2, #-1123]	; 0xfffffb9d
 34c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 350:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
 354:	78695065 	stmdavc	r9!, {r0, r2, r5, r6, ip, lr}^
 358:	67006c65 	strvs	r6, [r0, -r5, ror #24]
 35c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 360:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 364:	00646165 	rsbeq	r6, r4, r5, ror #2
 368:	70617267 	rsbvc	r7, r1, r7, ror #4
 36c:	5f636968 	svcpl	0x00636968
 370:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 374:	6165725f 	cmnvs	r5, pc, asr r2
 378:	67007964 	strvs	r7, [r0, -r4, ror #18]
 37c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 380:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 384:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 388:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 214 <startup-0x1ffffdec>
 38c:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 390:	446f7400 	strbtmi	r7, [pc], #-1024	; 398 <startup-0x1ffffc68>
 394:	00776172 	rsbseq	r6, r7, r2, ror r1
 398:	70617267 	rsbvc	r7, r1, r7, ror #4
 39c:	5f636968 	svcpl	0x00636968
 3a0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 3a4:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 3a8:	7000657a 	andvc	r6, r0, sl, ror r5
 3ac:	5f676e6f 	svcpl	0x00676e6f
 3b0:	5f636e69 	svcpl	0x00636e69
 3b4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 3b8:	63537265 	cmpvs	r3, #1342177286	; 0x50000006
 3bc:	0065726f 	rsbeq	r7, r5, pc, ror #4
 3c0:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 3c4:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 3c8:	736f705f 	cmnvc	pc, #95	; 0x5f
 3cc:	6f697469 	svcvs	0x00697469
 3d0:	7361006e 	cmnvc	r1, #110	; 0x6e
 3d4:	5f696963 	svcpl	0x00696963
 3d8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 3dc:	63736100 	cmnvs	r3, #0, 2
 3e0:	675f6969 	ldrbvs	r6, [pc, -r9, ror #18]
 3e4:	786f746f 	stmdavc	pc!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 3e8:	6f700079 	svcvs	0x00700079
 3ec:	695f676e 	ldmdbvs	pc, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^	; <UNPREDICTABLE>
 3f0:	0074696e 	rsbseq	r6, r4, lr, ror #18
 3f4:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff9b9 <ball+0xdfffdb61>
 3f8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 3fc:	6d61732f 	stclvs	3, cr7, [r1, #-188]!	; 0xffffff44
 400:	442f6575 	strtmi	r6, [pc], #-1397	; 408 <startup-0x1ffffbf8>
 404:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 408:	73746e65 	cmnvc	r4, #1616	; 0x650
 40c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 410:	2f62614c 	svccs	0x0062614c
 414:	70706f4d 	rsbsvc	r6, r0, sp, asr #30
 418:	702f6e65 	eorvc	r6, pc, r5, ror #28
 41c:	6c676e6f 	stclvs	14, cr6, [r7], #-444	; 0xfffffe44
 420:	6369676f 	cmnvs	r9, #29097984	; 0x1bc0000
 424:	7300632e 	movwvc	r6, #814	; 0x32e
 428:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 42c:	6c700078 	ldclvs	0, cr0, [r0], #-480	; 0xfffffe20
 430:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
 434:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 438:	6a626f5f 	bvs	189c1bc <startup-0x1e763e44>
 43c:	5f746365 	svcpl	0x00746365
 440:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 444:	72640064 	rsbvc	r0, r4, #100	; 0x64
 448:	00787761 	rsbseq	r7, r8, r1, ror #14
 44c:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 450:	6c630079 	stclvs	0, cr0, [r3], #-484	; 0xfffffe1c
 454:	5f726165 	svcpl	0x00726165
 458:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 45c:	64007463 	strvs	r7, [r0], #-1123	; 0xfffffb9d
 460:	5f776172 	svcpl	0x00776172
 464:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 468:	6d007463 	cfstrsvs	mvf7, [r0, #-396]	; 0xfffffe74
 46c:	5f65766f 	svcpl	0x0065766f
 470:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 474:	6e007463 	cdpvs	4, 0, cr7, cr0, cr3, {3}
 478:	63537765 	cmpvs	r3, #26476544	; 0x1940000
 47c:	0065726f 	rsbeq	r7, r5, pc, ror #4
 480:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 484:	61007964 	tstvs	r0, r4, ror #18
 488:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 48c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 490:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 494:	00726168 	rsbseq	r6, r2, r8, ror #2
 498:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 49c:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
 4a0:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 4a4:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
 4a8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 4ac:	63736100 	cmnvs	r3, #0, 2
 4b0:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 4b4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 4b8:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 4bc:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 2f4 <startup-0x1ffffd0c>
 4c0:	0072656c 	rsbseq	r6, r2, ip, ror #10
 4c4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 4c8:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
 4cc:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 4d0:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 4d4:	61007465 	tstvs	r0, r5, ror #8
 4d8:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 4dc:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 4e0:	645f6574 	ldrbvs	r6, [pc], #-1396	; 4e8 <startup-0x1ffffb18>
 4e4:	00617461 	rsbeq	r7, r1, r1, ror #8
 4e8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 4ec:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 4f0:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
 4f4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
 4f8:	73610073 	cmnvc	r1, #115	; 0x73
 4fc:	5f696963 	svcpl	0x00696963
 500:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 504:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 508:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 340 <startup-0x1ffffcc0>
 50c:	0072656c 	rsbseq	r6, r2, ip, ror #10
 510:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffad5 <ball+0xdfffdc7d>
 514:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 518:	6d61732f 	stclvs	3, cr7, [r1, #-188]!	; 0xffffff44
 51c:	442f6575 	strtmi	r6, [pc], #-1397	; 524 <startup-0x1ffffadc>
 520:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 524:	73746e65 	cmnvc	r4, #1616	; 0x650
 528:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 52c:	2f62614c 	svccs	0x0062614c
 530:	70706f4d 	rsbsvc	r6, r0, sp, asr #30
 534:	612f6e65 			; <UNDEFINED> instruction: 0x612f6e65
 538:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 53c:	6972645f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, sp, lr}^
 540:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 544:	6100632e 	tstvs	r0, lr, lsr #6
 548:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 54c:	6165725f 	cmnvs	r5, pc, asr r2
 550:	61645f64 	cmnvs	r4, r4, ror #30
 554:	61006174 	tstvs	r0, r4, ror r1
 558:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 55c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 560:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 564:	6100646d 	tstvs	r0, sp, ror #8
 568:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 56c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 570:	70615f74 	rsbvc	r5, r1, r4, ror pc
 574:	64610070 	strbtvs	r0, [r1], #-112	; 0xffffff90
 578:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
 57c:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 580:	3a430062 	bcc	10c0710 <startup-0x1ef3f8f0>
 584:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 588:	732f7372 			; <UNDEFINED> instruction: 0x732f7372
 58c:	65756d61 	ldrbvs	r6, [r5, #-3425]!	; 0xfffff29f
 590:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 594:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 598:	4d2f7374 	stcmi	3, cr7, [pc, #-464]!	; 3d0 <startup-0x1ffffc30>
 59c:	614c706f 	cmpvs	ip, pc, rrx
 5a0:	6f4d2f62 	svcvs	0x004d2f62
 5a4:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
 5a8:	79656b2f 	stmdbvc	r5!, {r0, r1, r2, r3, r5, r8, r9, fp, sp, lr}^
 5ac:	5f646170 	svcpl	0x00646170
 5b0:	76697264 	strbtvc	r7, [r9], -r4, ror #4
 5b4:	2e737265 	cdpcs	2, 7, cr7, cr3, cr5, {3}
 5b8:	63610063 	cmnvs	r1, #99	; 0x63
 5bc:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 5c0:	00776f52 	rsbseq	r6, r7, r2, asr pc
 5c4:	43676573 	cmnmi	r7, #482344960	; 0x1cc00000
 5c8:	7365646f 	cmnvc	r5, #1862270976	; 0x6f000000
 5cc:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 5d0:	656b5f74 	strbvs	r5, [fp, #-3956]!	; 0xfffff08c
 5d4:	64617079 	strbtvs	r7, [r1], #-121	; 0xffffff87
 5d8:	756f6300 	strbvc	r6, [pc, #-768]!	; 2e0 <startup-0x1ffffd20>
 5dc:	6f00746e 	svcvs	0x0000746e
 5e0:	73377475 	teqvc	r7, #1962934272	; 0x75000000
 5e4:	6b006765 	blvs	1a380 <startup-0x1ffe5c80>
 5e8:	65527965 	ldrbvs	r7, [r2, #-2405]	; 0xfffff69b
 5ec:	6e006461 	cdpvs	4, 0, cr6, cr0, cr1, {3}
 5f0:	61706d75 	cmnvs	r0, r5, ror sp
 5f4:	Address 0x000005f4 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <ball+0xdfffd4b6>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000020 	andeq	r0, r0, r0, lsr #32
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000118 	andeq	r0, r0, r8, lsl r1
  30:	400c0e41 	andmi	r0, ip, r1, asr #28
  34:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  38:	018e4002 	orreq	r4, lr, r2
  3c:	41480e41 	cmpmi	r8, r1, asr #28
  40:	0000070d 	andeq	r0, r0, sp, lsl #14
  44:	0000000c 	andeq	r0, r0, ip
  48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  4c:	7c020001 	stcvc	0, cr0, [r2], {1}
  50:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  54:	00000018 	andeq	r0, r0, r8, lsl r0
  58:	00000044 	andeq	r0, r0, r4, asr #32
  5c:	20000128 	andcs	r0, r0, r8, lsr #2
  60:	00000044 	andeq	r0, r0, r4, asr #32
  64:	40080e41 	andmi	r0, r8, r1, asr #28
  68:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  6c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  70:	00000018 	andeq	r0, r0, r8, lsl r0
  74:	00000044 	andeq	r0, r0, r4, asr #32
  78:	2000016c 	andcs	r0, r0, ip, ror #2
  7c:	0000000a 	andeq	r0, r0, sl
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  8c:	0000001c 	andeq	r0, r0, ip, lsl r0
  90:	00000044 	andeq	r0, r0, r4, asr #32
  94:	20000176 	andcs	r0, r0, r6, ror r1
  98:	00000010 	andeq	r0, r0, r0, lsl r0
  9c:	40080e41 	andmi	r0, r8, r1, asr #28
  a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a4:	100e4101 	andne	r4, lr, r1, lsl #2
  a8:	00070d41 	andeq	r0, r7, r1, asr #26
  ac:	0000001c 	andeq	r0, r0, ip, lsl r0
  b0:	00000044 	andeq	r0, r0, r4, asr #32
  b4:	20000186 	andcs	r0, r0, r6, lsl #3
  b8:	00000010 	andeq	r0, r0, r0, lsl r0
  bc:	40080e41 	andmi	r0, r8, r1, asr #28
  c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c4:	100e4101 	andne	r4, lr, r1, lsl #2
  c8:	00070d41 	andeq	r0, r7, r1, asr #26
  cc:	0000000c 	andeq	r0, r0, ip
  d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  d4:	7c020001 	stcvc	0, cr0, [r2], {1}
  d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  dc:	0000001c 	andeq	r0, r0, ip, lsl r0
  e0:	000000cc 	andeq	r0, r0, ip, asr #1
  e4:	20000198 	mulcs	r0, r8, r1
  e8:	00000090 	muleq	r0, r0, r0
  ec:	40080e41 	andmi	r0, r8, r1, asr #28
  f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f4:	100e4101 	andne	r4, lr, r1, lsl #2
  f8:	00070d41 	andeq	r0, r7, r1, asr #26
  fc:	00000018 	andeq	r0, r0, r8, lsl r0
 100:	000000cc 	andeq	r0, r0, ip, asr #1
 104:	20000228 	andcs	r0, r0, r8, lsr #4
 108:	000000a4 	andeq	r0, r0, r4, lsr #1
 10c:	40080e41 	andmi	r0, r8, r1, asr #28
 110:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 114:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	000000cc 	andeq	r0, r0, ip, asr #1
 120:	200002cc 	andcs	r0, r0, ip, asr #5
 124:	000000c8 	andeq	r0, r0, r8, asr #1
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	180e4101 	stmdane	lr, {r0, r8, lr}
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	000000cc 	andeq	r0, r0, ip, asr #1
 140:	20000394 	mulcs	r0, r4, r3
 144:	000000a8 	andeq	r0, r0, r8, lsr #1
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	100e4101 	andne	r4, lr, r1, lsl #2
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	000000cc 	andeq	r0, r0, ip, asr #1
 160:	2000043c 	andcs	r0, r0, ip, lsr r4
 164:	00000058 	andeq	r0, r0, r8, asr r0
 168:	40080e41 	andmi	r0, r8, r1, asr #28
 16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 170:	100e4101 	andne	r4, lr, r1, lsl #2
 174:	00070d41 	andeq	r0, r7, r1, asr #26
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	000000cc 	andeq	r0, r0, ip, asr #1
 180:	20000494 	mulcs	r0, r4, r4
 184:	00000060 	andeq	r0, r0, r0, rrx
 188:	40080e41 	andmi	r0, r8, r1, asr #28
 18c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 190:	100e4101 	andne	r4, lr, r1, lsl #2
 194:	00070d41 	andeq	r0, r7, r1, asr #26
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	000000cc 	andeq	r0, r0, ip, asr #1
 1a0:	200004f4 	strdcs	r0, [r0], -r4
 1a4:	0000002a 	andeq	r0, r0, sl, lsr #32
 1a8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b0:	100e4101 	andne	r4, lr, r1, lsl #2
 1b4:	00070d41 	andeq	r0, r7, r1, asr #26
 1b8:	00000018 	andeq	r0, r0, r8, lsl r0
 1bc:	000000cc 	andeq	r0, r0, ip, asr #1
 1c0:	2000051e 	andcs	r0, r0, lr, lsl r5
 1c4:	0000001a 	andeq	r0, r0, sl, lsl r0
 1c8:	40080e41 	andmi	r0, r8, r1, asr #28
 1cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1d4:	00000018 	andeq	r0, r0, r8, lsl r0
 1d8:	000000cc 	andeq	r0, r0, ip, asr #1
 1dc:	20000538 	andcs	r0, r0, r8, lsr r5
 1e0:	00000084 	andeq	r0, r0, r4, lsl #1
 1e4:	40080e41 	andmi	r0, r8, r1, asr #28
 1e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ec:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	000000cc 	andeq	r0, r0, ip, asr #1
 1f8:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
 1fc:	00000058 	andeq	r0, r0, r8, asr r0
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	100e4101 	andne	r4, lr, r1, lsl #2
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	00000024 	andeq	r0, r0, r4, lsr #32
 214:	000000cc 	andeq	r0, r0, ip, asr #1
 218:	20000614 	andcs	r0, r0, r4, lsl r6
 21c:	0000013c 	andeq	r0, r0, ip, lsr r1
 220:	40100e41 	andsmi	r0, r0, r1, asr #28
 224:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 228:	02874003 	addeq	r4, r7, #3
 22c:	41018e40 	tstmi	r1, r0, asr #28
 230:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 234:	00000007 	andeq	r0, r0, r7
 238:	00000024 	andeq	r0, r0, r4, lsr #32
 23c:	000000cc 	andeq	r0, r0, ip, asr #1
 240:	20000750 	andcs	r0, r0, r0, asr r7
 244:	00000158 	andeq	r0, r0, r8, asr r1
 248:	40140e41 	andsmi	r0, r4, r1, asr #28
 24c:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
 250:	03864004 	orreq	r4, r6, #4
 254:	40028740 	andmi	r8, r2, r0, asr #14
 258:	0e41018e 	dvfeqd	f0, f1, #0.5
 25c:	070d4128 	streq	r4, [sp, -r8, lsr #2]
 260:	00000020 	andeq	r0, r0, r0, lsr #32
 264:	000000cc 	andeq	r0, r0, ip, asr #1
 268:	200008a8 	andcs	r0, r0, r8, lsr #17
 26c:	00000124 	andeq	r0, r0, r4, lsr #2
 270:	400c0e41 	andmi	r0, ip, r1, asr #28
 274:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 278:	018e4002 	orreq	r4, lr, r2
 27c:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 280:	0000070d 	andeq	r0, r0, sp, lsl #14
 284:	0000001c 	andeq	r0, r0, ip, lsl r0
 288:	000000cc 	andeq	r0, r0, ip, asr #1
 28c:	200009cc 	andcs	r0, r0, ip, asr #19
 290:	00000054 	andeq	r0, r0, r4, asr r0
 294:	40080e41 	andmi	r0, r8, r1, asr #28
 298:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 29c:	180e4101 	stmdane	lr, {r0, r8, lr}
 2a0:	00070d41 	andeq	r0, r7, r1, asr #26
 2a4:	0000000c 	andeq	r0, r0, ip
 2a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2ac:	7c020001 	stcvc	0, cr0, [r2], {1}
 2b0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2b4:	00000018 	andeq	r0, r0, r8, lsl r0
 2b8:	000002a4 	andeq	r0, r0, r4, lsr #5
 2bc:	20000a20 	andcs	r0, r0, r0, lsr #20
 2c0:	0000000a 	andeq	r0, r0, sl
 2c4:	40080e41 	andmi	r0, r8, r1, asr #28
 2c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2cc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d4:	000002a4 	andeq	r0, r0, r4, lsr #5
 2d8:	20000a2a 	andcs	r0, r0, sl, lsr #20
 2dc:	00000020 	andeq	r0, r0, r0, lsr #32
 2e0:	40080e41 	andmi	r0, r8, r1, asr #28
 2e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e8:	180e4101 	stmdane	lr, {r0, r8, lr}
 2ec:	00070d41 	andeq	r0, r7, r1, asr #26
 2f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f4:	000002a4 	andeq	r0, r0, r4, lsr #5
 2f8:	20000a4a 	andcs	r0, r0, sl, asr #20
 2fc:	00000020 	andeq	r0, r0, r0, lsr #32
 300:	40080e41 	andmi	r0, r8, r1, asr #28
 304:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 308:	180e4101 	stmdane	lr, {r0, r8, lr}
 30c:	00070d41 	andeq	r0, r7, r1, asr #26
 310:	0000001c 	andeq	r0, r0, ip, lsl r0
 314:	000002a4 	andeq	r0, r0, r4, lsr #5
 318:	20000a6a 	andcs	r0, r0, sl, ror #20
 31c:	00000064 	andeq	r0, r0, r4, rrx
 320:	40080e41 	andmi	r0, r8, r1, asr #28
 324:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 328:	200e4101 	andcs	r4, lr, r1, lsl #2
 32c:	00070d41 	andeq	r0, r7, r1, asr #26
 330:	0000001c 	andeq	r0, r0, ip, lsl r0
 334:	000002a4 	andeq	r0, r0, r4, lsr #5
 338:	20000ace 	andcs	r0, r0, lr, asr #21
 33c:	0000005c 	andeq	r0, r0, ip, asr r0
 340:	40080e41 	andmi	r0, r8, r1, asr #28
 344:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 348:	180e4101 	stmdane	lr, {r0, r8, lr}
 34c:	00070d41 	andeq	r0, r7, r1, asr #26
 350:	0000001c 	andeq	r0, r0, ip, lsl r0
 354:	000002a4 	andeq	r0, r0, r4, lsr #5
 358:	20000b2a 	andcs	r0, r0, sl, lsr #22
 35c:	00000098 	muleq	r0, r8, r0
 360:	40080e41 	andmi	r0, r8, r1, asr #28
 364:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 368:	100e4101 	andne	r4, lr, r1, lsl #2
 36c:	00070d41 	andeq	r0, r7, r1, asr #26
 370:	0000001c 	andeq	r0, r0, ip, lsl r0
 374:	000002a4 	andeq	r0, r0, r4, lsr #5
 378:	20000bc2 	andcs	r0, r0, r2, asr #23
 37c:	00000068 	andeq	r0, r0, r8, rrx
 380:	40080e41 	andmi	r0, r8, r1, asr #28
 384:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 388:	180e4101 	stmdane	lr, {r0, r8, lr}
 38c:	00070d41 	andeq	r0, r7, r1, asr #26
 390:	0000000c 	andeq	r0, r0, ip
 394:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 398:	7c020001 	stcvc	0, cr0, [r2], {1}
 39c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a4:	00000390 	muleq	r0, r0, r3
 3a8:	20000c2c 	andcs	r0, r0, ip, lsr #24
 3ac:	00000044 	andeq	r0, r0, r4, asr #32
 3b0:	40080e41 	andmi	r0, r8, r1, asr #28
 3b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3b8:	180e4101 	stmdane	lr, {r0, r8, lr}
 3bc:	00070d41 	andeq	r0, r7, r1, asr #26
 3c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c4:	00000390 	muleq	r0, r0, r3
 3c8:	20000c70 	andcs	r0, r0, r0, ror ip
 3cc:	00000048 	andeq	r0, r0, r8, asr #32
 3d0:	40080e41 	andmi	r0, r8, r1, asr #28
 3d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3d8:	180e4101 	stmdane	lr, {r0, r8, lr}
 3dc:	00070d41 	andeq	r0, r7, r1, asr #26
 3e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e4:	00000390 	muleq	r0, r0, r3
 3e8:	20000cb8 			; <UNDEFINED> instruction: 0x20000cb8
 3ec:	00000030 	andeq	r0, r0, r0, lsr r0
 3f0:	40080e41 	andmi	r0, r8, r1, asr #28
 3f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3f8:	100e4101 	andne	r4, lr, r1, lsl #2
 3fc:	00070d41 	andeq	r0, r7, r1, asr #26
 400:	0000001c 	andeq	r0, r0, ip, lsl r0
 404:	00000390 	muleq	r0, r0, r3
 408:	20000ce8 	andcs	r0, r0, r8, ror #25
 40c:	0000002c 	andeq	r0, r0, ip, lsr #32
 410:	40080e41 	andmi	r0, r8, r1, asr #28
 414:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 418:	100e4101 	andne	r4, lr, r1, lsl #2
 41c:	00070d41 	andeq	r0, r7, r1, asr #26
 420:	0000001c 	andeq	r0, r0, ip, lsl r0
 424:	00000390 	muleq	r0, r0, r3
 428:	20000d14 	andcs	r0, r0, r4, lsl sp
 42c:	0000002a 	andeq	r0, r0, sl, lsr #32
 430:	40080e41 	andmi	r0, r8, r1, asr #28
 434:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 438:	100e4101 	andne	r4, lr, r1, lsl #2
 43c:	00070d41 	andeq	r0, r7, r1, asr #26
 440:	0000001c 	andeq	r0, r0, ip, lsl r0
 444:	00000390 	muleq	r0, r0, r3
 448:	20000d3e 	andcs	r0, r0, lr, lsr sp
 44c:	0000002a 	andeq	r0, r0, sl, lsr #32
 450:	40080e41 	andmi	r0, r8, r1, asr #28
 454:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 458:	100e4101 	andne	r4, lr, r1, lsl #2
 45c:	00070d41 	andeq	r0, r7, r1, asr #26
 460:	00000020 	andeq	r0, r0, r0, lsr #32
 464:	00000390 	muleq	r0, r0, r3
 468:	20000d68 	andcs	r0, r0, r8, ror #26
 46c:	00000048 	andeq	r0, r0, r8, asr #32
 470:	400c0e41 	andmi	r0, ip, r1, asr #28
 474:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 478:	018e4002 	orreq	r4, lr, r2
 47c:	41180e41 	tstmi	r8, r1, asr #28
 480:	0000070d 	andeq	r0, r0, sp, lsl #14
 484:	00000020 	andeq	r0, r0, r0, lsr #32
 488:	00000390 	muleq	r0, r0, r3
 48c:	20000db0 			; <UNDEFINED> instruction: 0x20000db0
 490:	00000048 	andeq	r0, r0, r8, asr #32
 494:	400c0e41 	andmi	r0, ip, r1, asr #28
 498:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 49c:	018e4002 	orreq	r4, lr, r2
 4a0:	41180e41 	tstmi	r8, r1, asr #28
 4a4:	0000070d 	andeq	r0, r0, sp, lsl #14
 4a8:	00000018 	andeq	r0, r0, r8, lsl r0
 4ac:	00000390 	muleq	r0, r0, r3
 4b0:	20000df8 	strdcs	r0, [r0], -r8
 4b4:	00000046 	andeq	r0, r0, r6, asr #32
 4b8:	40080e41 	andmi	r0, r8, r1, asr #28
 4bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 4c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4c8:	00000390 	muleq	r0, r0, r3
 4cc:	20000e3e 	andcs	r0, r0, lr, lsr lr
 4d0:	0000003c 	andeq	r0, r0, ip, lsr r0
 4d4:	40080e41 	andmi	r0, r8, r1, asr #28
 4d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4dc:	100e4101 	andne	r4, lr, r1, lsl #2
 4e0:	00070d41 	andeq	r0, r7, r1, asr #26
 4e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4e8:	00000390 	muleq	r0, r0, r3
 4ec:	20000e7a 	andcs	r0, r0, sl, ror lr
 4f0:	00000034 	andeq	r0, r0, r4, lsr r0
 4f4:	40080e41 	andmi	r0, r8, r1, asr #28
 4f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4fc:	180e4101 	stmdane	lr, {r0, r8, lr}
 500:	00070d41 	andeq	r0, r7, r1, asr #26
 504:	00000018 	andeq	r0, r0, r8, lsl r0
 508:	00000390 	muleq	r0, r0, r3
 50c:	20000eae 	andcs	r0, r0, lr, lsr #29
 510:	0000002e 	andeq	r0, r0, lr, lsr #32
 514:	40080e41 	andmi	r0, r8, r1, asr #28
 518:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 51c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 520:	0000000c 	andeq	r0, r0, ip
 524:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 528:	7c020001 	stcvc	0, cr0, [r2], {1}
 52c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 530:	00000018 	andeq	r0, r0, r8, lsl r0
 534:	00000520 	andeq	r0, r0, r0, lsr #10
 538:	20000edc 	ldrdcs	r0, [r0], -ip
 53c:	00000038 	andeq	r0, r0, r8, lsr r0
 540:	40080e41 	andmi	r0, r8, r1, asr #28
 544:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 548:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 54c:	00000020 	andeq	r0, r0, r0, lsr #32
 550:	00000520 	andeq	r0, r0, r0, lsr #10
 554:	20000f14 	andcs	r0, r0, r4, lsl pc
 558:	000000bc 	strheq	r0, [r0], -ip
 55c:	400c0e41 	andmi	r0, ip, r1, asr #28
 560:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 564:	018e4002 	orreq	r4, lr, r2
 568:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 56c:	0000070d 	andeq	r0, r0, sp, lsl #14
 570:	00000024 	andeq	r0, r0, r4, lsr #32
 574:	00000520 	andeq	r0, r0, r0, lsr #10
 578:	20000fd0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 57c:	00000034 	andeq	r0, r0, r4, lsr r0
 580:	40100e41 	andsmi	r0, r0, r1, asr #28
 584:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 588:	02874003 	addeq	r4, r7, #3
 58c:	41018e40 	tstmi	r1, r0, asr #28
 590:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 594:	00000007 	andeq	r0, r0, r7
 598:	0000001c 	andeq	r0, r0, ip, lsl r0
 59c:	00000520 	andeq	r0, r0, r0, lsr #10
 5a0:	20001004 	andcs	r1, r0, r4
 5a4:	00000088 	andeq	r0, r0, r8, lsl #1
 5a8:	40080e41 	andmi	r0, r8, r1, asr #28
 5ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5b0:	100e4101 	andne	r4, lr, r1, lsl #2
 5b4:	00070d41 	andeq	r0, r7, r1, asr #26
